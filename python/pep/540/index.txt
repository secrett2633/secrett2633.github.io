3:I[9275,[],""]
5:I[1343,[],""]
6:I[4281,["231","static/chunks/231-c4b666723e6aae68.js","185","static/chunks/app/layout-8808afda01b7a1b7.js"],"default"]
7:I[231,["231","static/chunks/231-c4b666723e6aae68.js","877","static/chunks/app/%5B...slug%5D/page-01b66e77b48ed573.js"],""]
4:["slug","python/pep/540","c"]
0:["iV6XySbMHIJ3imQdvgy3I",[[["",{"children":[["slug","python/pep/540","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"540\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/540","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_9012cf layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/secrett2633.github.io/_next/static/css/b9d6ec750ad82add.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2d35,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0540/">PEP 540 - Add a new UTF-8 Mode</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 05-Jan-2016</p>
</blockquote>
<p>PEP 540: 새로운 UTF-8 모드 추가</p>
<h2>요약 (Abstract)</h2>
<p>PEP 540은 Python의 UTF-8 활용을 강화하기 위한 새로운 "UTF-8 모드" 추가를 제안합니다. 이 모드가 활성화되면 Python은 현재 플랫폼에 설정된 로케일(locale)과 관계없이 <code>utf-8</code> 인코딩을 사용하고, <code>stdin</code> 및 <code>stdout</code>의 오류 처리기(error handler)를 <code>surrogateescape</code>로 변경합니다. 이 모드는 기본적으로 비활성화되어 있지만, "POSIX" 로케일을 사용할 때 자동으로 활성화됩니다. UTF-8 모드를 제어하기 위해 <code>-X utf8</code> 명령줄 옵션과 <code>PYTHONUTF8</code> 환경 변수가 추가되었습니다.</p>
<h2>도입 배경 (Rationale)</h2>
<h3>로케일 인코딩과 UTF-8 (Locale encoding and UTF-8)</h3>
<p>Python 3.6에서는 파일명, 환경 변수, 표준 스트림 등에 로케일 인코딩을 사용합니다. 많은 사용자가 "C" 로케일 또는 "POSIX" 로케일에서 ASCII 인코딩을 상속받는데, 이는 비-ASCII 문자에 대한 지원이 매우 제한적입니다. 정확한 로케일을 얻기 어려운 경우도 많고, 로케일 이름이 운영체제마다 다르거나 C.UTF-8과 같은 일부 로케일은 특정 플랫폼에서만 지원됩니다.</p>
<p>반면 Python 3.6은 이미 macOS, Android, Windows (PEP 529)에서 대부분의 기능에 대해 기본적으로 UTF-8을 사용하고 있습니다 (<code>open()</code> 함수는 예외). UTF-8은 Python 스크립트, XML, JSON 파일 형식의 기본 인코딩이기도 합니다. 최신 플랫폼에서 데이터 읽기 및 쓰기에 UTF-8 지원이 거의 보편적이며, Python에서도 훌륭하게 지원됩니다. 문제는 로케일이 잘못 설정되는 경우가 많다는 것입니다. 따라서 로케일 인코딩을 무시하고 UTF-8을 사용하는 것이 합리적인 해결책으로 제시됩니다.</p>
<h3>디코딩 불가능한 바이트를 위한 Passthrough: <code>surrogateescape</code> (Passthrough for undecodable bytes: surrogateescape)</h3>
<p>Python 3는 기본 <code>strict</code> 오류 처리기를 사용하여 UTF-8에서 바이트를 디코딩할 때 디코딩 불가능한 첫 번째 바이트에서 <code>UnicodeDecodeError</code>를 발생시킵니다. 그러나 <code>cat</code>이나 <code>grep</code>과 같은 Unix 명령줄 도구와 대부분의 Python 2 애플리케이션은 데이터를 원시 바이트 시퀀스로 처리하므로 이러한 유형의 버그가 없습니다.</p>
<p>Python 3는 Unix 도구 및 Python 2처럼 동작하도록 <code>surrogateescape</code> 오류 처리기(PEP 383)를 제공합니다. 이는 데이터를 바이트처럼 처리하지만 실제로는 유니코드를 사용하며, 디코딩 불가능한 바이트는 서러게이트(surrogate) 문자로 저장됩니다. UTF-8 모드는 <code>stdin</code> 및 <code>stdout</code>에 <code>surrogateescape</code> 오류 처리기를 설정합니다. 이는 이들 스트림이 Unix 명령줄 도구와 일반적으로 연관되어 있기 때문입니다. 그러나 파일에 대해서는 다른 기대치가 있어 <code>open()</code>의 기본 오류 처리기는 <code>strict</code>로 유지됩니다.</p>
<h3>최상의 하위 호환성을 위한 기본값 변경 없음 (No change by default for best backward compatibility)</h3>
<p>UTF-8이 대부분의 경우 완벽하지만, 때로는 로케일 인코딩이 최상의 인코딩일 수도 있습니다. 이 PEP는 POSIX 로케일의 동작만 변경합니다. 이는 POSIX 로케일이 일반적으로 ASCII 인코딩과 동일하며, UTF-8이 훨씬 더 나은 선택이기 때문입니다. 다른 로케일에 대한 동작은 잠재적인 위험이나 회귀를 방지하기 위해 변경되지 않습니다.</p>
<h2>제안 (Proposal)</h2>
<p>새로운 UTF-8 모드는 UTF-8 인코딩을 사용하고 로케일 인코딩을 무시하며, <code>stdin</code> 및 <code>stdout</code> 오류 처리기를 <code>surrogateescape</code>로 변경합니다.</p>
<p>사용자는 <code>-X utf8</code> 명령줄 옵션 또는 <code>PYTHONUTF8=1</code> 환경 변수를 설정하여 UTF-8 모드를 명시적으로 활성화할 수 있습니다. 이 모드는 기본적으로 비활성화되어 있지만 POSIX 로케일에 의해 활성화됩니다. <code>-X utf8=0</code> 명령줄 옵션 또는 <code>PYTHONUTF8=0</code> 환경 변수를 통해 명시적으로 비활성화할 수도 있습니다.</p>
<p>표준 스트림의 경우 <code>PYTHONIOENCODING</code> 환경 변수가 UTF-8 모드보다 우선합니다. Windows에서는 <code>PYTHONLEGACYWINDOWSFSENCODING</code> 환경 변수(PEP 529)가 UTF-8 모드보다 우선합니다.</p>
<h3>UTF-8 모드의 영향 (Effects of UTF-8 Mode):</h3>
<ul>
<li><code>sys.getfilesystemencoding()</code>는 <code>'UTF-8'</code>을 반환합니다.</li>
<li><code>locale.getpreferredencoding()</code>는 <code>'UTF-8'</code>을 반환합니다. 이 함수의 <code>do_setlocale</code> 인자와 로케일 인코딩은 무시됩니다.</li>
<li><code>sys.stdin</code> 및 <code>sys.stdout</code>의 오류 처리기는 <code>surrogateescape</code>로 설정됩니다.</li>
</ul>
<h3>부작용 (Side effects):</h3>
<ul>
<li><code>open()</code>은 기본적으로 UTF-8 인코딩을 사용하지만, 기본 오류 처리기는 <code>strict</code>로 유지됩니다.</li>
<li><code>os.fsdecode()</code> 및 <code>os.fsencode()</code>는 UTF-8 인코딩을 사용합니다.</li>
<li>명령줄 인수, 환경 변수 및 파일명은 UTF-8 인코딩을 사용합니다.</li>
</ul>
<h2>로케일 강제 변환 (PEP 538)과의 관계 (Relationship with the locale coercion (PEP 538))</h2>
<p>POSIX 로케일은 로케일 강제 변환(PEP 538)과 UTF-8 모드(PEP 540)를 모두 활성화합니다. 로케일 강제 변환이 활성화되면 UTF-8 모드를 활성화해도 추가적인 효과는 없습니다.</p>
<p>UTF-8 모드는 로케일 강제 변환과 동일한 효과를 가집니다:</p>
<ul>
<li><code>sys.getfilesystemencoding()</code>는 <code>'UTF-8'</code>을 반환합니다.</li>
<li><code>locale.getpreferredencoding()</code>는 <code>'UTF-8'</code>을 반환합니다.</li>
<li><code>sys.stdin</code> 및 <code>sys.stdout</code>의 오류 처리기는 <code>surrogateescape</code>로 설정됩니다.</li>
</ul>
<p>이러한 변경 사항은 Python 코드에만 영향을 미치지만, 로케일 강제 변환은 <code>LC_CTYPE</code> 환경 변수와 <code>LC_CTYPE</code> 로케일을 <code>C.UTF-8</code>과 같은 UTF-8 로케일로 설정하여 비-Python 코드에도 영향을 줍니다. 두 PEP는 상호 보완적입니다.</p>
<p>Centos 7과 같이 로케일 강제 변환이 지원되지 않는 플랫폼에서는 POSIX 로케일이 UTF-8 모드만 활성화합니다. 이 경우 Python 코드는 UTF-8 인코딩을 사용하고 로케일 인코딩을 무시하지만, 비-Python 코드는 POSIX 로케일의 기본값인 ASCII 인코딩을 사용합니다.</p>
<p>UTF-8 모드는 모든 플랫폼에서 지원되며 어떤 로케일에서도 활성화할 수 있지만, 로케일 강제 변환은 모든 플랫폼에서 지원되지 않으며 POSIX 로케일로 제한됩니다.</p>
<p>UTF-8 모드는 <code>PYTHONUTF8</code> 환경 변수가 <code>1</code>로 설정된 경우 Python 자식 프로세스에만 영향을 미치지만, 로케일 강제 변환은 <code>LC_CTYPE</code> 환경 변수를 설정하여 모든 자식 프로세스에 영향을 미칩니다.</p>
<p>로케일 강제 변환 접근 방식의 장점은 바이너리 확장 모듈 및 자식 프로세스의 인코딩 처리와 Python의 인코딩 처리 간의 일관성을 보장하는 데 도움이 된다는 것입니다. UTF-8 모드 접근 방식의 장점은 임베딩 애플리케이션이 프로세스의 전역 로케일 설정을 변경하지 않고도 인터프리터의 동작을 변경할 수 있다는 것입니다.</p>
<h2>하위 호환성 (Backward Compatibility)</h2>
<p>유일한 하위 호환성 위반 변경 사항은 POSIX 로케일이 이제 기본적으로 UTF-8 모드를 활성화한다는 것입니다. 즉, UTF-8 인코딩을 사용하고 로케일 인코딩을 무시하며 <code>stdin</code> 및 <code>stdout</code> 오류 처리기를 <code>surrogateescape</code>로 변경합니다.</p>
<h2>부록: 인코딩 및 오류 처리기 (Annex: Encodings And Error Handlers)</h2>
<p>UTF-8 모드는 <code>open()</code>, <code>os.fsdecode()</code>, <code>os.fsencode()</code>, <code>sys.stdin</code>, <code>sys.stdout</code>, <code>sys.stderr</code>에서 사용되는 기본 인코딩 및 오류 처리기를 변경합니다.</p>
<p>| 함수                  | 기본 (Default)      | UTF-8 모드 또는 POSIX 로케일 |
| :-------------------- | :------------------ | :----------------------------- |
| <code>open()</code>              | <code>locale/strict</code>     | <code>UTF-8/strict</code>                 |
| <code>os.fsdecode()</code>, <code>os.fsencode()</code> | <code>locale/surrogateescape</code> | <code>UTF-8/surrogateescape</code>        |
| <code>sys.stdin</code>, <code>sys.stdout</code> | <code>locale/strict</code>     | <code>UTF-8/surrogateescape</code>        |
| <code>sys.stderr</code>          | <code>locale/backslashreplace</code> | <code>UTF-8/backslashreplace</code>       |</p>
<h3>Windows에서의 인코딩 및 오류 처리기 (Encoding and error handler on Windows)</h3>
<p>Windows에서는 인코딩과 오류 처리기가 다릅니다.</p>
<p>| 함수                  | 기본 (Default)      | Legacy Windows FS encoding | UTF-8 모드 |
| :-------------------- | :------------------ | :------------------------- | :--------- |
| <code>open()</code>              | <code>mbcs/strict</code>       | <code>mbcs/strict</code>              | <code>UTF-8/strict</code> |
| <code>os.fsdecode()</code>, <code>os.fsencode()</code> | <code>UTF-8/surrogatepass</code> | <code>mbcs/replace</code>             | <code>UTF-8/surrogatepass</code> |
| <code>sys.stdin</code>, <code>sys.stdout</code> | <code>UTF-8/surrogateescape</code> | <code>UTF-8/surrogateescape</code>    | <code>UTF-8/surrogateescape</code> |
| <code>sys.stderr</code>          | <code>UTF-8/backslashreplace</code> | <code>UTF-8/backslashreplace</code> | <code>UTF-8/backslashreplace</code> |</p>
<p><code>PYTHONLEGACYWINDOWSFSENCODING</code> 환경 변수에 의해 "Legacy Windows FS encoding"이 활성화됩니다.</p>
<p><code>stdin</code> 및/또는 <code>stdout</code>이 파이프(pipe)로 리디렉션된 경우, <code>sys.stdin</code> 및/또는 <code>sys.stdout</code>은 기본적으로 UTF-8 대신 <code>mbcs</code> 인코딩을 사용합니다. 그러나 UTF-8 모드에서는 <code>sys.stdin</code> 및 <code>sys.stdout</code>이 항상 UTF-8 인코딩을 사용합니다.</p>
<p>참고: Windows에는 POSIX 로케일이 없습니다. ANSI 코드 페이지가 로케일 인코딩으로 사용되며, 이 코드 페이지는 결코 ASCII 인코딩을 사용하지 않습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 540 - Add a new UTF-8 Mode"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 23:29:04+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":[["$","div",null,{"className":"page__taxonomy mb-4","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"카테고리"}],[["$","span","Python",{"className":"page__taxonomy-item","children":"Python"}],["$","span","PEP",{"className":"page__taxonomy-item","children":"PEP"}]]]}],["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]]}]]}]}]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","21",{"name":"next-size-adjust"}]]
1:null
