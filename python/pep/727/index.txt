3:I[9275,[],""]
5:I[1343,[],""]
6:I[4281,["231","static/chunks/231-c4b666723e6aae68.js","185","static/chunks/app/layout-8808afda01b7a1b7.js"],"default"]
7:I[231,["231","static/chunks/231-c4b666723e6aae68.js","877","static/chunks/app/%5B...slug%5D/page-01b66e77b48ed573.js"],""]
4:["slug","python/pep/727","c"]
0:["iV6XySbMHIJ3imQdvgy3I",[[["",{"children":[["slug","python/pep/727","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"727\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/727","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_9012cf layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/secrett2633.github.io/_next/static/css/b9d6ec750ad82add.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T3800,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0727/">PEP 727 - Documentation in Annotated Metadata</a></p>
<p><strong>상태:</strong> Withdrawn | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 28-Aug-2023</p>
</blockquote>
<p>PEP 727은 <code>Annotated</code> 메타데이터에 문서화를 추가하는 방법을 표준화하려는 제안이었으나, 현재는 <strong>철회된(Withdrawn)</strong> 상태입니다. 이 문서는 <code>Annotated</code>를 사용하여 파이썬 심볼에 대한 문서화 문자열을 제공하는 표준화된 방법을 제안했으며, 이를 위해 <code>typing.Doc</code>이라는 새로운 클래스를 도입하려 했습니다.</p>
<hr>
<h2>PEP 727 – Annotated 메타데이터에 문서화 (Documentation in Annotated Metadata)</h2>
<ul>
<li><strong>작성자</strong>: Sebastián Ramírez</li>
<li><strong>상태</strong>: <strong>철회됨 (Withdrawn)</strong></li>
<li><strong>유형</strong>: Standards Track (표준화 트랙)</li>
<li><strong>주제</strong>: Typing</li>
<li><strong>생성일</strong>: 2023년 8월 28일</li>
<li><strong>Python 버전</strong>: 3.13</li>
</ul>
<h3>요약 (Abstract)</h3>
<p>이 PEP는 새로운 클래스 <code>typing.Doc</code>을 사용하여 <code>Annotated</code>로 정의된 파이썬 심볼에 대한 문서화 문자열을 제공하는 표준화된 방법을 제안했습니다.</p>
<h3>PEP 철회 (PEP Withdrawal)</h3>
<p>이 PEP에 대한 반응은 대부분 부정적이었으며, 특히 **장황함(verbosity)**과 **가독성(readability)**에 대한 우려가 제기되었습니다. 그 결과, 이 PEP는 철회되었습니다.</p>
<h3>동기 (Motivation)</h3>
<p>클래스, 함수, 클래스 메서드 및 모듈에 대한 문서화를 제공하는 방법으로는 이미 잘 정의된 <code>docstring</code>이 존재합니다. 그러나 매개변수, 반환 값, 클래스 범위 변수(클래스 변수 및 인스턴스 변수), 지역 변수, 타입 별칭과 같은 다른 유형의 심볼에 대한 문서화 문자열을 제공하는 공식적인 표준은 현재 없습니다.</p>
<p>이러한 심볼을 문서화하기 위해 Sphinx, numpydoc, Google, Keras 등과 같은 여러 마이크로 구문(microsyntax) 규칙이 <code>docstring</code> 내부에 만들어져 현재 널리 사용되고 있습니다.</p>
<p>하지만 이러한 기존 방식에는 몇 가지 문제가 있었습니다.</p>
<ul>
<li><strong>도구 지원의 한계</strong>: <code>docstring</code> 내부의 마이크로 구문은 편집기에서 자동 완성, 잘못된 구문에 대한 인라인 오류 등 편집 지원을 쉽게 제공하기 어렵습니다.</li>
<li><strong>정보 중복 및 불일치</strong>: 매개변수 이름과 같이 정보가 코드의 여러 곳에 중복되어, 리팩토링 시 문서가 누락되거나 불일치가 발생하기 쉽습니다.</li>
<li><strong>런타임 접근의 어려움</strong>: 라이브러리와 도구가 특정 <code>docstring</code> 컨벤션 파서에 의존하지 않고 개별 매개변수나 변수에 대한 문서를 런타임에 얻는 직접적인 방법이 없습니다.</li>
<li><strong>타입 정보 중복</strong>: 이전 파이썬 버전에서는 <code>docstring</code>에 타입 정보를 포함하는 경우가 있었지만, 이제 타입 어노테이션(type annotations)이 공식적으로 지원되므로 <code>docstring</code>에 더 이상 이러한 정보가 필요하지 않습니다.</li>
</ul>
<h3>근거 (Rationale)</h3>
<p>이 제안은 이러한 단점을 해결하기 위해 <code>docstring</code>의 정보를 확장하고 보완하며, 기존 <code>docstring</code>과의 하위 호환성을 유지하려고 했습니다. 이는 <code>Annotated</code>와 <code>typing</code> 모듈의 새로운 <code>Doc</code> 클래스를 통해 파이썬 언어 및 구조를 활용하는 방식으로 이루어졌습니다.</p>
<p>이 기능이 외부 패키지가 아닌 파이썬 표준 라이브러리에 포함되어야 하는 이유는, 구현 자체는 간단하지만, 라이브러리 작성자가 이를 쉽게 사용하고 <code>Annotated</code>를 사용하여 파이썬 심볼을 문서화하는 기본 방법을 제공하기 위해 <strong>표준</strong>이 되는 것이 중요하다고 보았기 때문입니다. 적어도 VS Code와 PyCharm 같은 일부 도구 제공업체는 이것이 표준이 될 경우에만 지원을 고려하겠다고 밝혔습니다.</p>
<p>이 제안은 기존 <code>docstring</code> 사용을 대체하는 것이 아니라 보완하는 역할을 합니다. <code>docstring</code>은 모듈, 클래스, 함수에 대한 일반적인 산문(prose) 형태의 문서화에 여전히 선호되는 방법으로 간주됩니다. 이 제안은 <code>Annotated</code>로 선언될 수 있는 심볼(예: 타입 별칭, 매개변수 등)에 특화된 문서화를 다룹니다.</p>
<h3>주요 기능 요약 (Summary of Features)</h3>
<p>이 제안은 기존 컨벤션과 비교하여 다음과 같은 이점을 제공하려 했습니다.</p>
<ul>
<li><strong>편집기 지원</strong>: 파이썬 문법을 지원하는 모든 편집기에서 기본적으로 문법 오류, 문법 강조 등을 포함한 편집이 완벽하게 지원됩니다.</li>
<li><strong>쉬운 렌더링</strong>: 정적 도구(런타임 실행이 필요 없는 도구)가 정보를 추출하기 쉬워 렌더링 구현이 간단합니다.</li>
<li><strong>정보 중복 제거</strong>: 매개변수 이름이 한 곳에서만 정의되어 <code>docstring</code> 내에서의 중복이 제거됩니다.</li>
<li><strong>일관성 유지</strong>: 매개변수나 클래스 변수를 제거할 때 문서화를 잊어버리거나, 새 매개변수를 추가할 때 문서를 누락하는 등의 불일치 가능성이 줄어듭니다.</li>
<li><strong>런타임 접근</strong>: 기존 (이전) 파이썬 버전에서도 각 심볼에 대한 문서 문자열에 런타임 접근이 가능합니다.</li>
<li><strong>표준화된 방법</strong>: <code>Annotated</code>를 사용할 수 있는 타입 별칭과 같은 다른 심볼을 문서화하는 더욱 공식화된 방법을 제공합니다.</li>
<li><strong>쉬운 학습</strong>: 새로운 마이크로 구문을 배울 필요 없이 파이썬 문법 자체를 사용합니다.</li>
<li><strong>매개변수 문서 상속</strong>: <code>ParamSpec</code>에 의해 캡처된 함수의 매개변수 문서 상속을 지원합니다.</li>
</ul>
<h3>명세 (Specification)</h3>
<p>주요 제안은 <code>typing.Doc</code>이라는 새로운 클래스를 도입하는 것이었습니다. 이 클래스는 <code>Annotated</code> 어노테이션 내부에서만 사용되어야 하며, 단일 위치 전용(positional-only) 문자열 인수를 받습니다. 이는 <code>Annotated</code>를 사용하여 선언된 심볼의 의도된 의미와 사용법을 문서화하는 데 사용됩니다.</p>
<p><strong>예시</strong>:</p>
<pre><code class="language-python">from typing import Annotated, Doc

class User:
    name: Annotated[str, Doc("The user's name")]
    age: Annotated[int, Doc("The user's age")]
    ...

from typing import Annotated, Doc, TypeAlias
from external_library import UserResolver

CurrentUser: TypeAlias = Annotated[str, Doc("The current system user"), UserResolver()]

def create_user(name: Annotated[str, Doc("The user's name")]):
    ...

def delete_user(name: Annotated[str, Doc("The user to delete")]):
    ...
</code></pre>
<p><code>get_type_hints(..., include_extras=True)</code>를 통해 런타임에 문서화 정보를 추출할 수 있도록 설계되었습니다. <code>typing.Doc</code> 인스턴스는 <code>documentation</code>이라는 속성을 통해 문자열을 가집니다.</p>
<h3>하위 호환성 (Backwards Compatibility)</h3>
<p>이 제안은 기존 코드와 완벽하게 하위 호환되며, 기존 <code>docstring</code> 컨벤션의 사용을 비권장하지 않습니다. 표준 라이브러리에 포함되기 전에 채택하거나 이전 파이썬 버전을 지원하려는 개발자는 <code>typing_extensions</code>에서 <code>Doc</code>을 임포트하여 사용할 수 있습니다.</p>
<p><strong>예시 (typing_extensions 사용)</strong>:</p>
<pre><code class="language-python">from typing import Annotated
from typing_extensions import Doc

class User:
    name: Annotated[str, Doc("The user's name")]
    age: Annotated[int, Doc("The user's age")]
    ...
</code></pre>
<h3>보안 영향 (Security Implications)</h3>
<p>알려진 보안 영향은 없습니다.</p>
<h3>교육 방법 (How to Teach This)</h3>
<p>산문 정보(prose information)를 위한 주된 문서화 메커니즘은 모듈, 클래스, 함수 및 메서드에 대한 표준 <code>docstring</code>으로 계속되어야 합니다. 이 제안을 채택하여 더 세분화된 문서를 추가하려는 작성자는 지원되는 심볼에 대해 <code>Annotated</code> 어노테이션 내부에 <code>typing.Doc</code>을 사용할 수 있습니다.</p>
<h3>다른 언어 조사 (Survey of Other Languages)</h3>
<p>다른 언어들은 Javadoc (Java, JavaScript, TypeScript), Doc comments (Rust, Go)와 같이 함수 정의 상단에 특수 형식의 주석이나 마이크로 구문을 사용하여 심볼을 문서화합니다. 이는 파이썬의 현재 <code>docstring</code> 마이크로 구문 컨벤션과 유사합니다.</p>
<h3>철회된 아이디어 (Rejected Ideas)</h3>
<p>이 제안을 개발하는 과정에서 여러 대안이 논의되었고 철회되었습니다.</p>
<ul>
<li><strong>현재 docstring 표준화</strong>: 기존 <code>docstring</code> 형식 중 하나를 표준화하는 것은 마이크로 구문 사용으로 인한 문제(편집기 지원 부족, 불일치 등)를 해결하지 못한다고 보았습니다.</li>
<li><strong>Annotated 내부의 일반 문자열</strong>: <code>Annotated[str, "The user's name"]</code>와 같이 일반 문자열을 사용하는 것은 <code>Annotated</code> 내부에 일반 문자열에 대한 미리 정의된 의미를 부여하게 되어, 다른 목적으로 일반 문자열을 사용하던 기존의 유효한 <code>Annotated</code> 사용을 무효화할 수 있습니다. 명시적인 <code>typing.Doc</code> 클래스를 사용하는 것이 기존 <code>Annotated</code> 사용과의 호환성을 높입니다.</li>
<li><strong>Doc 클래스와 유사한 새로운 Annotated-Like 타입</strong>: <code>Doc[str, "The user's name"]</code>와 같이 <code>Annotated</code>와 유사한 새로운 타입을 정의하는 것은 해당 사용 사례만 지원하고 다른 메타데이터(예: FastAPI 메타데이터, Pydantic 필드)와 결합하기 어렵게 만들 수 있다는 이유로 거부되었습니다.</li>
</ul>
<h3>미해결 문제 (Open Issues) (철회에 기여한 우려사항)</h3>
<p>PEP 철회로 이어진 주요 우려사항들은 다음과 같습니다.</p>
<ul>
<li>
<p><strong>장황함 (Verbosity)</strong>:</p>
<ul>
<li>이 제안에 대한 주요 반대 의견은 코드의 장황함이 증가한다는 것이었습니다.</li>
<li><code>docstring</code>의 일부 내용을 시그니처로 옮기는 것이므로 전체적인 장황함은 비슷할 수 있지만, 시그니처만 놓고 보면 현재보다 훨씬 길어질 수 있다는 우려가 있었습니다.</li>
<li>이 장황함은 <code>typing.Doc</code>을 사용하는 라이브러리 유지보수자들에게 주로 영향을 미치며, 최종 사용자에게는 편집기의 툴팁 등을 통해 간접적으로만 전달될 것이라고 보았습니다.</li>
<li>이는 타입 어노테이션 도입 시의 장황함 증가 논쟁과 유사하며, 이 기능 역시 선택 사항(opt-in)으로 제안되었습니다.</li>
</ul>
</li>
<li>
<p><strong>문서화는 타입힌팅이 아니다 (Documentation is not Typing)</strong>:</p>
<ul>
<li>문서화가 실제로 타입힌팅의 일부가 아니거나 다른 모듈에 있어야 한다는 주장이 제기되었습니다.</li>
<li>그러나 파이썬의 타입 어노테이션은 이미 변수, 매개변수, 반환 타입에 대한 추가 메타데이터로 간주될 수 있으며, 이 제안은 이러한 메타데이터에 문서화라는 또 다른 유형을 추가하는 것으로 해석될 수 있습니다.</li>
<li><code>Annotated</code>는 어노테이션에 추가 메타데이터를 지원하기 위해 표준 라이브러리에 추가되었으므로, <code>Doc</code> 클래스가 <code>Annotated</code>와 밀접하게 연관되어 <code>typing</code> 모듈에 위치하는 것이 합리적이라고 보았습니다.</li>
</ul>
</li>
<li>
<p><strong>다중 표준 (Multiple Standards)</strong>:</p>
<ul>
<li>이 제안이 또 다른 표준을 만들 것이며, 이미 여러 <code>docstring</code> 컨벤션이 존재한다는 반대 의견도 있었습니다.</li>
<li>그러나 이 제안은 기존 <code>docstring</code> 기반 접근 방식의 일반적인 단점(위에서 언급된 편집기 지원 부족, 불일치 등)을 해결하는 새로운 접근 방식을 제공하려 했습니다. <code>pyproject.toml</code>, <code>dataclass_transform</code>, 새로운 파이썬 <code>|</code> (union) 연산자 등과 같이 새로운 기능을 활용하고 기존 방법의 여러 문제를 해결하는 새로운 표준은 가치가 있을 수 있다고 주장했습니다.</li>
</ul>
</li>
<li>
<p><strong>채택 (Adoption)</strong>:</p>
<ul>
<li>이 제안이 새로운 표준이 되려면 커뮤니티의 관심이 필수적이었습니다.</li>
<li>FastAPI, Typer, SQLModel, Pydantic, Strawberry 등 여러 주요 라이브러리와 mkdocstrings와 같은 문서화 도구에서 초기 관심과 지원을 표명했습니다.</li>
<li>CPython 핵심 개발자들도 초기 피드백에서 관심과 지지를 보였으며, VS Code와 PyCharm 같은 편집기 개발자들은 장황함에 대한 우려를 표명했지만, 공식 표준이 될 경우 지원을 고려하겠다고 밝혔습니다.</li>
</ul>
</li>
</ul>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Withdrawn] PEP 727 - Documentation in Annotated Metadata"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 13:19:38+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":[["$","div",null,{"className":"page__taxonomy mb-4","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"카테고리"}],[["$","span","Python",{"className":"page__taxonomy-item","children":"Python"}],["$","span","PEP",{"className":"page__taxonomy-item","children":"PEP"}]]]}],["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]]}]]}]}]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","21",{"name":"next-size-adjust"}]]
1:null
