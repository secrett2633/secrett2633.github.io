3:I[9275,[],""]
5:I[1343,[],""]
6:I[4281,["231","static/chunks/231-c4b666723e6aae68.js","185","static/chunks/app/layout-8808afda01b7a1b7.js"],"default"]
7:I[231,["231","static/chunks/231-c4b666723e6aae68.js","877","static/chunks/app/%5B...slug%5D/page-01b66e77b48ed573.js"],""]
4:["slug","python/pep/6","c"]
0:["iV6XySbMHIJ3imQdvgy3I",[[["",{"children":[["slug","python/pep/6","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"6\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/6","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_9012cf layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/secrett2633.github.io/_next/static/css/b9d6ec750ad82add.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T8338,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0006/">PEP 6 - Bug Fix Releases</a></p>
<p><strong>상태:</strong> Superseded | <strong>유형:</strong> Process | <strong>작성일:</strong> 15-Mar-2001</p>
</blockquote>
<h2>PEP 6 – Bug Fix Releases (버그 수정 릴리스)</h2>
<p><strong>저자:</strong> Aahz , Anthony Baxter 
<strong>상태:</strong> Superseded (대체됨)
<strong>유형:</strong> Process (프로세스)
<strong>생성일:</strong> 2001년 3월 15일
<strong>이력:</strong> 2001년 3월 15일, 2001년 4월 18일, 2004년 8월 19일</p>
<hr>
<p><strong>참고:</strong> 이 PEP는 더 이상 사용되지 않습니다 (obsolete). 현재 릴리스 정책은 개발 가이드(devguide)에 문서화되어 있습니다. 릴리스 프로세스의 메커니즘에 대해서는 PEP 101을 참조하세요.</p>
<h3>요약 (Abstract)</h3>
<p>Python은 역사적으로 단일 개발 포크(fork)만을 가지고 있었으며, 릴리스는 새로운 기능 추가와 버그 수정이라는 두 가지 목적을 동시에 수행했습니다 (이러한 종류의 릴리스는 "주요 릴리스(major releases)"라고 불립니다). 이 PEP는 주로 버그 수정을 목적으로 구버전의 유지보수 또는 버그 수정 릴리스를 포크하는 방법을 설명합니다.</p>
<p>이 PEP는 버그 수정 릴리스의 존재를 보장하는 것이 <em>아니며</em>, 버그 수정 릴리스가 필요한 만큼의 Python 커뮤니티 구성원이 기꺼이 작업을 수행할 의향이 있을 경우에 따를 절차만을 명시합니다.</p>
<h3>동기 (Motivation)</h3>
<p>SourceForge로 이전하면서 Python 개발이 가속화되었습니다. 커뮤니티의 일부에서는 이러한 가속화가 지나치다고 느끼며, 개발 주기 후반에 너무 많은 기능이 추가되었을 때 버그 수정을 위해 새 버전으로 업그레이드하는 것을 불편하게 여기는 사람들이 많습니다.</p>
<p>이 문제에 대한 한 가지 해결책은 이전 주요 릴리스를 유지보수하여, 다음 주요 릴리스가 나올 때까지 버그 수정을 제공하는 것입니다. 이는 Python이 수백 또는 수천 대의 장비에 설치되어야 할 수도 있는 엔터프라이즈 개발에 Python을 더욱 매력적으로 만들 것입니다.</p>
<h3>금지 사항 (Prohibitions)</h3>
<p>버그 수정 릴리스는 다음 제한 사항을 준수해야 합니다.</p>
<ul>
<li><strong>구문 변경(syntax changes)이 없어야 합니다.</strong></li>
<li><strong>모든 <code>.pyc</code> 및 <code>.pyo</code> 파일은 작동해야 합니다.</strong> 주요 릴리스에서 포크된 모든 버그 수정 릴리스에서 (재생성 없이) 작동해야 합니다.</li>
<li><strong>pickle 변경(pickle changes)이 없어야 합니다.</strong></li>
<li><strong>호환되지 않는 C API 변경이 없어야 합니다.</strong> 모든 확장 모듈(extensions)은 주요 릴리스와 동일한 포크 내의 모든 버그 수정 릴리스에서 재컴파일 없이 계속 작동해야 합니다.</li>
</ul>
<p>이러한 금지 사항 중 하나라도 위반할 경우 BDFL(Benevolent Dictator For Life)의 선언(proclamation)이 필요하며 (릴리스 노트에 눈에 띄는 경고와 함께) 고지되어야 합니다.</p>
<h3>완전한 금지 사항은 아니지만 지켜야 할 사항 (Not-Quite-Prohibitions)</h3>
<p>가능한 경우, 버그 수정 릴리스는 또한 다음을 준수해야 합니다.</p>
<ul>
<li><strong>새로운 기능이 없어야 합니다.</strong> 버그 수정 릴리스의 목적은 버그를 수정하는 것이지, CVS <code>HEAD</code>의 최신 기능을 추가하는 것이 아닙니다.</li>
<li><strong>고통 없는 업그레이드가 되어야 합니다.</strong> 사용자는 2.x.y에서 2.x.(y+1)로의 업그레이드가 실행 중인 시스템을 망가뜨리지 않을 것이라고 확신할 수 있어야 합니다. 이는 버그를 수정하는 데 필요한 경우가 아니라면, 표준 라이브러리(standard library)가 동작을 변경하거나, 더 나아가 API를 변경해서는 안 된다는 것을 의미합니다.</li>
</ul>
<h3>금지 사항의 적용 가능성 (Applicability of Prohibitions)</h3>
<p>위의 금지 사항 및 "완전한 금지 사항은 아니지만 지켜야 할 사항"은 최종 릴리스에서 버그 수정 릴리스로 (예: 2.4에서 2.4.1로), 그리고 한 시리즈 내에서 한 버그 수정 릴리스에서 다음 버그 수정 릴리스로 (예: 2.4.1에서 2.4.2로) 모두 적용됩니다.</p>
<p>이 PEP에 나열된 금지 사항을 따르면, 커뮤니티는 버그 수정 릴리스가 고통 없고 안전한 업그레이드라는 점에 만족할 것입니다.</p>
<h3>버그 수정 릴리스 촉진 (Helping the Bug Fix Releases Happen)</h3>
<p>버그 수정 릴리스 프로세스를 돕는 몇 가지 지침은 다음과 같습니다.</p>
<ul>
<li><strong>버그 수정을 백포트(Backport)하세요.</strong> 버그를 수정했고 그것이 적절하다고 판단되면, 현재 버그 수정 릴리스를 위한 CVS 브랜치로 백포트하세요. 스스로 백포트할 의향이 없거나 할 수 없는 경우, 커밋 메시지에 'Bugfix candidate' 또는 'Backport candidate'와 같은 문구로 메모를 남기세요. 확실하지 않다면 질문하세요.</li>
<li><strong>현재 버그 수정 릴리스를 관리하는 사람에게 특정 수정 사항이 적절한지 문의하세요.</strong></li>
<li><strong>버그 수정 릴리스에서 특히 수정되기를 원하는 특정 버그가 있다면, 적극적으로 나서서 해결되도록 노력하세요.</strong> 버그 수정 릴리스가 예정된 시점의 48시간 전까지 기다렸다가 버그 수정을 포함해달라고 요청하지 마세요.</li>
</ul>
<h3>버전 번호 (Version Numbers)</h3>
<p>Python 2.0부터 모든 주요 릴리스는 <code>X.Y</code> 형식의 버전 번호를 가져야 합니다. 버그 수정 릴리스는 항상 <code>X.Y.Z</code> 형식이어야 합니다.</p>
<p>현재 개발 중인 주요 릴리스는 릴리스 <code>N</code>으로 지칭됩니다. 막 릴리스된 주요 버전은 <code>N-1</code>으로 지칭됩니다.</p>
<p>CVS에서 버그 수정 릴리스는 브랜치에서 이루어집니다. 2.x 릴리스의 경우 브랜치 이름은 <code>release2x-maint</code>입니다. 예를 들어, 2.3 유지보수 릴리스의 브랜치는 <code>release23-maint</code>입니다.</p>
<h3>절차 (Procedure)</h3>
<p>버그 수정 릴리스를 관리하는 프로세스는 부분적으로 Tcl 시스템을 모델로 합니다.</p>
<p><code>Patch Czar</code>는 버그 수정 릴리스를 위한 BDFL의 대응자입니다. 그러나 BDFL 및 지정된 임명자들은 개별 패치에 대한 거부권(veto power)을 보유합니다. <code>Patch Czar</code>는 단일 개발 브랜치만 관리할 수도 있습니다. 2.3.x 및 2.4.x 릴리스를 다른 사람이 유지보수하는 것도 충분히 가능합니다.</p>
<p>개별 패치가 현재 CVS 트렁크에 기여될 때, 각 패치 커미터는 해당 패치가 버그 수정 릴리스에 포함하기에 적합한 버그 수정인지 고려하도록 요청받습니다. 패치가 적합하다고 판단되면, 커미터는 해당 릴리스를 유지보수 브랜치에 커밋하거나, 커밋 메시지에 패치를 표시할 수 있습니다.</p>
<p>또한, Python 커뮤니티의 누구든지 패치 포함을 제안할 수 있습니다. 패치는 버그 수정 릴리스를 위해 특별히 제출될 수 있으며, PEP 3의 지침을 따라야 합니다. 그러나 일반적으로 특정 릴리스의 버그는 브랜치뿐만 아니라 <code>HEAD</code>에서도 수정되는 것이 더 좋습니다.</p>
<p><code>Patch Czar</code>는 릴리스를 보증하기에 충분한 수의 패치가 있을 때 결정합니다. 릴리스는 Windows 설치 프로그램(installer)을 포함하여 패키징되고 공개됩니다. 새로운 버그가 발견되면 즉시 수정하고 새로운 버그 수정 릴리스를 (버전 번호를 증분하여) 공개해야 합니다. 2.3.x 주기 동안 <code>Patch Czar</code> (Anthony)는 약 6개월마다 릴리스를 시도했지만, 이는 향후 릴리스에 어떤 식으로든 구속력 있는 것으로 간주되어서는 안 됩니다.</p>
<p>버그 수정 릴리스는 약 6개월 간격으로 발생할 것으로 예상됩니다. 그러나 이는 단지 지침일 뿐입니다. 명백히 주요 버그가 발견되면 버그 수정 릴리스가 더 빨리 적절할 수 있습니다. 일반적으로 <code>N-1</code> 릴리스만이 항상 활발하게 유지보수될 것입니다. 즉, Python 2.4 개발 중에는 Python 2.3이 버그 수정 릴리스를 받습니다. 그러나 자격을 갖춘 사람이 이전 릴리스의 유지보수 작업을 계속하기를 원한다면, 그들을 격려해야 합니다.</p>
<h3>Patch Czar 이력 (Patch Czar History)</h3>
<ul>
<li>Anthony Baxter: 2.3.1 ~ 2.3.4의 Patch Czar</li>
<li>Barry Warsaw: 2.2.3의 Patch Czar</li>
<li>Guido van Rossum: 2.2.2의 Patch Czar</li>
<li>Michael Hudson: 2.2.1의 Patch Czar</li>
<li>Anthony Baxter: 2.1.2 및 2.1.3의 Patch Czar</li>
<li>Thomas Wouters: 2.1.1의 Patch Czar</li>
<li>Moshe Zadka: 2.0.1의 Patch Czar</li>
</ul>
<h3>이력 (History)</h3>
<p>이 PEP는 <code>comp.lang.python</code>에서 제안으로 시작되었습니다. 초기 버전은 <code>N</code> 릴리스와 동시에 릴리스될 <code>N-1</code> 릴리스에 대한 단일 패치를 제안했습니다. 초기 버전은 또한 엄격한 버그 수정 정책을 고수할 것을 주장했습니다.</p>
<p>BDFL 및 다른 사람들로부터의 피드백에 따라, 확장된 버그 수정 릴리스 주기(이전 주요 릴리스도 패치를 얻을 수 있도록 허용)를 포함하고 엄격한 버그 수정 요구 사항을 완화한 (주로 버그 수정 또는 기능으로 논쟁의 여지가 있는 PEP 235의 예시 때문에) 초안 PEP가 작성되었습니다.</p>
<p>이후 토론은 주로 <code>python-dev</code>로 옮겨졌고, BDFL은 마침내 Tcl의 버그 수정 릴리스 프로세스를 기반으로 하는 선언을 발표했습니다. 이는 본질적으로 <code>N-1</code> 릴리스와 버그 수정만을 다루는 원래 제안으로 돌아갔지만, 릴리스 <code>N</code>이 게시될 때까지 여러 버그 수정 릴리스를 허용했습니다.</p>
<p>Anthony Baxter는 2.3 릴리스 주기에서 얻은 교훈을 바탕으로 이 PEP를 수정했습니다.</p>
<h3>참고 자료 (References)</h3>
<p>http://www.tcl.tk/cgi-bin/tct/tip/28.html</p>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인(public domain)으로 지정되었습니다.</p>
<hr>
<p>I have translated all sections, added citations, and followed the formatting guidelines. I also included the "obsolete" note at the beginning.</p>
<p>Double check the terminology.</p>
<ul>
<li><code>major releases</code> -> 주요 릴리스</li>
<li><code>bug fix releases</code> -> 버그 수정 릴리스</li>
<li><code>fork</code> -> 포크</li>
<li><code>SourceForge</code> -> SourceForge (고유명사)</li>
<li><code>enterprise development</code> -> 엔터프라이즈 개발</li>
<li><code>syntax changes</code> -> 구문 변경</li>
<li><code>.pyc</code>, <code>.pyo</code> -> <code>.pyc</code>, <code>.pyo</code> (파일 확장자)</li>
<li><code>pickle changes</code> -> pickle 변경 (고유 기능명)</li>
<li><code>C API changes</code> -> C API 변경 (고유 기능명)</li>
<li><code>extensions</code> -> 확장 모듈</li>
<li><code>recompiling</code> -> 재컴파일</li>
<li><code>BDFL proclamation</code> -> BDFL 선언 (BDFL은 약어 그대로 사용)</li>
<li><code>release notes</code> -> 릴리스 노트</li>
<li><code>new features</code> -> 새로운 기능</li>
<li><code>standard library</code> -> 표준 라이브러리</li>
<li><code>APIs</code> -> API</li>
<li><code>backport</code> -> 백포트</li>
<li><code>CVS branch</code> -> CVS 브랜치</li>
<li><code>commit message</code> -> 커밋 메시지</li>
<li><code>Bugfix candidate</code>, <code>Backport candidate</code> -> 'Bugfix candidate', 'Backport candidate' (영어 그대로 사용)</li>
<li><code>X.Y</code>, <code>X.Y.Z</code> -> <code>X.Y</code>, <code>X.Y.Z</code> (버전 형식)</li>
<li><code>release N</code>, <code>N-1</code> -> 릴리스 <code>N</code>, <code>N-1</code> (설명과 함께 사용)</li>
<li><code>release2x-maint</code> -> <code>release2x-maint</code> (브랜치 이름)</li>
<li><code>Tcl system</code> -> Tcl 시스템</li>
<li><code>Patch Czar</code> -> Patch Czar (영어 그대로 사용)</li>
<li><code>veto power</code> -> 거부권</li>
<li><code>commit the release</code> -> 해당 릴리스를 커밋</li>
<li><code>current trunk of CVS</code> -> 현재 CVS 트렁크</li>
<li><code>Windows installer</code> -> Windows 설치 프로그램</li>
<li><code>python-dev</code> -> python-dev (메일링 리스트 이름)</li>
<li><code>public domain</code> -> 퍼블릭 도메인</li>
</ul>
<p>The terminology seems consistent with the guidelines.
All sections are translated.
Markdown formatting is used.
Citations are included.
The obsolete status is mentioned.</p>
<p>The translation is complete and follows all instructions.</p>
<pre><code class="language-markdown">## PEP 6 – Bug Fix Releases (버그 수정 릴리스)

**저자:** Aahz &#x3C;aahz at pythoncraft.com>, Anthony Baxter &#x3C;anthony at interlink.com.au>
**상태:** Superseded (대체됨)
**유형:** Process (프로세스)
**생성일:** 2001년 3월 15일
**이력:** 2001년 3월 15일, 2001년 4월 18일, 2004년 8월 19일

---

**참고:** 이 PEP는 더 이상 사용되지 않습니다 (obsolete). 현재 릴리스 정책은 개발 가이드(devguide)에 문서화되어 있습니다. 릴리스 프로세스의 메커니즘에 대해서는 [PEP 101](https://peps.python.org/pep-0101/)을 참조하세요.

### 요약 (Abstract)

Python은 역사적으로 단일 개발 포크(fork)만을 가지고 있었으며, 릴리스는 새로운 기능 추가와 버그 수정이라는 두 가지 목적을 동시에 수행했습니다 (이러한 종류의 릴리스는 "주요 릴리스(major releases)"라고 불립니다). 이 PEP는 주로 버그 수정을 목적으로 구버전의 유지보수 또는 버그 수정 릴리스를 포크하는 방법을 설명합니다.

이 PEP는 버그 수정 릴리스의 존재를 보장하는 것이 *아니며*, 버그 수정 릴리스가 필요한 만큼의 Python 커뮤니티 구성원이 기꺼이 작업을 수행할 의향이 있을 경우에 따를 절차만을 명시합니다.

### 동기 (Motivation)

SourceForge로 이전하면서 Python 개발이 가속화되었습니다. 커뮤니티의 일부에서는 이러한 가속화가 지나치다고 느끼며, 개발 주기 후반에 너무 많은 기능이 추가되었을 때 버그 수정을 위해 새 버전으로 업그레이드하는 것을 불편하게 여기는 사람들이 많습니다.

이 문제에 대한 한 가지 해결책은 이전 주요 릴리스를 유지보수하여, 다음 주요 릴리스가 나올 때까지 버그 수정을 제공하는 것입니다. 이는 Python이 수백 또는 수천 대의 장비에 설치되어야 할 수도 있는 엔터프라이즈 개발에 Python을 더욱 매력적으로 만들 것입니다.

### 금지 사항 (Prohibitions)

버그 수정 릴리스는 다음 제한 사항을 준수해야 합니다.

*   **구문 변경(syntax changes)이 없어야 합니다.**
*   **모든 `.pyc` 및 `.pyo` 파일은 작동해야 합니다.** 주요 릴리스에서 포크된 모든 버그 수정 릴리스에서 (재생성 없이) 작동해야 합니다.
*   **pickle 변경(pickle changes)이 없어야 합니다.**
*   **호환되지 않는 C API 변경이 없어야 합니다.** 모든 확장 모듈(extensions)은 주요 릴리스와 동일한 포크 내의 모든 버그 수정 릴리스에서 재컴파일 없이 계속 작동해야 합니다.

이러한 금지 사항 중 하나라도 위반할 경우 BDFL(Benevolent Dictator For Life)의 선언(proclamation)이 필요하며 (릴리스 노트에 눈에 띄는 경고와 함께) 고지되어야 합니다.

### 완전한 금지 사항은 아니지만 지켜야 할 사항 (Not-Quite-Prohibitions)

가능한 경우, 버그 수정 릴리스는 또한 다음을 준수해야 합니다.

*   **새로운 기능이 없어야 합니다.** 버그 수정 릴리스의 목적은 버그를 수정하는 것이지, CVS `HEAD`의 최신 기능을 추가하는 것이 아닙니다.
*   **고통 없는 업그레이드가 되어야 합니다.** 사용자는 2.x.y에서 2.x.(y+1)로의 업그레이드가 실행 중인 시스템을 망가뜨리지 않을 것이라고 확신할 수 있어야 합니다. 이는 버그를 수정하는 데 필요한 경우가 아니라면, 표준 라이브러리(standard library)가 동작을 변경하거나, 더 나아가 API를 변경해서는 안 된다는 것을 의미합니다.

### 금지 사항의 적용 가능성 (Applicability of Prohibitions)

위의 금지 사항 및 "완전한 금지 사항은 아니지만 지켜야 할 사항"은 최종 릴리스에서 버그 수정 릴리스로 (예: 2.4에서 2.4.1로), 그리고 한 시리즈 내에서 한 버그 수정 릴리스에서 다음 버그 수정 릴리스로 (예: 2.4.1에서 2.4.2로) 모두 적용됩니다.

이 PEP에 나열된 금지 사항을 따르면, 커뮤니티는 버그 수정 릴리스가 고통 없고 안전한 업그레이드라는 점에 만족할 것입니다.

### 버그 수정 릴리스 촉진 (Helping the Bug Fix Releases Happen)

버그 수정 릴리스 프로세스를 돕는 몇 가지 지침은 다음과 같습니다.

*   **버그 수정을 백포트(Backport)하세요.** 버그를 수정했고 그것이 적절하다고 판단되면, 현재 버그 수정 릴리스를 위한 CVS 브랜치로 백포트하세요. 스스로 백포트할 의향이 없거나 할 수 없는 경우, 커밋 메시지에 'Bugfix candidate' 또는 'Backport candidate'와 같은 문구로 메모를 남기세요. 확실하지 않다면 질문하세요.
*   **현재 버그 수정 릴리스를 관리하는 사람에게 특정 수정 사항이 적절한지 문의하세요.**
*   **버그 수정 릴리스에서 특히 수정되기를 원하는 특정 버그가 있다면, 적극적으로 나서서 해결되도록 노력하세요.** 버그 수정 릴리스가 예정된 시점의 48시간 전까지 기다렸다가 버그 수정을 포함해달라고 요청하지 마세요.

### 버전 번호 (Version Numbers)

Python 2.0부터 모든 주요 릴리스는 `X.Y` 형식의 버전 번호를 가져야 합니다. 버그 수정 릴리스는 항상 `X.Y.Z` 형식이어야 합니다.

현재 개발 중인 주요 릴리스는 릴리스 `N`으로 지칭됩니다. 막 릴리스된 주요 버전은 `N-1`으로 지칭됩니다.

CVS에서 버그 수정 릴리스는 브랜치에서 이루어집니다. 2.x 릴리스의 경우 브랜치 이름은 `release2x-maint`입니다. 예를 들어, 2.3 유지보수 릴리스의 브랜치는 `release23-maint`입니다.

### 절차 (Procedure)

버그 수정 릴리스를 관리하는 프로세스는 부분적으로 Tcl 시스템[1]을 모델로 합니다.

`Patch Czar`는 버그 수정 릴리스를 위한 BDFL의 대응자입니다. 그러나 BDFL 및 지정된 임명자들은 개별 패치에 대한 거부권(veto power)을 보유합니다. `Patch Czar`는 단일 개발 브랜치만 관리할 수도 있습니다. 2.3.x 및 2.4.x 릴리스를 다른 사람이 유지보수하는 것도 충분히 가능합니다.

개별 패치가 현재 CVS 트렁크에 기여될 때, 각 패치 커미터는 해당 패치가 버그 수정 릴리스에 포함하기에 적합한 버그 수정인지 고려하도록 요청받습니다. 패치가 적합하다고 판단되면, 커미터는 해당 릴리스를 유지보수 브랜치에 커밋하거나, 커밋 메시지에 패치를 표시할 수 있습니다.

또한, Python 커뮤니티의 누구든지 패치 포함을 제안할 수 있습니다. 패치는 버그 수정 릴리스를 위해 특별히 제출될 수 있으며, [PEP 3](https://peps.python.org/pep-0003/)의 지침을 따라야 합니다. 그러나 일반적으로 특정 릴리스의 버그는 브랜치뿐만 아니라 `HEAD`에서도 수정되는 것이 더 좋습니다.

`Patch Czar`는 릴리스를 보증하기에 충분한 수의 패치가 있을 때 결정합니다. 릴리스는 Windows 설치 프로그램(installer)을 포함하여 패키징되고 공개됩니다. 새로운 버그가 발견되면 즉시 수정하고 새로운 버그 수정 릴리스를 (버전 번호를 증분하여) 공개해야 합니다. 2.3.x 주기 동안 `Patch Czar` (Anthony)는 약 6개월마다 릴리스를 시도했지만, 이는 향후 릴리스에 어떤 식으로든 구속력 있는 것으로 간주되어서는 안 됩니다.

버그 수정 릴리스는 약 6개월 간격으로 발생할 것으로 예상됩니다. 그러나 이는 단지 지침일 뿐입니다. 명백히 주요 버그가 발견되면 버그 수정 릴리스가 더 빨리 적절할 수 있습니다. 일반적으로 `N-1` 릴리스만이 항상 활발하게 유지보수될 것입니다. 즉, Python 2.4 개발 중에는 Python 2.3이 버그 수정 릴리스를 받습니다. 그러나 자격을 갖춘 사람이 이전 릴리스의 유지보수 작업을 계속하기를 원한다면, 그들을 격려해야 합니다.

### Patch Czar 이력 (Patch Czar History)

*   Anthony Baxter: 2.3.1 ~ 2.3.4의 Patch Czar
*   Barry Warsaw: 2.2.3의 Patch Czar
*   Guido van Rossum: 2.2.2의 Patch Czar
*   Michael Hudson: 2.2.1의 Patch Czar
*   Anthony Baxter: 2.1.2 및 2.1.3의 Patch Czar
*   Thomas Wouters: 2.1.1의 Patch Czar
*   Moshe Zadka: 2.0.1의 Patch Czar

### 이력 (History)

이 PEP는 `comp.lang.python`에서 제안으로 시작되었습니다. 초기 버전은 `N` 릴리스와 동시에 릴리스될 `N-1` 릴리스에 대한 단일 패치를 제안했습니다. 초기 버전은 또한 엄격한 버그 수정 정책을 고수할 것을 주장했습니다.

BDFL 및 다른 사람들로부터의 피드백에 따라, 확장된 버그 수정 릴리스 주기(이전 주요 릴리스도 패치를 얻을 수 있도록 허용)를 포함하고 엄격한 버그 수정 요구 사항을 완화한 (주로 버그 수정 또는 기능으로 논쟁의 여지가 있는 PEP 235의 예시 때문에) 초안 PEP가 작성되었습니다.

이후 토론은 주로 `python-dev`로 옮겨졌고, BDFL은 마침내 Tcl의 버그 수정 릴리스 프로세스를 기반으로 하는 선언을 발표했습니다. 이는 본질적으로 `N-1` 릴리스와 버그 수정만을 다루는 원래 제안으로 돌아갔지만, 릴리스 `N`이 게시될 때까지 여러 버그 수정 릴리스를 허용했습니다.

Anthony Baxter는 2.3 릴리스 주기에서 얻은 교훈을 바탕으로 이 PEP를 수정했습니다.

### 참고 자료 (References)

[1] Tcl 시스템 관련 문서: [http://www.tcl.tk/cgi-bin/tct/tip/28.html](http://www.tcl.tk/cgi-bin/tct/tip/28.html)

### 저작권 (Copyright)

이 문서는 퍼블릭 도메인(public domain)으로 지정되었습니다.
```## PEP 6 – Bug Fix Releases (버그 수정 릴리스)

**저자:** Aahz &#x3C;aahz at pythoncraft.com>, Anthony Baxter &#x3C;anthony at interlink.com.au>
**상태:** Superseded (대체됨)
**유형:** Process (프로세스)
**생성일:** 2001년 3월 15일
**이력:** 2001년 3월 15일, 2001년 4월 18일, 2004년 8월 19일

---

**참고:** 이 PEP는 더 이상 사용되지 않습니다 (obsolete). 현재 릴리스 정책은 개발 가이드(devguide)에 문서화되어 있습니다. 릴리스 프로세스의 메커니즘에 대해서는 [PEP 101](https://peps.python.org/pep-0101/)을 참조하세요.

### 요약 (Abstract)

Python은 역사적으로 단일 개발 포크(fork)만을 가지고 있었으며, 릴리스는 새로운 기능 추가와 버그 수정이라는 두 가지 목적을 동시에 수행했습니다 (이러한 종류의 릴리스는 "주요 릴리스(major releases)"라고 불립니다). 이 PEP는 주로 버그 수정을 목적으로 구버전의 유지보수 또는 버그 수정 릴리스를 포크하는 방법을 설명합니다.

이 PEP는 버그 수정 릴리스의 존재를 보장하는 것이 *아니며*, 버그 수정 릴리스가 필요한 만큼의 Python 커뮤니티 구성원이 기꺼이 작업을 수행할 의향이 있을 경우에 따를 절차만을 명시합니다.

### 동기 (Motivation)

SourceForge로 이전하면서 Python 개발이 가속화되었습니다. 커뮤니티의 일부에서는 이러한 가속화가 지나치다고 느끼며, 개발 주기 후반에 너무 많은 기능이 추가되었을 때 버그 수정을 위해 새 버전으로 업그레이드하는 것을 불편하게 여기는 사람들이 많습니다.

이 문제에 대한 한 가지 해결책은 이전 주요 릴리스를 유지보수하여, 다음 주요 릴리스가 나올 때까지 버그 수정을 제공하는 것입니다. 이는 Python이 수백 또는 수천 대의 장비에 설치되어야 할 수도 있는 엔터프라이즈 개발에 Python을 더욱 매력적으로 만들 것입니다.

### 금지 사항 (Prohibitions)

버그 수정 릴리스는 다음 제한 사항을 준수해야 합니다.

*   **구문 변경(syntax changes)이 없어야 합니다.**
*   **모든 `.pyc` 및 `.pyo` 파일은 작동해야 합니다.** 주요 릴리스에서 포크된 모든 버그 수정 릴리스에서 (재생성 없이) 작동해야 합니다.
*   **pickle 변경(pickle changes)이 없어야 합니다.**
*   **호환되지 않는 C API 변경이 없어야 합니다.** 모든 확장 모듈(extensions)은 주요 릴리스와 동일한 포크 내의 모든 버그 수정 릴리스에서 재컴파일 없이 계속 작동해야 합니다.

이러한 금지 사항 중 하나라도 위반할 경우 BDFL(Benevolent Dictator For Life)의 선언(proclamation)이 필요하며 (릴리스 노트에 눈에 띄는 경고와 함께) 고지되어야 합니다.

### 완전한 금지 사항은 아니지만 지켜야 할 사항 (Not-Quite-Prohibitions)

가능한 경우, 버그 수정 릴리스는 또한 다음을 준수해야 합니다.

*   **새로운 기능이 없어야 합니다.** 버그 수정 릴리스의 목적은 버그를 수정하는 것이지, CVS `HEAD`의 최신 기능을 추가하는 것이 아닙니다.
*   **고통 없는 업그레이드가 되어야 합니다.** 사용자는 2.x.y에서 2.x.(y+1)로의 업그레이드가 실행 중인 시스템을 망가뜨리지 않을 것이라고 확신할 수 있어야 합니다. 이는 버그를 수정하는 데 필요한 경우가 아니라면, 표준 라이브러리(standard library)가 동작을 변경하거나, 더 나아가 API를 변경해서는 안 된다는 것을 의미합니다.

### 금지 사항의 적용 가능성 (Applicability of Prohibitions)

위의 금지 사항 및 "완전한 금지 사항은 아니지만 지켜야 할 사항"은 최종 릴리스에서 버그 수정 릴리스로 (예: 2.4에서 2.4.1로), 그리고 한 시리즈 내에서 한 버그 수정 릴리스에서 다음 버그 수정 릴리스로 (예: 2.4.1에서 2.4.2로) 모두 적용됩니다.

이 PEP에 나열된 금지 사항을 따르면, 커뮤니티는 버그 수정 릴리스가 고통 없고 안전한 업그레이드라는 점에 만족할 것입니다.

### 버그 수정 릴리스 촉진 (Helping the Bug Fix Releases Happen)

버그 수정 릴리스 프로세스를 돕는 몇 가지 지침은 다음과 같습니다.

*   **버그 수정을 백포트(Backport)하세요.** 버그를 수정했고 그것이 적절하다고 판단되면, 현재 버그 수정 릴리스를 위한 CVS 브랜치로 백포트하세요. 스스로 백포트할 의향이 없거나 할 수 없는 경우, 커밋 메시지에 'Bugfix candidate' 또는 'Backport candidate'와 같은 문구로 메모를 남기세요. 확실하지 않다면 질문하세요.
*   **현재 버그 수정 릴리스를 관리하는 사람에게 특정 수정 사항이 적절한지 문의하세요.**
*   **버그 수정 릴리스에서 특히 수정되기를 원하는 특정 버그가 있다면, 적극적으로 나서서 해결되도록 노력하세요.** 버그 수정 릴리스가 예정된 시점의 48시간 전까지 기다렸다가 버그 수정을 포함해달라고 요청하지 마세요.

### 버전 번호 (Version Numbers)

Python 2.0부터 모든 주요 릴리스는 `X.Y` 형식의 버전 번호를 가져야 합니다. 버그 수정 릴리스는 항상 `X.Y.Z` 형식이어야 합니다.

현재 개발 중인 주요 릴리스는 릴리스 `N`으로 지칭됩니다. 막 릴리스된 주요 버전은 `N-1`으로 지칭됩니다.

CVS에서 버그 수정 릴리스는 브랜치에서 이루어집니다. 2.x 릴리스의 경우 브랜치 이름은 `release2x-maint`입니다. 예를 들어, 2.3 유지보수 릴리스의 브랜치는 `release23-maint`입니다.

### 절차 (Procedure)

버그 수정 릴리스를 관리하는 프로세스는 부분적으로 Tcl 시스템을 모델로 합니다.

`Patch Czar`는 버그 수정 릴리스를 위한 BDFL의 대응자입니다. 그러나 BDFL 및 지정된 임명자들은 개별 패치에 대한 거부권(veto power)을 보유합니다. `Patch Czar`는 단일 개발 브랜치만 관리할 수도 있습니다. 2.3.x 및 2.4.x 릴리스를 다른 사람이 유지보수하는 것도 충분히 가능합니다.

개별 패치가 현재 CVS 트렁크에 기여될 때, 각 패치 커미터는 해당 패치가 버그 수정 릴리스에 포함하기에 적합한 버그 수정인지 고려하도록 요청받습니다. 패치가 적합하다고 판단되면, 커미터는 해당 릴리스를 유지보수 브랜치에 커밋하거나, 커밋 메시지에 패치를 표시할 수 있습니다.

또한, Python 커뮤니티의 누구든지 패치 포함을 제안할 수 있습니다. 패치는 버그 수정 릴리스를 위해 특별히 제출될 수 있으며, [PEP 3](https://peps.python.org/pep-0003/)의 지침을 따라야 합니다. 그러나 일반적으로 특정 릴리스의 버그는 브랜치뿐만 아니라 `HEAD`에서도 수정되는 것이 더 좋습니다.

`Patch Czar`는 릴리스를 보증하기에 충분한 수의 패치가 있을 때 결정합니다. 릴리스는 Windows 설치 프로그램(installer)을 포함하여 패키징되고 공개됩니다. 새로운 버그가 발견되면 즉시 수정하고 새로운 버그 수정 릴리스를 (버전 번호를 증분하여) 공개해야 합니다. 2.3.x 주기 동안 `Patch Czar` (Anthony)는 약 6개월마다 릴리스를 시도했지만, 이는 향후 릴리스에 어떤 식으로든 구속력 있는 것으로 간주되어서는 안 됩니다.

버그 수정 릴리스는 약 6개월 간격으로 발생할 것으로 예상됩니다. 그러나 이는 단지 지침일 뿐입니다. 명백히 주요 버그가 발견되면 버그 수정 릴리스가 더 빨리 적절할 수 있습니다. 일반적으로 `N-1` 릴리스만이 항상 활발하게 유지보수될 것입니다. 즉, Python 2.4 개발 중에는 Python 2.3이 버그 수정 릴리스를 받습니다. 그러나 자격을 갖춘 사람이 이전 릴리스의 유지보수 작업을 계속하기를 원한다면, 그들을 격려해야 합니다.

### Patch Czar 이력 (Patch Czar History)

*   Anthony Baxter: 2.3.1 ~ 2.3.4의 Patch Czar
*   Barry Warsaw: 2.2.3의 Patch Czar
*   Guido van Rossum: 2.2.2의 Patch Czar
*   Michael Hudson: 2.2.1의 Patch Czar
*   Anthony Baxter: 2.1.2 및 2.1.3의 Patch Czar
*   Thomas Wouters: 2.1.1의 Patch Czar
*   Moshe Zadka: 2.0.1의 Patch Czar

### 이력 (History)

이 PEP는 `comp.lang.python`에서 제안으로 시작되었습니다. 초기 버전은 `N` 릴리스와 동시에 릴리스될 `N-1` 릴리스에 대한 단일 패치를 제안했습니다. 초기 버전은 또한 엄격한 버그 수정 정책을 고수할 것을 주장했습니다.

BDFL 및 다른 사람들로부터의 피드백에 따라, 확장된 버그 수정 릴리스 주기(이전 주요 릴리스도 패치를 얻을 수 있도록 허용)를 포함하고 엄격한 버그 수정 요구 사항을 완화한 (주로 버그 수정 또는 기능으로 논쟁의 여지가 있는 PEP 235의 예시 때문에) 초안 PEP가 작성되었습니다.

이후 토론은 주로 `python-dev`로 옮겨졌고, BDFL은 마침내 Tcl의 버그 수정 릴리스 프로세스를 기반으로 하는 선언을 발표했습니다. 이는 본질적으로 `N-1` 릴리스와 버그 수정만을 다루는 원래 제안으로 돌아갔지만, 릴리스 `N`이 게시될 때까지 여러 버그 수정 릴리스를 허용했습니다.

Anthony Baxter는 2.3 릴리스 주기에서 얻은 교훈을 바탕으로 이 PEP를 수정했습니다.

### 참고 자료 (References)

 Tcl 시스템 관련 문서: [http://www.tcl.tk/cgi-bin/tct/tip/28.html](http://www.tcl.tk/cgi-bin/tct/tip/28.html)

### 저작권 (Copyright)

이 문서는 퍼블릭 도메인(public domain)으로 지정되었습니다.

> ⚠️ **알림:** 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.
</code></pre>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Superseded] PEP 6 - Bug Fix Releases"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 15:42:30+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":[["$","div",null,{"className":"page__taxonomy mb-4","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"카테고리"}],[["$","span","Python",{"className":"page__taxonomy-item","children":"Python"}],["$","span","PEP",{"className":"page__taxonomy-item","children":"PEP"}]]]}],["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]]}]]}]}]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","21",{"name":"next-size-adjust"}]]
1:null
