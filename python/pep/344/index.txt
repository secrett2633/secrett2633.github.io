3:I[9275,[],""]
5:I[1343,[],""]
6:I[4281,["231","static/chunks/231-c4b666723e6aae68.js","185","static/chunks/app/layout-8808afda01b7a1b7.js"],"default"]
7:I[231,["231","static/chunks/231-c4b666723e6aae68.js","877","static/chunks/app/%5B...slug%5D/page-01b66e77b48ed573.js"],""]
4:["slug","python/pep/344","c"]
0:["iV6XySbMHIJ3imQdvgy3I",[[["",{"children":[["slug","python/pep/344","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"344\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/344","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_9012cf layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/secrett2633.github.io/_next/static/css/b9d6ec750ad82add.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T31f5,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0344/">PEP 344 - Exception Chaining and Embedded Tracebacks</a></p>
<p><strong>상태:</strong> Superseded | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 12-May-2005</p>
</blockquote>
<h2>PEP 344 – 예외 연쇄 (Exception Chaining) 및 내장 트레이스백 (Embedded Tracebacks)</h2>
<h3>개요 (Abstract)</h3>
<p>이 PEP는 예외 인스턴스에 세 가지 표준 속성을 추가할 것을 제안합니다: 묵시적으로 연쇄된 예외를 위한 <code>__context__</code> 속성, 명시적으로 연쇄된 예외를 위한 <code>__cause__</code> 속성, 그리고 트레이스백을 위한 <code>__traceback__</code> 속성입니다. 새로운 <code>raise ... from</code> 문은 <code>__cause__</code> 속성을 설정하는 데 사용됩니다.</p>
<h3>동기 (Motivation)</h3>
<p>하나의 예외(예외 A)를 처리하는 도중에 다른 예외(예외 B)가 발생할 수 있습니다. 기존 Python 2.4에서는 이러한 경우 예외 B가 전파되고 예외 A는 유실되었습니다. 문제 디버깅을 위해서는 두 예외 모두에 대한 정보가 유용하며, <code>__context__</code> 속성은 이 정보를 자동으로 유지합니다.</p>
<p>때로는 예외 핸들러가 추가 정보를 제공하거나 예외 유형을 변환하기 위해 의도적으로 예외를 다시 발생시키는 것이 유용할 수 있습니다. <code>__cause__</code> 속성은 예외의 직접적인 원인을 명시적으로 기록하는 방법을 제공합니다.</p>
<p>현재 Python 구현에서 예외는 유형(type), 값(value), 트레이스백(traceback)의 세 부분으로 구성됩니다. <code>sys</code> 모듈은 <code>exc_type</code>, <code>exc_value</code>, <code>exc_traceback</code> 세 변수를 통해 현재 예외를 노출하며, <code>sys.exc_info()</code> 함수는 이 세 부분을 튜플로 반환합니다. 그러나 <code>except</code> 문은 값에만 접근할 수 있고 트레이스백에는 접근할 수 없었습니다. <code>__traceback__</code> 속성을 예외 값에 추가함으로써 모든 예외 정보를 한 곳에서 접근할 수 있게 됩니다.</p>
<h3>역사 (History)</h3>
<p>이 예외 연쇄 아이디어는 2003년 1월 Raymond Hettinger에 의해 처음 제기되었으며, Brett Cannon과 Greg Ewing 등 여러 개발자에 의해 논의가 이어졌습니다. Greg Ewing과 Guido van Rossum은 예외 인스턴스에 트레이스백 속성을 추가하는 것을 언급하기도 했습니다.</p>
<h3>근거 (Rationale)</h3>
<p>Python-Dev 토론을 통해 예외 연쇄에 대한 두 가지 다른 목적의 관심이 드러났습니다. 예상치 못한 보조 예외 발생을 처리하기 위해서는 예외가 묵시적으로 유지되어야 하며, 예외의 의도적인 변환을 지원하기 위해서는 예외를 명시적으로 연쇄할 수 있는 방법이 있어야 합니다. 이 PEP는 이 두 가지를 모두 다룹니다.</p>
<p>묵시적으로 연쇄된 예외에는 <code>__context__</code>를, 명시적으로 연쇄된 예외에는 <code>__cause__</code>를 사용할 것을 제안합니다. 이 세 가지 속성(<code>__context__</code>, <code>__cause__</code>, <code>__traceback__</code>)은 Python VM에 의해 설정되기 때문에 이중 밑줄이 있는 이름을 가집니다.</p>
<p>이 PEP는 <code>except</code> 블록과 <code>finally</code> 블록에서 발생하는 예외를 동일한 방식으로 처리합니다. 트레이스백을 통해 예외 발생 위치를 명확히 알 수 있으므로, 두 경우를 구분하기 위한 추가 메커니즘은 불필요한 복잡성만 추가할 것입니다. 가장 바깥쪽 예외 객체( <code>except</code> 절에 의해 매칭되는 예외)는 현재 동작과의 호환성을 위해 가장 최근에 발생한 예외가 됩니다.</p>
<p>트레이스백은 가장 바깥쪽 예외를 마지막에 표시하도록 제안합니다. 이는 트레이스백의 시간 순서(가장 오래된 프레임부터 가장 최근 프레임까지)와 일치하며, 실제 발생한 예외를 마지막 줄에서 쉽게 찾을 수 있기 때문입니다.</p>
<h3>묵시적 예외 연쇄 (Implicit Exception Chaining)</h3>
<p>예외 처리 중 다른 예외가 발생할 때 이전 예외가 <code>__context__</code> 속성에 저장되어 유지됩니다.
예를 들어, <code>compute(0, 0)</code> 호출 시 <code>ZeroDivisionError</code>가 발생하고, 이를 <code>except</code>에서 처리하며 <code>log(exc)</code>를 호출합니다. 그러나 <code>log</code> 함수 내에서 쓰기 모드로 열리지 않은 파일에 쓰려고 할 때 <code>IOError</code>가 발생하면, <code>IOError</code> 인스턴스에는 <code>ZeroDivisionError</code>를 유지하는 추가 <code>__context__</code> 속성이 생깁니다.</p>
<p><strong>제안된 의미론:</strong>
각 스레드는 처음에 <code>None</code>으로 설정된 예외 컨텍스트를 가집니다. 예외가 발생할 때, 예외 인스턴스에 <code>__context__</code> 속성이 없으면 인터프리터는 이를 스레드의 예외 컨텍스트와 동일하게 설정합니다. 예외가 발생한 직후, 스레드의 예외 컨텍스트는 해당 예외로 설정됩니다. 인터프리터가 <code>except</code> 블록을 종료하거나 <code>return</code>, <code>yield</code>, <code>continue</code>, <code>break</code> 문을 실행하여 종료할 때, 스레드의 예외 컨텍스트는 <code>None</code>으로 설정됩니다.</p>
<h3>명시적 예외 연쇄 (Explicit Exception Chaining)</h3>
<p>예외 객체의 <code>__cause__</code> 속성은 항상 <code>None</code>으로 초기화됩니다. 이는 새로운 형태의 <code>raise</code> 문인 <code>raise EXCEPTION from CAUSE</code>에 의해 설정됩니다.
이 구문은 다음과 동일합니다:</p>
<pre><code class="language-python">exc = EXCEPTION
exc.__cause__ = CAUSE
raise exc
</code></pre>
<p>예를 들어, <code>FileDatabase</code>가 <code>IOError</code>를 발생시켰을 때 이를 <code>DatabaseError</code>로 변환하여 다시 발생시키면서 <code>IOError</code> 정보를 <code>__cause__</code> 속성을 통해 유지할 수 있습니다.</p>
<h3>트레이스백 속성 (Traceback Attribute)</h3>
<p><code>__traceback__</code> 속성은 예외 객체 자체에 트레이스백 정보를 직접 연결하여 접근성을 높입니다.
예를 들어, <code>do_logged()</code> 함수에서 예외 발생 시 <code>write_exception()</code> 함수에 예외 객체 하나만 전달하면, <code>write_exception()</code>은 <code>exc.__traceback__</code>을 통해 트레이스백 정보를 직접 얻을 수 있습니다.</p>
<p><strong>제안된 의미론:</strong>
예외가 포착될 때, 예외 인스턴스에 <code>__traceback__</code> 속성이 없으면 인터프리터는 이를 새로 포착된 트레이스백으로 설정합니다.</p>
<h3>향상된 보고 (Enhanced Reporting)</h3>
<p>기본 예외 핸들러는 연쇄된 예외를 보고하도록 수정됩니다. 예외 체인은 <code>__cause__</code>와 <code>__context__</code> 속성을 따라 탐색되며, <code>__cause__</code>가 우선순위를 가집니다. 트레이스백의 시간 순서에 따라 가장 최근에 발생한 예외가 마지막에 표시됩니다. 즉, 가장 안쪽 예외부터 시작하여 가장 바깥쪽 예외까지 체인을 거슬러 올라가며 표시됩니다.</p>
<p>트레이스백 모듈의 <code>format_exception</code>, <code>print_exception</code>, <code>print_exc</code>, <code>print_last</code> 함수는 선택적 <code>chain</code> 인수를 허용하도록 업데이트됩니다 (기본값은 <code>True</code>). <code>True</code>일 경우 전체 예외 체인을 포맷팅하거나 표시하며, <code>False</code>일 경우 가장 바깥쪽 예외만 표시합니다. <code>cgitb</code> 모듈도 전체 예외 체인을 표시하도록 업데이트되어야 합니다.</p>
<h3>C API 호환성 (C API Compatibility)</h3>
<p>예외를 설정하는 <code>PyErr_Set*</code> 호출은 예외에 <code>__context__</code> 속성을 설정하지 않습니다. <code>PyErr_NormalizeException</code>은 항상 트레이스백 속성을 <code>tb</code> 인수로 설정하고, <code>__context__</code>와 <code>__cause__</code> 속성은 <code>None</code>으로 설정합니다.</p>
<p>새로운 API 함수인 <code>PyErr_SetContext(context)</code>는 C 프로그래머가 연쇄된 예외 정보를 제공하는 데 도움을 줍니다. 이 함수는 먼저 현재 예외를 인스턴스로 정규화한 다음, <code>__context__</code> 속성을 설정합니다. 유사한 API 함수인 <code>PyErr_SetCause(cause)</code>는 <code>__cause__</code> 속성을 설정합니다.</p>
<h3>호환성 (Compatibility)</h3>
<p>연쇄된 예외는 가장 최근 예외의 유형을 노출하므로, 현재와 동일한 <code>except</code> 절에 매칭됩니다. 제안된 변경 사항은 예외 인스턴스에서 <code>__context__</code>, <code>__cause__</code>, <code>__traceback__</code>이라는 이름의 속성을 설정하거나 사용하는 코드가 없는 한 호환성 문제를 일으키지 않을 것입니다.</p>
<h3>미해결 과제 (Open Issues)</h3>
<ul>
<li><strong>추가 정보 (Extra Information):</strong> 예외 유형을 변경하지 않고 예외에 추가 정보를 첨부하는 기능은 이 PEP에서 다루지 않습니다.</li>
<li><strong>컨텍스트 억제 (Suppressing Context):</strong> 이 PEP의 현재 방식으로는 <code>__context__</code>를 억제하는 것이 불가능합니다.</li>
<li><strong>예외 유형 제한 (Limiting Exception Types):</strong> 라이브러리 구현자가 모든 내부 예외를 애플리케이션 수준 예외로 감싸고 싶을 수 있지만, 현재 <code>except</code> 문에서 현재 예외를 명명하는 기능은 없습니다.</li>
<li><strong>yield:</strong> <code>yield</code> 문이 실행될 때 예외 컨텍스트가 손실됩니다. 이 문제는 이 PEP의 범위를 벗어납니다.</li>
<li><strong>가비지 컬렉션 (Garbage Collection):</strong> 이 제안에 대한 가장 강력한 반대는 예외와 스택 프레임 사이에 순환(cycle)을 생성한다는 것입니다. 이로 인해 순환 가비지 컬렉션(cyclic garbage collection) 및 리소스 해제가 크게 지연될 수 있습니다. <code>__traceback__</code> 속성을 약한 참조(weak reference)로 만들거나 스택 프레임에서 예외 변수로의 참조를 약한 참조로 변경하는 등의 대안이 논의되었습니다.</li>
</ul>
<h3>향후 호환 가능한 변경 사항 (Possible Future Compatible Changes)</h3>
<ul>
<li>인터프리터 수준에서 예외가 세 개의 튜플이 아닌 단일 객체로 나타나는 것과 일치하는 변경 사항입니다.</li>
<li><code>__exit__</code>의 세 인자(<code>type</code>, <code>value</code>, <code>traceback</code>)를 단일 예외 인자로 대체합니다.</li>
<li><code>sys.exc_type</code>, <code>sys.exc_value</code>, <code>sys.exc_traceback</code>, <code>sys.exc_info()</code>를 단일 <code>sys.exception</code> 멤버로 대체하고 사용을 중단합니다.</li>
<li><code>sys.last_type</code>, <code>sys.last_value</code>, <code>sys.last_traceback</code>을 단일 <code>sys.last_exception</code> 멤버로 대체하고 사용을 중단합니다.</li>
<li><code>raise</code> 문의 세 인자 형태를 한 인자 형태로 대체하고 사용을 중단합니다.</li>
<li><code>cgitb.html()</code>을 업데이트하여 첫 번째 인자로 <code>(type, value, traceback)</code> 튜플 대신 단일 값을 허용합니다.</li>
</ul>
<h3>향후 호환되지 않는 변경 사항 (Possible Future Incompatible Changes)</h3>
<p>Python 3000(Python 3)을 위해 고려할 만한 변경 사항입니다.</p>
<ul>
<li><code>sys.exc_type</code>, <code>sys.exc_value</code>, <code>sys.exc_traceback</code>, <code>sys.exc_info()</code> 제거.</li>
<li><code>sys.last_type</code>, <code>sys.last_value</code>, <code>sys.last_traceback</code> 제거.</li>
<li>세 인자를 받는 <code>sys.excepthook</code>을 한 인자를 받는 API로 대체하고 <code>cgitb</code> 모듈을 일치시키도록 변경.</li>
<li><code>raise</code> 문의 세 인자 형태 제거.</li>
<li><code>traceback.print_exception</code>을 <code>type</code>, <code>value</code>, <code>traceback</code> 인자 대신 예외 인자를 받도록 업그레이드.</li>
</ul>
<hr>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Superseded] PEP 344 - Exception Chaining and Embedded Tracebacks"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 18:54:00+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":[["$","div",null,{"className":"page__taxonomy mb-4","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"카테고리"}],[["$","span","Python",{"className":"page__taxonomy-item","children":"Python"}],["$","span","PEP",{"className":"page__taxonomy-item","children":"PEP"}]]]}],["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]]}]]}]}]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","21",{"name":"next-size-adjust"}]]
1:null
