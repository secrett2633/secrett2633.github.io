3:I[9275,[],""]
5:I[1343,[],""]
6:I[4281,["231","static/chunks/231-c4b666723e6aae68.js","185","static/chunks/app/layout-8808afda01b7a1b7.js"],"default"]
7:I[231,["231","static/chunks/231-c4b666723e6aae68.js","877","static/chunks/app/%5B...slug%5D/page-01b66e77b48ed573.js"],""]
4:["slug","python/pep/400","c"]
0:["iV6XySbMHIJ3imQdvgy3I",[[["",{"children":[["slug","python/pep/400","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"400\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/400","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_9012cf layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/secrett2633.github.io/_next/static/css/b9d6ec750ad82add.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T3112,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0400/">PEP 400 - Deprecate codecs.StreamReader and codecs.StreamWriter</a></p>
<p><strong>상태:</strong> Deferred | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 28-May-2011</p>
</blockquote>
<p>PEP 400 – <code>codecs.StreamReader</code> 및 <code>codecs.StreamWriter</code> Deprecation 제안</p>
<h2>개요</h2>
<p>이 PEP는 <code>io.TextIOWrapper</code>와 <code>codecs.StreamReaderWriter</code>가 유사한 API를 제공하지만, <code>TextIOWrapper</code>가 더 많은 기능과 더 빠른 성능을 제공한다는 점에 주목합니다. 코드 중복은 버그를 두 번 수정해야 하거나 두 구현체 사이에 미묘한 차이를 발생시킬 수 있습니다.</p>
<p><code>codecs</code> 모듈은 Python 2.0에 도입되었고, <code>io</code> 모듈은 Python 2.6 및 3.0에 도입되어 Python 2.7 및 3.1에서 C로 재구현되었습니다.</p>
<h2>PEP 연기 (Deferred)</h2>
<p>이 PEP의 제안은 현재 이 목표를 추진하고 피드백을 수집 및 통합하며, 이를 효과적으로 수행할 충분한 시간을 가진 옹호자가 부족하여 논의가 연기되었습니다.</p>
<h2>동기 (Motivation)</h2>
<p>Python 3.0에서 I/O 모델이 업데이트되면서 <code>io.TextIOWrapper</code> 형태의 "인코딩을 아는 스트림(stream-with-known-encoding)" 개념이 도입되었습니다. 이 클래스는 Python 3에서 텍스트 기반 I/O의 성능에 중요하며, CPython에서 기본적으로 사용되는 최적화된 C 버전이 존재합니다. 버퍼링, 상태 저장형 코덱 (stateful codecs), 유니버설 개행 문자(universal newlines) 처리의 많은 엣지 케이스들이 Python 3.0 출시 이후 해결되었습니다.</p>
<p>이 새로운 인터페이스는 <code>codecs.StreamReader</code>, <code>codecs.StreamWriter</code>, <code>codecs.StreamReaderWriter</code>와 같은 기존 인터페이스와 크게 중복됩니다. 이 레거시 인터페이스는 <code>PEP 100</code>의 초기 코덱 인터페이스 설계의 일부였습니다. <code>PEP 100</code> 설계는 코덱 작성자가 핵심 <code>encode()</code> 및 <code>decode()</code> 메서드 외에도 적절한 <code>StreamReader</code> 및 <code>StreamWriter</code> 구현을 제공하도록 요구했습니다. 이는 <code>io.TextIOWrapper</code>가 이미 처리한 많은 엣지 케이스들을 (부록 A 참조) 코덱 작성자가 올바르게 처리해야 하는 큰 부담을 주었습니다. 이론적으로 코덱과 스트림 간의 깊은 통합은 추가적인 최적화를 가능하게 하지만, 실제로는 이러한 최적화가 이루어지지 않았거나, 관련된 코드 중복으로 인해 <code>io.TextIOWrapper</code>에서 수정된 엣지 케이스들이 다양한 <code>StreamReader</code> 및 <code>StreamWriter</code> 구현에서는 여전히 올바르게 처리되지 않고 있습니다.</p>
<p>이에 따라 이 PEP는 다음을 제안합니다:</p>
<ul>
<li><code>codecs.open()</code>을 Python 3.3에서 내장 <code>open()</code> 함수에 위임하도록 업데이트합니다.</li>
<li><code>codecs.CodecInfo</code>의 <code>streamreader</code> 및 <code>streamwriter</code> 속성을 포함한 레거시 <code>codecs.Stream*</code> 인터페이스를 Python 3.3에서 Deprecate 합니다.</li>
</ul>
<h2>근거 (Rationale)</h2>
<h3><code>StreamReader</code> 및 <code>StreamWriter</code>의 문제점</h3>
<ul>
<li><code>StreamReader</code>는 개행 문자(newlines)를 번역할 수 없습니다.</li>
<li><code>StreamWriter</code>는 "라인 버퍼링"(입력 텍스트에 개행 문자가 포함된 경우 flush)을 지원하지 않습니다.</li>
<li>CJK 인코딩(<code>GB18030</code> 등)의 <code>StreamReader</code> 클래스는 UNIX 개행 문자(<code>\n</code>)만 지원합니다.</li>
<li><code>StreamReader</code> 및 <code>StreamWriter</code>는 상태 저장형 코덱이지만, 상태를 제어하는 함수(<code>getstate()</code> 또는 <code>setstate()</code>)를 노출하지 않습니다.</li>
<li>각 코덱은 엣지 케이스를 처리해야 합니다 (부록 A 참조).</li>
<li><code>StreamReader</code> 및 <code>StreamWriter</code>는 <code>IncrementalReader</code> 및 <code>IncrementalEncoder</code>와 매우 유사하며, 상태 저장형 코덱(예: <code>UTF-16</code>)의 일부 코드가 중복됩니다.</li>
<li>각 코덱은 사소하더라도(인코더/디코더 호출만 하는 경우에도) 자체 <code>StreamReader</code> 및 <code>StreamWriter</code> 클래스를 재구현해야 합니다.</li>
<li><code>codecs.open(filename, "r")</code>는 <code>io.TextIOWrapper</code> 객체를 생성합니다.</li>
<li>어떤 코덱도 코덱의 특수성에 기반한 <code>StreamReader</code> 또는 <code>StreamWriter</code>의 최적화된 메서드를 구현하지 않습니다.</li>
</ul>
<p>다양한 버그 트래커 이슈들도 이러한 문제점들을 뒷받침합니다.</p>
<h3><code>TextIOWrapper</code> 기능</h3>
<ul>
<li><code>TextIOWrapper</code>는 개행 문자 번역(UNIX 개행 문자로)을 포함하여 어떤 종류의 개행 문자든 읽고 쓸 수 있도록 지원합니다.</li>
<li><code>TextIOWrapper</code>는 코덱의 증분 인코더(incremental encoders) 및 디코더(decoders)를 재사용합니다(코드 중복 없음).</li>
<li><code>io</code> 모듈(<code>TextIOWrapper</code>)은 <code>codecs</code> 모듈(<code>StreamReader</code>)보다 빠릅니다. <code>io</code>는 C로 구현된 반면 <code>codecs</code>는 Python으로 구현되었습니다.</li>
<li><code>TextIOWrapper</code>는 작은 읽기 작업을 가속화하는 선행 읽기(readahead) 알고리즘을 가지고 있습니다 (문자 단위 또는 라인 단위 읽기에서 <code>io</code>가 <code>codecs</code>보다 10배에서 25배 빠릅니다).</li>
<li><code>TextIOWrapper</code>는 쓰기 버퍼를 가지고 있습니다.</li>
<li><code>TextIOWrapper.tell()</code>은 최적화되어 있습니다.</li>
<li><code>TextIOWrapper</code>는 단일 클래스를 사용하여 랜덤 액세스(읽기+쓰기)를 지원하며, 이는 인터레이스된 읽기-쓰기(interlaced read-write)를 최적화할 수 있도록 합니다 (하지만 현재 그러한 최적화는 구현되지 않았습니다).</li>
</ul>
<h3><code>TextIOWrapper</code> 문제점</h3>
<ul>
<li><code>Issue #12215</code> (<code>TextIOWrapper</code>: 인터레이스된 읽기-쓰기 문제)가 보고되었습니다.</li>
</ul>
<h3><code>StreamReader</code> 및 <code>StreamWriter</code>의 개선 가능성</h3>
<p><code>StreamReader</code> 및 <code>StreamWriter</code> 클래스에 코덱 상태 읽기/쓰기 함수를 추가함으로써, 각 상태 저장형 <code>StreamReader</code> 및 <code>StreamWriter</code> 클래스 대신 기본 클래스에서 상태 저장형 코덱과 관련된 문제를 해결할 수 있을 것입니다.
<code>StreamReader</code> 및 <code>StreamWriter</code>가 <code>IncrementalDecoder</code> 및 <code>IncrementalEncoder</code>를 사용하도록 변경할 수 있습니다.</p>
<p>코덱은 특정 인코딩에 최적화된 변형을 구현하거나 특정 스트림 메서드를 가로채서 기능을 추가하거나 인코딩/디코딩 성능을 향상시킬 수 있습니다. <code>TextIOWrapper</code>는 이러한 최적화를 구현할 수 없지만, 증분 인코더 및 디코더를 사용하고 읽기 및 쓰기 버퍼를 사용하므로 불완전한 입력으로 인한 오버헤드가 낮거나 없습니다.</p>
<p><code>UTF-8</code>과 같이 가변 길이 인코딩 코덱의 경우, 읽기 끝 부분에서 바이트 누락으로 인해 문제가 발생하는 경우가 많으므로 훨씬 더 많은 작업을 수행할 수 있습니다. <code>UTF-32-BE/LE</code> 코덱은 단순히 문자 위치에 4를 곱하여 바이트 위치를 얻을 수 있습니다.</p>
<h3><code>StreamReader</code> 및 <code>StreamWriter</code>의 사용</h3>
<p>이러한 클래스는 직접 사용되는 경우가 드물고, 주로 <code>codecs.open()</code>을 통해 간접적으로 사용됩니다. Python 3 표준 라이브러리에서는 (<code>codecs</code> 모듈 자체를 제외하고) 사용되지 않습니다.</p>
<p>일부 프로젝트는 <code>StreamReader</code> 및 <code>StreamWriter</code>를 사용하여 자체 코덱을 구현하지만, 이러한 클래스를 직접 사용하지는 않습니다.</p>
<h2>하위 호환성 (Backwards Compatibility)</h2>
<h3>공개 API인 <code>codecs.open</code> 유지</h3>
<p><code>codecs.open()</code>은 내장 <code>open()</code> 함수로 대체될 수 있습니다. <code>open()</code>은 유사한 API를 가지며 더 많은 옵션을 제공합니다. 두 함수 모두 파일과 유사한 객체(동일한 API)를 반환합니다.</p>
<p><code>codecs.open()</code>은 Python 2.6까지 유니코드 모드에서 텍스트 파일을 여는 유일한 방법이었습니다. 많은 Python 2 프로그램이 이 함수를 사용합니다. <code>codecs.open()</code>을 제거하면 Python 2에서 Python 3으로 프로그램을 포팅하는 데 더 많은 작업이 필요하며, 특히 두 Python 버전에서 동일한 코드 베이스를 사용하는 프로젝트(2to3 프로그램을 사용하지 않는 경우)에 더 큰 영향을 미칩니다.</p>
<p><code>codecs.open()</code>은 Python 2와의 하위 호환성을 위해 유지됩니다.</p>
<h3><code>StreamReader</code> 및 <code>StreamWriter</code> Deprecate</h3>
<p>Python 3.3에서 <code>StreamReader</code> 또는 <code>StreamWriter</code>를 인스턴스화하면 <code>DeprecationWarning</code>이 발생해야 합니다. 서브클래스를 정의하는 경우에는 <code>DeprecationWarning</code>이 발생하지 않습니다.
<code>codecs.open()</code>은 내장 <code>open()</code> 함수(<code>TextIOWrapper</code>)를 재사용하여 텍스트 파일을 읽고 쓰도록 변경될 것입니다.</p>
<h2>대안적 접근 (Alternative Approach)</h2>
<p><code>codecs.Stream*</code> 클래스 Deprecation의 대안은 <code>codecs.open()</code>의 이름을 <code>codecs.open_stream()</code>으로 변경하고, <code>open()</code> 및 <code>io.TextIOWrapper</code>를 재사용하는 새로운 <code>codecs.open()</code> 함수를 생성하는 것입니다.</p>
<h2>부록 A: 상태 저장형 코덱의 문제점</h2>
<p>상태 저장형 코덱을 스트림과 함께 올바르게 사용하는 것은 어렵습니다. <code>codecs</code> 모듈은 일부 사례를 지원하지만, <code>io</code> 모듈은 상태 저장형 코덱과 관련된 알려진 버그가 더 이상 없습니다. <code>codecs</code>와 <code>io</code> 모듈의 주요 차이점은 <code>codecs</code> 모듈의 경우 각 코덱의 <code>StreamReader</code> 및/또는 <code>StreamWriter</code> 클래스에서 버그를 수정해야 하는 반면, <code>io.TextIOWrapper</code>에서는 버그를 한 번만 수정하면 된다는 것입니다.</p>
<h3>상태 저장형 코덱 예시</h3>
<p>Python은 다음 상태 저장형 코덱을 지원합니다:
<code>cp932</code>, <code>cp949</code>, <code>cp950</code>, <code>euc_jis_2004</code>, <code>euc_jisx2003</code>, <code>euc_jp</code>, <code>euc_kr</code>, <code>gb18030</code>, <code>gbk</code>, <code>hz</code>, <code>iso2022_jp</code>, <code>iso2022_jp_1</code>, <code>iso2022_jp_2</code>, <code>iso2022_jp_2004</code>, <code>iso2022_jp_3</code>, <code>iso2022_jp_ext</code>, <code>iso2022_kr</code>, <code>shift_jis</code>, <code>shift_jis_2004</code>, <code>shift_jisx0213</code>, <code>utf_8_sig</code>, <code>utf_16</code>, <code>utf_32</code>.</p>
<h3><code>Read</code> 및 <code>seek(0)</code></h3>
<p><code>io</code> 및 <code>codecs</code> 모듈 모두 이 사용 사례를 올바르게 지원합니다.</p>
<h3><code>seek(n)</code></h3>
<p><code>io</code> 모듈은 이 사용 사례를 지원하지만, <code>codecs</code>는 두 번째 쓰기에서 새 BOM (Byte Order Mark)을 작성하여 실패합니다 (<code>issue #12512</code>).</p>
<h3><code>Append mode</code> (추가 모드)</h3>
<p><code>io</code> 모듈은 이 사용 사례를 지원하지만, <code>codecs</code>는 두 번째 쓰기에서 새 BOM을 작성하여 실패합니다 (<code>issue #12512</code>).</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Deferred] PEP 400 - Deprecate codecs.StreamReader and codecs.StreamWriter"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 21:24:56+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":[["$","div",null,{"className":"page__taxonomy mb-4","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"카테고리"}],[["$","span","Python",{"className":"page__taxonomy-item","children":"Python"}],["$","span","PEP",{"className":"page__taxonomy-item","children":"PEP"}]]]}],["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]]}]]}]}]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","21",{"name":"next-size-adjust"}]]
1:null
