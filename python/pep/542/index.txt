3:I[9275,[],""]
5:I[1343,[],""]
6:I[4281,["231","static/chunks/231-c4b666723e6aae68.js","185","static/chunks/app/layout-8808afda01b7a1b7.js"],"default"]
7:I[231,["231","static/chunks/231-c4b666723e6aae68.js","877","static/chunks/app/%5B...slug%5D/page-01b66e77b48ed573.js"],""]
4:["slug","python/pep/542","c"]
0:["iV6XySbMHIJ3imQdvgy3I",[[["",{"children":[["slug","python/pep/542","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"542\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/542","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_9012cf layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/secrett2633.github.io/_next/static/css/b9d6ec750ad82add.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T17b2,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0542/">PEP 542 - Dot Notation Assignment In Function Header</a></p>
<p><strong>상태:</strong> Rejected | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 10-Feb-2017</p>
</blockquote>
<h1>PEP 542 – 함수 헤더 내 점 표기법 할당 (Dot Notation Assignment In Function Header)</h1>
<ul>
<li><strong>작성자:</strong> Markus Meskanen </li>
<li><strong>상태:</strong> Rejected (반려됨)</li>
<li><strong>유형:</strong> Standards Track (표준 트랙)</li>
<li><strong>생성일:</strong> 2017년 2월 10일</li>
<li><strong>해결:</strong> Python-Dev message</li>
</ul>
<hr>
<h2>목차</h2>
<ul>
<li><a href="#%EC%9A%94%EC%95%BD-abstract">요약 (Abstract)</a></li>
<li><a href="#%EC%A0%9C%EC%95%88-%EB%B0%B0%EA%B2%BD-rationale">제안 배경 (Rationale)</a></li>
<li><a href="#%EA%B5%AC%ED%98%84-implementation">구현 (Implementation)</a></li>
<li><a href="#%ED%95%98%EC%9C%84-%ED%98%B8%ED%99%98%EC%84%B1-backwards-compatibility">하위 호환성 (Backwards Compatibility)</a></li>
<li><a href="#%EC%A0%80%EC%9E%91%EA%B6%8C-copyright">저작권 (Copyright)</a></li>
</ul>
<hr>
<h2>요약 (Abstract)</h2>
<p>함수 정의는 함수가 할당 가능한 일급 객체(first class objects)임에도 불구하고, 단순한 함수 이름만 사용하도록 허용합니다. 이 PEP는 점 표기법(dot notation)을 사용하여 객체와 함수 이름을 분리함으로써, 함수 정의 헤더 내에서 함수를 클래스 또는 인스턴스 속성(attribute)에 직접 할당하는 기능을 추가할 것을 제안합니다.</p>
<p>비슷한 기능이지만, 이 PEP는 <code>dict</code> 키나 <code>list</code> 인덱스와 같이 할당을 지원하는 모든 것에 대한 일반적인 할당을 다루지는 않습니다.</p>
<h2>제안 배경 (Rationale)</h2>
<p>현재 함수를 클래스 또는 인스턴스 속성에 할당해야 하는 경우, 추가적인 할당문이 필요합니다.</p>
<pre><code class="language-python">class MyClass:
    ...

my_instance = MyClass()

def my_function(self):
    ...

# 클래스 속성에 할당
MyClass.my_function = my_function

# 또는 인스턴스 속성에 할당
my_instance.my_function = my_function
</code></pre>
<p>이것이 일반적으로 불편하지는 않지만, 함수 헤더 내에서 점 표기법을 사용하여 직접 할당하는 방식은 이를 크게 단순화할 것입니다.</p>
<pre><code class="language-python">class MyClass:
    ...

my_instance = MyClass()

# 클래스 속성에 할당
def MyClass.my_function(self):
    ...

# 또는 인스턴스 속성에 할당
def my_instance.my_function(self):
    ...
</code></pre>
<p>표준 클래스 메서드(standard class method) 대신 이 기능을 사용해야 하는 여러 가지 이유가 있습니다. 예를 들어, 데코레이터(decorators)나 타입 힌트(typing)와 같이 클래스가 함수 헤더 내에서 참조되는 경우입니다. 또한 인스턴스가 콜백(callback) 속성을 필요로 할 때도 유용합니다.</p>
<pre><code class="language-python">class Menu:
    def __init__(self, items=None, select_callback=None):
        self.items = items if items is not None else []
        self.select_callback = select_callback

my_menu = Menu([item1, item2])

def my_menu.select_callback(item_index, menu):
    print(menu.items[item_index])
</code></pre>
<p>이는 다음과 같은 방식과 대조됩니다.</p>
<pre><code class="language-python">my_menu = Menu([item1, item2])

def select_callback(item_index, menu):
    print(menu.items[item_index])

my_menu.select_callback = select_callback
</code></pre>
<p>또는 "자연스럽지 않은" 순서로 정의하는 경우:</p>
<pre><code class="language-python">def select_callback(item_index, menu):
    print(menu.items[item_index])

my_menu = Menu([item1, item2], select_callback)
</code></pre>
<p>새로운 방식은 함수 정의 시 해당 함수가 무엇에 사용될지 이미 알고 있으므로, "자연스럽지 않은" 방식보다 더 잘 읽힙니다. 또한 한 줄의 코드를 절약하고 시각적인 복잡성을 줄여줍니다.</p>
<p>이 기능은 또한 함수의 이름이 전역 네임스페이스(global namespace)에 남는 것을 방지할 수 있습니다.</p>
<pre><code class="language-python">eggs = 'something'

def Spam.eggs(self):
    ...

def Cheese.eggs(self):
    ...

assert eggs == 'something'
</code></pre>
<p>이상적으로는 이것이 단순히 문법적 설탕(syntactic sugar)으로 작동할 것입니다.</p>
<pre><code class="language-python">def x.y():
    ...
# 아래와 동일
def y():
    ...
x.y = y
</code></pre>
<p>이는 데코레이터가 문법적 설탕으로 작동하는 방식과 유사합니다.</p>
<pre><code class="language-python">@decorate
def f():
    ...
# 아래와 동일
def f():
    ...
f = decorate(f)
</code></pre>
<h2>구현 (Implementation)</h2>
<p><code>__name__</code>은 일반 함수의 원칙을 따를 것입니다.</p>
<pre><code class="language-python">class MyClass:
    def my_function1(self):
        ...
    def MyClass.my_function2(self): # 제안된 문법
        ...

assert my_function1.__name__ == 'my_function1'
assert my_function2.__name__ == 'my_function2'
</code></pre>
<p>문법(grammar)은 속성 체인(chaining of attributes)을 지원하기 위해 <code>dotted_name</code>을 사용할 것입니다.</p>
<pre><code class="language-python">def Person.name.fset(self, value): # 'Person.name'과 같은 중첩된 속성 접근
    self._name = value
</code></pre>
<h2>하위 호환성 (Backwards Compatibility)</h2>
<p>이 PEP는 완벽하게 하위 호환됩니다.</p>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인(public domain)에 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Rejected] PEP 542 - Dot Notation Assignment In Function Header"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 23:30:04+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":[["$","div",null,{"className":"page__taxonomy mb-4","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"카테고리"}],[["$","span","Python",{"className":"page__taxonomy-item","children":"Python"}],["$","span","PEP",{"className":"page__taxonomy-item","children":"PEP"}]]]}],["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]]}]]}]}]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","21",{"name":"next-size-adjust"}]]
1:null
