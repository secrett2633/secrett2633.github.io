3:I[9275,[],""]
5:I[1343,[],""]
6:I[4281,["231","static/chunks/231-c4b666723e6aae68.js","185","static/chunks/app/layout-8808afda01b7a1b7.js"],"default"]
7:I[231,["231","static/chunks/231-c4b666723e6aae68.js","877","static/chunks/app/%5B...slug%5D/page-01b66e77b48ed573.js"],""]
4:["slug","python/pep/445","c"]
0:["iV6XySbMHIJ3imQdvgy3I",[[["",{"children":[["slug","python/pep/445","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"445\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/445","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_9012cf layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/secrett2633.github.io/_next/static/css/b9d6ec750ad82add.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T3beb,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0445/">PEP 445 - Add new APIs to customize Python memory allocators</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 15-Jun-2013</p>
</blockquote>
<h1>PEP 445 – Python 메모리 할당자 사용자 정의를 위한 새로운 API 추가</h1>
<h2>개요</h2>
<p>이 PEP는 Python 메모리 할당자를 사용자 정의하기 위한 새로운 애플리케이션 프로그래밍 인터페이스(API)를 제안합니다. 이 PEP를 준수해야 하는 유일한 구현체는 CPython이지만, 다른 구현체들도 호환되거나 유사한 방식을 재사용할 수 있습니다.</p>
<h2>도입 배경 (Rationale)</h2>
<p>사용자 정의 메모리 할당자를 사용하는 주요 목적은 다음과 같습니다.</p>
<ul>
<li><strong>Python 임베딩 애플리케이션:</strong> Python 메모리를 애플리케이션 자체의 메모리로부터 격리하거나, Python 사용에 최적화된 다른 메모리 할당자를 사용하려는 경우.</li>
<li><strong>저사양 임베디드 기기:</strong> 메모리가 부족하고 CPU 속도가 느린 임베디드 기기에서 Python을 실행할 때, 효율성을 높이거나 기기의 모든 메모리에 접근하기 위해 사용자 정의 메모리 할당자를 사용할 수 있습니다.</li>
<li><strong>메모리 할당자 디버그 도구:</strong>
<ul>
<li>메모리 사용량 추적 (메모리 누수 찾기)</li>
<li>메모리 할당 위치 파악: Python 파일명, 줄 번호, 메모리 블록 크기</li>
<li>버퍼 언더플로우(buffer underflow), 버퍼 오버플로우(buffer overflow), Python 할당자 API 오용 감지</li>
<li><code>MemoryError</code> 예외 처리 테스트를 위해 메모리 할당 실패를 강제</li>
</ul>
</li>
</ul>
<h2>제안 (Proposal)</h2>
<h3>새로운 함수 및 구조체 (New Functions and Structures)</h3>
<ol>
<li>
<p><strong>새로운 GIL-free 메모리 할당자 추가:</strong></p>
<ul>
<li><code>void* PyMem_RawMalloc(size_t size)</code></li>
<li><code>void* PyMem_RawRealloc(void *ptr, size_t new_size)</code></li>
<li><code>void PyMem_RawFree(void *ptr)</code>
새로 할당된 메모리는 어떤 식으로든 초기화되지 않습니다. 0바이트를 요청하면 가능한 경우 <code>PyMem_Malloc(1)</code>이 호출된 것처럼 고유한 <code>non-NULL</code> 포인터를 반환합니다. 이 할당자는 GIL(Global Interpreter Lock)을 보유할 필요가 없습니다.</li>
</ul>
</li>
<li>
<p><strong>새로운 <code>PyMemAllocator</code> 구조체 추가:</strong></p>
<pre><code class="language-c">typedef struct {
    void *ctx; /* 세 함수에 첫 번째 인자로 전달되는 사용자 컨텍스트 */
    void* (*malloc) (void *ctx, size_t size); /* 메모리 블록 할당 */
    void* (*realloc) (void *ctx, void *ptr, size_t new_size); /* 메모리 블록 할당 또는 크기 조정 */
    void (*free) (void *ctx, void *ptr); /* 메모리 블록 해제 */
} PyMemAllocator;
</code></pre>
</li>
<li>
<p><strong>새로운 <code>PyMemAllocatorDomain</code> Enum 추가:</strong>
Python 할당자 도메인을 선택하기 위한 Enum입니다.</p>
<ul>
<li><code>PYMEM_DOMAIN_RAW</code>: <code>PyMem_RawMalloc()</code>, <code>PyMem_RawRealloc()</code>, <code>PyMem_RawFree()</code>에 해당합니다.</li>
<li><code>PYMEM_DOMAIN_MEM</code>: <code>PyMem_Malloc()</code>, <code>PyMem_Realloc()</code>, <code>PyMem_Free()</code>에 해당합니다.</li>
<li><code>PYMEM_DOMAIN_OBJ</code>: <code>PyObject_Malloc()</code>, <code>PyObject_Realloc()</code>, <code>PyObject_Free()</code>에 해당합니다.</li>
</ul>
</li>
<li>
<p><strong>메모리 블록 할당자를 가져오고 설정하는 새로운 함수 추가:</strong></p>
<ul>
<li><code>void PyMem_GetAllocator(PyMemAllocatorDomain domain, PyMemAllocator *allocator)</code></li>
<li><code>void PyMem_SetAllocator(PyMemAllocatorDomain domain, PyMemAllocator *allocator)</code>
새로운 할당자는 0바이트를 요청할 때 고유한 <code>non-NULL</code> 포인터를 반환해야 합니다. <code>PYMEM_DOMAIN_RAW</code> 도메인의 경우, 할당자는 스레드 안전(thread-safe)해야 합니다. 할당자가 호출될 때 GIL이 유지되지 않습니다.</li>
</ul>
</li>
<li>
<p><strong>새로운 <code>PyObjectArenaAllocator</code> 구조체 추가:</strong></p>
<pre><code class="language-c">typedef struct {
    void *ctx; /* 두 함수에 첫 번째 인자로 전달되는 사용자 컨텍스트 */
    void* (*alloc) (void *ctx, size_t size); /* 아레나(arena) 할당 */
    void (*free) (void *ctx, void *ptr, size_t size); /* 아레나 해제 */
} PyObjectArenaAllocator;
</code></pre>
</li>
<li>
<p><strong><code>pymalloc</code>이 사용하는 아레나 할당자를 가져오고 설정하는 새로운 함수 추가:</strong></p>
<ul>
<li><code>void PyObject_GetArenaAllocator(PyObjectArenaAllocator *allocator)</code></li>
<li><code>void PyObject_SetArenaAllocator(PyObjectArenaAllocator *allocator)</code></li>
</ul>
</li>
<li>
<p><strong><code>PyMem_SetAllocator()</code>로 메모리 할당자를 교체할 때 디버그 검사를 다시 설치하는 새로운 함수 추가:</strong></p>
<ul>
<li><code>void PyMem_SetupDebugHooks(void)</code>
모든 메모리 블록 할당자에 디버그 훅을 설치합니다. 이 함수는 여러 번 호출될 수 있지만, 훅은 한 번만 설치됩니다. Python이 디버그 모드로 컴파일되지 않으면 함수는 아무것도 하지 않습니다.</li>
</ul>
</li>
</ol>
<p><strong>참고:</strong> <code>pymalloc</code> 할당자는 수명이 짧고 512바이트보다 작은 객체에 최적화되어 있습니다. 이는 "아레나(arenas)"라고 불리는 고정 크기 256KB 메모리 매핑을 사용합니다.</p>
<p>기본적으로 할당자는 다음과 같이 설정됩니다.</p>
<ul>
<li><code>PYMEM_DOMAIN_RAW</code>, <code>PYMEM_DOMAIN_MEM</code>: <code>malloc()</code>, <code>realloc()</code>, <code>free()</code>를 사용하며, 0바이트 요청 시 <code>malloc(1)</code>을 호출합니다.</li>
<li><code>PYMEM_DOMAIN_OBJ</code>: 512바이트보다 큰 할당의 경우 <code>PyMem_Malloc()</code>으로 폴백(fallback)하는 <code>pymalloc</code> 할당자입니다.</li>
<li><code>pymalloc</code> 아레나 할당자: Windows에서는 <code>VirtualAlloc()</code> 및 <code>VirtualFree()</code>를, 사용 가능한 경우 <code>mmap()</code> 및 <code>munmap()</code>을, 그 외에는 <code>malloc()</code> 및 <code>free()</code>를 사용합니다.</li>
</ul>
<h3>훅(Hooks)으로서의 메모리 블록 할당자 디버그 검사 재설계 (Redesign Debug Checks on Memory Block Allocators as Hooks)</h3>
<p>Python 2.3부터 Python은 디버그 모드에서 메모리 할당자에 대한 다양한 검사를 구현해왔습니다.</p>
<ul>
<li>새로 할당된 메모리는 <code>0xCB</code> 바이트로 채워지고, 해제된 메모리는 <code>0xDB</code> 바이트로 채워집니다.</li>
<li>API 위반 감지 (예: <code>PyMem_Malloc()</code>으로 할당된 메모리 블록에 <code>PyObject_Free()</code> 호출).</li>
<li>버퍼 시작 전 쓰기(buffer underflow), 버퍼 끝 후 쓰기(buffer overflow) 감지.</li>
</ul>
<p>Python 3.3에서는 매크로를 사용하여 <code>PyMem_Malloc()</code>, <code>PyMem_Realloc()</code>, <code>PyMem_Free()</code>, <code>PyObject_Malloc()</code>, <code>PyObject_Realloc()</code>, <code>PyObject_Free()</code>를 대체함으로써 검사가 설치되었습니다. 이 새로운 할당자는 더 큰 버퍼를 할당하고 버퍼 언더플로우, 버퍼 오버플로우, 해제 후 사용(use after free)을 감지하기 위한 패턴을 기록했습니다. 이는 메모리를 할당하기 위해 원래의 <code>PyObject_Malloc()</code> 함수를 사용했습니다.</p>
<p>이 PEP는 디버그 모드에서 기존 할당자에 대한 디버그 검사를 훅으로 재설계합니다.
그 결과, <code>PyMem_Malloc()</code>과 <code>PyMem_Realloc()</code>은 이제 디버그 모드에서 <code>PyObject_Malloc()</code>과 <code>PyObject_Realloc()</code>을 호출하는 대신, 릴리스 모드와 디버그 모드 모두에서 <code>malloc()</code>과 <code>realloc()</code>을 호출합니다.</p>
<h3>더 이상 <code>malloc()</code>을 직접 호출하지 않음 (Don't call malloc() directly anymore)</h3>
<p><code>PyObject_Malloc()</code>은 크기가 512바이트 이상일 경우 <code>malloc()</code> 대신 <code>PyMem_Malloc()</code>으로 폴백하며, <code>PyObject_Realloc()</code>은 <code>realloc()</code> 대신 <code>PyMem_Realloc()</code>으로 폴백합니다.</p>
<p><code>malloc()</code>에 대한 직접 호출은 <code>PyMem_Malloc()</code>으로 대체되거나, GIL이 유지되지 않는 경우 <code>PyMem_RawMalloc()</code>으로 대체됩니다.</p>
<p><code>zlib</code> 또는 <code>OpenSSL</code>과 같은 외부 라이브러리는 <code>PyMem_Malloc()</code> 또는 <code>PyMem_RawMalloc()</code>을 사용하여 메모리를 할당하도록 구성할 수 있습니다.</p>
<h3>예시 (Examples)</h3>
<h4>사용 사례 1: 메모리 할당자 교체, <code>pymalloc</code> 유지 (Replace Memory Allocators, keep pymalloc)</h4>
<p><code>PYMEM_DOMAIN_RAW</code>와 <code>PYMEM_DOMAIN_MEM</code> 도메인의 할당자를 사용자 정의 함수로 교체하지만, <code>PYMEM_DOMAIN_OBJ</code>는 <code>pymalloc</code>을 그대로 사용하도록 남겨두고 <code>pymalloc</code> 아레나 할당자만 사용자 정의 함수로 교체하는 예시가 제공됩니다.</p>
<h4>사용 사례 2: 메모리 할당자 교체, <code>pymalloc</code> 재정의 (Replace Memory Allocators, override pymalloc)</h4>
<p>512바이트보다 작은 객체 할당에 최적화된 전용 할당자가 있는 경우 <code>pymalloc</code>을 재정의(<code>PyObject_Malloc()</code> 교체)할 수 있습니다. 모든 도메인(<code>PYMEM_DOMAIN_RAW</code>, <code>PYMEM_DOMAIN_MEM</code>, <code>PYMEM_DOMAIN_OBJ</code>)의 할당자를 사용자 정의 함수로 교체하는 예시가 제공됩니다. 이 경우 <code>pymalloc</code> 아레나를 교체할 필요가 없습니다.</p>
<h4>사용 사례 3: 메모리 블록 할당자에 훅 설정 (Setup Hooks On Memory Block Allocators)</h4>
<p>모든 메모리 블록 할당자에 훅을 설정하는 예시가 제공됩니다. 이 경우 메모리 할당자가 교체되지 않으므로 <code>PyMem_SetupDebugHooks()</code>를 호출할 필요가 없습니다. 디버그 검사는 시작 시 자동으로 설치됩니다.</p>
<h2>성능 (Performances)</h2>
<p>이 PEP 구현은 Python 벤치마크 스위트에서 눈에 띄는 오버헤드(overhead)가 없습니다. 일부 테스트는 1.04배 빨라지고 일부 테스트는 1.04배 느려지는 결과가 나왔으며, <code>pybench</code> 마이크로벤치마크에서는 전반적으로 "+0.1%" 느려지는 것으로 나타났습니다.</p>
<h2>채택되지 않은 대안 (Rejected Alternatives)</h2>
<ul>
<li><strong>메모리 할당자를 가져오고 설정하는 더 구체적인 함수:</strong> 각 할당자 도메인마다 한 쌍의 함수를 제안했지만, 일반적인 코드 작성이 불가능하여 코드를 중복해야 하므로 거부되었습니다.</li>
<li><strong><code>PyMem_Malloc()</code>이 기본적으로 <code>PyMem_RawMalloc()</code>을 재사용하도록 만들기:</strong> <code>PyMem_SetAllocator()</code>가 도메인에 따라 다른 동작을 가질 수 있으므로, 일관된 동작을 위해 거부되었습니다.</li>
<li><strong>새로운 <code>PYDEBUGMALLOC</code> 환경 변수 추가:</strong> Python 초기화를 더욱 복잡하게 만들 수 있으므로 거부되었습니다.</li>
<li><strong>사용자 정의 가능한 할당자를 얻기 위해 매크로 사용:</strong> 매크로 사용은 확장 모듈을 재컴파일해야 하므로 실용적이지 않아 거부되었습니다.</li>
<li><strong>C 파일명 및 줄 번호 전달:</strong> 각 할당자 함수에 <code>__FILE__</code> 및 <code>__LINE__</code> 매크로를 사용하여 파일명과 줄 번호를 전달하는 것은 API를 너무 복잡하게 만들고, GC 할당자 함수도 수정해야 하는 등 복잡성 증가에 비해 얻는 이득이 적어 거부되었습니다.</li>
<li><strong>GIL-free <code>PyMem_Malloc()</code>:</strong> <code>PyMem_Malloc()</code>이 GIL 없이 호출될 수 있도록 허용하는 것은 사용자 정의 할당자나 훅을 설정하는 애플리케이션을 손상시킬 수 있고, GIL을 유지하는 것이 사용자 정의 할당자 개발 및 디버그 훅에 더 편리하므로 거부되었습니다.</li>
<li><strong><code>PyMem_RawMalloc()</code> 추가하지 않기:</strong> <code>PyMem_RawMalloc()</code>은 메모리 사용량에 대한 정확한 보고서를 위해 필요하며, GIL이 유지되지 않은 채 할당된 메모리를 포함하여 모든 Python 할당 메모리를 추적할 수 있도록 훅(hook)을 걸 수 있으므로 필요합니다.</li>
<li><strong>기존 디버그 도구 사용:</strong> 기존 도구는 Python 내부를 탐색하여 관련 정보를 수집할 수 없으며, 할당자에 훅을 설정하는 것이 더 유용한 데이터를 수집할 수 있으므로 거부되었습니다.</li>
<li><strong><code>msize()</code> 함수 추가:</strong> <code>PyMemAllocator</code> 및 <code>PyObjectArenaAllocator</code> 구조체에 메모리 블록 크기를 반환하는 <code>msize()</code> 함수를 추가하는 것을 제안했지만, 이를 구현하는 플랫폼이 거의 없고 Python 소스 코드에서 사용되지 않으며 API를 복잡하게 만들 뿐이므로 거부되었습니다.</li>
<li><strong><code>context</code> 인자 제거:</strong> 할당자 훅이 다른 할당자에 재사용될 때 컨텍스트를 통해 다른 함수를 호출해야 하므로, 컨텍스트 인자는 편의성을 위해 필요하여 제거되지 않았습니다.</li>
</ul>
<h2>외부 라이브러리 및 메모리 할당자 (External Libraries and Memory Allocators)</h2>
<p>이 PEP의 새로운 <code>ctx</code> 매개변수는 <code>zlib</code> 및 Oracle의 OCI 라이브러리 API에서 영감을 받았습니다.</p>
<p>C 표준 라이브러리는 잘 알려진 <code>malloc()</code> 함수를 제공하며, 그 구현은 플랫폼 및 C 라이브러리에 따라 다릅니다. (예: GNU C 라이브러리는 <code>ptmalloc2</code>, FreeBSD는 <code>jemalloc</code>, Google은 <code>tcmalloc</code> 사용).</p>
<p><code>malloc()</code>은 힙(heap)과 메모리 매핑(memory mappings) 두 종류의 메모리를 사용합니다. <code>pymalloc</code>은 512바이트보다 작은 객체에 최적화된 할당자이며, 256KB 크기의 "아레나"라고 불리는 메모리 매핑을 사용합니다.</p>
<p>이 PEP는 애플리케이션의 메모리 사용량(할당 횟수, 할당 크기, 객체 수명 등)에 따라 어떤 메모리 할당자를 사용할지 정확하게 선택할 수 있도록 합니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 445 - Add new APIs to customize Python memory allocators"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 21:58:25+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":[["$","div",null,{"className":"page__taxonomy mb-4","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"카테고리"}],[["$","span","Python",{"className":"page__taxonomy-item","children":"Python"}],["$","span","PEP",{"className":"page__taxonomy-item","children":"PEP"}]]]}],["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]]}]]}]}]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","21",{"name":"next-size-adjust"}]]
1:null
