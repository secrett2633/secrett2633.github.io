3:I[9275,[],""]
5:I[1343,[],""]
6:I[4281,["231","static/chunks/231-c4b666723e6aae68.js","185","static/chunks/app/layout-8808afda01b7a1b7.js"],"default"]
7:I[231,["231","static/chunks/231-c4b666723e6aae68.js","877","static/chunks/app/%5B...slug%5D/page-01b66e77b48ed573.js"],""]
4:["slug","python/pep/405","c"]
0:["iV6XySbMHIJ3imQdvgy3I",[[["",{"children":[["slug","python/pep/405","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"405\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/405","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_9012cf layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/secrett2633.github.io/_next/static/css/b9d6ec750ad82add.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T488c,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0405/">PEP 405 - Python Virtual Environments</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 13-Jun-2011</p>
</blockquote>
<h2>PEP 405 – Python 가상 환경</h2>
<p>이 문서는 Python 3.3에 도입된 내장 가상 환경(<code>venv</code>) 메커니즘을 설명하는 PEP 405에 대한 한국어 번역 및 요약입니다. 이 PEP는 기존 서드파티 가상 환경 도구의 한계를 극복하고, Python 자체에 경량의 가상 환경 기능을 통합하여 개발자들이 의존성 관리 및 프로젝트 격리를 보다 쉽고 안정적으로 수행할 수 있도록 돕는 것을 목표로 합니다.</p>
<h3>개요 (Abstract)</h3>
<p>이 PEP는 자체 <code>site-packages</code> 디렉토리를 가지며, 시스템 <code>site-packages</code> 디렉토리와 선택적으로 격리될 수 있는 경량 "가상 환경(virtual environments)" 메커니즘을 Python에 추가할 것을 제안합니다. 각 가상 환경은 자체 Python 바이너리(다양한 Python 버전으로 환경 생성을 허용)를 가지며, <code>site-packages</code> 디렉토리에 자체적으로 설치된 독립적인 Python 패키지 세트를 가질 수 있지만, 기본 설치된 Python과 표준 라이브러리를 공유합니다.</p>
<h3>동기 (Motivation)</h3>
<p>Python 가상 환경의 유용성은 Ian Bicking의 <code>virtualenv</code>를 비롯한 기존 서드파티 가상 환경 도구의 인기를 통해 이미 잘 확립되었습니다. 가상 환경은 의존성 관리 및 격리, 시스템 관리자 권한 없이 Python 패키지를 쉽게 설치하고 사용하는 용이성, 여러 Python 버전에서 Python 소프트웨어의 자동화된 테스트 등 다양한 용도로 널리 사용되고 있습니다.</p>
<p>그러나 기존 가상 환경 도구는 Python 자체의 동작 지원 부족으로 어려움을 겪었습니다. 예를 들어, <code>rvirtualenv</code>와 같이 Python 바이너리를 가상 환경으로 복사하지 않는 도구는 시스템 <code>site-packages</code> 디렉토리로부터 신뢰할 수 있는 격리를 제공할 수 없었습니다. <code>virtualenv</code>와 같이 Python 바이너리를 복사하는 도구는 Python의 <code>site</code> 모듈의 많은 부분을 복제하고, 끊임없이 변경되는 표준 라이브러리 모듈 세트를 시작할 때마다 수동으로 심볼릭 링크/복사해야 하는 부담이 있었습니다.</p>
<p><code>PYTHONHOME</code> 환경 변수는 Python의 유일한 기존 내장 가상 환경 솔루션이었지만, 전체 표준 라이브러리를 모든 환경에 복사/심볼릭 링크해야 하는 단점이 있었습니다. 이는 경량 솔루션이 아니며, 심볼릭 링크에 대한 크로스 플랫폼 지원은 여전히 일관성이 없었습니다.</p>
<p>Python에 통합되고 기존 서드파티 도구의 수년간 경험을 바탕으로 한 가상 환경 메커니즘은 유지보수 비용을 낮추고, 안정성을 높이며, 모든 Python 사용자가 더 쉽게 사용할 수 있게 할 것입니다.</p>
<h3>사양 (Specification)</h3>
<p>Python 바이너리가 실행될 때, <code>sys.prefix</code>에 저장될 접두사(prefix)를 결정하려고 시도합니다. 이 접두사는 표준 라이브러리 및 기타 주요 파일을 찾는 데 사용되며, <code>site</code> 모듈에 의해 <code>site-packages</code> 디렉토리의 위치를 결정하는 데 사용됩니다.</p>
<p>이 PEP는 이 검색에 새로운 첫 단계를 추가할 것을 제안합니다. Python 실행 파일과 인접하거나 한 디렉토리 위에 <code>pyvenv.cfg</code> 파일이 발견되면, 이 파일은 <code>key = value</code> 형식의 줄을 스캔합니다. <code>home</code> 키가 발견되면, 이는 Python 바이너리가 가상 환경에 속함을 의미하며, <code>home</code> 키의 값은 이 가상 환경을 생성하는 데 사용된 Python 실행 파일을 포함하는 디렉토리입니다.</p>
<p>이 경우, <code>home</code> 키의 값을 유효한 Python 바이너리 위치로 사용하여 기본 설치의 접두사를 찾는 방식으로 <code>prefix</code> 찾기가 정상적으로 진행됩니다. <code>sys.base_prefix</code>는 이 값으로 설정되고, <code>sys.prefix</code>는 <code>pyvenv.cfg</code> 파일을 포함하는 디렉토리로 설정됩니다. (<code>pyvenv.cfg</code> 파일이 없거나 <code>home</code> 키를 포함하지 않으면 <code>prefix</code> 찾기는 정상적으로 진행되며, <code>sys.prefix</code>는 <code>sys.base_prefix</code>와 동일하게 됩니다.)</p>
<p>또한, <code>sys.base_exec_prefix</code>가 추가되고 <code>sys.exec_prefix</code>와 유사하게 처리됩니다. (<code>sys.exec_prefix</code>는 <code>sys.prefix</code>와 동일하지만 플랫폼 특정 파일용입니다. 기본적으로 <code>sys.prefix</code>와 동일한 값을 가집니다.)</p>
<p><code>site</code> 및 <code>sysconfig</code> 표준 라이브러리 모듈은 표준 라이브러리 및 헤더 파일이 <code>sys.base_prefix</code>/<code>sys.base_exec_prefix</code>를 기준으로 찾아지도록 수정됩니다. 반면 <code>site-packages</code> 디렉토리(<code>sysconfig</code> 용어로 "purelib" 및 "platlib")는 여전히 <code>sys.prefix</code>/<code>sys.exec_prefix</code>를 기준으로 찾아집니다.</p>
<p>따라서 가장 간단한 형태의 Python 가상 환경은 Python 바이너리의 복사본 또는 심볼릭 링크와 <code>pyvenv.cfg</code> 파일, 그리고 <code>site-packages</code> 디렉토리만으로 구성됩니다.</p>
<h4>시스템 <code>site-packages</code>로부터의 격리 (Isolation from system site-packages)</h4>
<p>기본적으로 가상 환경은 시스템 수준 <code>site-packages</code> 디렉토리로부터 완전히 격리됩니다.</p>
<p><code>pyvenv.cfg</code> 파일에 <code>include-system-site-packages</code> 키가 <code>true</code>(대소문자 구분 없음) 값으로 포함되어 있으면, <code>site</code> 모듈은 가상 환경 <code>site-packages</code> 디렉토리 이후에 시스템 <code>site</code> 디렉토리도 <code>sys.path</code>에 추가합니다. 따라서 시스템에 설치된 패키지를 여전히 가져올 수 있지만, 가상 환경에 설치된 동일한 이름의 패키지가 우선권을 가집니다.</p>
<p>PEP 370 사용자 수준 <code>site-packages</code>는 <code>venv</code> 목적상 시스템 <code>site-packages</code>의 일부로 간주됩니다. 이는 격리된 <code>venv</code>에서는 사용할 수 없지만, <code>include-system-site-packages = true</code> <code>venv</code>에서는 사용할 수 있습니다.</p>
<h4>가상 환경 생성 (Creating virtual environments)</h4>
<p>이 PEP는 가상 환경 생성을 구현하는 새로운 <code>venv</code> 모듈을 표준 라이브러리에 추가할 것을 제안합니다. 이 모듈은 <code>-m</code> 플래그를 사용하여 실행할 수 있습니다.</p>
<pre><code class="language-bash">python3 -m venv /path/to/new/virtual/environment
</code></pre>
<p>더 편리하게 사용하기 위해 <code>pyvenv</code> 설치 스크립트도 제공됩니다.</p>
<pre><code class="language-bash">pyvenv /path/to/new/virtual/environment
</code></pre>
<p>이 명령을 실행하면 대상 디렉토리가 생성되고(<code>pyvenv.cfg</code>) 파일이 배치되며, <code>home</code> 키는 명령이 실행된 Python 설치를 가리킵니다. 또한 <code>bin/</code> (Windows에서는 <code>Scripts</code>) 하위 디렉토리를 생성하여 <code>python3</code> 실행 파일의 복사본(또는 심볼릭 링크)과 패키징 표준 라이브러리 모듈의 <code>pysetup3</code> 스크립트(PyPI에서 새 <code>venv</code>로 패키지를 쉽게 설치할 수 있도록)를 포함합니다. 그리고 (초기에는 비어 있는) <code>lib/pythonX.Y/site-packages</code> (Windows에서는 <code>Lib\site-packages</code>) 하위 디렉토리를 생성합니다.</p>
<p>대상 디렉토리가 이미 존재하는 경우 오류가 발생하지만, <code>--clear</code> 옵션을 제공하면 대상 디렉토리가 삭제되고 가상 환경 생성이 정상적으로 진행됩니다.</p>
<p>생성된 <code>pyvenv.cfg</code> 파일에는 <code>include-system-site-packages</code> 키도 포함되며, <code>pyvenv</code>가 <code>--system-site-packages</code> 옵션으로 실행되면 <code>true</code>로, 기본적으로 <code>false</code>로 설정됩니다.</p>
<p>여러 경로를 <code>pyvenv</code>에 제공할 수 있으며, 이 경우 주어진 옵션에 따라 각 제공된 경로에 동일한 <code>venv</code>가 생성됩니다.</p>
<p><code>venv</code> 모듈은 POSIX 및 Windows 시스템용 "셸 활성화 스크립트"도 <code>venv</code>의 <code>bin</code> 또는 <code>Scripts</code> 디렉토리에 배치합니다. 이 스크립트는 단순히 가상 환경의 <code>bin</code> (또는 <code>Scripts</code>) 디렉토리를 사용자 셸 <code>PATH</code>의 맨 앞에 추가합니다. 이는 가상 환경을 사용하는 데 엄격하게 필요하지는 않지만(<code>venv</code>의 <code>python</code> 바이너리 또는 스크립트에 대한 명시적 경로를 사용할 수도 있기 때문에), 편리합니다.</p>
<p>가상 환경에 서드파티 패키지가 설치되면 Python 모듈은 <code>site-packages</code> 디렉토리에, 실행 파일은 <code>bin/</code> 또는 <code>Scripts</code>에 배치됩니다.</p>
<h4>Sysconfig 설치 스키마 및 사용자 사이트 (Sysconfig install schemes and user-site)</h4>
<p>이 접근 방식은 <code>venv</code>를 위한 새로운 <code>sysconfig</code> 설치 스키마를 도입하지 않기로 명시적으로 선택합니다. 대신 <code>sys.prefix</code>를 수정하여 <code>sys.prefix</code>에 기반한 기존 설치 스키마가 <code>venv</code>에서 단순히 작동하도록 합니다. <code>sys.prefix</code>와 관련 없는 경로를 가진 다른 설치 스키마(예: 사용자 사이트 스키마)로의 설치는 <code>venv</code>에 전혀 영향을 받지 않습니다.</p>
<h4>복사본 대 심볼릭 링크 (Copies versus symlinks)</h4>
<p>이 PEP의 기술은 복사되거나 심볼릭 링크된 Python 바이너리(및 Windows에서 필요한 기타 DLL)와 일반적으로 동일하게 작동합니다. 가능한 경우 심볼릭 링크가 더 좋지만, 기본 Python 설치가 업그레이드되는 경우 <code>venv</code>에 복사된 Python 실행 파일이 설치된 표준 라이브러리와 동기화되지 않아 수동 업그레이드가 필요할 수 있습니다.</p>
<p>심볼릭 링크에는 몇 가지 크로스 플랫폼 어려움이 있습니다. 모든 Windows 버전이 심볼릭 링크를 지원하지는 않으며, 지원하는 버전에서도 심볼릭 링크를 생성하려면 종종 관리자 권한이 필요합니다. OS X 프레임워크 빌드의 Python에서 <code>sys.executable</code>은 실제 Python 바이너리를 실행하는 스텁에 불과합니다. 이 스텁을 심볼릭 링크하는 것은 작동하지 않으며, 복사해야 합니다.</p>
<p>따라서 이 PEP는 Windows 및 OS X 프레임워크 빌드를 제외한 모든 플랫폼에서 바이너리를 심볼릭 링크할 것을 제안합니다. <code>--symlink</code> 옵션은 적절한 권한이 있는 경우 심볼릭 링크를 지원하는 Windows 버전에서 심볼릭 링크 사용을 강제하는 데 사용할 수 있습니다.</p>
<p>Windows에서 <code>--symlink</code>를 사용하지 않으면, 기본 Python 설치가 업그레이드될 때 <code>venv</code>의 Python 바이너리 및 DLL을 업데이트해야 합니다. 그렇지 않으면 업그레이드된 표준 라이브러리와의 불일치 문제가 발생할 수 있습니다. <code>pyvenv</code> 스크립트는 기존 <code>venv</code>에 대한 이러한 업그레이드를 쉽게 수행하기 위한 <code>--upgrade</code> 옵션을 허용합니다.</p>
<h4>인클루드 파일 (Include files)</h4>
<p>현재 <code>virtualenv</code>는 인클루드 파일을 다음과 같이 처리합니다.</p>
<ul>
<li>POSIX 시스템에서 설치된 Python의 인클루드 파일이 <code>${base_prefix}/include/pythonX.X</code>에 있는 경우, <code>virtualenv</code>는 <code>${venv}/include/</code>를 생성하고 <code>${base_prefix}/include/pythonX.X</code>를 <code>${venv}/include/pythonX.X</code>에 심볼릭 링크합니다.</li>
<li>Windows에서 Python의 인클루드 파일이 {% raw %}<code>{{ sys.prefix }}</code>{% endraw %}/Include에 있고 심볼릭 링크를 안정적으로 사용할 수 없는 경우, <code>virtualenv</code>는 {% raw %}<code>{{ sys.prefix }}</code>{% endraw %}/Include를 <code>${venv}/Include</code>로 복사합니다.</li>
</ul>
<p>이 PEP는 이와는 약간 다른 접근 방식을 제안합니다. 인클루드 파일을 <code>venv</code>에 심볼릭 링크하거나 복사하는 대신, 헤더 파일이 <code>prefix</code> 대신 <code>base_prefix</code>를 기준으로 항상 찾아지도록 <code>sysconfig</code> 스키마를 수정합니다. (또한 <code>venv</code> 내에 <code>include/</code> 디렉토리를 생성하여 설치 프로그램이 환경 내에 설치된 인클루드 파일을 배치할 수 있도록 합니다.)</p>
<h4>API (API)</h4>
<p>위에서 설명한 상위 수준 메서드는 서드파티 가상 환경 생성자가 필요에 따라 환경 생성을 사용자 정의할 수 있는 메커니즘을 제공하는 간단한 API를 사용합니다.</p>
<p><code>venv</code> 모듈에는 인스턴스화 시 다음 키워드 인수를 허용하는 <code>EnvBuilder</code> 클래스가 포함되어 있습니다.</p>
<ul>
<li><code>system_site_packages</code>: 시스템 Python <code>site-packages</code>를 환경에서 사용할 수 있는지 여부를 나타내는 부울 값입니다. 기본값은 <code>False</code>입니다.</li>
<li><code>clear</code>: <code>true</code>인 경우 예외를 발생시키는 대신 기존 대상 디렉토리를 삭제하는 부울 값입니다. 기본값은 <code>False</code>입니다.</li>
<li><code>symlinks</code>: Python 바이너리(및 필요한 DLL 또는 기타 바이너리, 예: <code>pythonw.exe</code>)를 복사하는 대신 심볼릭 링크를 시도할지 여부를 나타내는 부울 값입니다. 기본값은 <code>False</code>입니다.</li>
</ul>
<p>인스턴스화된 <code>env-builder</code>에는 <code>create</code> 메서드가 있으며, 이는 가상 환경을 포함할 대상 디렉토리의 경로(절대 경로 또는 현재 디렉토리에 대한 상대 경로)를 필수 인수로 받습니다. <code>create</code> 메서드는 지정된 디렉토리에 환경을 생성하거나 적절한 예외를 발생시킵니다.</p>
<p><code>venv</code> 모듈은 편의를 위해 모듈 수준 <code>create</code> 함수도 제공합니다.</p>
<pre><code class="language-python">def create(env_dir, system_site_packages=False, clear=False, use_symlinks=False):
    builder = EnvBuilder(
        system_site_packages=system_site_packages,
        clear=clear,
        use_symlinks=use_symlinks)
    builder.create(env_dir)
</code></pre>
<p>서드파티 가상 환경 도구 개발자는 제공된 <code>EnvBuilder</code> 클래스를 기본 클래스로 자유롭게 사용할 수 있습니다. <code>EnvBuilder</code> 클래스의 <code>create</code> 메서드는 사용자 정의에 사용할 수 있는 훅을 보여줍니다.</p>
<pre><code class="language-python">def create(self, env_dir):
    """
    Create a virtualized Python environment in a directory.
    :param env_dir: The target directory to create an environment in.
    """
    env_dir = os.path.abspath(env_dir)
    context = self.create_directories(env_dir)
    self.create_configuration(context)
    self.setup_python(context)
    self.post_setup(context)
</code></pre>
<p><code>create_directories</code>, <code>create_configuration</code>, <code>setup_python</code>, <code>post_setup</code> 각 메서드는 오버라이드할 수 있습니다.</p>
<h3>하위 호환성 (Backwards Compatibility)</h3>
<h4><code>sys.prefix</code> 의미 분리 (Splitting the meanings of sys.prefix)</h4>
<p>이러한 방식의 가상 환경 도구는 현재 <code>sys.prefix</code>에 모두 포함되어 있는 두 가지 의미를 분리할 것을 제안합니다. 즉, "표준 라이브러리는 어디에 있습니까?"와 "서드파티 모듈을 설치해야 하는 <code>site-packages</code> 위치는 어디입니까?"라는 질문에 대한 답입니다.</p>
<p>이 PEP는 <code>sys.prefix</code>가 가상 환경(여기서 <code>site-packages</code>가 발견됨)을 가리키고, <code>sys.base_prefix</code>는 표준 라이브러리 및 Python 헤더 파일을 가리키도록 하여 <code>sys.prefix</code>의 문서화된 정의를 수정하는 것을 선호합니다.</p>
<p>이 선택에 대한 근거는 다음과 같습니다.</p>
<ul>
<li>가상 환경의 더 큰 격리 측면에서 오류를 범하는 것이 좋습니다.</li>
<li><code>virtualenv</code>는 이미 <code>sys.prefix</code>를 가상 환경을 가리키도록 수정했으며, 실제로는 문제가 되지 않았습니다.</li>
<li><code>setuptools</code>/<code>distribute</code>에는 수정이 필요하지 않습니다.</li>
</ul>
<h4>다른 Python 구현에 미치는 영향 (Impact on other Python implementations)</h4>
<p>이 PEP의 변경 사항 대부분은 다른 Python 구현과 공유되는 표준 라이브러리에서 발생하며 문제가 되지 않을 것입니다.</p>
<p>다른 Python 구현은 <code>pyvenv.cfg</code> 파일이 있는 경우 이를 찾고 구문 분석하는 것을 포함하여 인터프리터 부트스트랩의 새로운 <code>sys.prefix</code> 검색 동작을 복제해야 합니다.</p>
<h3>참조 구현 (Reference Implementation)</h3>
<p>참조 구현은 CPython Mercurial 저장소의 클론에서 찾을 수 있습니다. 테스트하려면 <code>bin/pyvenv /path/to/new/venv</code>를 빌드하고 실행하여 가상 환경을 생성합니다.</p>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 공개 도메인에 배치되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 405 - Python Virtual Environments"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 21:28:37+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":[["$","div",null,{"className":"page__taxonomy mb-4","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"카테고리"}],[["$","span","Python",{"className":"page__taxonomy-item","children":"Python"}],["$","span","PEP",{"className":"page__taxonomy-item","children":"PEP"}]]]}],["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]]}]]}]}]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","21",{"name":"next-size-adjust"}]]
1:null
