3:I[9275,[],""]
5:I[1343,[],""]
6:I[4281,["231","static/chunks/231-c4b666723e6aae68.js","185","static/chunks/app/layout-8808afda01b7a1b7.js"],"default"]
7:I[231,["231","static/chunks/231-c4b666723e6aae68.js","877","static/chunks/app/%5B...slug%5D/page-01b66e77b48ed573.js"],""]
4:["slug","python/pep/321","c"]
0:["iV6XySbMHIJ3imQdvgy3I",[[["",{"children":[["slug","python/pep/321","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"321\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/321","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_9012cf layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/secrett2633.github.io/_next/static/css/b9d6ec750ad82add.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T1b70,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0321/">PEP 321 - Date/Time Parsing and Formatting</a></p>
<p><strong>상태:</strong> Withdrawn | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 16-Sep-2003</p>
</blockquote>
<h1>PEP 321: 날짜/시간 구문 분석 및 형식 지정 (Date/Time Parsing and Formatting)</h1>
<h2>개요</h2>
<p>PEP 321은 Python의 <code>datetime</code> 모듈에 문자열 형태의 날짜 및 시간을 파싱(구문 분석)하고, 다양한 형식으로 출력하는 기능을 추가하는 것을 제안했던 문서입니다. 이 제안은 <code>datetime</code> 모듈에 미리 정의된 여러 일반적인 날짜 및 시간 형식에 대한 파싱 함수와, 더 범용적인 파싱 기능을 추가하는 것을 목표로 했습니다.</p>
<p><strong>상태:</strong> Withdrawn (철회됨)
<strong>작성일:</strong> 2003년 9월 16일
<strong>Python 버전:</strong> 2.4</p>
<h2>도입 배경</h2>
<p>Python 2.3에서 <code>datetime</code> 모듈에 간단한 날짜 및 시간 타입이 추가되었지만, 다양한 형식의 문자열을 파싱하여 해당 <code>datetime</code> 타입 인스턴스로 반환하는 기능은 없었습니다. 또한 <code>datetime</code> 모듈의 타입들은 <code>.isoformat()</code> 및 <code>.ctime()</code> 메서드를 통해 문자열 표현을 반환하고, <code>.strftime()</code> 메서드를 사용하여 새로운 형식을 구성할 수 있었지만, 표준 라이브러리에 포함되면 유용할 추가적인 일반 사용 형식들이 있었습니다. 이 PEP는 이러한 부족한 점을 해결하고자 제안되었습니다.</p>
<h2>입력 형식 (Input Formats)</h2>
<p>PEP 321에서 지원할 만한 유용한 입력 형식으로 다음과 같은 것들이 제안되었습니다.</p>
<ul>
<li><strong>ISO8601:</strong> 국제 표준 날짜 및 시간 형식.</li>
<li><strong>ARPA/RFC 2822:</strong> 이메일 등에 사용되는 날짜 형식.</li>
<li><strong>ctime:</strong> 운영체제에서 자주 사용되는 짧은 날짜/시간 형식.</li>
<li><strong>사람이 흔히 작성하는 형식:</strong>
<ul>
<li>미국식 "MM/DD/YYYY"</li>
<li>유럽식 "YYYY/MM/DD"</li>
<li>"DD-Month-YYYY"와 같은 변형.</li>
</ul>
</li>
<li><strong>CVS 또는 tar 스타일 날짜:</strong> "tomorrow", "12 hours ago" 등 상대적인 시간 표현.</li>
</ul>
<p><strong>고려되었던 옵션들:</strong></p>
<ul>
<li><strong><code>datetime</code> 모듈에 함수 추가:</strong>
<pre><code class="language-python">import datetime
d = datetime.parse_iso8601("2003-09-15T10:34:54")
</code></pre>
</li>
<li><strong>각 타입에 클래스 메서드 추가:</strong> <code>.now()</code>와 같은 기존 클래스 메서드들과 자연스럽게 어울릴 수 있다고 보았습니다.
<pre><code class="language-python">import datetime
d = datetime.date.parse_iso8601("2003-09-15T10:34:54")
</code></pre>
</li>
<li><strong>별도의 모듈 또는 서브패키지 추가:</strong> <code>date</code>, <code>date_parse</code>, <code>parse_date</code> 등의 모듈이나 <code>datetime.parser</code>와 같은 서브패키지에 파싱 함수를 포함.
<pre><code class="language-python">import datetime
d = datetime.parser.parse_iso8601("2003-09-15T10:34:54")
</code></pre>
</li>
</ul>
<p><strong>미해결 질문들:</strong></p>
<ul>
<li>사용할 명명 규칙 (Naming convention).</li>
<li>오류 발생 시 어떤 예외(exception)를 발생시킬 것인가? <code>ValueError</code> 또는 특정 예외?</li>
<li>파싱 전에 어떤 타입을 예상하는지 알아야 하는가, 아니면 파싱 자체가 타입을 결정해야 하는가? (예: "yyyy-mm-dd"는 <code>date</code> 인스턴스를 반환하고, "yyyy-mm-ddThh:mm:ss"는 <code>datetime</code>을 반환).</li>
<li>시간이 예상되지 않는 곳에 시간이 제공되거나, 시간이 제공되지 않을 경우 오류를 알리는 옵션이 필요한가?</li>
<li>국제화(I18N) 및 시간대(time zones) 처리를 위한 특별한 요구사항이 있는가?</li>
</ul>
<h2>범용 입력 파싱 (Generic Input Parsing)</h2>
<p><code>datetime</code> 타입을 반환하는 <code>strptime()</code> 구현으로 충분한지에 대한 질문이 있었습니다. 기존 순수 Python으로 구현된 <code>strptime()</code>이 쉽게 재활용될 수 있는지도 논의되었습니다.</p>
<h2>출력 형식 (Output Formats)</h2>
<p>모든 입력 형식이 출력 형식으로 지원될 필요는 없다고 보았습니다. <code>YYYY/MM/DD</code>와 같은 간단한 형식은 <code>strftime()</code> 인수를 통해 쉽게 처리할 수 있기 때문에, 복잡한 형식(예: RFC 2822)만 지원할 것을 고려했습니다.</p>
<p><strong>고려되었던 옵션들:</strong></p>
<ul>
<li><strong>미리 정의된 형식 문자열 제공:</strong>
<pre><code class="language-python">import datetime
d = datetime.datetime(...)
print d.strftime(d.RFC2822_FORMAT) # 또는 datetime.RFC2822_FORMAT?
</code></pre>
</li>
<li><strong>모든 객체에 새로운 메서드 제공:</strong>
<pre><code class="language-python">d = datetime.datetime(...)
print d.rfc822_time()
</code></pre>
</li>
</ul>
<h2>결론</h2>
<p>PEP 321은 <code>datetime</code> 모듈의 파싱 및 형식 지정 기능을 확장하려는 중요한 시도였지만, 최종적으로 철회되었습니다. 하지만 이 PEP에서 논의되었던 많은 아이디어와 요구사항은 이후 Python의 <code>datetime</code> 모듈 기능 개선에 영향을 미쳤을 것으로 추정됩니다. 특히, <code>strptime</code>의 필요성에 대한 언급은 현재 <code>datetime</code> 모듈의 <code>datetime.strptime()</code> 메서드의 중요성을 시사합니다.</p>
<h2>참고 자료 (References)</h2>
<ul>
<li><a href="https://peps.python.org/pep-0321/">PEP 321 원문</a></li>
<li>mxDateTime: <a href="http://www.egenix.com/files/python/mxDateTime.html">http://www.egenix.com/files/python/mxDateTime.html</a></li>
<li>PHP date function (Python implementation by Simon Willison): <a href="http://simon.incutio.com/archive/2003/10/07/dateInPython">http://simon.incutio.com/archive/2003/10/07/dateInPython</a></li>
<li>기타 시간 형식 관련 링크
<ul>
<li><a href="http://ringmaster.arc.nasa.gov/tools/time_formats.html">http://ringmaster.arc.nasa.gov/tools/time_formats.html</a></li>
<li><a href="http://www.thinkage.ca/english/gcos/expl/b/lib/0tosec.html">http://www.thinkage.ca/english/gcos/expl/b/lib/0tosec.html</a></li>
<li><a href="https://moin.conectiva.com.br/DateUtil">https://moin.conectiva.com.br/DateUtil</a></li>
</ul>
</li>
</ul>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인(public domain)으로 지정되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Withdrawn] PEP 321 - Date/Time Parsing and Formatting"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 18:30:01+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":[["$","div",null,{"className":"page__taxonomy mb-4","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"카테고리"}],[["$","span","Python",{"className":"page__taxonomy-item","children":"Python"}],["$","span","PEP",{"className":"page__taxonomy-item","children":"PEP"}]]]}],["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]]}]]}]}]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","21",{"name":"next-size-adjust"}]]
1:null
