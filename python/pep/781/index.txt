3:I[9275,[],""]
5:I[1343,[],""]
6:I[4281,["231","static/chunks/231-c4b666723e6aae68.js","185","static/chunks/app/layout-8808afda01b7a1b7.js"],"default"]
7:I[231,["231","static/chunks/231-c4b666723e6aae68.js","877","static/chunks/app/%5B...slug%5D/page-01b66e77b48ed573.js"],""]
4:["slug","python/pep/781","c"]
0:["iV6XySbMHIJ3imQdvgy3I",[[["",{"children":[["slug","python/pep/781","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"781\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/781","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_9012cf layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/secrett2633.github.io/_next/static/css/b9d6ec750ad82add.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T3afa,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0781/">PEP 781 - MakeTYPE_CHECKINGa built-in constant</a></p>
<p><strong>상태:</strong> Draft | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 24-Mar-2025</p>
</blockquote>
<h1>PEP 781 – <code>TYPE_CHECKING</code>을 내장(Built-in) 상수로 만들기</h1>
<h2>개요</h2>
<p>이 문서는 Python 3.15에 도입될 예정인 <code>PEP 781 – Make TYPE_CHECKING a built-in constant</code>에 대한 번역 및 요약본입니다. 이 PEP는 <code>TYPE_CHECKING</code>이라는 새로운 내장 변수를 추가하여, Python 코드에 타입 어노테이션(type annotations)을 작성하는 경험을 개선하는 것을 목표로 합니다. 이 변수는 정적 타입 체커(static type checker)가 코드를 분석할 때는 <code>True</code>로 평가되고, 일반적인 런타임 실행 중에는 <code>False</code>로 평가됩니다. 기존의 <code>typing.TYPE_CHECKING</code>과는 달리, 별도의 import 문이 필요 없다는 것이 주요 특징입니다.</p>
<h2>도입 배경 (Motivation)</h2>
<h3>타입 어노테이션과 임포트(Import) 부담</h3>
<p>PEP 484에서 정의된 타입 어노테이션은 Python 커뮤니티에서 널리 채택되었습니다. 하지만 타입 어노테이션이 완전히 적용된 코드는 필요한 이름을 스코프(scope)로 가져오기 위해 더 많은 임포트가 필요하며, 신중하게 설계하지 않으면 임포트 사이클(import cycles)을 유발할 수 있다는 문제가 있었습니다. 이러한 문제는 PEP 563 및 PEP 649를 통해 타입 어노테이션의 지연 평가(deferred evaluation) 메커니즘이 도입되면서 어느 정도 해소되었습니다. PEP 563에서 언급했듯이 "타입 힌트는 … 계산적으로 무료가 아니다"라는 점은 중요한 부분입니다. 이에 따라 처음에는 순환 임포트를 해결하는 데 도움을 주기 위해 <code>typing.TYPE_CHECKING</code> 상수가 도입되었습니다.</p>
<h3><code>typing</code> 모듈 임포트의 성능 문제</h3>
<p>명령줄 인터페이스, 애플리케이션 또는 핵심 라이브러리와 같이 시작 시간(startup time)이 중요한 상황에서, 개발자들은 런타임 실행에 필요 없는 모든 임포트 문을 <code>TYPE_CHECKING</code> 블록 내에 배치하거나, 특정 임포트를 함수 내로 지연시키곤 했습니다. 그러나 <code>typing</code> 모듈 자체를 임포트하는 데 최대 10ms가 소요될 수 있는데, 이는 Python이 초기화되는 시간보다 길 수 있습니다. <code>typing</code> 모듈을 임포트하는 데 걸리는 시간은 분명히 무시할 수 없는 수준입니다.</p>
<h3>표준화된 접근 방식의 필요성</h3>
<p>현재 개발자들은 <code>typing</code>에서 <code>TYPE_CHECKING</code>을 임포트하는 것을 피하기 위해 <code>TYPE_CHECKING = False</code>와 같은 모듈 수준 변수를 정의하거나 <code>if False: # TYPE_CHECKING</code>과 같은 코드를 사용합니다. 표준화된 방법을 제공하면 많은 도구가 동일한 동작을 일관되게 구현할 수 있습니다. 또한, 일부 정적 타입 체커가 로컬 상수(local constants)를 허용하지 않고 <code>typing.TYPE_CHECKING</code>만 인식하는 경우가 있으므로, 보장된 의미론(guaranteed semantics)을 가진 단일 동작으로 생태계 내의 서드파티 도구들을 표준화할 수 있게 됩니다.</p>
<h2>제안 내용 (Specification)</h2>
<h3><code>TYPE_CHECKING</code> 내장 상수</h3>
<p>PEP 781은 <code>TYPE_CHECKING</code>을 내장 상수(built-in constant)로 추가할 것을 제안합니다.</p>
<ul>
<li><code>TYPE_CHECKING</code>의 런타임 값은 <code>False</code>입니다.</li>
<li><code>True</code>, <code>False</code>, <code>None</code>, <code>__debug__</code>와는 달리, <code>TYPE_CHECKING</code>은 실제 상수(real constant)가 아닙니다. 따라서 이 변수에 값을 할당해도 <code>SyntaxError</code>가 발생하지 않습니다.</li>
<li>정적 타입 체커는 <code>typing.TYPE_CHECKING</code>과 유사하게 <code>TYPE_CHECKING</code>을 <code>True</code>로 처리해야 합니다.</li>
</ul>
<h3><code>typing.TYPE_CHECKING</code>의 Deprecation</h3>
<p>이 PEP가 채택되면, 새로운 내장 <code>TYPE_CHECKING</code> 상수가 권장되는 접근 방식이 됩니다.</p>
<ul>
<li><code>typing.TYPE_CHECKING</code>을 임포트하는 것은 <code>deprecated</code>될 예정입니다.</li>
<li><code>typing</code> 모듈의 런타임 영향을 최소화하기 위해, 이 <code>deprecation</code>은 Python 3.13의 EOL(End of Life)이 예정된 2029년 10월 이후에나 <code>DeprecationWarning</code>을 발생시킬 것입니다.</li>
<li>대신, 타입 체커는 검사 대상 프로그램의 버전이 Python 3.14 이상으로 지정된 경우, 이러한 <code>deprecated</code> 사용에 대해 경고할 수 있습니다.</li>
</ul>
<h2>하위 호환성 (Backwards Compatibility)</h2>
<p><code>TYPE_CHECKING</code>은 할당을 금지하지 않으므로, 기존에 <code>TYPE_CHECKING</code>을 사용하던 코드는 계속 작동합니다.</p>
<pre><code class="language-python"># 이 코드는 계속 작동합니다.
TYPE_CHECKING = False
from typing import TYPE_CHECKING
</code></pre>
<p>사용자는 Python 3.13 또는 이전 버전 사용을 중단한 후에 <code>TYPE_CHECKING</code>에 대한 할당을 제거할 수 있습니다.</p>
<h2>교육 방법 (How to Teach This)</h2>
<ul>
<li>런타임에 타입 검사 전용 코드를 건너뛰려면 <code>if TYPE_CHECKING:</code>을 사용하세요.</li>
<li>Python 3.14 이전 버전을 지원해야 하는 경우 <code>from typing import TYPE_CHECKING</code>을 사용하세요.</li>
<li><code>TYPE_CHECKING = False</code> 또는 <code>if False: # TYPE_CHECKING</code>와 같은 우회 방법(workarounds)은 계속 작동하지만 권장되지는 않습니다.</li>
</ul>
<h2>채택되지 않은 아이디어 (Rejected Ideas)</h2>
<h3>타입 검사 전용 코드 제거 (Eliminate type-checking-only code)</h3>
<p>컴파일 시 타입 검사 전용 코드를 제거하기 위해 <code>__type_checking__</code>이라는 실제 상수(real constant)를 추가하는 방안이 고려되었습니다.
그러나 언어에 실제 상수를 추가하는 것은 언어의 복잡성을 증가시킵니다. 타입 검사 전용 코드를 제거함으로써 얻는 이점은 이러한 복잡성을 정당화하기에 충분하지 않다고 판단되었습니다.</p>
<h3><code>import typing</code> 최적화 (Optimize import typing)</h3>
<p>미래의 최적화를 통해 시작 시간 때문에 <code>typing</code> 모듈을 임포트하지 않아도 되는 경우가 생길 수 있습니다.
하지만 그러한 최적화가 이루어지더라도, 임베디드 시스템(embedded systems)이나 브라우저(browsers)에서 Python을 실행하는 경우와 같이 임포트를 최소화하는 것이 여전히 유용한 사용 사례가 있을 것입니다.
따라서 <code>typing</code> 모듈 외부에서 타입 검사 전용 코드를 건너뛰기 위한 상수를 정의하는 것은 여전히 가치가 있습니다.## PEP 781 – <code>TYPE_CHECKING</code>을 내장(Built-in) 상수로 만들기</p>
<h3>개요</h3>
<p>이 Python Enhancement Proposal (PEP) 781은 <code>TYPE_CHECKING</code>이라는 새로운 내장 변수를 Python에 추가하여 타입 어노테이션(type annotations)을 사용하는 Python 코드 작성 경험을 개선하는 것을 제안합니다. 이 변수는 코드가 정적 타입 체커(static type checker)에 의해 분석될 때는 <code>True</code>로 평가되며, 일반적인 런타임 실행 중에는 <code>False</code>로 평가됩니다. 기존의 <code>typing.TYPE_CHECKING</code>과 달리, 이 새로운 내장 상수는 별도의 <code>import</code> 문 없이 사용할 수 있다는 장점이 있습니다.</p>
<h3>도입 배경 (Motivation)</h3>
<h4>타입 어노테이션의 부상과 <code>import</code> 부담</h4>
<p>PEP 484를 통해 Python에 도입된 타입 어노테이션은 널리 사용되고 있습니다. 하지만 완전히 어노테이션된 코드는 필요한 타입 이름을 스코프(scope)로 가져오기 위해 많은 <code>import</code> 문을 필요로 하며, 이는 신중하게 설계하지 않으면 <code>import cycle</code>을 유발할 수 있습니다. 이러한 문제를 해결하기 위해 PEP 563과 PEP 649는 타입 어노테이션의 지연 평가(deferred evaluation) 메커니즘을 도입했습니다. <code>PEP 563</code>이 지적했듯이 "타입 힌트는 … 계산적으로 무료가 아니다"라는 점은 중요하며, <code>typing.TYPE_CHECKING</code> 상수는 원래 순환 임포트를 해결하는 데 도움을 주기 위해 도입되었습니다.</p>
<h4><code>typing</code> 모듈 임포트의 성능 문제</h4>
<p>명령줄 인터페이스(CLI), 애플리케이션 또는 핵심 라이브러리와 같이 시작 시간(startup time)이 중요한 시나리오에서, 개발자들은 런타임 실행에 필요 없는 모든 <code>import</code> 문을 <code>TYPE_CHECKING</code> 블록 내에 배치하거나 특정 <code>import</code>를 함수 내로 지연시키기도 합니다. 그러나 <code>typing</code> 모듈 자체를 임포트하는 데 최대 10밀리초(ms)가 소요될 수 있는데, 이는 Python 인터프리터가 초기화되는 시간보다 길 수 있습니다. <code>typing</code> 모듈 임포트에 소요되는 시간은 무시할 수 없는 오버헤드입니다.</p>
<h4>표준화된 접근 방식의 필요성</h4>
<p>현재 개발자들은 <code>typing</code> 모듈에서 <code>TYPE_CHECKING</code>을 <code>import</code>하는 것을 피하기 위해 <code>TYPE_CHECKING = False</code>와 같은 모듈 수준 변수를 정의하거나 <code>if False: # TYPE_CHECKING</code>과 같은 코드를 사용합니다. 표준화된 <code>TYPE_CHECKING</code> 내장 상수를 제공함으로써, 다양한 도구들이 동일한 동작을 일관되게 구현할 수 있게 됩니다. 또한, 일부 정적 타입 체커는 로컬 상수(local constants)를 인식하지 못하고 <code>typing.TYPE_CHECKING</code>만 인식하는 경우가 있으므로, 보장된 의미론(guaranteed semantics)을 가진 단일 동작으로 생태계 내의 서드파티 도구들을 표준화할 수 있게 됩니다.</p>
<h3>제안 내용 (Specification)</h3>
<h4><code>TYPE_CHECKING</code> 내장 상수</h4>
<p>PEP 781은 <code>TYPE_CHECKING</code>을 내장 상수(built-in constant)로 추가할 것을 제안합니다.</p>
<ul>
<li><strong>런타임 값:</strong> <code>TYPE_CHECKING</code>의 런타임 값은 항상 <code>False</code>입니다.</li>
<li><strong>할당 가능성:</strong> <code>True</code>, <code>False</code>, <code>None</code>, <code>__debug__</code>와 같은 "진정한(real)" 상수와는 달리, <code>TYPE_CHECKING</code>은 실제 상수가 아닙니다. 따라서 이 변수에 값을 재할당해도 <code>SyntaxError</code>가 발생하지 않습니다.</li>
<li><strong>타입 체커 동작:</strong> 정적 타입 체커는 <code>typing.TYPE_CHECKING</code>과 유사하게 <code>TYPE_CHECKING</code>을 <code>True</code>로 처리해야 합니다.</li>
</ul>
<h4><code>typing.TYPE_CHECKING</code>의 Deprecation</h4>
<p>이 PEP가 채택되면, 새로운 내장 <code>TYPE_CHECKING</code> 상수가 타입 검사 전용 코드에 권장되는 접근 방식이 됩니다.</p>
<ul>
<li><strong><code>deprecated</code> 예정:</strong> <code>typing.TYPE_CHECKING</code>을 임포트하는 것은 <code>deprecated</code>될 예정입니다.</li>
<li><strong>경고 시점:</strong> <code>typing</code> 모듈의 런타임 영향을 최소화하기 위해, 이 <code>deprecation</code>은 Python 3.13의 EOL(End of Life)이 예정된 2029년 10월 이후에야 <code>DeprecationWarning</code>을 발생시킬 것입니다.</li>
<li><strong>타입 체커 경고:</strong> 대신, 타입 체커는 검사 대상 프로그램의 버전이 Python 3.14 이상으로 지정된 경우, <code>typing.TYPE_CHECKING</code>과 같은 <code>deprecated</code> 사용에 대해 경고할 수 있습니다.</li>
</ul>
<h3>하위 호환성 (Backwards Compatibility)</h3>
<p><code>TYPE_CHECKING</code>이 값 할당을 금지하지 않으므로, 기존에 <code>TYPE_CHECKING</code>을 사용하던 코드는 계속해서 문제없이 작동합니다.</p>
<pre><code class="language-python"># 이 코드는 Python 3.14+에서도 계속 작동합니다.
TYPE_CHECKING = False
from typing import TYPE_CHECKING
</code></pre>
<p>사용자는 Python 3.13 또는 이전 버전 사용을 중단한 후에 <code>TYPE_CHECKING</code>에 대한 사용자 정의 할당을 제거할 수 있습니다.</p>
<h3>교육 방법 (How to Teach This)</h3>
<ul>
<li><strong>타입 검사 전용 코드:</strong> 런타임에 타입 검사 전용 코드를 건너뛰려면 <code>if TYPE_CHECKING:</code>을 사용하세요.</li>
<li><strong>이전 버전 지원:</strong> Python 3.14 이전 버전을 지원해야 하는 경우에는 <code>from typing import TYPE_CHECKING</code>을 계속 사용해야 합니다.</li>
<li><strong>기존 우회 방법:</strong> <code>TYPE_CHECKING = False</code> 또는 <code>if False: # TYPE_CHECKING</code>와 같은 기존의 우회 방법(workarounds)은 계속 작동하지만, 더 이상 권장되지 않습니다.</li>
</ul>
<h3>채택되지 않은 아이디어 (Rejected Ideas)</h3>
<h4>타입 검사 전용 코드 제거 (Eliminate type-checking-only code)</h4>
<p>컴파일 시 타입 검사 전용 코드를 완전히 제거하기 위해 <code>__type_checking__</code>이라는 "진정한" 상수를 추가하는 방안이 고려되었습니다.
그러나 언어에 실제 상수를 추가하는 것은 언어의 복잡성을 증가시킵니다. 타입 검사 전용 코드를 제거함으로써 얻는 이점은 이러한 언어 복잡성 증가를 정당화하기에 충분하지 않다고 판단되었습니다.</p>
<h4><code>import typing</code> 최적화 (Optimize import typing)</h4>
<p>미래에는 <code>typing</code> 모듈 임포트의 시작 시간 오버헤드를 줄이는 최적화가 이루어져, <code>typing</code> 모듈 임포트를 피해야 할 필요가 줄어들 수도 있습니다.
하지만 그러한 최적화가 이루어지더라도, 임베디드 시스템(embedded systems)이나 브라우저(browsers)에서 Python을 실행하는 경우와 같이 <code>import</code>를 최소화하는 것이 여전히 유용한 사용 사례가 있을 것입니다.
따라서 <code>typing</code> 모듈 외부에서 타입 검사 전용 코드를 건너뛰기 위한 상수를 정의하는 것은 여전히 가치가 있습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Draft] PEP 781 - MakeTYPE_CHECKINGa built-in constant"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 13:57:36+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":[["$","div",null,{"className":"page__taxonomy mb-4","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"카테고리"}],[["$","span","Python",{"className":"page__taxonomy-item","children":"Python"}],["$","span","PEP",{"className":"page__taxonomy-item","children":"PEP"}]]]}],["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]]}]]}]}]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","21",{"name":"next-size-adjust"}]]
1:null
