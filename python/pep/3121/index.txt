3:I[9275,[],""]
5:I[1343,[],""]
6:I[4281,["231","static/chunks/231-c4b666723e6aae68.js","185","static/chunks/app/layout-8808afda01b7a1b7.js"],"default"]
7:I[231,["231","static/chunks/231-c4b666723e6aae68.js","877","static/chunks/app/%5B...slug%5D/page-01b66e77b48ed573.js"],""]
4:["slug","python/pep/3121","c"]
0:["iV6XySbMHIJ3imQdvgy3I",[[["",{"children":[["slug","python/pep/3121","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3121\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3121","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_9012cf layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/secrett2633.github.io/_next/static/css/b9d6ec750ad82add.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T1f1f,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3121/">PEP 3121 - Extension Module Initialization and Finalization</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 27-Apr-2007</p>
</blockquote>
<h1>PEP 3121 – 확장 모듈 초기화 및 종료</h1>
<p><em>본 문서는 역사적 문서입니다. 최신 규범 문서는 <code>PyInit_modulename()</code> 및 <code>PyModuleDef</code>에서 확인할 수 있습니다.</em></p>
<h2>개요 (Abstract)</h2>
<p>현재 확장 모듈(Extension Module)의 초기화 과정에는 몇 가지 문제점이 있습니다. 모듈에 대한 정리(cleanup) 기능이 없고, 진입점(entry point) 이름이 충돌을 일으킬 수 있으며, 진입 함수가 일반적인 호출 규칙을 따르지 않고, 다중 인터프리터(Multiple Interpreters)를 제대로 지원하지 못하고 있습니다. 이 PEP는 이러한 문제들을 해결하고자 합니다.</p>
<h2>문제점 (Problems)</h2>
<h3>모듈 종료 (Module Finalization)</h3>
<p>현재 확장 모듈은 일반적으로 한 번 초기화된 후 "영원히" 존재합니다. 유일한 예외는 <code>Py_Finalize()</code>가 호출될 때인데, 이때 초기화 루틴이 두 번째로 호출됩니다. 이는 리소스 관리 관점에서 좋지 않습니다. 초기화가 호출될 때마다 메모리 및 다른 리소스가 할당될 수 있지만, 이를 회수할 방법이 없습니다. 결과적으로, 현재 Python이 할당한 모든 리소스를 완전히 해제할 방법이 없습니다.</p>
<h3>진입점 이름 충돌 (Entry point name conflicts)</h3>
<p>현재 진입점은 <code>init&#x3C;module></code>이라고 명명됩니다. 이 이름은 <code>init&#x3C;something></code>과 같이 다른 심볼(symbol)과 충돌할 수 있습니다. 특히, 과거에 <code>initsocket</code>이 충돌을 일으킨 적이 있습니다 (이 특정 문제는 모듈 이름을 <code>_socket</code>으로 변경하면서 부수적으로 해결되었습니다).</p>
<h3>진입점 시그니처 (Entry point signature)</h3>
<p>현재 진입점은 <code>void</code>를 반환하는 프로시저(procedure)입니다. 이는 일반적인 호출 규칙에서 벗어납니다. 호출자는 <code>PyErr_Occurred</code>를 확인해야만 초기화 중 오류가 발생했는지 여부를 알 수 있습니다. 진입점은 생성된 모듈인 <code>PyObject*</code>를 반환해야 하며, 예외 발생 시에는 <code>NULL</code>을 반환해야 합니다.</p>
<h3>다중 인터프리터 (Multiple Interpreters)</h3>
<p>현재 확장 모듈은 모든 인터프리터(Interpreter)에서 상태를 공유합니다. 이는 인터프리터 간에 바람직하지 않은 정보 누출(information leakage)을 초래할 수 있습니다. 하나의 스크립트가 확장 모듈 내의 객체를 영구적으로 손상시켜 다른 인터프리터의 모든 스크립트를 망가뜨릴 수 있습니다.</p>
<h2>사양 (Specification)</h2>
<p>모듈 초기화 루틴의 시그니처는 다음과 같이 변경됩니다.</p>
<pre><code class="language-c">PyObject *PyInit_&#x3C;modulename>()
</code></pre>
<p>초기화 루틴은 모듈이 임포트될 때 인터프리터당 한 번 호출됩니다. 이때마다 새로운 모듈 객체를 반환해야 합니다.</p>
<p>C 변수에 모듈별 상태를 저장하기 위해, 각 모듈 객체는 해당 모듈에 의해서만 해석되는 메모리 블록을 포함하게 됩니다. 모듈에 사용되는 메모리 양은 모듈 생성 시점에 지정됩니다.</p>
<p>초기화 함수 외에도 모듈은 여러 추가 콜백(callback) 함수를 구현할 수 있습니다. 이 함수들은 모듈의 <code>tp_traverse</code>, <code>tp_clear</code>, <code>tp_free</code> 함수가 호출될 때, 그리고 모듈이 다시 로드될 때(reloaded) 호출됩니다.</p>
<p>전체 모듈 정의는 <code>struct PyModuleDef</code>에 통합됩니다.</p>
<pre><code class="language-c">struct PyModuleDef{
    PyModuleDef_Base m_base;  /* 인터프리터가 채울 필드 */
    Py_ssize_t m_size;        /* 모듈별 데이터의 크기 */
    PyMethodDef *m_methods;
    inquiry m_reload;
    traverseproc m_traverse;
    inquiry m_clear;
    freefunc m_free;
};
</code></pre>
<p>모듈 생성은 선택적 <code>PyModuleDef*</code>를 기대하도록 변경됩니다. 모듈 상태는 널(null)로 초기화됩니다.</p>
<p>각 모듈 메서드에는 모듈 객체가 첫 번째 매개변수로 전달됩니다. 모듈 데이터에 접근하기 위해 다음 함수가 제공됩니다.</p>
<pre><code class="language-c">void* PyModule_GetState(PyObject*);
</code></pre>
<p>또한, <code>sys.modules</code>를 거치는 것보다 더 효율적으로 모듈을 찾기 위해 다음 함수가 제공됩니다.</p>
<pre><code class="language-c">PyObject* PyState_FindModule(struct PyModuleDef*);
</code></pre>
<p>이 조회(lookup) 함수는 <code>m_base</code> 필드에 있는 인덱스를 사용하여 이름이 아닌 인덱스로 모듈을 찾습니다.</p>
<p>모든 Python 객체는 Python 메모리 관리(memory management)를 통해 제어되어야 하므로, 타입 객체(type object) 자체에 메모리 관리되는 상태가 없는 경우를 제외하고 "정적(static)" 타입 객체의 사용은 권장되지 않습니다. 힙 타입(heap types)의 정의를 단순화하기 위해 새로운 메서드가 추가됩니다.</p>
<pre><code class="language-c">PyTypeObject* PyType_Copy(PyTypeObject*);
</code></pre>
<h2>예시 (Example)</h2>
<p><code>xxmodule.c</code>는 <code>initxx</code> 함수를 제거하고 다음 코드를 대신 추가하는 방식으로 변경됩니다.</p>
<pre><code class="language-c">struct xxstate{
    PyObject *ErrorObject;
    PyObject *Xxo_Type;
};

#define xxstate(o) ((struct xxstate*)PyModule_GetState(o))

static int xx_traverse(PyObject *m, visitproc v, void *arg) {
    Py_VISIT(xxstate(m)->ErrorObject);
    Py_VISIT(xxstate(m)->Xxo_Type);
    return 0;
}

static int xx_clear(PyObject *m) {
    Py_CLEAR(xxstate(m)->ErrorObject);
    Py_CLEAR(xxstate(m)->Xxo_Type);
    return 0;
}

static struct PyModuleDef xxmodule = {
    {}, /* m_base */
    sizeof(struct xxstate),
    &#x26;xx_methods,
    0,  /* m_reload */
    xx_traverse,
    xx_clear,
    0,  /* m_free - m_clear에서 모든 작업이 처리되므로 필요 없음 */
};

PyObject* PyInit_xx() {
    PyObject *res = PyModule_New("xx", &#x26;xxmodule);
    if (!res)
        return NULL;

    xxstate(res)->ErrorObject = PyErr_NewException("xx.error", NULL, NULL);
    if (!xxstate(res)->ErrorObject) {
        Py_DECREF(res);
        return NULL;
    }

    xxstate(res)->XxoType = PyType_Copy(&#x26;Xxo_Type);
    if (!xxstate(res)->Xxo_Type) {
        Py_DECREF(res);
        return NULL;
    }
    return res;
}
</code></pre>
<h2>논의 (Discussion)</h2>
<p>Tim Peters는 [1]에서 PythonLabs가 한때 이러한 기능을 고려했으며, 이 PEP에서 현재 지원되지 않는 다음과 같은 추가적인 훅(hook)들을 언급했습니다.</p>
<ul>
<li>모듈 객체가 <code>sys.modules</code>에서 삭제될 때</li>
<li><code>Py_Finalize</code>가 호출될 때</li>
<li>Python이 종료될 때</li>
<li>Python DLL이 언로드(unload)될 때 (Windows 전용)</li>
</ul>
<h2>참고 자료 (References)</h2>
<p>[1] Tim Peters, 이러한 기능에 대한 이전 대화 보고서.
<a href="https://mail.python.org/pipermail/python-3000/2006-April/000726.html">https://mail.python.org/pipermail/python-3000/2006-April/000726.html</a></p>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인(public domain)에 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 3121 - Extension Module Initialization and Finalization"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:27:55+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":[["$","div",null,{"className":"page__taxonomy mb-4","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"카테고리"}],[["$","span","Python",{"className":"page__taxonomy-item","children":"Python"}],["$","span","PEP",{"className":"page__taxonomy-item","children":"PEP"}]]]}],["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]]}]]}]}]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","21",{"name":"next-size-adjust"}]]
1:null
