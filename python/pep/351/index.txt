3:I[9275,[],""]
5:I[1343,[],""]
6:I[4281,["231","static/chunks/231-c4b666723e6aae68.js","185","static/chunks/app/layout-8808afda01b7a1b7.js"],"default"]
7:I[231,["231","static/chunks/231-c4b666723e6aae68.js","877","static/chunks/app/%5B...slug%5D/page-01b66e77b48ed573.js"],""]
4:["slug","python/pep/351","c"]
0:["iV6XySbMHIJ3imQdvgy3I",[[["",{"children":[["slug","python/pep/351","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"351\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/351","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_9012cf layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/secrett2633.github.io/_next/static/css/b9d6ec750ad82add.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T1890,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0351/">PEP 351 - The freeze protocol</a></p>
<p><strong>상태:</strong> Rejected | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 14-Apr-2005</p>
</blockquote>
<h2>PEP 351 – The freeze protocol (동결 프로토콜)</h2>
<p><strong>작성자:</strong> Barry Warsaw 
<strong>상태:</strong> Rejected (거부됨)
<strong>유형:</strong> Standards Track
<strong>생성일:</strong> 2005년 4월 14일
<strong>Python 버전:</strong> 2.5
<strong>게시 이력:</strong> [원문 참고]</p>
<h3>요약 (Abstract)</h3>
<p>이 PEP는 가변(mutable) 객체의 동결된(frozen), 불변(immutable) 복사본을 요청하기 위한 간단한 프로토콜을 설명합니다. 또한, 이 프로토콜을 사용하여 협력하는(cooperating) 모든 객체에 대해 불변 복사본을 제공하는 새로운 내장 함수를 정의합니다.</p>
<h3>거부 공지 (Rejection Notice)</h3>
<p>이 PEP는 거부되었습니다. 그 이유에 대해서는 python-dev 스레드를 참조하십시오.</p>
<h3>배경 (Rationale)</h3>
<p>사전(dictionaries)과 집합(sets) 같은 내장 객체는 키로 오직 불변 객체만을 허용합니다. 이는 리스트(lists)와 같은 가변 객체가 딕셔너리의 키로 사용될 수 없다는 것을 의미합니다. 그러나 Python 프로그래머는 리스트를 튜플(tuple)로 변환할 수 있습니다. 이 두 객체는 유사하지만, 튜플은 불변이므로 딕셔너리 키로 사용될 수 있습니다.</p>
<p>서드파티 객체 또한 유사한 가변 및 불변 대응 객체를 가질 수 있으며, 이러한 객체들을 변환하기 위한 표준 프로토콜이 있다면 유용할 것입니다.</p>
<p><code>sets.Set</code> 객체는 <code>sets.Set</code>의 <code>sets.Set</code>을 생성할 수 있도록 "불변으로 자동 변환하기 위한 프로토콜"을 노출합니다. PEP 218은 내장 <code>set</code>에서 이 기능을 의도적으로 제외했습니다. 이 PEP는 이 기능이 여전히 유용하다고 주장하며, 이를 지원하기 위한 표준 메커니즘을 제안합니다.</p>
<h3>제안 (Proposal)</h3>
<p><code>freeze()</code>라는 새로운 내장 함수를 추가하는 것이 제안됩니다.</p>
<p><code>freeze()</code> 함수에 불변 객체가 전달되면(해당 객체에 대한 <code>hash()</code> 호출 시 <code>TypeError</code>가 발생하지 않는 것으로 판단), 객체는 직접 반환됩니다.</p>
<p><code>freeze()</code> 함수에 가변 객체가 전달되면(즉, 해당 객체의 <code>hash()</code> 호출 시 <code>TypeError</code>가 발생), <code>freeze()</code>는 해당 객체의 <code>__freeze__()</code> 메서드를 호출하여 불변 복사본을 얻습니다. 객체에 <code>__freeze__()</code> 메서드가 없으면 <code>TypeError</code>가 발생합니다.</p>
<h3>예시 구현 (Sample implementations)</h3>
<p>다음은 <code>freeze()</code> 내장 함수의 Python 구현입니다.</p>
<pre><code class="language-python">def freeze(obj):
    try:
        hash(obj)
        return obj
    except TypeError:
        freezer = getattr(obj, '__freeze__', None)
        if freezer:
            return freezer()
        raise TypeError('object is not freezable')
</code></pre>
<p>다음은 의도된 동작을 보여주는 몇 가지 코드 샘플입니다.</p>
<pre><code class="language-python">class xset(set):
    def __freeze__(self):
        return frozenset(self)

class xlist(list):
    def __freeze__(self):
        return tuple(self)

class imdict(dict):
    def __hash__(self):
        return id(self)
    def _immutable(self, *args, **kws):
        raise TypeError('object is immutable')
    __setitem__ = _immutable
    __delitem__ = _immutable
    clear = _immutable
    update = _immutable
    setdefault = _immutable
    pop = _immutable
    popitem = _immutable

class xdict(dict):
    def __freeze__(self):
        return imdict(self)
</code></pre>
<pre><code class="language-python">>>> s = set([1, 2, 3])
>>> {s: 4}
Traceback (most recent call last):
  File "&#x3C;stdin>", line 1, in ?
TypeError: set objects are unhashable
>>> t = freeze(s)
Traceback (most recent call last):
  File "&#x3C;stdin>", line 1, in ?
  File "/usr/tmp/python-lWCjBK.py", line 9, in freeze
TypeError: object is not freezable
>>> t = xset(s)
>>> u = freeze(t)
>>> {u: 4}
{frozenset([1, 2, 3]): 4}
>>> x = 'hello'
>>> freeze(x) is x
True
>>> d = xdict(a=7, b=8, c=9)
>>> hash(d)
Traceback (most recent call last):
  File "&#x3C;stdin>", line 1, in ?
TypeError: dict objects are unhashable
>>> hash(freeze(d))
-1210776116
>>> {d: 4}
Traceback (most recent call last):
  File "&#x3C;stdin>", line 1, in ?
TypeError: dict objects are unhashable
>>> {freeze(d): 4}
{\{'a': 7, 'c': 9, 'b': 8}: 4}
</code></pre>
<h3>참조 구현 (Reference implementation)</h3>
<p>패치 1335812는 이 기능의 C 구현을 제공합니다. 이는 <code>freeze()</code> 내장 함수와 함께 리스트 및 집합에 대한 <code>__freeze__()</code> 메서드의 구현을 추가합니다. 딕셔너리는 현재 Python에서 쉽게 동결할 수 없으므로, <code>dict.__freeze__()</code>의 구현은 아직 제공되지 않습니다.</p>
<h3>미해결 문제 (Open issues)</h3>
<ul>
<li>동결된 객체를 해동(thawing)하기 위한 유사한 프로토콜을 정의해야 할까요?</li>
<li>딕셔너리와 집합이 가변 키를 자동으로 동결해야 할까요?</li>
<li><code>sets.Set</code>의 <code>__as_temporarily_immutable__()</code>처럼 "임시 동결"(아마도 <code>__congeal__()</code> 메서드를 사용하여)을 지원해야 할까요?</li>
<li><code>sets.Set</code>과의 하위 호환성을 위해 <code>__as_immutable__()</code>을 지원해야 할까요? 아니면 <code>__freeze__()</code>의 이름을 <code>__as_immutable__()</code>으로 변경해야 할까요?</li>
</ul>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인에 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Rejected] PEP 351 - The freeze protocol"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 18:58:26+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":[["$","div",null,{"className":"page__taxonomy mb-4","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"카테고리"}],[["$","span","Python",{"className":"page__taxonomy-item","children":"Python"}],["$","span","PEP",{"className":"page__taxonomy-item","children":"PEP"}]]]}],["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]]}]]}]}]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","21",{"name":"next-size-adjust"}]]
1:null
