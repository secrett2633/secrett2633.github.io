3:I[9275,[],""]
5:I[1343,[],""]
6:I[4281,["231","static/chunks/231-c4b666723e6aae68.js","185","static/chunks/app/layout-8808afda01b7a1b7.js"],"default"]
7:I[231,["231","static/chunks/231-c4b666723e6aae68.js","877","static/chunks/app/%5B...slug%5D/page-01b66e77b48ed573.js"],""]
4:["slug","python/pep/3114","c"]
0:["iV6XySbMHIJ3imQdvgy3I",[[["",{"children":[["slug","python/pep/3114","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3114\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3114","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_9012cf layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/secrett2633.github.io/_next/static/css/b9d6ec750ad82add.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2015,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3114/">PEP 3114 - Renaming iterator.next() to iterator.<strong>next</strong>()</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 04-Mar-2007</p>
</blockquote>
<h2>PEP 3114 – <code>iterator.next()</code>를 <code>iterator.__next__()</code>로 이름 변경</h2>
<p><strong>작성자:</strong> Ka-Ping Yee
<strong>상태:</strong> Final (최종)
<strong>유형:</strong> Standards Track
<strong>작성일:</strong> 2007년 3월 4일
<strong>Python 버전:</strong> 3.0</p>
<h3>초록 (Abstract)</h3>
<p>이 PEP 3114는 Python 2.x의 이터레이터(iterator) 프로토콜에서 <code>next()</code> 메서드를 <code>__next__()</code>로 변경하고, 새롭게 내장 함수 <code>next()</code>를 도입할 것을 제안합니다. Python 2.x에서 이터레이터 프로토콜은 이터러블(iterable) 객체에서 이터레이터를 생성하는 <code>__iter__()</code>와 이터레이터에서 다음 항목을 가져오는 <code>next()</code> 메서드로 구성되어 있었습니다. <code>for</code> 루프는 이러한 메서드를 암묵적으로 호출하여 작동합니다. 이 제안은 언어 수준 프로토콜의 일부로 암묵적으로 호출되는 다른 모든 Python 메서드(<code>__init__</code> 등)와의 일관성을 위해 <code>next()</code> 메서드를 <code>__next__()</code>로 이름을 바꾸고, 다른 프로토콜들이 명시적으로 호출되는 방식(<code>len()</code>, <code>iter()</code> 등)과 일관되게 <code>__next__()</code> 메서드를 호출하는 <code>next()</code> 내장 함수를 도입하려는 것입니다.</p>
<h3>이중 밑줄 이름(Names With Double Underscores)</h3>
<p>Python에서는 이름 앞뒤에 이중 밑줄(<code>__</code>)을 사용하여 언어 자체에 속하는 이름을 구별합니다. 인터프리터에 의해 암묵적으로 사용되거나 생성되는 속성 및 메서드는 이 명명 규칙을 따르는데, 예를 들어 <code>__file__</code>, <code>__dict__</code>, <code>__init__</code> 등이 있습니다.</p>
<p>이러한 규칙은 프로그래머가 명시적으로 정의하는 <code>__init__</code>과 같은 메서드뿐만 아니라, 명시적으로 이름을 지정해야만 접근할 수 있는 <code>__file__</code>과 같은 속성에도 적용됩니다. 이는 인터프리터에 의해 사용되거나 생성되는 모든 이름을 포함합니다.</p>
<p>이중 밑줄의 사용은 Python 언어 정의의 일부인 이름에 대해 별도의 네임스페이스를 생성하여, 프로그래머가 언어 정의 목적을 가진 이름과 의도치 않게 충돌할 걱정 없이 문자(알파벳)로 시작하는 변수, 속성, 메서드를 자유롭게 생성할 수 있도록 합니다. (예약된 키워드와 충돌하는 것은 여전히 문제이지만, 이 경우 즉시 구문 오류를 발생시킵니다).</p>
<p>이터레이터의 <code>next()</code> 메서드는 이러한 규칙의 예외였습니다. <code>next()</code> 메서드에 대한 명시적인 호출이 전혀 없는 코드라도 해당 메서드의 존재에 의해 암묵적으로 영향을 받을 수 있었습니다. 따라서 이 PEP는 이터레이터가 <code>next()</code> 메서드 대신 <code>__next__()</code> 메서드를 가지도록 제안하며, 의미론적인 변경은 없습니다.</p>
<h3>이중 밑줄 메서드와 내장 함수(Double-Underscore Methods and Built-In Functions)</h3>
<p>Python 언어는 이중 밑줄 이름을 가진 메서드를 정의하여 구현되거나 사용자 정의되는 여러 프로토콜을 정의합니다. 각 경우에 프로토콜은 인터프리터의 C 함수로 구현된 내부 메서드에 의해 제공됩니다.</p>
<p>때로는 프로토콜이 구문적 구성(syntactic construct)에 의해 호출됩니다:</p>
<ul>
<li><code>x[y]</code> → 내부 <code>tp_getitem</code> → <code>x.__getitem__(y)</code></li>
<li><code>x + y</code> → 내부 <code>nb_add</code> → <code>x.__add__(y)</code></li>
<li><code>-x</code> → 내부 <code>nb_negative</code> → <code>x.__neg__()</code></li>
</ul>
<p>때로는 구문적 구성이 없지만, 프로토콜을 명시적으로 호출하는 것이 유용한 경우가 있습니다. 이러한 경우를 위해 Python은 이중 밑줄 없이 동일한 이름을 가진 내장 함수를 제공합니다:</p>
<ul>
<li><code>len(x)</code> → 내부 <code>sq_length</code> → <code>x.__len__()</code></li>
<li><code>hash(x)</code> → 내부 <code>tp_hash</code> → <code>x.__hash__()</code></li>
<li><code>iter(x)</code> → 내부 <code>tp_iter</code> → <code>x.__iter__()</code></li>
</ul>
<p>이러한 패턴을 따르면, <code>next()</code>를 처리하는 자연스러운 방법은 동일하게 동작하는 <code>next()</code> 내장 함수를 추가하는 것입니다:</p>
<ul>
<li><code>next(x)</code> → 내부 <code>tp_iternext</code> → <code>x.__next__()</code></li>
</ul>
<p>또한, <code>getattr()</code> 및 <code>iter()</code> 내장 함수의 방식에 따라 <code>next()</code> 내장 함수가 선택적 두 번째 인자로 센티널(sentinel) 값을 받도록 제안됩니다. 두 인자로 호출될 때, <code>next()</code>는 <code>StopIteration</code> 예외를 포착하고 예외를 전파하는 대신 센티널 값을 반환합니다. 이는 <code>iter()</code>와 <code>next()</code> 사이에 좋은 이중성을 만듭니다: <code>iter(function, sentinel)</code> &#x3C;-> <code>next(iterator, sentinel)</code>.</p>
<h3>이전 제안(Previous Proposals)</h3>
<p>이 제안은 새로운 아이디어가 아닙니다. 이 아이디어는 <code>python-dev</code>에서 BDFL (Guido van Rossum)의 지지를 받았으며, 심지어 원래 이터레이터 PEP인 PEP 234에서도 언급되었습니다.</p>
<h3>반대 의견(Objections)</h3>
<p>더 많은 내장 함수를 추가하는 것에 대한 몇 가지 반대 의견이 있었습니다. 특히 Martin von Loewis는 진정한 일반성(즉, 많은 프로그램에서 필요할 가능성)이 없는 한 더 많은 내장 함수 도입에 반대했습니다. 그는 <code>__next__()</code>의 일반적인 사용은 <code>for</code> 루프와 함께일 것이므로 명시적인 <code>next()</code> 호출은 자주 필요하지 않을 것이라고 주장했습니다. 또한, 대부분의 프로토콜이 내장 함수를 통해 명시적으로 호출되는 것이 아니며, 대신 <code>operator</code> 모듈의 메서드를 통해 명시적으로 호출될 수 있다고 언급했습니다. 따라서 전통에 따르면 <code>operator.next</code>가 되어야 한다고 제안했습니다. 대안으로, 객체에 기본적으로 <code>__next__()</code>를 호출하는 <code>.next()</code> 메서드를 추가할 것을 제안했습니다.</p>
<h3>전환 계획(Transition Plan)</h3>
<p>2to3 변환 도구에 두 가지 추가 변환이 추가됩니다:</p>
<ol>
<li><code>next</code>라는 이름의 메서드 정의는 <code>__next__</code>로 이름이 변경됩니다.</li>
<li><code>next</code> 메서드에 대한 명시적인 호출은 내장 함수 <code>next()</code>에 대한 호출로 대체됩니다. 예를 들어, <code>x.next()</code>는 <code>next(x)</code>가 됩니다.</li>
</ol>
<p>Collin Winter는 <code>next</code>에 대한 모듈 수준 바인딩의 존재 여부에 따라 두 번째 변환을 자동으로 수행할 가능성을 조사했으며, "추하고 느릴" 것이라는 것을 발견했습니다. 대신, 변환 도구는 그러한 바인딩을 감지할 때 경고를 발생시킬 것입니다.</p>
<h3>승인 및 구현(Approval and Implementation)</h3>
<p>이 PEP는 2007년 3월 6일 Guido van Rossum에 의해 수락되었습니다. 2to3 도구를 제외한 필요한 변경 사항이 포함된 패치는 Georg Brandl이 작성하여 리비전 54910으로 커밋되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 3114 - Renaming iterator.next() to iterator.__next__()"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:22:21+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":[["$","div",null,{"className":"page__taxonomy mb-4","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"카테고리"}],[["$","span","Python",{"className":"page__taxonomy-item","children":"Python"}],["$","span","PEP",{"className":"page__taxonomy-item","children":"PEP"}]]]}],["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]]}]]}]}]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","21",{"name":"next-size-adjust"}]]
1:null
