3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-ce60b0a6591d04ed.js"],""]
4:["slug","python/pep/338","c"]
0:["e6YNzZ2BVZ8NBZ6boXfWj",[[["",{"children":[["slug","python/pep/338","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"338\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/338","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T3fea,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0338/">PEP 338 - Executing modules as scripts</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 16-Oct-2004</p>
</blockquote>
<h1>PEP 338 – 모듈을 스크립트로 실행하기</h1>
<ul>
<li><strong>작성자:</strong> Alyssa Coghlan</li>
<li><strong>상태:</strong> Final (최종)</li>
<li><strong>유형:</strong> Standards Track</li>
<li><strong>생성일:</strong> 2004년 10월 16일</li>
<li><strong>Python 버전:</strong> 2.5</li>
<li><strong>요약:</strong> 이 PEP는 <code>-m</code> 명령줄 스위치 또는 <code>runpy.run_module(modulename)</code> 함수를 통해 모든 Python 모듈을 스크립트로 실행하는 의미론을 정의합니다.</li>
</ul>
<h2>개요 (Abstract)</h2>
<p>이 PEP는 <code>-m</code> 명령줄 스위치를 사용하거나 <code>runpy.run_module(modulename)</code>을 호출하여 모든 Python 모듈을 스크립트처럼 실행하기 위한 의미론을 정의합니다. Python 2.4에서 구현된 <code>-m</code> 스위치는 매우 제한적이었으나, 이 PEP는 PEP 302의 임포트 훅(import hooks)을 활용하여 코드 객체에 접근할 수 있는 모든 모듈을 실행할 수 있도록 제안합니다.</p>
<h2>도입 배경 (Rationale)</h2>
<p>Python 2.4는 <code>-m</code> 명령줄 스위치를 도입하여 Python 모듈 이름 공간을 사용하여 모듈을 스크립트로 실행할 수 있도록 했습니다. 이는 <code>pdb</code>나 <code>profile</code>과 같은 표준 라이브러리 모듈을 실행하는 데 유용했습니다. 그러나 패키지 내부에 위치한 모듈(예: <code>pychecker</code>의 <code>pychecker.checker</code> 모듈)을 실행하는 기능은 Python 2.4 구현에서 제외되었습니다. 이 기능의 구현이 훨씬 복잡하고 명확한 전략이 없었기 때문입니다.</p>
<p><code>python-dev</code> 커뮤니티는 이 기능을 Python 2.5로 연기하고, PEP 프로세스를 통해 제대로 구현하는 것이 좋다고 판단했습니다. 또한, 기존 <code>-m</code> 버전은 <code>zipimport</code>나 다른 형태의 대체 임포트 동작(예: frozen modules)을 지원하지 않는다는 문제도 지적되었습니다.</p>
<p>이 기능을 C로 작성하는 것보다 Python 모듈로 제공하는 것이 훨씬 쉽고, CPython 인터프리터에만 국한되지 않고 모든 Python 프로그램에서 사용할 수 있도록 합니다. CPython의 명령줄 스위치는 이 새로운 모듈을 활용하도록 재작성될 수 있습니다. <code>profile</code>, <code>pdb</code>와 같이 다른 스크립트를 실행하는 스크립트들도 새로운 모듈을 사용하여 실행할 스크립트를 <code>-m</code> 스타일로 식별하는 기능을 제공할 수 있습니다.</p>
<h2>제안의 범위 (Scope of this proposal)</h2>
<p>Python 2.4에서 <code>-m</code>으로 찾은 모듈은 마치 파일 이름이 명령줄에 제공된 것처럼 실행됩니다. 이 PEP의 목표는 패키지 내부의 모듈이나 <code>zipimport</code>와 같은 대체 임포트 메커니즘을 통해 접근하는 모듈에 대해서도 이 규칙이 최대한 적용되도록 하는 것입니다.</p>
<p>이 PEP는 Python 모듈을 스크립트로도 유용하게 만드는 관용구(idiom)를 변경하려는 것이 아님을 명시해야 합니다 (PEP 299 참조). 이 문제는 PEP 338이 다루는 특정 기능과 직교(orthogonal)하는 것으로 간주됩니다.</p>
<h2>현재 동작 (Current Behaviour)</h2>
<p>새로운 의미론을 설명하기 전에 Python 2.4의 기존 의미론을 살펴보는 것이 중요합니다. (현재 소스 코드와 명령줄 도움말에만 정의되어 있습니다).</p>
<ul>
<li>명령줄에서 <code>-m</code>이 사용되면, 옵션 목록은 즉시 종료됩니다 ( <code>-c</code>와 유사).</li>
<li>인수는 최상위(top-level) Python 모듈의 이름으로 해석됩니다 (즉, <code>sys.path</code>에서 찾을 수 있는 모듈).</li>
<li>모듈이 발견되고 <code>PY_SOURCE</code> 또는 <code>PY_COMPILED</code> 유형인 경우, 명령줄은 <code>python &#x3C;options> -m &#x3C;module> &#x3C;args></code>에서 <code>python &#x3C;options> &#x3C;filename> &#x3C;args></code>로 효과적으로 재해석됩니다. 여기에는 <code>sys.argv[0]</code>을 올바르게 설정하는 것도 포함됩니다. (일부 스크립트는 이에 의존합니다 - Python 자체의 <code>regrtest.py</code>가 한 예입니다).</li>
<li>모듈을 찾을 수 없거나 올바른 유형이 아니면 오류가 발생합니다.</li>
</ul>
<h2>제안된 의미론 (Proposed Semantics)</h2>
<p>제안된 의미론은 매우 간단합니다. <code>-m</code>을 사용하여 모듈을 실행하는 경우, PEP 302 임포트 메커니즘을 사용하여 모듈을 찾고 컴파일된 코드를 가져온 다음, 최상위 모듈에 대한 의미론에 따라 모듈을 실행합니다. 인터프리터는 새로운 표준 라이브러리 함수인 <code>runpy.run_module</code>을 호출하여 이를 수행합니다.</p>
<p>이는 Python의 임포트 메커니즘이 패키지 내부의 모듈을 찾는 방식 때문에 필요합니다. 패키지는 초기화 중에 자체 <code>__path__</code> 변수를 수정할 수 있습니다. 또한, 경로는 <code>*.pth</code> 파일의 영향을 받을 수 있으며, 일부 패키지는 <code>sys.metapath</code>에 사용자 정의 로더(custom loaders)를 설치합니다. 따라서 Python이 모듈을 안정적으로 찾을 수 있는 유일한 방법은 포함하는 패키지를 임포트하고 PEP 302 임포트 훅을 사용하여 Python 코드에 접근하는 것입니다.</p>
<p>실행될 모듈을 찾는 과정에서 포함하는 패키지를 임포트해야 할 수도 있습니다. 이러한 패키지 임포트가 실행될 모듈에 미치는 영향은 다음과 같습니다.</p>
<ul>
<li>포함하는 패키지가 <code>sys.modules</code>에 있게 됩니다.</li>
<li>패키지 초기화의 외부 효과 (예: 설치된 임포트 훅, 로거, <code>atexit</code> 핸들러 등).</li>
</ul>
<h2>참조 구현 (Reference Implementation)</h2>
<p>참조 구현은 SourceForge에서 사용할 수 있으며 (), 라이브러리 참조 문서도 제공됩니다 (). 이 구현은 두 부분으로 구성됩니다.</p>
<ol>
<li>제안된 표준 라이브러리 모듈 <code>runpy</code>.</li>
<li><code>-m</code> 스위치 구현 코드의 수정. 모듈을 직접 실행하려 하지 않고 항상 <code>runpy.run_module</code>에 위임하도록 변경됩니다.</li>
</ol>
<p>위임은 다음과 같은 형태를 가집니다:
<code>runpy.run_module(sys.argv[0], run_name="__main__", alter_sys=True)</code></p>
<p><code>run_module</code>은 <code>runpy</code>가 공개 API에서 노출하는 유일한 함수입니다.</p>
<h3><code>run_module(mod_name[, init_globals][, run_name][, alter_sys])</code></h3>
<p>지정된 모듈의 코드를 실행하고 결과 모듈 전역(globals) 딕셔너리를 반환합니다. 모듈의 코드는 먼저 표준 임포트 메커니즘을 사용하여 찾은 다음 (자세한 내용은 PEP 302 참조), 새로운 모듈 이름 공간에서 실행됩니다.</p>
<ul>
<li>선택적 딕셔너리 인수 <code>init_globals</code>는 코드가 실행되기 전에 전역 딕셔너리를 미리 채우는 데 사용될 수 있습니다. 제공된 딕셔너리는 수정되지 않습니다.</li>
<li><code>__name__</code>, <code>__file__</code>, <code>__loader__</code>, <code>__builtins__</code>와 같은 특수 전역 변수는 모듈 코드가 실행되기 전에 전역 딕셔너리에 설정됩니다.
<ul>
<li><code>__name__</code>은 <code>run_name</code> 인수가 제공되면 해당 값으로 설정되고, 그렇지 않으면 원래 <code>mod_name</code> 인수로 설정됩니다.</li>
<li><code>__loader__</code>는 모듈의 코드를 가져오는 데 사용된 PEP 302 모듈 로더로 설정됩니다.</li>
<li><code>__file__</code>은 모듈 로더가 제공하는 이름으로 설정됩니다. 로더가 파일명 정보를 제공하지 않으면 <code>None</code>으로 설정됩니다.</li>
<li><code>__builtins__</code>는 <code>__builtin__</code> 모듈의 최상위 이름 공간에 대한 참조로 자동으로 초기화됩니다.</li>
</ul>
</li>
<li><code>alter_sys</code> 인수가 제공되고 <code>True</code>로 평가되면, <code>sys.argv[0]</code>은 <code>__file__</code> 값으로 업데이트되고, <code>sys.modules[__name__]</code>은 실행 중인 모듈의 임시 모듈 객체로 업데이트됩니다. 이 함수가 반환되기 전에 <code>sys.argv[0]</code>과 <code>sys.modules[__name__]</code>은 원래 값으로 복원됩니다.</li>
</ul>
<p>스크립트로 호출될 때 <code>runpy</code> 모듈은 첫 번째 인수로 제공된 모듈을 찾아 실행합니다. <code>sys.argv[0]</code> (이는 <code>runpy</code> 모듈 자체를 참조합니다)을 삭제하여 <code>sys.argv</code>를 조정한 다음, <code>run_module(sys.argv[0], run_name="__main__", alter_sys=True)</code>를 호출합니다.</p>
<h2>임포트 문과 메인 모듈 (Import Statements and the Main Module)</h2>
<p>Python 2.5b1 출시 후, 이 PEP와 PEP 328 (명시적 상대 임포트) 사이에 놀라운 상호작용이 드러났습니다. 메인 모듈에서는 명시적 상대 임포트(explicit relative imports)가 작동하지 않습니다. 이는 상대 임포트가 <code>__name__</code>에 의존하여 패키지 계층 구조에서 현재 모듈의 위치를 결정하기 때문입니다. 메인 모듈에서 <code>__name__</code> 값은 항상 <code>'__main__'</code>이므로, 명시적 상대 임포트는 항상 실패합니다 (패키지 내부의 모듈에서만 작동하기 때문입니다).</p>
<p>메인 모듈이 직접 실행될 때 암시적 상대 임포트(implicit relative imports)가 작동하는 것처럼 보이지만, <code>-m</code>을 사용하여 실행될 때는 실패하는 이유를 조사한 결과, 이러한 임포트는 실제로는 항상 절대 임포트(absolute imports)로 처리되는 것으로 나타났습니다. 직접 실행 방식 때문에 실행된 모듈을 포함하는 패키지가 <code>sys.path</code>에 추가되어, 그 형제 모듈(sibling modules)이 실제로는 최상위 모듈로 임포트됩니다. 이는 직접 실행될 수 있는 모듈(예: 테스트 모듈 또는 유틸리티 스크립트)에서 암시적 상대 임포트를 사용하면 애플리케이션에 형제 모듈의 여러 복사본이 생길 수 있습니다.</p>
<p>Python 2.5 릴리스에서는 메인 모듈로 사용될 모든 모듈에서 항상 절대 임포트를 사용하는 것을 권장합니다. 여기서 <code>-m</code> 스위치가 이점을 제공합니다. <code>-m</code>은 메인 모듈을 포함하는 디렉토리 대신 현재 디렉토리를 <code>sys.path</code>에 삽입합니다. 이는 현재 디렉토리에 패키지의 최상위 디렉토리가 있는 한, <code>-m</code>을 사용하여 패키지 내부의 모듈을 실행할 수 있음을 의미합니다. 패키지가 <code>sys.path</code>의 다른 곳에 설치되어 있지 않아도 절대 임포트는 올바르게 작동합니다. 모듈이 직접 실행되고 형제 모듈을 검색하기 위해 절대 임포트를 사용하는 경우, 최상위 패키지 디렉토리가 <code>sys.path</code> 어딘가에 설치되어 있어야 합니다 (현재 디렉토리가 자동으로 추가되지 않기 때문입니다).</p>
<p>다음은 예시 파일 레이아웃입니다:</p>
<pre><code>devel/
    pkg/
        __init__.py
        moduleA.py
        moduleB.py
    test/
        __init__.py
        test_A.py
        test_B.py
</code></pre>
<p>현재 디렉토리가 <code>devel</code>이거나 <code>devel</code>이 이미 <code>sys.path</code>에 있고, 테스트 모듈이 절대 임포트(예: <code>import pkg.moduleA</code>)를 사용하여 테스트 대상 모듈을 가져오는 한, PEP 338은 테스트를 다음과 같이 실행할 수 있도록 허용합니다:</p>
<pre><code class="language-bash">python -m pkg.test.test_A
python -m pkg.test.test_B
</code></pre>
<p>메인 모듈이 <code>-m</code>으로 실행될 때 상대 임포트가 지원되어야 하는지 여부는 Python 2.6에서 다시 논의될 문제입니다. 이를 허용하려면 Python의 임포트 의미론이나 모듈이 메인 모듈임을 나타내는 의미론에 변경이 필요하므로 서둘러 결정할 사안이 아닙니다.</p>
<h2>해결된 문제 (Resolved Issues)</h2>
<p><code>runpy</code> 모듈 개발에 영향을 미친 몇 가지 핵심 설계 결정이 있었습니다.</p>
<ul>
<li><strong>특수 변수 설정</strong>: <code>__name__</code>, <code>__file__</code>, <code>__loader__</code>와 같은 특수 변수는 모듈이 실행되기 전에 모듈의 전역 이름 공간에 설정됩니다. <code>run_module</code>은 이 값을 변경하므로, 제공된 딕셔너리를 직접 변이시키지 않습니다. (만약 그랬다면, <code>globals()</code>를 이 함수에 전달했을 때 심각한 부작용이 발생할 수 있습니다.)</li>
<li><strong>정보 부족 시 처리</strong>: 때로는 특수 변수를 채우는 데 필요한 정보를 얻을 수 없을 때가 있습니다. 너무 똑똑하게 처리하려 하지 않고, 관련 정보를 결정할 수 없을 때는 이 변수들을 단순히 <code>None</code>으로 설정합니다.</li>
<li><strong><code>alter_sys</code> 인수에 대한 보호</strong>: <code>alter_sys</code> 인수에 대한 특별한 보호는 없습니다. 이로 인해 파일명 정보를 사용할 수 없는 경우 <code>sys.argv[0]</code>이 <code>None</code>으로 설정될 수 있습니다.</li>
<li><strong>스레드 문제</strong>: <code>alter_sys</code>가 <code>True</code>로 설정될 때 발생하는 잠재적 스레딩 문제를 피하기 위해 임포트 락(import lock)은 사용되지 않습니다. 대신, 스레드 코드는 이 플래그를 사용하지 않도록 권장됩니다.</li>
</ul>
<h2>대안 (Alternatives)</h2>
<p>고려되었던 첫 번째 대안 구현은 패키지의 <code>__path__</code> 변수를 무시하고 메인 패키지 디렉토리만 살펴보는 것이었습니다. 이러한 동작을 가진 Python 스크립트는 <code>execmodule</code> 쿡북 레시피 () 토론에서 찾을 수 있습니다.</p>
<p><code>execmodule</code> 쿡북 레시피 자체는 이 PEP의 초기 버전에서 제안된 메커니즘이었습니다 (PEP 작성자가 PEP 302를 읽기 전).</p>
<p>두 접근 방식 모두 <code>-m</code> 스위치의 주요 목표(명령줄에서 실행할 모듈을 찾기 위해 전체 Python 이름 공간을 사용할 수 있도록 하는 것)를 충족하지 못했기 때문에 거부되었습니다.</p>
<p>이 PEP의 초기 버전에는 <code>exec</code>가 로컬 딕셔너리와 함수 객체에서 코드를 처리하는 방식에 대한 몇 가지 잘못된 가정이 포함되어 있었습니다. 이러한 잘못된 가정은 이제 제거된 불필요한 설계 복잡성을 초래했습니다. <code>run_code</code>는 <code>exec</code>의 모든 특이점을 공유합니다.</p>
<p>또한, 초기 버전의 PEP는 <code>-m</code> 스위치 업데이트를 구현하는 데 필요한 단일 <code>run_module()</code> 함수보다 더 광범위한 API를 노출했습니다. 단순성을 위해 이러한 추가 함수는 제안된 API에서 제외되었습니다.</p>
<p>SVN에서의 초기 구현 이후, 초기 애플리케이션 스크립트를 실행할 때 임포트 락을 유지하는 것이 올바르지 않다는 것이 분명해졌습니다 (예: <code>python -m test.regrtest test_threadedimport</code>가 실패했습니다). 따라서 <code>run_module</code> 함수는 모듈을 실제로 검색하는 동안에만 임포트 락을 유지하며, <code>alter_sys</code>가 설정되어 있어도 실행 전에 락을 해제합니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 338 - Executing modules as scripts"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 18:45:56+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
