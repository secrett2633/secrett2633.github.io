3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/448","c"]
0:["SAPzS3zi9tsG5MkeKvxIA",[[["",{"children":[["slug","python/pep/448","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"448\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/448","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T28a3,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0448/">PEP 448 - Additional Unpacking Generalizations</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 29-Jun-2013</p>
</blockquote>
<h2>PEP 448 – 추가적인 언패킹 일반화 (Additional Unpacking Generalizations)</h2>
<h3>요약 (Abstract)</h3>
<p>이 PEP(Python Enhancement Proposal)는 <code>*</code> 이터러블 언패킹(iterable unpacking) 연산자와 <code>**</code> 딕셔너리 언패킹(dictionary unpacking) 연산자의 확장된 사용법을 제안합니다. 이를 통해 더 많은 위치에서, 임의의 횟수로 언패킹을 허용하며, 특히 함수 호출(function calls) 및 디스플레이(displays, 즉 리터럴 컨테이너 생성 시) 내에서 언패킹을 가능하게 합니다.</p>
<p>함수 호출에서는 단 한 번의 언패킹이 아니라 임의의 횟수만큼 언패킹을 지원하도록 제안됩니다.
예시:</p>
<pre><code class="language-python">>>> print(*[1], *[2], 3)
1 2 3
>>> dict(**{'x': 1}, y=2, **{'z': 3})
{'x': 1, 'y': 2, 'z': 3}
</code></pre>
<p>또한, 튜플(tuple), 리스트(list), 세트(set), 딕셔너리(dictionary) 디스플레이(컨테이너 리터럴) 내부에서도 언패킹이 허용됩니다.
예시:</p>
<pre><code class="language-python">>>> *range(4), 4
(0, 1, 2, 3, 4)
>>> [*range(4), 4]
[0, 1, 2, 3, 4]
>>> {*range(4), 4}
{0, 1, 2, 3, 4}
>>> {'x': 1, **{'y': 2}}
{'x': 1, 'y': 2}
</code></pre>
<p>딕셔너리에서는 나중에 오는 값이 항상 이전 값을 덮어씁니다.
예시:</p>
<pre><code class="language-python">>>> {'x': 1, **{'x': 2}}
{'x': 2}
>>> {**{'x': 2}, 'x': 1}
{'x': 1}
</code></pre>
<p>이 PEP는 리스트, 세트, 딕셔너리 컴프리헨션(comprehensions) 내에서의 언패킹 연산자 포함은 다루지 않으며, 이는 향후 제안으로 고려될 수 있습니다.</p>
<h3>배경 (Rationale)</h3>
<p>현재 <code>*</code> 이터러블 언패킹 연산자의 사용에는 불필요한 제약이 있어 코드 가독성을 해칠 수 있습니다.</p>
<p>여러 이터러블을 여러 번 언패킹하는 것은 분명한 이유가 있습니다. 여러 이터러블을 함수 정의로 언패킹하거나 언패킹 뒤에 추가적인 위치 인수(positional arguments)를 붙이려면 가장 자연스러운 방법은 다음과 같이 작성하는 것일 것입니다.</p>
<pre><code class="language-python">function(**kw_arguments, **more_arguments)
function(*arguments, argument)
</code></pre>
<p><code>print</code>나 <code>str.format</code> 같은 간단한 예시에서 이러한 기능이 유용합니다. 대신, 다음과 같이 작성해야 할 수 있습니다.</p>
<pre><code class="language-python">kwargs = dict(kw_arguments)
kwargs.update(more_arguments)
function(**kwargs)
args = list(arguments)
args.append(arg)
function(*args)
</code></pre>
<p>또는, 방법을 알고 있다면 다음과 같이 작성할 수 있습니다.</p>
<pre><code class="language-python">from collections import ChainMap
function(**ChainMap(more_arguments, arguments))
from itertools import chain
function(*chain(args, [arg]))
</code></pre>
<p>이러한 방식은 불필요한 코드의 복잡성을 추가하고, 첫 번째 방법은 작업의 중복을 야기합니다.</p>
<p>컨테이너(튜플, 리스트, 세트, 딕셔너리) 내부에서 언패킹을 허용하는 두 가지 주요 이유가 있습니다.
첫째, 할당(assignment)의 대칭성(symmetry)이 있습니다. 예를 들어 <code>fst, *other, lst = elems</code>와 <code>elems = fst, *other, lst</code>는 타입의 세부 사항을 무시하면 대략적인 역관계입니다. 이는 특별한 경우(special cases)를 제거하여 언어를 단순화하는 효과가 있습니다.</p>
<p>둘째, 딕셔너리 결합과 같은 "추가(addition)" 유형을 명확하고 잘 정의된 방식으로 크게 단순화합니다.</p>
<pre><code class="language-python">combination = {**first_dictionary, "x": 1, "y": 2}
</code></pre>
<p>다음과 같이 작성하는 대신:</p>
<pre><code class="language-python">combination = first_dictionary.copy()
combination.update({"x": 1, "y": 2})
</code></pre>
<p>이는 표현식(expressions)이 선호되는 맥락에서 특히 중요합니다. 또한, <code>my_list + list(my_tuple) + list(my_range)</code>와 같이 이터러블을 리스트로 합치는 것을 더욱 가독성 좋은 방법인 <code>[*my_list, *my_tuple, *my_range]</code>로 대체할 수 있게 하여 유용합니다.</p>
<h3>명세 (Specification)</h3>
<p>함수 호출은 무제한의 <code>*</code> 및 <code>**</code> 언패킹을 허용할 수 있습니다. 위치 인수와 <code>*</code> 언패킹의 순서에 대한 제약은 없으며, 키워드 인수와 <code>**</code> 언패킹의 순서에 대한 제약도 없습니다.</p>
<p>함수 호출은 여전히 키워드 인수가 위치 인수 뒤에 와야 한다는 제약을 가지며, <code>**</code> 언패킹은 추가적으로 <code>*</code> 언패킹 뒤에 와야 합니다.</p>
<p>현재, 인수가 여러 번 주어지는 경우(예: 위치 인수와 키워드 인수로 동시에 주어지는 경우)에는 <code>TypeError</code>가 발생합니다. 이는 여러 <code>**</code> 언패킹을 통해 중복 인수가 제공되는 경우에도 마찬가지입니다(예: <code>f(**{'x': 2}, **{'x': 3})</code>), 다만 이 오류는 런타임에 감지됩니다.</p>
<p>함수는 다음과 같은 형태를 가집니다:</p>
<pre><code>function( argument or *args, argument or *args, ..., kwargument or *args, kwargument or *args, ..., kwargument or **kwargs, kwargument or **kwargs, ... )
</code></pre>
<p>튜플, 리스트, 세트, 딕셔너리는 언패킹을 허용할 것입니다. 이는 언패킹되는 항목의 요소들이 함수 호출 시의 언패킹과 매우 유사하게 언패킹 위치에 순서대로 삽입되는 것처럼 작동합니다. 딕셔너리는 <code>**</code> 언패킹을 필요로 하며, 다른 모든 컨테이너는 <code>*</code> 언패킹을 필요로 합니다.</p>
<p>딕셔너리의 키는 오른쪽에서 왼쪽으로 우선순위를 유지합니다. 따라서 <code>{**{'a': 1}, 'a': 2, **{'a': 3}}</code>는 <code>{'a': 3}</code>으로 평가됩니다. 언패킹의 수나 위치에 대한 제약은 없습니다.</p>
<h3>단점 (Disadvantages)</h3>
<p>함수 호출에서 인수에 허용되는 순서는 이전보다 더 복잡해졌습니다. 규칙에 대한 가장 간단한 설명은 "위치 인수는 키워드 인수 및 <code>**</code> 언패킹보다 선행하며; <code>*</code> 언패킹은 <code>**</code> 언패킹보다 선행한다"일 수 있습니다.</p>
<p><code>*elements, = iterable</code>는 <code>elements</code>를 리스트로 만드는 반면, <code>elements = *iterable,</code>는 <code>elements</code>를 튜플로 만듭니다. 이러한 구성에 익숙하지 않은 사람들에게는 그 이유가 혼란스러울 수 있습니다.</p>
<p>딕셔너리에서 중복 키는 허용되지만, 함수 호출 구문에서 중복 키는 에러를 발생시키는 예상치 못한 차이에 대한 우려가 제기되었습니다. 비록 이는 현재 구문에서도 마찬가지이지만, 이 제안은 문제를 악화시킬 수 있습니다. 이것이 실제 사용에서 얼마나 큰 문제가 될지는 아직 지켜봐야 합니다.</p>
<h3>변형 (Variations)</h3>
<p>이 PEP는 원래 함수 호출에서 인수 타입(위치, 키워드, <code>*</code>, <code>**</code>)의 순서가 덜 엄격해질 수 있는지 고려했습니다. 그러나 이는 거의 지지를 받지 못하여 폐기되었습니다.</p>
<p>이 PEP의 초기 버전에서는 리스트, 세트, 딕셔너리 컴프리헨션 내부에서 언패킹 연산자를 컨테이너 이터러블에 대한 플래트닝(flattening) 연산자로 허용했습니다.
예시:</p>
<pre><code class="language-python">>>> ranges = [range(i) for i in range(5)]
>>> [*item for item in ranges]
[0, 0, 1, 0, 1, 2, 0, 1, 2, 3]
>>> {*item for item in ranges}
{0, 1, 2, 3}
</code></pre>
<p>이는 가독성에 대한 강한 우려와 미약한 지지를 동시에 받았습니다. PEP의 논란이 적은 측면들에 불이익을 주지 않기 위해, 이 부분은 나머지 제안과 함께 받아들여지지 않았습니다.</p>
<p><code>f(x for x in it)</code>와 같이 함수 호출 내에서 괄호 없는 컴프리헨션(unbracketed comprehensions)은 이미 유효합니다. 이는 다음과 같이 확장될 수 있었습니다.</p>
<pre><code class="language-python">f(*x for x in it) == f((*x for x in it))
f(**x for x in it) == f({**x for x in it})
</code></pre>
<p>그러나 이것이 최선의 동작인지, 아니면 <code>f</code> 호출의 인수로 언패킹되어야 하는지는 명확하지 않았습니다. 이는 혼란스러울 가능성이 높고 유용성이 매우 미미하므로 이 PEP에는 포함되지 않았습니다. 대신, 이들은 <code>SyntaxError</code>를 발생시키며, 명시적인 괄호가 있는 컴프리헨션을 대신 사용해야 합니다.</p>
<h3>승인 (Approval)</h3>
<p>이 PEP는 2015년 2월 25일 Guido van Rossum에 의해 승인되었습니다.</p>
<h3>구현 (Implementation)</h3>
<p>Python 3.5를 위한 구현은 버그 트래커의 Issue 2292에서 찾을 수 있습니다. 이 구현은 현재 컴프리헨션 내 언패킹 지원을 포함하고 있으며, 이는 제거되어야 합니다.</p>
<h3>참고 자료 (References)</h3>
<ul>
<li>PEP accepted, “PEP 448 review”, Guido van Rossum (https://mail.python.org/pipermail/python-dev/2015-February/138564.html)</li>
<li>Issue 2292, “Missing * -unpacking generalizations”, Thomas Wouters (https://github.com/python/cpython/issues/46545)</li>
<li>Discussion on Python-ideas list, “list / array comprehensions extension”, Alexander Heger (https://mail.python.org/pipermail/python-ideas/2011-December/013097.html)</li>
</ul>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인(public domain)에 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 448 - Additional Unpacking Generalizations"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 22:00:00+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
