3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-ce60b0a6591d04ed.js"],""]
4:["slug","python/pep/663","c"]
0:["e6YNzZ2BVZ8NBZ6boXfWj",[[["",{"children":[["slug","python/pep/663","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"663\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/663","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T38f2,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0663/">PEP 663 - Standardizing Enum str(), repr(), and format() behaviors</a></p>
<p><strong>상태:</strong> Rejected | <strong>유형:</strong> Informational | <strong>작성일:</strong> 30-Jun-2021</p>
</blockquote>
<h1>PEP 663 – Enum의 <code>str()</code>, <code>repr()</code>, <code>format()</code> 동작 표준화</h1>
<ul>
<li><strong>작성자:</strong> Ethan Furman</li>
<li><strong>상태:</strong> Rejected (거부됨)</li>
<li><strong>타입:</strong> Informational (정보성)</li>
<li><strong>생성일:</strong> 2021년 6월 30일</li>
<li><strong>Python 버전:</strong> 3.11</li>
<li><strong>해결:</strong> Python-Dev 메시지</li>
</ul>
<h2>개요 (Abstract)</h2>
<p>이 PEP는 다양한 <code>Enum</code> 타입의 <code>repr()</code>, <code>str()</code>, 그리고 <code>format()</code> 메서드를 의도된 목적에 더 잘 부합하도록 업데이트하는 것을 제안합니다. 예를 들어, <code>IntEnum</code>의 <code>str()</code>은 <code>format()</code>과 일치하도록 변경되며, 사용자가 정의한 <code>int-enum</code>은 <code>format()</code>이 <code>str()</code>과 일치하도록 변경됩니다. 모든 경우에 <code>enum</code>의 <code>str()</code>과 <code>format()</code>은 동일하게 유지됩니다(사용자가 <code>format()</code>을 오버라이드하지 않는 한).</p>
<p>또한, 데코레이트된 <code>enum</code>의 <code>str()</code>, <code>repr()</code> (및 <code>format()</code>)을 유효한 전역 참조(예: <code>&#x3C;RegexFlag.IGNORECASE: 2></code> 대신 <code>re.IGNORECASE</code>)로 변경하는 전역 <code>enum</code> 데코레이터를 추가하는 것을 제안합니다.</p>
<h2>동기 (Motivation)</h2>
<ul>
<li><code>IntEnum</code>과 <code>IntFlag</code>의 <code>str()</code>이 값이 아닌 다른 형태로 출력되어 기존 상수를 대체할 때 버그를 유발하고 추가 작업을 필요하게 만들었습니다.</li>
<li><code>enum</code> 멤버의 <code>str()</code>과 <code>format()</code>이 다르면 혼란을 줄 수 있습니다.</li>
<li><code>StrEnum</code>이 도입되면서 <code>str()</code>이 자신의 값이어야 한다는 요구사항이 다른 <code>Enum</code> 타입의 <code>str()</code>과는 일관성이 없었습니다.</li>
<li><code>Flag</code> 멤버의 반복(iteration)은 <code>repr()</code>에 직접적인 영향을 미치는데, 이 방식이 비우아하거나 최악의 경우 버그를 유발할 수 있습니다.</li>
</ul>
<h2>근거 (Rationale)</h2>
<p><code>Enum</code>은 표준 라이브러리에서 점점 더 보편화되고 있습니다. <code>enum</code> 멤버를 <code>repr()</code>을 통해 인식할 수 있고, 이 <code>repr()</code>이 파싱하기 쉽다는 점은 코드 이해 및 디버깅에 유용하며 시간과 노력을 절약할 수 있습니다.</p>
<p>하지만, 데이터 타입이 혼합된 <code>enum</code> (예: <code>IntEnum</code>, <code>IntFlag</code>, 새로운 <code>StrEnum</code>)은 대체하려는 기존 상수와의 하위 호환성을 더 많이 확보해야 합니다. 특히 <code>str(replacement_enum_member) == str(original_constant)</code>이 참이어야 하며, <code>format()</code>도 마찬가지여야 합니다.</p>
<p><code>IntEnum</code>, <code>IntFlag</code>, <code>StrEnum</code>은 기존 정수 및 문자열 상수를 가능한 한 완벽하게 대체할 수 있어야 합니다. 이러한 목표를 위해, 각 <code>enum</code>의 <code>str()</code> 출력은 그 고유한 값이어야 합니다. 예를 들어, <code>Color</code>가 <code>IntEnum</code>이라면:</p>
<pre><code class="language-python">>>> Color.RED
&#x3C;Color.RED: 1>
>>> str(Color.RED)
'1'
>>> format(Color.RED)
'1'
</code></pre>
<p><code>format()</code>은 이미 올바른 출력을 생성하고 있으므로, <code>str()</code>만 업데이트가 필요합니다.</p>
<p>가능한 한 <code>enum</code> 멤버의 <code>str()</code>, <code>repr()</code>, <code>format()</code>은 표준 라이브러리 전반에 걸쳐 표준화되어야 합니다. 그러나 Python 3.10까지는 표준 라이브러리의 여러 <code>enum</code>이 사용자 정의 <code>str()</code> 및/또는 <code>repr()</code>을 가지고 있습니다.</p>
<p><code>Flag</code>의 <code>repr()</code>은 현재 포함해서는 안 되는 별칭(aliases)을 포함하고 있습니다. 이 문제를 해결하면 특정 경우에 <code>repr()</code>이 변경될 것입니다.</p>
<h2>명세 (Specification)</h2>
<p><code>enum</code> 사용에는 크게 세 가지 범주가 있습니다:</p>
<ol>
<li><strong>Simple (단순):</strong> <code>Enum</code> 또는 <code>Flag</code>와 같이 데이터 타입 믹스인(mixin) 없이 새로운 <code>enum</code> 클래스가 생성됩니다.</li>
<li><strong>Drop-in Replacement (드롭인 대체):</strong> <code>IntEnum</code>, <code>IntFlag</code>, <code>StrEnum</code>과 같이 <code>int</code> 또는 <code>str</code>을 서브클래싱하고 <code>int.__str__</code> 또는 <code>str.__str__</code>을 사용하는 새로운 <code>enum</code> 클래스가 생성됩니다.</li>
<li><strong>User-mixed enums and flags (사용자 혼합 <code>enum</code> 및 <code>flag</code>):</strong> 사용자가 <code>enum.IntEnum</code> 등을 사용하는 대신 자신만의 정수, 실수, 문자열 등 <code>enum</code>을 생성합니다.</li>
</ol>
<p>또한 두 가지 스타일이 있습니다:</p>
<ol>
<li><strong>Normal (일반):</strong> 열거 멤버가 자신의 클래스에 남아 있으며 <code>classname.membername</code>으로 접근되고, 클래스 이름이 <code>repr()</code>과 <code>str()</code>에 (적절한 경우) 표시됩니다.</li>
<li><strong>Global (전역):</strong> 열거 멤버가 해당 모듈의 전역 네임스페이스로 복사되며, 모듈 이름이 <code>repr()</code>과 <code>str()</code>에 (적절한 경우) 표시됩니다.</li>
</ol>
<p>다음 두 표는 위 분류에 따라 <code>enum</code>과 <code>flag</code>의 <code>repr()</code>, <code>str()</code>, <code>format()</code>이 어떻게 변경되는지를 보여줍니다. (빈 셀은 변경 없음)</p>
<h3>Enum의 <code>repr()</code>, <code>str()</code>, <code>format()</code> 변경 (이전 및 신규)</h3>
<p>| style  | category    | enum repr() (3.10)       | enum repr() (new)        | enum str() (3.10)        | enum str() (new)         | enum format() (3.10)     | enum format() (new)      |
| :----- | :---------- | :----------------------- | :----------------------- | :----------------------- | :----------------------- | :----------------------- | :----------------------- |
| normal | simple      | <code>&#x3C;Hue.LIGHT: -1></code>        |                          | <code>Hue.LIGHT</code>              |                          | <code>Hue.LIGHT</code>              |                          |
|        | user mixed  | <code>&#x3C;Grey.WHITE: 1></code>        |                          | <code>Grey.WHITE</code>             |                          | <code>Grey.WHITE</code>             |                          |
|        | int drop-in | <code>&#x3C;Hue.LIGHT: -1></code>        |                          | <code>Hue.LIGHT</code>              | <code>-1</code>                     | <code>-1</code>                     |                          |
| global | simple      | <code>&#x3C;Hue.LIGHT: -1></code>        | <code>tools.LIGHT</code>            | <code>Hue.LIGHT</code>              | <code>LIGHT</code>                  | <code>Hue.LIGHT</code>              | <code>LIGHT</code>                  |
|        | user mixed  | <code>&#x3C;Grey.WHITE: 1></code>        | <code>tools.WHITE</code>            | <code>Grey.WHITE</code>             | <code>WHITE</code>                  | <code>Grey.WHITE</code>             | <code>WHITE</code>                  |
|        | int drop-in | <code>&#x3C;Hue.LIGHT: -1></code>        | <code>tools.LIGHT</code>            | <code>Hue.LIGHT</code>              | <code>-1</code>                     | <code>-1</code>                     |                          |</p>
<h3>Flag의 <code>repr()</code>, <code>str()</code>, <code>format()</code> 변경 (이전 및 신규)</h3>
<p>| style  | category    | flag repr() (3.10)             | flag repr() (new)              | flag str() (3.10)              | flag str() (new)                 | flag format() (3.10)           | flag format() (new)            |
| :----- | :---------- | :----------------------------- | :----------------------------- | :----------------------------- | :------------------------------- | :----------------------------- | :----------------------------- |
| normal | simple      | <code>&#x3C;Color.RED|GREEN: 3></code>         | <code>&#x3C;Color(3): RED|GREEN></code>        | <code>Color.RED|GREEN</code>              | <code>Color.RED|Color.GREEN</code>          | <code>Color.RED|GREEN</code>              | <code>Color.RED|Color.GREEN</code>        |
|        | user mixed  | <code>&#x3C;Grey.WHITE: 1></code>              | <code>&#x3C;Grey(1): WHITE></code>             | <code>1</code>                            | <code>Grey.WHITE</code>                     | <code>1</code>                            | <code>Grey.WHITE</code>                   |
|        | int drop-in | <code>&#x3C;Color.RED|GREEN: 3></code>         | <code>&#x3C;Color(3): RED|GREEN></code>        | <code>Color.RED|GREEN</code>              | <code>3</code>                              | <code>Color.RED|GREEN</code>              | <code>3</code>                            |
| global | simple      | <code>&#x3C;Color.RED|GREEN: 3></code>         | <code>tools.RED|tools.GREEN</code>        | <code>Color.RED|GREEN</code>              | <code>RED|GREEN</code>                      | <code>Color.RED|GREEN</code>              | <code>RED|GREEN</code>                    |
|        | user mixed  | <code>&#x3C;Grey.WHITE: 1></code>              | <code>tools.WHITE</code>                  | <code>Grey.WHITE</code>                   | <code>WHITE</code>                          | <code>1</code>                            | <code>WHITE</code>                        |
|        | int drop-in | <code>&#x3C;Color.RED|GREEN: 3></code>         | <code>tools.RED|tools.GREEN</code>        | <code>Color.RED|GREEN</code>              | <code>3</code>                              | <code>Color.RED|GREEN</code>              | <code>3</code>                            |</p>
<p>최종 결과 표는 다음과 같습니다:</p>
<h3>최종 Enum <code>repr()</code>, <code>str()</code>, <code>format()</code></h3>
<p>| style  | category    | enum repr()        | enum str()  | enum format() |
| :----- | :---------- | :----------------- | :---------- | :------------ |
| normal | simple      | <code>&#x3C;Hue.LIGHT: -1></code>  | <code>Hue.LIGHT</code> | <code>Hue.LIGHT</code>   |
|        | user mixed  | <code>&#x3C;Grey.WHITE: 1></code>  | <code>Grey.WHITE</code>| <code>Grey.WHITE</code>  |
|        | int drop-in | <code>&#x3C;Hue.LIGHT: -1></code>  | <code>-1</code>        | <code>-1</code>          |
| global | simple      | <code>tools.LIGHT</code>      | <code>LIGHT</code>     | <code>LIGHT</code>       |
|        | user mixed  | <code>tools.WHITE</code>      | <code>WHITE</code>     | <code>WHITE</code>       |
|        | int drop-in | <code>tools.LIGHT</code>      | <code>-1</code>        | <code>-1</code>          |</p>
<h3>최종 Flag <code>repr()</code>, <code>str()</code>, <code>format()</code></h3>
<p>| style  | category    | flag repr()            | flag str()          | flag format()       |
| :----- | :---------- | :--------------------- | :------------------ | :------------------ |
| normal | simple      | <code>&#x3C;Color(3): RED|GREEN></code>| <code>Color.RED|Color.GREEN</code>| <code>Color.RED|Color.GREEN</code>|
|        | user mixed  | <code>&#x3C;Grey(1): WHITE></code>     | <code>Grey.WHITE</code>        | <code>Grey.WHITE</code>        |
|        | int drop-in | <code>&#x3C;Color(3): RED|GREEN></code>| <code>3</code>                 | <code>3</code>                 |
| global | simple      | <code>tools.RED|tools.GREEN</code>| <code>RED|GREEN</code>         | <code>RED|GREEN</code>         |
|        | user mixed  | <code>tools.WHITE</code>          | <code>WHITE</code>             | <code>WHITE</code>             |
|        | int drop-in | <code>tools.RED|tools.GREEN</code>| <code>3</code>                 | <code>3</code>                 |</p>
<p>보시다시피, <code>repr()</code>은 주로 멤버가 전역(global)인지 여부에 영향을 받으며, <code>str()</code>은 전역이거나 드롭인 대체(drop-in replacement)인지 여부에 영향을 받습니다. 드롭인 대체 상태가 더 높은 우선순위를 가집니다. 또한, 이전 스타일이 결함이 있었기 때문에 <code>flag</code>의 기본 <code>repr()</code>과 <code>str()</code>도 변경되었습니다.</p>
<h2>하위 호환성 (Backwards Compatibility)</h2>
<p>주요 Python 버전 간에 문자열화된 객체의 하위 호환성은 보장되지 않으며, 소프트웨어가 테스트, 문서, 데이터 구조 및/또는 코드 생성에서 <code>enum</code>의 <code>repr()</code>, <code>str()</code>, <code>format()</code> 출력을 사용하는 경우 하위 호환성 문제가 발생할 것입니다.</p>
<p><code>enum</code> 멤버의 일반적인 사용법은 변경되지 않습니다. 예를 들어, <code>re.ASCII</code>는 여전히 <code>re.ASCII</code>로 사용될 수 있으며 256과 계속 동일하게 비교됩니다.</p>
<p>이전 출력을 유지해야 하는 경우(예: 다른 Python 버전 간의 호환성을 보장하기 위해), 소프트웨어 프로젝트는 적절한 메서드를 오버라이드(override)하여 자체 <code>enum</code> 기본 클래스를 생성해야 합니다.</p>
<p>드롭인(drop-in) 카테고리의 <code>str()</code>을 변경함으로써, <code>IntEnum</code> 등이 기존 상수를 대체하는 데 사용될 때 향후 발생할 수 있는 문제를 실제로 방지할 수 있습니다.</p>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인 또는 CC0-1.0-Universal 라이선스 중 더 관대한 조건으로 배포됩니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Rejected] PEP 663 - Standardizing Enum str(), repr(), and format() behaviors"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 09:57:11+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
