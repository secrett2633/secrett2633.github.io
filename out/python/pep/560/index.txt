3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-19cfc001fdac3337.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-51594f997fc19690.js"],""]
4:["slug","python/pep/560","c"]
0:["FeyCvJug7In7AgUZlfHUx",[[["",{"children":[["slug","python/pep/560","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"560\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/560","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T234e,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0560/">PEP 560 - Core support for typing module and generic types</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 03-Sep-2017</p>
</blockquote>
<h2>PEP 560 – <code>typing</code> 모듈 및 제네릭 타입에 대한 핵심 지원</h2>
<h3>개요</h3>
<p>PEP 560은 <code>typing</code> 모듈과 제네릭 타입(<code>Generic</code> types)을 더 효율적으로 지원하기 위해 CPython 인터프리터 코어에 두 가지 특별 메서드인 <code>__class_getitem__</code>과 <code>__mro_entries__</code>를 추가하는 것을 제안합니다. 초기 PEP 484는 CPython 코어 변경을 피하도록 설계되었지만, 타입 힌트(<code>type hints</code>)와 <code>typing</code> 모듈이 널리 사용되면서 이러한 제한이 해제될 필요성이 생겼습니다. 이 제안은 <code>typing</code> 모듈의 성능 문제, 메타클래스(metaclass) 충돌, 그리고 현재 존재하는 다양한 임시방편(hacks)과 버그를 해결하는 것을 목표로 합니다.</p>
<h3>도입 배경 (Rationale)</h3>
<p>CPython 코어를 수정하지 않으려는 초기 제한은 <code>typing</code> 모듈이 광범위하게 사용되면서 여러 의문스러운 설계 결정으로 이어졌습니다. 주요 문제점은 다음과 같습니다.</p>
<ul>
<li><strong>성능 (Performance):</strong> <code>typing</code> 모듈은 표준 라이브러리에서 가장 무겁고 느린 모듈 중 하나입니다. 주로 subscripted generic types (예: <code>List[int]</code>)가 클래스 객체로 처리되기 때문입니다. 제안된 특별 메서드를 통해 제네릭 클래스 생성 속도 향상, MRO(Method Resolution Order) 길이 단축, 제네릭 클래스 인스턴스화 속도 개선 등 성능을 크게 개선할 수 있습니다.</li>
<li><strong>메타클래스 충돌 (Metaclass conflicts):</strong> 모든 제네릭 타입이 <code>GenericMeta</code>의 인스턴스이기 때문에, 사용자 정의 메타클래스를 사용하는 경우 해당 클래스를 제네릭으로 만들기 어렵습니다. 이 제안은 <code>GenericMeta</code> 메타클래스가 더 이상 필요 없게 함으로써 이 문제를 해결합니다.</li>
<li><strong>제거될 임시방편 및 버그 (Hacks and bugs that will be removed by this proposal):</strong> 현재 <code>typing</code> 모듈에는 <code>_generic_new</code> hack, <code>_next_in_mro</code> speed hack, <code>sys._getframe</code> hack 등 다수의 임시방편과 버그가 존재합니다. 또한, 제네릭 타입 간의 속성 공유 문제와 <code>__slots__</code>를 사용하는 제네릭 문제도 있습니다. 이 제안은 이러한 문제들을 해결하고 <code>typing</code> 모듈의 구현 복잡성을 줄여 유지보수를 용이하게 합니다.</li>
</ul>
<h3>명세 (Specification)</h3>
<h4><code>__class_getitem__</code></h4>
<p><code>__class_getitem__</code>은 클래스 자체에서 호출되는 <code>__getitem__</code>의 정확한 아날로그입니다. 이를 통해 <code>Iterable[int]</code>와 같은 경우 <code>GenericMeta.__getitem__</code>을 피할 수 있습니다. 이 메서드는 자동으로 클래스 메서드(<code>classmethod</code>)처럼 작동하며, <code>@classmethod</code> 데코레이터가 필요 없고 일반 속성처럼 상속됩니다. 메타클래스가 <code>__getitem__</code>을 정의하는 경우, 해당 메타클래스의 메서드가 우선합니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">class MyList:
    def __getitem__(self, index):
        return index + 1
    def __class_getitem__(cls, item):
        return f"{cls.__name__}[{item.__name__}]"

class MyOtherList(MyList):
    pass

assert MyList()[0] == 1
assert MyList[int] == "MyList[int]"
assert MyOtherList()[0] == 1
assert MyOtherList[int] == "MyOtherList[int]"
</code></pre>
<h4><code>__mro_entries__</code></h4>
<p>클래스 정의의 <code>bases</code> 튜플에 클래스 객체가 아닌 객체가 나타날 경우, 해당 객체에서 <code>__mro_entries__</code> 메서드를 찾습니다. 이 메서드가 발견되면 원래 <code>bases</code> 튜플을 인자로 호출되며, 그 결과는 해당 객체를 대체하여 기본 클래스에 삽입될 튜플이어야 합니다. 이 과정은 클래스 생성 프로세스에서 가장 먼저 발생하며, 업데이트된 <code>bases</code>를 사용하여 MRO 계산 등 모든 다른 단계가 정상적으로 진행됩니다. 원래 <code>bases</code>는 클래스 네임스페이스에 <code>__orig_bases__</code>로 저장됩니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">class GenericAlias:
    def __init__(self, origin, item):
        self.origin = origin
        self.item = item
    def __mro_entries__(self, bases):
        return (self.origin,)

class NewList:
    def __class_getitem__(cls, item):
        return GenericAlias(cls, item)

class Tokens(NewList[int]):
    ...

assert Tokens.__bases__ == (NewList,)
assert Tokens.__orig_bases__ == (NewList[int],)
assert Tokens.__mro__ == (Tokens, NewList, object)
</code></pre>
<p><code>__mro_entries__</code>를 통한 해결은 클래스 정의 구문(statement)의 <code>bases</code> 내에서만 발생합니다. <code>isinstance</code> 및 <code>issubclass</code>와 같은 내장 함수를 포함하여 클래스 객체가 예상되는 다른 모든 상황에서는 이러한 해결이 발생하지 않습니다.</p>
<p><strong>참고:</strong> 이 두 메서드(<code>__class_getitem__</code> 및 <code>__mro_entries__</code>)의 이름은 <code>typing</code> 모듈 및 제네릭 타입 메커니즘을 위해 예약되어 있으며, 다른 용도로 사용하는 것은 권장되지 않습니다.</p>
<h4>동적 클래스 생성 및 <code>types.resolve_bases</code></h4>
<p><code>type.__new__</code>는 MRO 엔트리 해결을 수행하지 않습니다. 따라서 <code>type('Tokens', (List[int],), {})</code>와 같은 직접 호출은 실패합니다. 이는 성능상의 이유와 암묵적인 변환(<code>implicit transformations</code>) 수를 최소화하기 위함입니다. 대신, 동적 클래스 생성 시 명시적인 <code>__mro_entries__</code> 해결을 허용하기 위해 <code>types</code> 모듈에 헬퍼 함수 <code>resolve_bases</code>가 추가될 것입니다. <code>types.new_class</code>는 이러한 새로운 클래스 생성 단계를 반영하도록 업데이트될 예정입니다.</p>
<h4>C 확장에서의 <code>__class_getitem__</code> 사용</h4>
<p>C 확장에서 <code>__class_getitem__</code>을 정의하려면 <code>METH_O|METH_CLASS</code> 플래그를 사용해야 합니다. 이는 C 확장 클래스를 제네릭으로 만들 수 있는 방법을 제공합니다.</p>
<h3>하위 호환성 및 <code>typing</code>을 사용하지 않는 사용자에게 미치는 영향</h3>
<p>이 제안은 <code>__class_getitem__</code> 및 <code>__mro_entries__</code> 이름을 현재 사용 중인 코드에 영향을 줄 수 있습니다. 그러나 언어 참조(language reference)는 문서화되지 않은 모든 던더(dunder) 이름을 명시적으로 예약하고 "경고 없이 변경될 수 있음"을 허용합니다.</p>
<p>이 제안은 현재 공개된 제네릭 타입 API와 거의 완전한 하위 호환성을 지원합니다. <code>typing</code> 모듈은 여전히 잠정적인(provisional) 상태입니다. 단 두 가지 예외는 다음과 같습니다.</p>
<ol>
<li>현재 <code>issubclass(List[int], List)</code>는 <code>True</code>를 반환하지만, 이 제안에서는 <code>TypeError</code>를 발생시킵니다.</li>
<li>subscript 되지 않은 사용자 정의 제네릭의 <code>repr()</code>은 더 이상 조작할 수 없으며 일반(비-제네릭) 클래스의 <code>repr()</code>과 일치하게 됩니다.</li>
</ol>
<p>참조 구현(reference implementation)을 통해 측정된 결과, 일반(비-제네릭) 클래스에는 무시할 수 있는 수준의 성능 영향(마이크로 벤치마크에서 1% 미만)이 있었지만, 제네릭의 성능은 크게 향상되었습니다. 예를 들어:</p>
<ul>
<li><code>importlib.reload(typing)</code>은 최대 7배 빨라집니다.</li>
<li>사용자 정의 제네릭 클래스 생성은 최대 4배 빨라집니다 (빈 본문 마이크로 벤치마크 기준).</li>
<li>제네릭 클래스 인스턴스화는 최대 5배 빨라집니다 (빈 <code>__init__</code> 마이크로 벤치마크 기준).</li>
<li>제네릭 타입 및 인스턴스와 관련된 다른 작업(예: 메서드 조회 및 <code>isinstance()</code> 검사)은 약 10-20% 향상됩니다.</li>
</ul>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1098,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 560 - Core support for typing module and generic types"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 23:45:50+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
