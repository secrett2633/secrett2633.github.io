3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-19cfc001fdac3337.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-51594f997fc19690.js"],""]
4:["slug","python/pep/461","c"]
0:["FeyCvJug7In7AgUZlfHUx",[[["",{"children":[["slug","python/pep/461","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"461\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/461","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T5406,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0461/">PEP 461 - Adding % formatting to bytes and bytearray</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 13-Jan-2014</p>
</blockquote>
<h1>PEP 461: <code>bytes</code> 및 <code>bytearray</code>에 <code>%</code> 포매팅 추가</h1>
<ul>
<li><strong>작성자:</strong> Ethan Furman</li>
<li><strong>상태:</strong> Final (최종)</li>
<li><strong>유형:</strong> Standards Track</li>
<li><strong>생성일:</strong> 2014년 1월 13일</li>
<li><strong>Python 버전:</strong> 3.5</li>
<li><strong>해결:</strong> Python-Dev 메시지</li>
</ul>
<h2>요약 (Abstract)</h2>
<p>이 PEP는 Python 2의 <code>str</code> 타입과 유사한 <code>%</code> 포매팅 연산을 <code>bytes</code> 및 <code>bytearray</code> 객체에 추가할 것을 제안합니다.</p>
<h2>배경 및 동기 (Rationale and Motivation)</h2>
<p>인터폴레이션(interpolation)은 일반적으로 문자열(string) 연산으로 여겨지지만, <code>bytes</code> 또는 <code>bytearray</code> 객체에 대한 인터폴레이션이 필요한 경우가 있습니다. 이러한 기능이 없을 때 발생하는 추가적인 작업은 코드의 전반적인 가독성을 저해합니다.</p>
<p>Python 3에서 <code>str</code>과 <code>bytes</code> 타입이 분리되면서, 프로그래밍의 작지만 중요한 영역 중 하나인 "와이어 포맷 프로토콜(wire format protocols)" 작업이 약간 더 어려워지고 훨씬 더 고통스러워졌습니다. 이 영역은 바이너리 데이터와 ASCII 호환 텍스트 세그먼트(ASCII 인코딩된 텍스트)가 혼합된 것이 특징입니다. <code>bytes</code> 및 <code>bytearray</code>에 제한적인 <code>%</code> 인터폴레이션을 다시 도입함으로써 새로운 와이어 포맷 코드를 작성하고 Python 2의 와이어 포맷 코드를 포팅하는 데 도움이 될 것입니다.</p>
<p>일반적인 사용 사례로는 <code>dbf</code> 및 <code>pdf</code> 파일 포맷, 이메일 포맷, FTP 및 HTTP 통신 등이 있습니다.</p>
<h2><code>bytes</code> 및 <code>bytearray</code> 포매팅을 위한 제안된 Semantics</h2>
<h3><code>%</code>-인터폴레이션</h3>
<p>모든 숫자 포매팅 코드 (<code>d</code>, <code>i</code>, <code>o</code>, <code>u</code>, <code>x</code>, <code>X</code>, <code>e</code>, <code>E</code>, <code>f</code>, <code>F</code>, <code>g</code>, <code>G</code> 및 Python 3에 추가될 수 있는 모든 코드)가 지원되며, <code>str</code> 타입과 동일하게 작동합니다. 여기에는 패딩(padding), 정렬(justification) 및 기타 관련 수정자(현재 <code>#</code>, <code>0</code>, <code>-</code>, <code>space</code>, <code>+</code> 및 Python 3에 추가될 수 있는 모든 것)가 포함됩니다. 허용되는 비숫자 코드는 <code>c</code>, <code>b</code>, <code>a</code>뿐이며, <code>s</code>는 <code>b</code>의 동의어(synonym)입니다.</p>
<p>숫자 코드의 경우, <code>str</code>과 <code>bytes</code> (또는 <code>bytearray</code>) 인터폴레이션의 유일한 차이점은 이러한 코드의 결과가 유니코드(unicode)가 아닌 ASCII 인코딩된 텍스트라는 것입니다. 즉, 모든 숫자 포매팅 코드 <code>%x</code>에 대해 <code>b"%x" % val</code>은 <code>("%x" % val).encode("ascii")</code>와 동일합니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">>>> b'%4x' % 10
b' a'
>>> b'%#4x' % 10
b' 0xa'
>>> b'%04X' % 10
b'000A'
</code></pre>
<ul>
<li>
<p><code>%c</code>는 단일 바이트를 삽입합니다. 이는 <code>range(256)</code> 범위의 정수이거나 길이가 1인 <code>bytes</code> 인자여야 하며, <code>str</code>은 허용되지 않습니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">>>> b'%c' % 48
b'0'
>>> b'%c' % b'a'
b'a'
</code></pre>
</li>
<li>
<p><code>%b</code>는 일련의 바이트를 삽입합니다. 이 바이트는 두 가지 방법 중 하나로 수집됩니다:</p>
<ul>
<li>입력 타입이 <code>Py_buffer</code>를 지원하는 경우, 이를 사용하여 필요한 바이트를 수집합니다.</li>
<li>입력 타입이 다른 경우, 해당 객체의 <code>__bytes__</code> 메서드를 사용합니다. 이 메서드가 없으면 <code>TypeError</code>가 발생합니다.</li>
</ul>
<p>특히, <code>%b</code>는 숫자나 <code>str</code>을 허용하지 않습니다. <code>str</code>은 문자열을 바이트로 변환하는 데 인코딩이 필요하며, 시스템이 이를 추측하는 것을 거부하므로 거부됩니다. 숫자가 거부되는 이유는 다음과 같습니다:</p>
<ul>
<li>어떤 숫자가 허용되는지 모호합니다(float? Decimal? Fraction? 사용자 정의 타입?).</li>
<li>숫자를 허용하면 숫자와 숫자의 텍스트 표현(예: <code>3.14</code>와 <code>'3.14'</code>) 사이에 모호성이 발생할 수 있습니다.</li>
<li>와이어 포맷의 특성을 고려할 때, 명시적인 것이 암시적인 것보다 훨씬 낫습니다.</li>
</ul>
<p><code>%s</code>는 Python 2/3 코드베이스를 더 쉽게 유지 관리하기 위한 유일한 목적으로 <code>%b</code>의 동의어로 포함됩니다. Python 3 전용 코드는 <code>%b</code>를 사용해야 합니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">>>> b'%b' % b'abc'
b'abc'
>>> b'%b' % 'some string'.encode('utf8')
b'some string'
>>> b'%b' % 3.14
Traceback (most recent call last):
...
TypeError: b'%b' does not accept 'float'
>>> b'%b' % 'hello world!'
Traceback (most recent call last):
...
TypeError: b'%b' does not accept 'str'
</code></pre>
</li>
<li>
<p><code>%a</code>는 인터폴레이션된 값에 대해 <code>repr(some_obj).encode('ascii', 'backslashreplace')</code>와 동일한 결과를 제공합니다. 사용 사례에는 새로운 프로토콜 개발 및 스트림에 랜드마크(landmarks) 작성, 기존 프로토콜로 들어가는 데이터를 디버깅하여 문제가 프로토콜 자체인지 또는 잘못된 데이터인지 확인하는 것, 직렬화 포맷의 대체(fall-back), 또는 <code>__bytes__</code> 정의가 적절하지 않지만 읽을 수 있고 유익한 표현이 필요한 모든 상황이 포함됩니다.</p>
<p><code>%r</code>은 Python 2/3 코드베이스를 더 쉽게 유지 관리하기 위한 유일한 목적으로 <code>%a</code>의 동의어로 포함됩니다. Python 3 전용 코드는 <code>%a</code>를 사용해야 합니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">>>> b'%a' % 3.14
b'3.14'
>>> b'%a' % b'abc'
b"b'abc'"
>>> b'%a' % 'def'
b"'def'"
</code></pre>
</li>
</ul>
<h3>Python 2와의 호환성 (Compatibility with Python 2)</h3>
<p>위에서 언급했듯이, <code>%s</code> 및 <code>%r</code>은 Python 2에서 마이그레이션을 용이하게 하거나, Python 2와 단일 코드베이스를 유지하기 위한 목적으로만 포함됩니다. 이는 현재 Python 2 <code>str</code> 타입을 바이트 컨테이너로 사용하고 따라서 <code>%s</code>를 바이트 인터폴레이터로 사용하는 모듈이 많기 때문에 중요합니다.</p>
<p>그러나 새로운 Python 3 전용 코드에서는 <code>%b</code> 및 <code>%a</code>를 사용해야 하므로, <code>%s</code> 및 <code>%r</code>은 즉시 Deprecated(사용 중단 예정)되지만, 3.x 시리즈에서 제거되지는 않을 것입니다.</p>
<h3>제안된 변경사항 (Proposed variations)</h3>
<ul>
<li><code>%b</code>에 <code>str</code> 인자가 주어졌을 때 자동으로 <code>.encode('ascii','strict')</code>를 사용하도록 제안되었지만, 이는 간헐적인 오류를 유발할 수 있으므로 거부되었습니다. 문제가 되는 지점을 올바르게 수정할 수 있도록 연산이 항상 실패하는 것이 낫습니다.</li>
<li>값이 <code>str</code>일 때 <code>%b</code>가 ASCII 인코딩된 <code>repr</code>을 반환하도록 제안되었지만(예: <code>b'%b' % 'abc'</code> –> <code>b“'abc'”</code>), 이는 문제 지점과 멀리 떨어진 디버깅하기 어려운 오류를 유발할 수 있으므로 거부되었습니다. 문제가 되는 지점을 쉽게 수정할 수 있도록 연산이 항상 실패하는 것이 낫습니다.</li>
<li>원래 이 PEP는 포맷 스타일 포매팅(<code>format</code> 메서드)도 추가할 것을 제안했지만, <code>format</code> 및 관련 메커니즘은 모두 엄격하게 텍스트(<code>str</code>) 기반이라고 결정되어 제외되었습니다.</li>
<li><code>__ascii__</code>, <code>__format_bytes__</code> 등 다양한 새로운 특별 메서드(special methods)가 제안되었지만, 현재로서는 필요하지 않으며, 실제 사용에서 이 솔루션의 단점이 드러나면 나중에 다시 논의될 수 있습니다.</li>
<li>경쟁 PEP인 PEP 460 (<code>Add binary interpolation and formatting</code>)도 존재합니다.</li>
</ul>
<h2>반대 의견 (Objections)</h2>
<p>이 PEP에 대한 주요 반대 의견은 두 가지 주제의 변형이었습니다:</p>
<ol>
<li><code>bytes</code> 및 <code>bytearray</code> 타입은 인코딩에 대한 가정이 없는 순수한 바이너리 데이터를 위한 것이다.</li>
<li>ASCII 인코딩을 가정하는 <code>%</code> 인터폴레이션을 제공하는 것은 "매력적인 성가심(attractive nuisance)"이 될 것이며, Python 2의 <code>str</code> / 유니코드 텍스트 모델의 문제점으로 다시 돌아가게 할 것이다.</li>
</ol>
<p>논의 중에 드러났듯이, <code>bytes</code> 및 <code>bytearray</code>는 혼합된 바이너리 데이터와 ASCII 호환 세그먼트(예: <code>dbf</code> 및 <code>pdf</code>와 같은 파일 포맷, <code>ftp</code> 및 이메일과 같은 네트워크 프로토콜)에도 사용됩니다.</p>
<p><code>bytes</code> 및 <code>bytearray</code>는 이미 <code>upper()</code>, <code>isalpha()</code>, <code>expandtabs()</code> 등 ASCII 호환 인코딩을 가정하는 여러 메서드를 가지고 있습니다. 매우 제한적인 미니 언어를 가진 <code>%</code> 인터폴레이션은 이미 존재하는 메서드보다 더 성가시지 않을 것입니다.</p>
<p>일부는 십진수(decimal)만으로도 충분하다는 주장으로 모든 범위의 숫자 포매팅 코드를 허용하는 것에 반대했지만, 적어도 두 가지 포맷(<code>dbf</code> 및 <code>pdf</code>)은 비십진수(non-decimal numbers)를 사용합니다.</p>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 공개 도메인(public domain)에 있습니다.</p>
<p>---다음은 Python Enhancement Proposal (PEP) 461 문서의 내용에 대한 번역 및 정리입니다.</p>
<hr>
<h1>PEP 461 – <code>bytes</code> 및 <code>bytearray</code>에 <code>%</code> 포매팅 추가</h1>
<ul>
<li><strong>작성자:</strong> Ethan Furman</li>
<li><strong>상태:</strong> Final (최종)</li>
<li><strong>유형:</strong> Standards Track</li>
<li><strong>생성일:</strong> 2014년 1월 13일</li>
<li><strong>Python 버전:</strong> 3.5</li>
<li><strong>해결:</strong> Python-Dev 메시지</li>
</ul>
<h2>요약 (Abstract)</h2>
<p>이 PEP는 Python 2의 <code>str</code> 타입과 유사한 <code>%</code> 포매팅 연산을 <code>bytes</code> 및 <code>bytearray</code> 객체에 추가할 것을 제안합니다.</p>
<h2>배경 (Rationale) 및 동기 (Motivation)</h2>
<p>인터폴레이션(interpolation)은 일반적으로 문자열(string) 연산으로 간주되지만, <code>bytes</code> 또는 <code>bytearray</code> 객체에 대한 인터폴레이션이 필요한 경우가 있습니다. 이러한 기능이 없을 때 필요한 추가적인 작업은 코드의 전반적인 가독성을 떨어뜨립니다.</p>
<p>Python 3에서 <code>str</code>과 <code>bytes</code> 타입이 분리되면서, "와이어 포맷 프로토콜(wire format protocols)"과 같은 특정 프로그래밍 영역의 작업이 다소 어려워졌습니다. 이 영역은 바이너리 데이터와 ASCII 호환 텍스트 세그먼트(즉, ASCII 인코딩된 텍스트)가 혼합되어 사용되는 것이 특징입니다. <code>bytes</code> 및 <code>bytearray</code>에 제한적인 <code>%</code> 인터폴레이션을 다시 도입함으로써 새로운 와이어 포맷 코드를 작성하고 기존 Python 2 와이어 포맷 코드를 Python 3으로 포팅하는 데 도움이 될 것입니다.</p>
<p>일반적인 사용 사례로는 <code>dbf</code> 및 <code>pdf</code> 파일 포맷, 이메일 포맷, FTP 및 HTTP 통신 등이 있습니다.</p>
<h2><code>bytes</code> 및 <code>bytearray</code> 포매팅을 위한 제안된 Semantics</h2>
<h3><code>%</code>-인터폴레이션</h3>
<p>모든 숫자 포매팅 코드 (<code>d</code>, <code>i</code>, <code>o</code>, <code>u</code>, <code>x</code>, <code>X</code>, <code>e</code>, <code>E</code>, <code>f</code>, <code>F</code>, <code>g</code>, <code>G</code>, 그리고 향후 Python 3에 추가될 수 있는 모든 코드)가 지원됩니다. 이들은 <code>str</code> 타입과 동일하게 작동하며, 패딩(padding), 정렬(justification), 그리고 기타 관련 수정자(현재 <code>#</code>, <code>0</code>, <code>-</code>, <code>space</code>, <code>+</code>, 그리고 향후 Python 3에 추가될 수 있는 모든 것)를 포함합니다. 허용되는 비숫자 코드(non-numeric codes)는 <code>c</code>, <code>b</code>, <code>a</code>뿐이며, <code>%s</code>는 <code>%b</code>의 동의어(synonym)입니다.</p>
<p>숫자 코드의 경우, <code>str</code>과 <code>bytes</code> (또는 <code>bytearray</code>) 인터폴레이션의 유일한 차이점은 이러한 코드의 결과가 유니코드(unicode)가 아닌 ASCII 인코딩된 텍스트라는 것입니다. 다시 말해, 모든 숫자 포매팅 코드 <code>%x</code>에 대해 <code>b"%x" % val</code>은 <code>("%x" % val).encode("ascii")</code>와 동일합니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">>>> b'%4x' % 10
b' a'
>>> b'%#4x' % 10
b' 0xa'
>>> b'%04X' % 10
b'000A'
</code></pre>
<ul>
<li>
<p><code>%c</code>는 단일 바이트를 삽입합니다. 이는 <code>range(256)</code> 범위의 정수이거나 길이가 1인 <code>bytes</code> 인자여야 하며, <code>str</code>은 허용되지 않습니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">>>> b'%c' % 48
b'0'
>>> b'%c' % b'a'
b'a'
</code></pre>
</li>
<li>
<p><code>%b</code>는 일련의 바이트를 삽입합니다. 이 바이트는 다음 두 가지 방법 중 하나로 수집됩니다:</p>
<ul>
<li>입력 타입이 <code>Py_buffer</code>를 지원하는 경우, 이를 사용하여 필요한 바이트를 수집합니다.</li>
<li>입력 타입이 다른 경우, 해당 객체의 <code>__bytes__</code> 메서드를 사용합니다. 이 메서드가 없으면 <code>TypeError</code>가 발생합니다.</li>
</ul>
<p>특히, <code>%b</code>는 숫자나 <code>str</code>을 허용하지 않습니다. <code>str</code>은 문자열을 바이트로 변환하는 데 인코딩이 필요하지만 시스템이 이를 추측하는 것을 거부하기 때문에 거부됩니다. 숫자가 거부되는 이유는 다음과 같습니다:</p>
<ul>
<li>허용되는 숫자의 범위가 모호합니다(float, Decimal, Fraction, 사용자 정의 타입 등).</li>
<li>숫자를 허용하면 숫자 값과 숫자의 텍스트 표현(예: <code>3.14</code>와 <code>'3.14'</code>) 사이에 모호성이 발생할 수 있습니다.</li>
<li>와이어 포맷의 특성상 명시적인 것이 암시적인 것보다 훨씬 바람직합니다.</li>
</ul>
<p><code>%s</code>는 Python 2/3 코드베이스의 유지 관리를 용이하게 하기 위한 유일한 목적으로 <code>%b</code>의 동의어로 포함됩니다. Python 3 전용 코드는 <code>%b</code>를 사용해야 합니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">>>> b'%b' % b'abc'
b'abc'
>>> b'%b' % 'some string'.encode('utf8')
b'some string'
>>> b'%b' % 3.14
Traceback (most recent call last):
...
TypeError: b'%b' does not accept 'float'
>>> b'%b' % 'hello world!'
Traceback (most recent call last):
...
TypeError: b'%b' does not accept 'str'
</code></pre>
</li>
<li>
<p><code>%a</code>는 인터폴레이션된 값에 대해 <code>repr(some_obj).encode('ascii', 'backslashreplace')</code>와 동일한 결과를 제공합니다. 이는 새로운 프로토콜 개발 시 스트림에 랜드마크를 작성하거나, 기존 프로토콜로 들어가는 데이터를 디버깅하여 문제의 원인이 프로토콜 자체인지 잘못된 데이터인지 확인하는 경우, 직렬화 포맷의 대체(fall-back) 용도, 또는 <code>__bytes__</code> 정의가 적절하지 않지만 읽을 수 있고 유익한 표현이 필요한 모든 상황에서 유용합니다.</p>
<p><code>%r</code>은 Python 2/3 코드베이스의 유지 관리를 용이하게 하기 위한 유일한 목적으로 <code>%a</code>의 동의어로 포함됩니다. Python 3 전용 코드는 <code>%a</code>를 사용해야 합니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">>>> b'%a' % 3.14
b'3.14'
>>> b'%a' % b'abc'
b"b'abc'"
>>> b'%a' % 'def'
b"'def'"
</code></pre>
</li>
</ul>
<h3>Python 2와의 호환성 (Compatibility with Python 2)</h3>
<p>위에서 언급했듯이, <code>%s</code> 및 <code>%r</code>은 Python 2에서 마이그레이션을 용이하게 하거나, Python 2와 단일 코드베이스를 유지하기 위한 목적으로만 포함됩니다. 이는 현재 Python 2의 <code>str</code> 타입을 바이트 컨테이너로 사용하고 <code>%s</code>를 바이트 인터폴레이터로 사용하는 모듈들이 많기 때문에 중요합니다.</p>
<p>그러나 새로운 Python 3 전용 코드에서는 <code>%b</code> 및 <code>%a</code>를 사용해야 하므로, <code>%s</code> 및 <code>%r</code>은 즉시 Deprecated(사용 중단 예정)되지만, 3.x 시리즈에서 제거되지는 않을 것입니다.</p>
<h3>제안되었으나 거부된 변경사항 (Proposed Variations)</h3>
<ul>
<li><code>%b</code>에 <code>str</code> 인자가 주어졌을 때 자동으로 <code>.encode('ascii','strict')</code>를 사용하도록 제안되었으나, 간헐적인 오류를 유발할 수 있어 거부되었습니다. 문제가 되는 지점을 명확히 파악하고 수정하기 위해 연산이 항상 실패하는 것이 더 낫다고 판단했습니다.</li>
<li>값이 <code>str</code>일 때 <code>%b</code>가 ASCII 인코딩된 <code>repr</code>을 반환하도록 제안되었으나, 이는 문제 발생 지점과 멀리 떨어진 디버깅하기 어려운 오류를 유발할 수 있어 거부되었습니다.</li>
<li>원래 이 PEP는 포맷 스타일(<code>str.format</code> 메서드와 같은) 포매팅도 추가할 것을 제안했지만, <code>format</code> 및 관련 메커니즘은 모두 엄격하게 텍스트(<code>str</code>) 기반이라고 결정되어 제외되었습니다.</li>
<li><code>__ascii__</code>, <code>__format_bytes__</code> 등 다양한 새로운 특별 메서드(special methods)가 제안되었으나, 현재로서는 필요하지 않으며, 실제 사용에서 이 솔루션의 단점이 드러나면 나중에 다시 논의될 수 있다고 언급되었습니다.</li>
<li>경쟁 PEP인 PEP 460 (<code>Add binary interpolation and formatting</code>)도 존재합니다.</li>
</ul>
<h2>반대 의견 (Objections)</h2>
<p>이 PEP에 대한 주요 반대 의견은 크게 두 가지 주제였습니다:</p>
<ol>
<li><code>bytes</code> 및 <code>bytearray</code> 타입은 인코딩에 대한 가정이 없는 순수한 바이너리 데이터를 위한 것이다.</li>
<li>ASCII 인코딩을 가정하는 <code>%</code> 인터폴레이션을 제공하는 것은 "매력적인 성가심(attractive nuisance)"이 되어, Python 2의 <code>str</code> / 유니코드 텍스트 모델의 문제점으로 다시 돌아가게 할 것이다.</li>
</ol>
<p>그러나 논의 과정에서, <code>bytes</code> 및 <code>bytearray</code>는 <code>dbf</code> 및 <code>pdf</code>와 같은 파일 포맷, <code>ftp</code> 및 이메일과 같은 네트워크 프로토콜 등 혼합된 바이너리 데이터와 ASCII 호환 세그먼트에도 사용된다는 점이 강조되었습니다.</p>
<p><code>bytes</code> 및 <code>bytearray</code>는 이미 <code>upper()</code>, <code>isalpha()</code>, <code>expandtabs()</code> 등 ASCII 호환 인코딩을 가정하는 여러 메서드를 가지고 있습니다. 매우 제한적인 미니 언어를 가진 <code>%</code> 인터폴레이션은 기존 메서드보다 더 큰 문제가 되지 않을 것입니다.</p>
<p>일부에서는 십진수(decimal)만으로도 충분하다는 주장으로 모든 범위의 숫자 포매팅 코드를 허용하는 것에 반대했지만, 적어도 두 가지 포맷(<code>dbf</code> 및 <code>pdf</code>)은 비십진수(non-decimal numbers)를 사용합니다.</p>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 공개 도메인(public domain)에 있습니다.</p>
<hr>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1098,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 461 - Adding % formatting to bytes and bytearray"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 22:09:29+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
