3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/539","c"]
0:["qNOrJYeuqip9qCFPpDVpu",[[["",{"children":[["slug","python/pep/539","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"539\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/539","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T33c6,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0539/">PEP 539 - A New C-API for Thread-Local Storage in CPython</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 20-Dec-2016</p>
</blockquote>
<h2>PEP 539 – CPython에서 스레드 로컬 스토리지를 위한 새로운 C-API</h2>
<p>이 문서는 CPython 인터프리터 내에서 스레드 로컬 스토리지(Thread Local Storage, TLS)를 관리하기 위한 새로운 C-API인 "Thread Specific Storage (TSS) API"를 제안합니다. 기존 TLS API의 한계를 극복하고, CPython의 이식성을 향상하는 것이 목표입니다. 이 제안은 Python 3.7 버전부터 적용되었습니다.</p>
<h3>개요 (Abstract)</h3>
<p>PEP 539는 CPython 인터프리터 내부에서 사용되는 기존 TLS API를 대체하고 새로운 TLS API를 도입할 것을 제안합니다. 새 API는 "Thread Specific Storage (TSS) API"라고 불립니다. 기존 TLS API는 내부적으로만 사용되고 공식 문서에 언급되지 않으므로, 이 제안은 주로 CPython 구현에 영향을 미치지만 CPython API의 일부를 구현하는 다른 인터프리터(예: PyPy)에도 영향을 줄 수 있습니다.</p>
<p>주된 동기는 기존 API가 모든 플랫폼에서 TLS 키를 <code>int</code> 타입으로 표현했는데, 이는 POSIX 표준을 준수하지 않으며 실제적인 이식성을 보장하지 못했기 때문입니다.</p>
<h3>도입 배경 (Motivation)</h3>
<p>기존 <code>PyThread</code> TLS API의 가장 큰 문제는 TLS 값에 사용되는 키의 타입이 <code>int</code>라는 점이었습니다. 1997년에 Python에 추가된 이 API는 CPython 자체 TLS 구현을 사용했으며, 당시에는 <code>int</code> 키가 문제없었습니다. 그러나 나중에 pthreads 및 Windows와 같은 네이티브 스레드 구현 위에 API를 구현하는 지원이 추가되었고, 내장 구현은 더 이상 필요 없어져 제거되었습니다.</p>
<p><code>int</code>를 TLS 키로 선택한 것은 CPython 자체 구현 및 Windows(<code>DWORD</code> 사용)와는 호환되었지만, <code>pthread_key_t</code>를 불투명한 타입으로 정의하는 POSIX pthreads API 표준과는 호환되지 않았습니다.</p>
<p>일부 플랫폼(Cygwin, CloudABI 등)에서는 <code>pthread_key_t</code>가 <code>int</code>로 안전하게 캐스팅될 수 없는 방식으로 정의되어 있어 Python API와 호환되지 않는 문제가 발생했습니다. 이는 CPython이 POSIX와 호환되지 않는 API를 통해 구현 장벽을 부과하는 것이며, 다른 POSIX 호환 플랫폼에서 CPython이 잠재력을 발휘하는 것을 막는 요인이었습니다.</p>
<h3>명세 (Specification)</h3>
<p>새로운 TSS API는 기존 TLS API의 6가지 함수를 대체하는 유사한 함수들을 포함하며, 몇 가지 새로운 기능을 추가합니다.</p>
<p><strong>기존 TLS API 함수 (Deprecated):</strong></p>
<ul>
<li><code>PyAPI_FUNC(int) PyThread_create_key(void)</code></li>
<li><code>PyAPI_FUNC(void) PyThread_delete_key(int key)</code></li>
<li><code>PyAPI_FUNC(int) PyThread_set_key_value(int key, void *value)</code></li>
<li><code>PyAPI_FUNC(void *) PyThread_get_key_value(int key)</code></li>
<li><code>PyAPI_FUNC(void) PyThread_delete_key_value(int key)</code></li>
<li><code>PyAPI_FUNC(void) PyThread_ReInitTLS(void)</code></li>
</ul>
<p><strong>새로운 TSS API 함수:</strong></p>
<ul>
<li><code>PyAPI_FUNC(int) PyThread_tss_create(Py_tss_t *key)</code></li>
<li><code>PyAPI_FUNC(void) PyThread_tss_delete(Py_tss_t *key)</code></li>
<li><code>PyAPI_FUNC(int) PyThread_tss_set(Py_tss_t *key, void *value)</code></li>
<li><code>PyAPI_FUNC(void *) PyThread_tss_get(Py_tss_t *key)</code></li>
</ul>
<p><strong>새로운 기능:</strong></p>
<ul>
<li><strong><code>Py_tss_t</code> 타입</strong>: 기본 TLS 구현에 따라 정의될 수 있는 불투명(opaque) 타입입니다. 내부적으로 <code>_is_initialized</code> 플래그와 <code>NATIVE_TSS_KEY_T</code>를 포함합니다.</li>
<li><strong><code>Py_tss_NEEDS_INIT</code></strong>: <code>Py_tss_t</code> 변수를 초기화하기 위한 이니셜라이저입니다.</li>
<li><strong>추가 함수</strong>:
<ul>
<li><code>PyAPI_FUNC(Py_tss_t *) PyThread_tss_alloc(void)</code>: <code>Py_LIMITED_API</code>로 빌드된 확장 모듈에서 <code>Py_tss_t</code>의 동적 할당을 위해 사용됩니다.</li>
<li><code>PyAPI_FUNC(void) PyThread_tss_free(Py_tss_t *key)</code>: 동적으로 할당된 <code>Py_tss_t</code>를 해제합니다.</li>
<li><code>PyAPI_FUNC(int) PyThread_tss_is_created(Py_tss_t *key)</code>: <code>Py_tss_t</code>가 초기화되었는지 확인합니다.</li>
</ul>
</li>
</ul>
<p>새 API는 <code>Py_tss_t*</code>를 인수로 받아 키를 전달하는 반면, 기존 API는 <code>int</code> 키를 값으로 전달했습니다. <code>Py_tss_t</code>는 불투명 타입이므로 크기를 알 수 없기 때문에 이러한 변경이 필요합니다.</p>
<p>또한, <code>PyThread_tss_create</code>는 이미 초기화된 키에 대해 호출될 경우 성공을 반환하며 아무런 작업을 수행하지 않습니다. <code>PyThread_tss_delete</code>는 키의 초기화 상태를 "uninitialized"로 변경하여, CPython 인터프리터를 재시작할 때 정적으로 할당된 키를 재설정할 수 있도록 합니다.</p>
<h3>API 명세 비교 (Comparison of API Specification)</h3>
<p>| 기능/속성           | 기존 TLS API           | 새로운 TSS API                                                                |
| :------------------ | :--------------------- | :---------------------------------------------------------------------------- |
| <strong>버전</strong>            | 기존                 | 신규                                                                          |
| <strong>키 타입</strong>         | <code>int</code>                  | <code>Py_tss_t</code> (불투명 타입)                                                      |
| <strong>키 핸들</strong>         | 네이티브 키를 <code>int</code>로 캐스팅 | 내부 필드에 캡슐화                                                            |
| <strong>함수 인수</strong>       | <code>int</code>                  | <code>Py_tss_t *</code>                                                                  |
| <strong>주요 기능</strong>       | 키 생성, 삭제, 값 설정, 값 가져오기, 값 삭제, 키 재초기화 | 키 생성, 삭제, 값 설정, 값 가져오기 (NULL로 설정), 동적 할당/해제, 키 초기화 상태 확인 |
| <strong>키 이니셜라이저</strong> | <code>-1</code> (키 생성 실패)    | <code>Py_tss_NEEDS_INIT</code>                                                           |
| <strong>요구 사항</strong>       | 네이티브 스레드        | 네이티브 스레드 (CPython 3.7부터)                                             |
| <strong>제한 사항</strong>       | 네이티브 TLS 키가 <code>int</code>로 안전하게 캐스팅될 수 없는 플랫폼 미지원 | <code>Py_LIMITED_API</code> 정의 시 정적 키 할당 불가능                                  |</p>
<h3>예시 (Example)</h3>
<p><strong>정적 할당 (Static Allocation):</strong></p>
<pre><code class="language-c">static Py_tss_t tss_key = Py_tss_NEEDS_INIT;
if (PyThread_tss_create(&#x26;tss_key)) {
    /* ... 키 생성 실패 처리 ... */
}

assert(PyThread_tss_is_created(&#x26;tss_key));

int the_value = 1;
if (PyThread_tss_get(&#x26;tss_key) == NULL) {
    PyThread_tss_set(&#x26;tss_key, (void *)&#x26;the_value);
    assert(PyThread_tss_get(&#x26;tss_key) != NULL);
}
/* ... 키 사용 완료 후 ... */
PyThread_tss_delete(&#x26;tss_key);
assert(!PyThread_tss_is_created(&#x26;tss_key));
</code></pre>
<p><strong>동적 할당 (<code>Py_LIMITED_API</code> 정의 시):</strong></p>
<pre><code class="language-c">static Py_tss_t *ptr_key = PyThread_tss_alloc();
if (ptr_key == NULL) {
    /* ... 키 할당 실패 처리 ... */
}
assert(!PyThread_tss_is_created(ptr_key));
/* ... 키 사용 완료 후 ... */
PyThread_tss_free(ptr_key);
ptr_key = NULL;
</code></pre>
<h3>플랫폼 지원 변경 사항 (Platform Support Changes)</h3>
<p>CPython 3.7부터는 모든 플랫폼이 TSS API를 구현하기 위해 pthreads 또는 Windows와 같은 네이티브 스레드 구현을 제공해야 합니다. 네이티브 스레드 없이 구현된 TSS API 문제는 "won't fix"로 처리됩니다.</p>
<h3>제안된 해결책의 근거 (Rationale for Proposed Solution)</h3>
<p>불투명한 타입(<code>Py_tss_t</code>)을 사용하여 TLS 값을 키로 만드는 것은 CPython이 지원하는 현재(POSIX 및 Windows)와 미래의 네이티브 TLS 구현 모두와 호환될 수 있도록 합니다. <code>Py_tss_t</code>의 정의가 기반 구현에 따라 달라질 수 있기 때문입니다.</p>
<p>이름의 "tss"는 "thread-specific storage"를 의미하며, C11 스레드 API의 "tss" API의 명명 및 설계에서 영향을 받았습니다. 이는 C11 스레드 API와의 호환성이나 지원을 의미하는 것은 아닙니다.</p>
<p><code>Py_tss_NEEDS_INIT</code> 이니셜라이저의 포함은 모든 네이티브 TLS 구현이 초기화되지 않은 TLS 키에 대한 센티넬(sentinel) 값을 정의하지 않기 때문에 필요합니다. 예를 들어, Windows는 초기화되지 않은 TLS 키를 안전하게 나타낼 수 있는 <code>unsigned int</code> 값이 없으며, POSIX도 <code>pthread_key_t</code>에 대한 센티넬을 지정하지 않습니다. 따라서 <code>Py_tss_t</code> 타입은 기본 구현과 독립적으로 키의 초기화 상태를 나타낼 수 있는 명시적인 <code>_is_initialized</code> 필드를 포함합니다.</p>
<h3>거부된 아이디어 (Rejected Ideas)</h3>
<ul>
<li><strong>아무것도 하지 않음</strong>: 리눅스에서는 작동하므로 현 상태가 괜찮다는 주장입니다. 그러나 이는 CPython 자체의 특성으로 인해 다른 POSIX 호환 플랫폼에서 잠재력을 발휘하지 못하게 하는 문제이며, 리눅스에서의 작동은 우연한 결과입니다.</li>
<li><strong>영향받는 플랫폼은 <code>--without-threads</code>로 Python을 구성</strong>: Python 3.7부터 <code>--without-threads</code> 옵션이 제거되어 더 이상 선택 사항이 아닙니다.</li>
<li><strong>영향받는 플랫폼은 CPython 내장 TLS 구현을 사용</strong>: 내장 구현은 네이티브 구현보다 느리고 투박하며, <code>tracemalloc</code>과 같은 다른 모듈도 손상될 수 있습니다. 또한, 내장 구현은 이미 제거되었습니다.</li>
<li><strong>기존 API를 유지하되 <code>pthread_key_t</code> 값을 <code>int</code> 값으로 매핑하여 문제 해결</strong>: 불필요한 복잡성과 오버헤드를 야기하며, 플랫폼별 코드를 유지해야 하는 문제가 있습니다.</li>
</ul>
<h3>Python 사용에 미치는 영향</h3>
<p>이 PEP는 CPython의 C-API 레벨에서 스레드 로컬 스토리지 구현을 개선하여, 다양한 플랫폼에서의 호환성과 이식성을 높이는 데 기여합니다. 일반적인 Python 개발자에게 직접적인 영향은 미미하지만, C 확장 모듈을 개발하거나 CPython을 애플리케이션에 임베딩하는 개발자에게는 중요합니다.</p>
<p>주요 변경사항은 다음과 같습니다:</p>
<ol>
<li><strong>C-API 변경</strong>: 기존 <code>PyThread_*_key</code> 함수들은 더 이상 사용되지 않고 (<code>deprecated</code>), 새로운 <code>PyThread_tss_*</code> 함수들로 대체됩니다.</li>
<li><strong><code>Py_tss_t</code> 도입</strong>: <code>int</code> 대신 불투명한 <code>Py_tss_t</code> 타입을 사용하여 TLS 키를 표현함으로써, <code>pthread_key_t</code>가 <code>int</code>로 안전하게 캐스팅될 수 없는 POSIX 호환 플랫폼에서도 스레드 로컬 스토리지를 안정적으로 사용할 수 있게 됩니다.</li>
<li><strong>호환성 향상</strong>: <code>Py_LIMITED_API</code>를 사용하는 확장 모듈 개발 시, <code>Py_tss_t</code>의 동적 할당 (<code>PyThread_tss_alloc</code>, <code>PyThread_tss_free</code>) 지원으로 더욱 유연하게 대응할 수 있습니다.</li>
<li><strong>플랫폼 요구 사항</strong>: CPython 3.7부터는 모든 플랫폼이 네이티브 스레드 구현(pthreads 또는 Windows)을 제공해야 하므로, 더 이상 네이티브 스레드를 지원하지 않는 환경에서는 CPython의 TLS 기능을 사용할 수 없습니다.</li>
</ol>
<p>결론적으로, PEP 539는 CPython의 스레드 로컬 스토리지 구현을 현대화하고 표준화하여, 더욱 견고하고 이식성 있는 기반을 제공합니다. 이는 CPython 자체의 안정성과 확장 모듈의 호환성을 장기적으로 향상시키는 데 중요한 역할을 합니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 539 - A New C-API for Thread-Local Storage in CPython"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 23:28:37+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
