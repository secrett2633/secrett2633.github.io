3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-aecaf5ac7a84facf.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-e3ea38185bb36cd2.js"],""]
4:["slug","python/pep/785","c"]
0:["x02Anhkwgp1He7ftuyAhh",[[["",{"children":[["slug","python/pep/785","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"785\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/785","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/da5e1dc2b9a7c5bb.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2a01,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0785/">PEP 785 - New methods for easier handling ofExceptionGroups</a></p>
<p><strong>상태:</strong> Draft | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 08-Apr-2025</p>
</blockquote>
<p>PEP 785는 <code>ExceptionGroup</code>을 더 쉽게 다룰 수 있는 새로운 메서드들을 제안합니다. 이 PEP는 Python 3.14 버전을 대상으로 하며, <code>BaseExceptionGroup.leaf_exceptions()</code>와 <code>BaseException.preserve_context()</code>라는 두 가지 새로운 메서드를 추가하여 예외 처리 로직을 간결하게 표현하고 디버깅 경험을 개선하는 것을 목표로 합니다.</p>
<h2>PEP 785: ExceptionGroup 처리를 위한 새로운 메서드</h2>
<h3>초록 (Abstract)</h3>
<p>PEP 654에서 도입된 <code>ExceptionGroup</code>이 Python 커뮤니티 전반에 걸쳐 널리 사용됨에 따라, 일반적이지만 다루기 어려운 패턴들이 나타나고 있습니다. 이에 따라 예외 객체에 두 가지 새로운 메서드를 추가할 것을 제안합니다.</p>
<ol>
<li><strong><code>BaseExceptionGroup.leaf_exceptions()</code></strong>: 중간 그룹으로부터 합성된 트레이스백(traceback)을 포함하여 '리프(leaf)' 예외들을 리스트로 반환합니다.</li>
<li><strong><code>BaseException.preserve_context()</code></strong>: <code>self</code>의 <code>self.__context__</code> 속성을 저장하고 복원하는 컨텍스트 관리자(context manager)입니다. 이를 통해 다른 핸들러 내에서 예외를 다시 발생(re-raising)시킬 때 기존 컨텍스트가 덮어씌워지는 것을 방지합니다.</li>
</ol>
<p>이 메서드들은 중간 복잡도의 여러 경우에서 에러 처리 로직을 더 간결하게 표현할 수 있도록 할 것으로 예상됩니다. 이 메서드들이 없으면 예외 그룹 핸들러는 중간 트레이스백을 계속해서 버리고 <code>__context__</code> 예외를 잘못 처리하여, 비동기(async) 코드 디버깅에 어려움을 초래할 것입니다.</p>
<h3>동기 (Motivation)</h3>
<p><code>ExceptionGroup</code>이 널리 사용되면서, 라이브러리 작성자와 최종 사용자는 미들웨어, 에러 로깅, 웹 프레임워크의 응답 핸들러를 구현할 때 개별 리프 예외(individual leaf exceptions)를 처리하거나 응답하는 코드를 자주 작성합니다.</p>
<p>GitHub 검색 결과, <code>leaf_exceptions()</code>와 유사한 기능을 다양한 이름으로 구현한 사례가 60건 중 4건 발견되었으며, 이들 중 트레이스백을 올바르게 처리하는 경우는 없었습니다. 또한, <code>leaf_exceptions()</code>를 사용할 수 있는 사례는 13건 발견되었습니다. 따라서, 올바른 트레이스백 보존 기능을 갖춘 <code>BaseException</code> 타입의 메서드를 제공함으로써 전체 생태계의 에러 처리 및 디버깅 경험이 향상될 것으로 예상됩니다.</p>
<p><code>ExceptionGroup</code>의 등장은 이전에 잡힌 예외를 다시 발생시키는 경우를 훨씬 더 흔하게 만들었습니다. 예를 들어, 웹 서버 미들웨어는 <code>HTTPException</code>이 그룹의 유일한 리프인 경우 이를 언랩(unwrap)할 수 있습니다. 그러나, <code>raise first</code>는 <code>first.__context__ = group</code>이라는 부작용을 발생시켜 원래 에러의 컨텍스트를 버리게 됩니다. 이는 에러가 발생한 이유를 이해하는 데 중요한 정보를 포함할 수 있는 원래 컨텍스트를 손상시키며, 프로덕션 환경에서 트레이스백이 수백 줄에서 수만, 수십만 줄로 부풀어 오르게 하여 에러 이해를 훨씬 더 어렵게 만듭니다.</p>
<p>새로운 <code>BaseException.preserve_context()</code> 메서드는 이러한 경우에 발견 가능하고(discoverable), 읽기 쉬우며, 사용하기 쉬운 해결책이 될 것입니다.</p>
<h3>명세 (Specification)</h3>
<h4><code>BaseExceptionGroup.leaf_exceptions()</code> 메서드</h4>
<p><code>BaseExceptionGroup</code>에 다음과 같은 시그니처를 가진 <code>leaf_exceptions()</code> 메서드가 추가될 것입니다.</p>
<pre><code class="language-python">def leaf_exceptions(self, *, fix_tracebacks=True) -> list[BaseException]:
    """
    그룹 내의 모든 '리프' 예외의 평면화된(flat) 리스트를 반환합니다.
    fix_tracebacks가 True인 경우, 각 리프의 트레이스백은 중간 그룹에 첨부된
    프레임들이 디버깅 시에도 보이도록 합성된(composite) 트레이스백으로 대체됩니다.
    이러한 변경을 비활성화하려면 fix_tracebacks=False를 전달하세요.
    예를 들어, 그룹을 변경하지 않고 다시 발생시킬(raise) 경우에 사용합니다.
    """
</code></pre>
<h4><code>BaseException.preserve_context()</code> 메서드</h4>
<p><code>BaseException</code>에 다음과 같은 시그니처를 가진 <code>preserve_context()</code> 메서드가 추가될 것입니다.</p>
<pre><code class="language-python">def preserve_context(self) -> contextlib.AbstractContextManager[Self]:
    """
    예외의 __context__ 속성을 보존하는 컨텍스트 관리자입니다.
    컨텍스트에 진입할 때 __context__의 현재 값이 저장됩니다.
    종료할 때 저장된 값이 복원되어, except 블록 내에서 예외를 발생시켜도
    해당 예외의 컨텍스트 체인을 변경하지 않도록 합니다.
    """
</code></pre>
<p><strong>사용 예시:</strong></p>
<pre><code class="language-python"># 비동기 웹 프레임워크에서, 사용자 코드는 특정 HTTP 에러 코드를 클라이언트에
# 반환하기 위해 HTTPException을 발생시킬 수 있습니다.
# 그러나, TaskGroup 내에서 발생할 수도 있고 아닐 수도 있으므로 `except*`를
# 사용해야 합니다. 만약 여러 개의 HTTPException이 있다면 버그로 처리합니다.
try:
    user_code_here()
except* HTTPException as group:
    first, *rest = group.leaf_exceptions()
    if rest:
        raise # 내부 서버 에러 미들웨어에 의해 처리됨
    ...
    # 로깅, 캐시 업데이트 등
    with first.preserve_context():
        raise first
</code></pre>
<p><code>.preserve_context()</code>가 없으면, 위 코드는 예외의 기존 <code>__context__</code>를 버리거나, <code>except*</code> 블록 밖에서 예외를 발생시키도록 코드를 복잡하게 만들거나, <code>preserve_context()</code>의 의미를 인라인으로 구현해야 했을 것입니다.</p>
<h3>하위 호환성 (Backwards Compatibility)</h3>
<p>내장 클래스, 특히 <code>BaseException</code>과 같이 널리 사용되는 클래스에 새로운 메서드를 추가하는 것은 상당한 영향을 미 미칠 수 있습니다. 그러나 GitHub 검색 결과 이 메서드 이름들과의 충돌은 발견되지 않았습니다. 만약 사설 코드에 동일한 이름의 사용자 정의 메서드가 존재한다면, PEP에서 제안하는 메서드를 덮어쓰게 되지만 런타임 동작에는 영향을 미치지 않습니다.</p>
<h3>교육 방법 (How to Teach This)</h3>
<p><code>ExceptionGroup</code> 작업은 초급 프로그래머에게는 발생하기 어려운 중급에서 고급 주제입니다. 따라서 이 주제는 문서를 통해, 그리고 정적 분석 도구의 적시 피드백을 통해 교육할 것을 제안합니다. 중급 과정에서는 <code>.leaf_exceptions()</code>를 <code>.split()</code> 및 <code>.subgroup()</code> 메서드와 함께 가르치고, <code>.preserve_context()</code>는 특정 문제점을 해결하기 위한 고급 옵션으로 언급하는 것을 권장합니다.</p>
<p>API 참조 문서와 기존 <code>ExceptionGroup</code> 튜토리얼은 새로운 메서드를 시연하고 설명하도록 업데이트되어야 합니다. 튜토리얼에는 <code>.leaf_exceptions()</code>와 <code>.preserve_context()</code>가 에러 처리 로직을 단순화하는 일반적인 패턴의 예시를 포함해야 합니다. <code>ExceptionGroup</code>을 자주 사용하는 다운스트림 라이브러리도 유사한 문서를 포함할 수 있습니다.</p>
<p>또한, <code>flake8-async</code>에 포함될 린트(lint) 규칙을 설계하여 <code>group.exceptions</code>를 반복하거나 리프 예외를 다시 발생시킬 때 <code>.leaf_exceptions()</code> 사용을 제안하고, <code>except*</code> 블록 내에서 리프 예외를 다시 발생시킬 때 기존 컨텍스트가 덮어씌워지는 경우 <code>.preserve_context()</code> 사용을 제안할 것입니다.</p>
<h3>채택되지 않은 아이디어 (Rejected Ideas)</h3>
<ul>
<li><strong>메서드 대신 유틸리티 함수 추가:</strong> 메서드보다 유틸리티 함수를 추가하는 아이디어가 있었으나, 헬퍼 함수가 어디에 위치해야 할지 명확하지 않고, 인수가 <code>BaseException</code> 인스턴스여야 하며, 메서드가 더 편리하고 발견하기 쉽다는 이유로 거부되었습니다.</li>
<li><strong><code>BaseException.as_group()</code> (또는 그룹 메서드) 추가:</strong> 단일 예외와 그룹 내 동일 유형 예외를 모두 처리하는 중복된 로직이 많다는 점을 고려하여 <code>as_group()</code> 메서드가 제안되었지만, 기존 코드 리팩토링 시 개선 효과가 미미하여 거부되었습니다. 대신 중복 제거된 에러 처리를 위한 "그룹으로 변환" 레시피를 문서화할 것을 권장합니다.</li>
<li><strong>컨텍스트 관리자 대신 <code>e.raise_with_preserved_context()</code> 추가:</strong> 컨텍스트 관리자 형태가 <code>raise ... from ...</code>을 허용하고, 덜 마법적이며 부적절한 경우에 사용될 가능성이 적다는 이유로 선호되었습니다.</li>
<li><strong>추가 속성 보존:</strong> <code>__cause__</code> 및 <code>__suppress_context__</code> 속성은 예외 재발생 시 변경되지 않으므로 보존하지 않기로 결정했습니다. <code>__traceback__</code> 속성 보존도 고려되었으나, 추가 <code>raise ...</code> 문이 에러 이해에 중요한 단서가 될 수 있으므로 거부되었습니다.</li>
</ul>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인 또는 CC0-1.0-Universal 라이선스 중 더 관대한 조건에 따라 배포됩니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Draft] PEP 785 - New methods for easier handling ofExceptionGroups"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 13:59:04+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
