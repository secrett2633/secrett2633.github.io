3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-aecaf5ac7a84facf.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-e3ea38185bb36cd2.js"],""]
4:["slug","python/pep/521","c"]
0:["x02Anhkwgp1He7ftuyAhh",[[["",{"children":[["slug","python/pep/521","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"521\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/521","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/da5e1dc2b9a7c5bb.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T4d23,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0521/">PEP 521 - Managing global context via ‘with’ blocks in generators and coroutines</a></p>
<p><strong>상태:</strong> Withdrawn | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 27-Apr-2015</p>
</blockquote>
<p>PEP 521은 <code>Generator</code> 및 <code>Coroutine</code> 내 <code>with</code> 블록을 통해 전역 컨텍스트를 관리하는 방법을 제안했지만, PEP 567에 찬성하여 <code>Withdrawn</code> (철회됨) 상태입니다.</p>
<h2>PEP 521: Generator 및 Coroutine 내 'with' 블록을 통한 전역 컨텍스트 관리 (Withdrawn)</h2>
<ul>
<li><strong>작성자:</strong> Nathaniel J. Smith</li>
<li><strong>상태:</strong> Withdrawn (철회됨)</li>
<li><strong>유형:</strong> Standards Track</li>
<li><strong>생성일:</strong> 2015년 4월 27일</li>
<li><strong>Python 버전:</strong> 3.6</li>
<li><strong>철회 사유:</strong> PEP 567에 찬성하여 철회됨.</li>
</ul>
<h3>개요 (Abstract)</h3>
<p>전역 상태(global state)를 가능한 한 피하려고 노력하지만, 그럼에도 불구하고 최선의 접근 방식으로 합의된 여러 상황이 존재합니다. Python에서 이러한 경우를 처리하는 표준 패턴은 전역 또는 스레드-로컬(thread-local) 스토리지에 전역 상태를 저장하고, <code>with</code> 블록을 사용하여 이 전역 상태의 수정 사항을 단일 동적 스코프(dynamic scope)로 제한하는 것입니다. 이 패턴이 사용되는 예로는 표준 라이브러리의 <code>warnings.catch_warnings</code> 및 <code>decimal.localcontext</code>, NumPy의 <code>numpy.errstate</code> (IEEE 754 부동 소수점 표준에서 제공하는 오류 처리 설정을 노출), 그리고 많은 서버 애플리케이션 프레임워크의 로깅 컨텍스트(logging context) 또는 HTTP 요청 컨텍스트(HTTP request context) 처리가 있습니다.</p>
<p>그러나 <code>Generator</code> 또는 <code>Coroutine</code>를 작성할 때 이러한 전역 상태에 대한 로컬 변경 사항을 관리할 수 있는 인체공학적(ergonomic) 방법은 현재 없습니다. 예를 들어, 다음 코드는:</p>
<pre><code class="language-python">def f():
    with warnings.catch_warnings():
        for x in g():
            yield x
</code></pre>
<p><code>g()</code>에 의해 발생하는 경고를 성공적으로 포착할 수도 있고, 코드의 다른 곳에서 트리거된 경고를 의도치 않게 삼킬 수도 있습니다. <code>f</code>와 그 호출자에게만 적용되도록 의도된 컨텍스트 매니저(context manager)는 호출자의 임의적이고 예측할 수 없는 부분을 포괄하는 동적 스코프를 가지게 됩니다. 이 문제는 특히 비동기(asynchronous) 코드를 작성할 때 심화되는데, 이 경우 거의 모든 함수가 <code>Coroutine</code>이 됩니다.</p>
<p>이 PEP는 스코프 내에서 실행이 일시 중단(suspended)되거나 다시 시작될(resumed) 때마다 컨텍스트 매니저에게 알림으로써, 컨텍스트 매니저가 그 효과를 적절하게 제한할 수 있도록 하여 이 문제를 해결할 것을 제안합니다.</p>
<h3>상세 설명 (Specification)</h3>
<p>컨텍스트 매니저 프로토콜에 두 개의 새로운 선택적(optional) 메서드인 <code>__suspend__</code>와 <code>__resume__</code>가 추가됩니다. 이 메서드들이 존재하면, <code>with</code> 블록의 컨텍스트 내에서 프레임(frame)의 실행이 일시 중단되거나 다시 시작될 때마다 호출됩니다.</p>
<p>더 형식적으로는, 다음 코드를 고려해볼 때:</p>
<pre><code class="language-python">with EXPR as VAR:
    PARTIAL-BLOCK-1
    f((yield foo))
    PARTIAL-BLOCK-2
</code></pre>
<p>현재 이 코드는 (PEP 343에서 복사된) 다음 코드와 동일합니다:</p>
<pre><code class="language-python">mgr = (EXPR)
exit = type(mgr).__exit__ # Not calling it yet
value = type(mgr).__enter__(mgr)
exc = True
try:
    try:
        VAR = value # Only if "as VAR" is present
        PARTIAL-BLOCK-1
        f((yield foo))
        PARTIAL-BLOCK-2
    except:
        exc = False
        if not exit(mgr, *sys.exc_info()):
            raise
    finally:
        if exc:
            exit(mgr, None, None, None)
</code></pre>
<p>이 PEP는 <code>with</code> 블록 처리를 다음과 같이 수정할 것을 제안합니다:</p>
<pre><code class="language-python">mgr = (EXPR)
exit = type(mgr).__exit__ # Not calling it yet
### --- NEW STUFF ---
if the_block_contains_yield_points: # known statically at compile time
    suspend = getattr(type(mgr), "__suspend__", lambda: None)
    resume = getattr(type(mgr), "__resume__", lambda: None)
### --- END OF NEW STUFF ---
value = type(mgr).__enter__(mgr)
exc = True
try:
    try:
        VAR = value # Only if "as VAR" is present
        PARTIAL-BLOCK-1
        ### --- NEW STUFF ---
        suspend(mgr)
        tmp = yield foo
        resume(mgr)
        f(tmp)
        ### --- END OF NEW STUFF ---
        PARTIAL-BLOCK-2
    except:
        exc = False
        if not exit(mgr, *sys.exc_info()):
            raise
    finally:
        if exc:
            exit(mgr, None, None, None)
</code></pre>
<p>유사한 <code>suspend</code>/<code>resume</code> 호출은 <code>yield from</code>, <code>await</code>, <code>async with</code>, <code>async for</code> 구조 내에 내장된 <code>yield</code> 지점(points) 주변에도 래핑됩니다.</p>
<h4>중첩된 블록 (Nested blocks)</h4>
<p>다음 코드를 고려해볼 때:</p>
<pre><code class="language-python">def f():
    with OUTER:
        with INNER:
            yield VALUE
</code></pre>
<p>다음과 같은 순서로 작업이 수행됩니다:</p>
<ol>
<li><code>INNER.__suspend__()</code></li>
<li><code>OUTER.__suspend__()</code></li>
<li><code>yield VALUE</code></li>
<li><code>OUTER.__resume__()</code></li>
<li><code>INNER.__resume__()</code></li>
</ol>
<p>이는 다음 리팩터링(refactoring)이 유효함을 보장합니다:</p>
<pre><code class="language-python">def f():
    with OUTER:
        yield from g()

def g():
    with INNER:
        yield VALUE
</code></pre>
<p>마찬가지로, 여러 컨텍스트 매니저를 사용하는 <code>with</code> 문은 오른쪽에서 왼쪽으로 일시 중단되고(suspend), 왼쪽에서 오른쪽으로 다시 시작됩니다(resume).</p>
<h4>기타 변경 사항 (Other changes)</h4>
<p><code>warnings.catch_warnings</code> 및 <code>decimal.localcontext</code>에 적절한 <code>__suspend__</code> 및 <code>__resume__</code> 메서드가 추가됩니다.</p>
<h3>제안 배경 (Rationale)</h3>
<p>개요에서, 우리는 그럴듯하지만 올바르지 않은 코드의 예를 들었습니다:</p>
<pre><code class="language-python">def f():
    with warnings.catch_warnings():
        for x in g():
            yield x
</code></pre>
<p>현재 Python에서 이 코드를 올바르게 만들려면 다음과 같이 작성해야 합니다:</p>
<pre><code class="language-python">def f():
    with warnings.catch_warnings():
        it = iter(g())
        while True:
            with warnings.catch_warnings():
                try:
                    x = next(it)
                except StopIteration:
                    break
                yield x
</code></pre>
<p>반면에, 이 PEP가 수락된다면 원래 코드는 그대로 올바르게 작동할 것입니다. 만약 이것이 설득력이 없다면, 또 다른 깨진 코드의 예시를 들어보겠습니다. 이 코드를 고치려면 훨씬 더 복잡한 조작이 필요하며, 이는 독자를 위한 연습 문제로 남겨둡니다:</p>
<pre><code class="language-python">async def test_foo_emits_warning():
    with warnings.catch_warnings(record=True) as w:
        await foo()
        assert len(w) == 1
        assert "xyzzy" in w[0].message
</code></pre>
<p>그리고 이 마지막 예시는 전혀 인위적이지 않습니다. 이것이 <code>async</code>/<code>await</code>를 사용하는 <code>Coroutine</code>가 경고를 올바르게 발생시키는지 테스트하는 방법입니다. <code>async</code>/<code>await</code>를 사용하는 코드에서 <code>warnings.catch_warnings</code>, <code>decimal.localcontext</code>, 또는 <code>numpy.errstate</code>를 사용하는 거의 모든 경우에 유사한 문제가 발생합니다. 따라서 해결해야 할 실제 문제가 분명히 존재하며, <code>async</code> 코드의 중요성이 커짐에 따라 더욱 시급해지고 있습니다.</p>
<h4>대안적 접근 방식 (Alternative approaches)</h4>
<p>제안된 주요 대안은 "스레드-로컬 스토리지(thread-local storage)"와 유사한 일종의 "태스크-로컬 스토리지(task-local storage)"를 만드는 것입니다. 본질적으로 이 아이디어는 이벤트 루프(event loop)가 스케줄링하는 각 태스크에 대해 새로운 "태스크 네임스페이스(task namespace)"를 할당하고, 언제든지 현재 실행 중인 태스크에 해당하는 네임스페이스를 가져올 수 있는 API를 제공한다는 것입니다. 해결해야 할 많은 세부 사항이 있지만, 기본적인 아이디어는 실행 가능해 보이며, 비동기 애플리케이션 프레임워크의 최상위 레벨에서 발생하는 종류의 전역 컨텍스트(예: 웹 프레임워크에서 컨텍스트 객체 설정)를 처리하는 특히 자연스러운 방법입니다. 그러나 여기에는 여러 가지 결함도 있습니다:</p>
<ul>
<li>이것은 비동기 이벤트 루프로 <code>yield</code>하는 <code>Coroutine</code>에 대한 전역 상태 관리 문제만 해결합니다. 하지만 이 문제는 <code>asyncio</code>에만 국한된 것이 아닙니다. 위 예시에서 보듯이, 단순한 <code>Generator</code>도 정확히 같은 문제에 직면합니다.</li>
<li>이벤트 루프와 전역 상태를 관리해야 하는 코드 사이에 불필요한 결합(coupling)을 생성합니다. 비동기 웹 프레임워크는 어쨌든 일부 이벤트 루프 API와 상호 작용해야 하므로 이 경우에는 큰 문제가 아닙니다. 그러나 <code>warnings</code> 또는 <code>decimal</code> 또는 <code>NumPy</code>가 자체적으로 비동기 코드를 포함하지 않음에도 불구하고 내부 상태에 액세스하기 위해 비동기 라이브러리의 API를 호출해야 한다는 것은 이상합니다. 더 나쁜 것은, 일반적으로 사용되는 여러 이벤트 루프 API가 있기 때문에 어떤 API와 통합해야 할지 명확하지 않습니다 (CPython이 <code>asyncio</code>, Twisted, tornado 등이 함께 작동할 수 있는 "태스크-로컬 도메인"을 생성하고 전환하기 위한 표준 API를 제공함으로써 어느 정도 완화될 수 있습니다).</li>
<li>이것이 허용할 수 있을 정도로 빠르게 만들어질 수 있을지는 전혀 명확하지 않습니다. <code>NumPy</code>는 모든 산술 연산에서 부동 소수점 오류 설정을 확인해야 합니다. 스레드-로컬 스토리지에서 데이터 조각을 확인하는 것은 터무니없이 빠릅니다. 왜냐하면 현대 플랫폼은 이 경우를 최적화하는 데 막대한 자원(예: 이 목적을 위한 CPU 레지스터 전용)을 투자했기 때문입니다. 이벤트 루프에서 메서드를 호출하여 네임스페이스에 대한 핸들을 가져온 다음 그 네임스페이스에서 조회를 수행하는 것은 훨씬 느립니다.</li>
</ul>
<p>더 중요한 것은, 이 추가 비용은 이벤트 루프를 전혀 사용하지 않는 프로그램에서도 전역 데이터에 대한 모든 액세스에 대해 지불되어야 한다는 것입니다. 이 PEP의 제안은 대조적으로, 실제로 <code>with</code> 블록과 <code>yield</code> 문을 혼합하는 코드에만 영향을 미치므로, 비용을 경험하는 사용자가 이점도 얻는 사용자와 동일합니다.</p>
<p>반면에, 태스크 컨텍스트와 이벤트 루프 간의 이러한 긴밀한 통합은 현재 제안의 범위를 넘어서는 다른 기능을 잠재적으로 허용합니다. 예를 들어, 이벤트 루프는 태스크가 <code>call_soon</code>을 호출했을 때 어떤 태스크 네임스페이스가 유효했는지 기록하고, 콜백이 실행될 때 동일한 태스크 네임스페이스에 액세스할 수 있도록 준비할 수 있습니다. 이것이 유용한지, 또는 스레드 간 호출의 경우 잘 정의되어 있는지(두 스레드에서 동시에 액세스되는 태스크-로컬 스토리지가 의미하는 바는 무엇인가?)는 이벤트 루프 구현자가 고민할 과제로 남겨져 있습니다. 이 제안의 어떤 것도 이러한 향상을 배제하지 않습니다. 그러나 이러한 기능은 이미 이벤트 루프와 긴밀하게 통합된 상태에 주로 유용할 것으로 보입니다. 요청 ID가 <code>call_soon</code>을 통해 유지되기를 원할 수 있지만, 대부분의 사람들은 다음을 예상하지 않을 것입니다:</p>
<pre><code class="language-python">with warnings.catch_warnings():
    loop.call_soon(f)
</code></pre>
<p><code>f</code>가 경고가 비활성화된 상태로 실행되는 결과는 <code>call_soon</code>이 전역 컨텍스트를 일반적으로 보존한다면 발생할 것입니다. <code>warnings</code> 컨텍스트 매니저의 <code>__exit__</code>가 <code>f</code>보다 먼저 호출된다는 점을 고려할 때 이것이 어떻게 작동할지도 불분명합니다.</p>
<p>따라서 이 PEP는 <code>__suspend__</code> / <code>__resume__</code>와 "태스크-로컬 스토리지"가 서로 다른 상황에서 모두 유용한 두 가지 보완적인 도구라는 입장을 취합니다.</p>
<h3>하위 호환성 (Backwards compatibility)</h3>
<p><code>__suspend__</code> 및 <code>__resume__</code>는 선택 사항이며 기본적으로 아무것도 하지 않는(no-ops) 메서드이기 때문에, 모든 기존 컨텍스트 매니저는 이전과 동일하게 작동합니다.</p>
<p>속도 면에서, 이 제안은 <code>with</code> 블록에 진입할 때 추가 오버헤드(추가 메서드를 확인해야 함; CPython에서 속성 조회 실패는 <code>AttributeError</code> 할당을 포함하므로 상당히 느림)와 일시 중단 지점(suspension points)에서 추가 오버헤드를 추가합니다. <code>with</code> 블록과 일시 중단 지점의 위치는 정적으로 알려져 있으므로, 컴파일러는 실제로 <code>with</code> 내부에 <code>yield</code>가 있는 경우를 제외하고는 모든 경우에 이 오버헤드를 쉽게 최적화할 수 있습니다. 또한, <code>__suspend__</code> 및 <code>__resume__</code>에 대한 속성 검사는 <code>with</code> 블록 시작 시 한 번만 수행하므로, 이 속성들이 정의되지 않은 경우 <code>yield</code> 당 오버헤드는 단일 C 레벨 <code>if (frame->needs_suspend_resume_calls) { ... }</code>로 최적화될 수 있습니다. 따라서 전체 오버헤드는 무시할 수 있을 것으로 예상됩니다.</p>
<h3>PEP 492와의 상호작용 (Interaction with PEP 492)</h3>
<p>PEP 492는 새로운 비동기 컨텍스트 매니저(asynchronous context managers)를 추가했습니다. 이는 일반 컨텍스트 매니저와 유사하지만, 일반 메서드인 <code>__enter__</code> 및 <code>__exit__</code> 대신 <code>Coroutine</code> 메서드인 <code>__aenter__</code> 및 <code>__aexit__</code>를 가집니다.</p>
<p>이 패턴을 따르면, 이 제안이 <code>__asuspend__</code> 및 <code>__aresume__</code> <code>Coroutine</code> 메서드를 추가할 것으로 예상할 수 있습니다. 그러나 이는 그다지 의미가 없습니다. 왜냐하면 <code>__suspend__</code>는 실행 스레드를 <code>yield</code>하고 다른 코드가 실행되도록 허용하기 전에 호출되어야 한다는 것이 요점이기 때문입니다. <code>__asuspend__</code>를 <code>Coroutine</code>으로 만듦으로써 우리가 달성하는 유일한 것은 <code>__asuspend__</code> 자체에서 <code>yield</code>를 가능하게 하는 것입니다. 따라서 <code>__asuspend__</code> 내부에서 <code>__asuspend__</code>를 재귀적으로 호출하거나, 아니면 포기하고 <code>suspend</code> 콜백을 호출하지 않고 이러한 <code>yield</code>가 발생하도록 허용해야 합니다. 어느 쪽이든 전체 요점을 무효화합니다.</p>
<p>단, 한 가지 예외가 있습니다. <code>Coroutine</code> 코드의 한 가지 가능한 패턴은 <code>Coroutine</code> 러너(runner)와 통신하기 위해 <code>yield</code>를 호출하지만, 실제로 실행을 일시 중단하지는 않는 것입니다 (즉, <code>Coroutine</code>는 <code>Coroutine</code> 러너가 <code>yield</code>된 메시지를 처리한 직후에 <code>Coroutine</code>를 즉시 다시 시작할 것이라는 것을 알 수 있습니다). 이에 대한 예시는 <code>curio.timeout_after</code> 비동기 컨텍스트 매니저입니다. 이 매니저는 특별한 <code>set_timeout</code> 메시지를 <code>curio</code> 커널에 <code>yield</code>하고, 커널은 메시지를 보낸 <code>Coroutine</code>를 즉시(동기적으로) 다시 시작합니다. 그리고 사용자 관점에서, 이 타임아웃(timeout) 값은 이 PEP를 촉발한 전역 변수와 유사하게 작동합니다. 그러나 중요한 차이점이 있습니다. 이러한 종류의 비동기 컨텍스트 매니저는 정의상 <code>Coroutine</code> 러너와 긴밀하게 통합됩니다. 따라서 <code>Coroutine</code> 러너는 이 PEP가 전혀 필요 없이 어떤 타임아웃이 어떤 <code>Coroutine</code>에 적용되는지 추적하는 책임을 맡을 수 있습니다 (그리고 이것이 실제로 <code>curio.timeout_after</code>가 작동하는 방식입니다).</p>
<p>이는 비동기 컨텍스트 매니저를 처리하는 두 가지 합리적인 접근 방식을 남깁니다:</p>
<ol>
<li>일반 <code>__suspend__</code> 및 <code>__resume__</code> 메서드를 추가합니다.</li>
<li>비동기 컨텍스트 매니저에 대한 경험이 더 많아질 때까지는 현재 상태로 둡니다.</li>
</ol>
<p>두 가지 모두 그럴듯해 보이므로, 게으름과 YAGNI (You Ain't Gonna Need It) 원칙에 따라 이 PEP는 잠정적으로 옵션 (2)를 고수할 것을 제안합니다.</p>
<h3>참고 자료 (References)</h3>
<ul>
<li><code>https://groups.google.com/forum/#!topic/python-tulip/zix5HQxtElg</code> <code>https://github.com/python/asyncio/issues/165</code></li>
<li>예를 들어, 모든 사용자가 공유하는 단일 태스크-로컬 네임스페이스가 있는지(이 경우 여러 타사 라이브러리가 이 네임스페이스에 대한 액세스를 조정할 방법이 필요함), 아니면 여러 태스크-로컬 네임스페이스가 있다면 각 라이브러리가 적절한 시점에 태스크-로컬 네임스페이스를 생성하고 파괴하는 메커니즘이 필요한지 결정해야 합니다. 위 GitHub 이슈에서 연결된 예비 패치(preliminary patch)는 이러한 라이프사이클 관리 메커니즘을 제공하지 않는 것으로 보입니다.</li>
</ul>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인(public domain)에 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Withdrawn] PEP 521 - Managing global context via ‘with’ blocks in generators and coroutines"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 23:14:33+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
