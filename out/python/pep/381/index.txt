3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-aecaf5ac7a84facf.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-e3ea38185bb36cd2.js"],""]
4:["slug","python/pep/381","c"]
0:["x02Anhkwgp1He7ftuyAhh",[[["",{"children":[["slug","python/pep/381","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"381\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/381","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/da5e1dc2b9a7c5bb.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T3cb0,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0381/">PEP 381 - Mirroring infrastructure for PyPI</a></p>
<p><strong>상태:</strong> Withdrawn | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 21-Mar-2009</p>
</blockquote>
<h2>PEP 381 – PyPI 미러링 인프라 (PEP 381 – Mirroring infrastructure for PyPI)</h2>
<p><strong>작성자:</strong> Tarek Ziadé, Martin von Löwis
<strong>상태:</strong> 철회됨 (Withdrawn)
<strong>유형:</strong> 표준 트랙 (Standards Track)
<strong>생성일:</strong> 2009년 3월 21일</p>
<hr>
<h3>초록 (Abstract)</h3>
<p>이 PEP는 PyPI (Python Package Index)를 위한 미러링 인프라 구축을 설명합니다.</p>
<h3>PEP 철회 배경 (PEP Withdrawal Rationale)</h3>
<p>이 PEP는 2013년 5월, 주 PyPI 웹 서비스가 Fastly 캐싱 CDN 뒤로 이전되면서 철회되었습니다. 이후 이 협약은 PSF (Python Software Foundation)와의 현물 후원으로 공식화되었고, PSF는 후원 중단 시의 위험 관리까지 담당하게 되었습니다.</p>
<p>이전에는 PyPI에서 직접 제공되던 다운로드 통계는 현재 Google BigQuery를 통해 간접적으로 게시되고 있습니다. 따라서 이 PEP에서 설명하는 미러링 제안은 더 이상 필요하지 않게 되어 철회되었습니다.</p>
<h3>제안 배경 (Rationale)</h3>
<p>PyPI는 6,000개 이상의 프로젝트를 호스팅하며, 매일 수많은 사람들이 애플리케이션을 빌드하는 데 사용하고 있습니다. 특히 <code>easy_install</code> 및 <code>zc.buildout</code>와 같은 시스템은 PyPI를 집중적으로 활용합니다.</p>
<p>PyPI를 집중적으로 사용하는 사람들에게 PyPI는 단일 실패 지점(Single Point of Failure)으로 작용할 수 있습니다. 이미 개인 및 공개적으로 일부 미러를 설정하는 사람들이 생겨났습니다. 이러한 미러들은 PyPI를 탐색하여 동기화되는 '활성' 미러입니다.</p>
<p>시스템의 신뢰성을 높이기 위해 이 PEP는 다음 사항을 설명했습니다.</p>
<ul>
<li>PyPI에서의 미러 목록화 및 등록</li>
<li>공개 미러가 유지해야 할 페이지들. 이 페이지들은 PyPI에서 조회수 및 최종 수정 날짜를 얻는 데 사용됩니다.</li>
<li>미러가 PyPI와 동기화되는 방법</li>
<li>클라이언트가 장애 조치(fail-over) 메커니즘을 구현하는 방법</li>
</ul>
<h3>미러 목록화 및 등록 (Mirror listing and registering)</h3>
<p>PyPI를 미러링하려는 사람들은 catalog-SIG (Special Interest Group)에 제안을 제출합니다. 메일링 리스트에 미러가 제안되면, 미러링 규칙을 준수하는지 확인한 후 PyPI 애플리케이션 내의 미러 목록에 수동으로 추가됩니다.</p>
<p>미러 목록은 <code>X.pypi.python.org</code> 형태의 호스트 이름 목록으로 제공됩니다. <code>X</code> 값은 <code>a,b,c,...aa,ab,...</code> 순서로 지정됩니다. <code>a.pypi.python.org</code>는 마스터 서버이며, 미러는 <code>b</code>부터 시작합니다. <code>last.pypi.python.org</code> CNAME 레코드는 마지막 호스트 이름을 가리킵니다. 미러 운영자는 정적 주소를 사용해야 하며, 계획된 주소 변경 사항을 <code>distutils-sig</code>에 미리 보고해야 합니다.</p>
<p>새로운 미러는 <code>http://pypi.python.org/mirrors</code> 페이지에도 나타나는데, 이 페이지는 미러 목록을 사람이 읽을 수 있는 형태로 제공하고 새로운 미러 등록 방법을 설명합니다.</p>
<h3>통계 페이지 (Statistics page)</h3>
<p>PyPI는 <code>/stats</code>에서 다운로드 통계를 제공합니다. 이 페이지는 모든 미러의 로컬 통계를 읽고 합산하여 PyPI에서 매일 계산됩니다.</p>
<p>통계는 <code>/stats/days</code> 및 <code>/stats/months</code> 아래에 일별 또는 월별 파일로 제공됩니다. 각 파일은 <code>bzip2</code> 압축 형식이며, 다음 형식을 따릅니다.</p>
<ul>
<li>일별 파일: <code>YYYY-MM-DD.bz2</code></li>
<li>월별 파일: <code>YYYY-MM.bz2</code></li>
</ul>
<p><strong>예시:</strong></p>
<ul>
<li><code>/stats/days/2008-11-06.bz2</code></li>
<li><code>/stats/months/2008-11.bz2</code></li>
</ul>
<h3>미러의 신뢰성 (Mirror Authenticity)</h3>
<p>분산 미러링 시스템에서 클라이언트는 미러링된 사본이 원본과 동일한지(authentic) 확인하고 싶을 수 있습니다. 고려해야 할 여러 위협이 있습니다.</p>
<ul>
<li>중앙 인덱스가 침해될 수 있습니다.</li>
<li>중앙 인덱스는 신뢰할 수 있다고 가정하지만, 미러가 변조될 수 있습니다.</li>
<li>중앙 인덱스와 최종 사용자 사이 또는 미러와 최종 사용자 사이의 중간자 공격(man-in-the-middle)으로 데이터그램이 변조될 수 있습니다.</li>
</ul>
<p>이 사양은 두 번째 위협만 다룹니다. 중간자 공격을 감지하기 위한 일부 조치가 마련되어 있습니다. 첫 번째 공격을 감지하려면 패키지 작성자가 PGP 키를 사용하여 패키지에 서명해야 하며, 사용자는 신뢰하는 작성자의 패키지인지 확인할 수 있습니다.</p>
<p>중앙 인덱스는 <code>/serverkey</code> URL에서 DSA 키를 PEM 형식으로 제공합니다 (예: "openssl dsa -pubout"으로 생성된 RFC 3280 <code>SubjectPublicKeyInfo</code>). 이 URL은 미러링되지 않아야 하며, 클라이언트는 PyPI에서 직접 공식 <code>serverkey</code>를 가져오거나 PyPI 클라이언트 소프트웨어와 함께 제공된 사본을 사용해야 합니다. 미러는 키 갱신(key rollover)을 감지하기 위해 여전히 키를 다운로드해야 합니다.</p>
<p>각 패키지에 대해 미러링된 서명은 <code>/serversig/&#x3C;package></code>에서 제공됩니다. 이는 병렬 URL인 <code>/simple/&#x3C;package></code>의 DSA 서명으로, SHA-1과 DSA를 사용하는 DER 형식입니다 (예: RFC 3279 <code>Dsa-Sig-Value</code>, 알고리즘 1.2.840.10040.4.3으로 생성됨).</p>
<p>미러를 사용하는 클라이언트는 패키지를 확인하기 위해 다음 단계를 수행해야 합니다.</p>
<ol>
<li><code>/simple</code> 페이지를 다운로드하고 SHA-1 해시를 계산합니다.</li>
<li>해당 해시의 DSA 서명을 계산합니다.</li>
<li>해당 <code>/serversig</code>를 다운로드하고 2단계에서 계산된 값과 바이트 단위로 비교합니다.</li>
<li>미러에서 다운로드하는 모든 파일의 MD-5 해시를 계산하고 (<code>/simple</code> 페이지와 비교하여) 확인합니다.</li>
</ol>
<p>확인 알고리즘의 구현은 <code>https://svn.python.org/packages/trunk/pypi/tools/verify.py</code>에서 제공됩니다.</p>
<p>중앙 인덱스에서 다운로드할 때는 확인이 필요하지 않으며, 계산 오버헤드를 줄이기 위해 피해야 합니다.</p>
<p>약 1년에 한 번, 키가 새로운 키로 교체됩니다. 미러는 모든 <code>/serversig</code> 페이지를 다시 가져와야 합니다. 미러를 사용하는 클라이언트는 새 서버 키의 신뢰할 수 있는 사본을 찾아야 합니다. 한 가지 방법은 <code>https://pypi.python.org/serverkey</code>에서 다운로드하는 것입니다. 중간자 공격을 감지하려면 클라이언트가 CACert 기관에서 서명한 SSL 서버 인증서를 확인해야 합니다.</p>
<h3>미러가 제공해야 하는 특별 페이지 (Special pages a mirror needs to provide)</h3>
<p>미러는 PyPI의 부분적인 복사본이므로, 복사하여 동일한 구조를 제공합니다.</p>
<ul>
<li><code>simple</code>: 패키지 인덱스의 REST 버전</li>
<li><code>packages</code>: Python 버전 및 글자별로 저장된 패키지</li>
<li><code>serversig</code>: <code>simple</code> 페이지에 대한 서명</li>
</ul>
<p>또한 두 가지 특정 요소를 제공해야 합니다.</p>
<ul>
<li><code>last-modified</code></li>
<li><code>local-stats</code></li>
</ul>
<h4>최종 수정 날짜 (Last modified date)</h4>
<p>CPAN은 미러의 마지막 동기화 날짜를 제공하는 신선도(freshness) 날짜 시스템을 사용합니다. PyPI의 경우, 각 미러는 미러가 유지하는 마지막 동기화 날짜를 나타내는 간단한 텍스트 콘텐츠의 URL을 유지해야 합니다.</p>
<p>날짜는 ISO 8601 형식을 사용하여 GMT 시간으로 제공됩니다. 각 미러는 자체적인 최종 수정 날짜를 유지할 책임이 있습니다. 이 페이지는 <code>/last-modified</code>에 위치해야 하며 <code>text/plain</code> 페이지여야 합니다.</p>
<h4>로컬 통계 (Local statistics)</h4>
<p>각 미러는 자신을 통해 이루어진 모든 다운로드 수를 계산할 책임이 있습니다. 이는 PyPI가 모든 다운로드를 합산하여 총계를 표시하는 데 사용됩니다.</p>
<p>이 통계는 첫 줄에 헤더가 있는 CSV와 유사한 형식입니다. PEP 305를 준수해야 하며, 기본적으로 Python의 <code>csv</code> 모듈로 읽을 수 있어야 합니다.</p>
<p>이 파일의 필드는 다음과 같습니다.</p>
<ul>
<li><code>package</code>: 패키지의 distutils ID</li>
<li><code>filename</code>: 다운로드된 파일 이름</li>
<li><code>useragent</code>: 패키지를 다운로드한 클라이언트의 User-Agent</li>
<li><code>count</code>: 다운로드 수</li>
</ul>
<p>콘텐츠는 다음과 같습니다.</p>
<pre><code># package,filename,useragent,count
zc.buildout,zc.buildout-1.6.0.tgz,MyAgent,142
...
</code></pre>
<p>카운팅은 미러가 시작된 날부터 시작되며, 하루에 하나의 파일이 <code>bzip2</code> 형식으로 압축됩니다. 각 파일은 날짜와 같이 명명됩니다 (예: <code>2008-11-06.bz2</code>는 2008년 11월 6일의 파일).</p>
<p>이 파일들은 <code>/local-stats</code>라는 폴더에 제공됩니다. 예를 들면 다음과 같습니다.</p>
<ul>
<li><code>/local-stats/days/2008-11-06.bz2</code></li>
<li><code>/local-stats/days/2008-11-07.bz2</code></li>
<li><code>/local-stats/days/2008-11-08.bz2</code></li>
</ul>
<p>이 페이지는 <code>/local-stats</code>에 위치해야 합니다.</p>
<h3>미러가 PyPI와 동기화되는 방법 (How a mirror should synchronize with PyPI)</h3>
<p><code>easy_install</code>의 작동 방식을 기반으로 Martin v. Loewis와 Jim Fulton이 Simple Index라는 미러링 프로토콜을 설명하고 구현했습니다. 이 섹션은 이를 종합하고 몇 가지 관련 링크, 그리고 User-Agent에 대한 작은 부분을 제공합니다.</p>
<h4>미러링 프로토콜 (The mirroring protocol)</h4>
<p>미러는 중앙 서버와 미러 간에 전송되는 데이터의 양을 줄여야 합니다. 이를 위해 <code>changelog()</code> PyPI XML-RPC 호출을 사용해야 하며, 마지막 동기화 이후 변경된 패키지만 다시 가져와야 합니다. 각 패키지 P에 대해 <code>/simple/P/</code> 및 <code>/serversig/P</code> 문서를 복사해야 합니다. 중앙 서버에서 패키지가 삭제되면 해당 패키지 및 모든 관련 파일을 삭제해야 합니다. 패키지 파일의 변경을 감지하기 위해 파일의 ETag를 캐시할 수 있으며, <code>If-none-match</code> 헤더를 사용하여 건너뛰기를 요청할 수 있습니다.</p>
<p>각 미러링 도구는 설명적인 User-Agent 헤더를 사용하여 자신을 식별해야 합니다. <code>pep381client</code> 패키지는 이 프로토콜을 준수하여 PyPI를 탐색하는 애플리케이션을 제공합니다.</p>
<h4>User-Agent 요청 헤더 (User-agent request header)</h4>
<p>PyPI를 통한 클라이언트의 작업을 구분하기 위해, 모든 미러링 소프트웨어는 특정 User-Agent 이름을 제공해야 합니다.</p>
<p>이는 다음과 같은 모든 클라이언트에도 해당됩니다.</p>
<ul>
<li><code>zc.buildout</code></li>
<li><code>setuptools</code></li>
<li><code>pip</code></li>
</ul>
<h3>클라이언트가 PyPI 및 해당 미러를 사용하는 방법 (How a client can use PyPI and its mirrors)</h3>
<p>PyPI를 탐색하는 클라이언트는 <code>last.pypi.python.org</code>를 사용하여 미러 목록을 가져와 대체 미러를 사용할 수 있어야 합니다.</p>
<p><strong>코드 예시:</strong></p>
<pre><code class="language-python">import socket
socket.gethostbyname_ex('last.pypi.python.org')[0]
# 결과 예시: 'h.pypi.python.org'
</code></pre>
<p>현재 이 메커니즘을 사용할 수 있는 클라이언트는 다음과 같습니다.</p>
<ul>
<li><code>setuptools</code></li>
<li><code>zc.buildout</code> (<code>setuptools</code>를 통해)</li>
<li><code>pip</code></li>
</ul>
<h4>장애 조치 메커니즘 (Fail-over mechanism)</h4>
<p>PyPI 또는 사용 중인 미러가 응답하지 않을 때, PyPI를 탐색하는 클라이언트는 장애 조치(Fail-over) 메커니즘을 사용할 수 있어야 합니다.</p>
<p>지리적 위치 및 응답성을 고려하여 어떤 미러를 사용할지는 클라이언트가 결정해야 합니다. 이 PEP는 이 장애 조치 메커니즘이 어떻게 작동해야 하는지에 대해서는 설명하지 않지만, 클라이언트가 가장 가까운 미러를 사용하도록 강력히 권장합니다.</p>
<p>현재 이 메커니즘을 사용할 수 있는 클라이언트는 다음과 같습니다.</p>
<ul>
<li><code>setuptools</code></li>
<li><code>zc.buildout</code> (<code>setuptools</code>를 통해)</li>
<li><code>pip</code></li>
</ul>
<h4>추가 패키지 인덱스 (Extra package indexes)</h4>
<p>일부 패키지는 비공개이거나 프로젝트 관리자가 자체 서버를 운영하여 사람들이 프로젝트 패키지를 얻을 수 있는 경우, PyPI에 업로드되지 않을 수 있습니다. 그러나 공개 패키지 인덱스는 PyPI 및 Distutils 프로토콜을 따르도록 강력히 권장됩니다.</p>
<p>즉, <code>register</code> 및 <code>upload</code> 명령은 시중에 나와 있는 모든 패키지 인덱스 서버와 호환되어야 합니다.</p>
<p>현재 PyPI 및 Distutils와 호환되는 소프트웨어는 다음과 같습니다.</p>
<ul>
<li><code>PloneSoftwareCenter</code>: <code>plone.org</code> 제품 섹션을 운영하는 데 사용됩니다.</li>
<li><code>EggBasket</code></li>
</ul>
<p>추가 패키지 인덱스는 PyPI의 미러가 아니지만, 자체적으로 미러를 가질 수 있습니다.</p>
<h4>여러 인덱스 병합 (Merging several indexes)</h4>
<p>클라이언트가 여러 개의 개별 인덱스에서 패키지를 가져와야 하는 경우, 각 인덱스를 잠재적인 패키지 소스로 사용할 수 있어야 합니다. 클라이언트가 패키지를 찾기 위해 여러 인덱스는 정렬된 목록으로 정의되어야 합니다.</p>
<p>각 독립적인 인덱스는 물론 자체 미러 목록을 제공할 수 있습니다.
(XXX: 임의의 인덱스의 미러에 대한 호스트 이름을 가져오는 방법 정의 필요)</p>
<p>이는 모든 수준의 개인 정보 보호를 포함하는 신뢰할 수 있는 패키징 시스템을 위해 클라이언트 수준에서 모든 조합을 허용합니다. 병합 처리는 클라이언트의 몫입니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Withdrawn] PEP 381 - Mirroring infrastructure for PyPI"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 21:02:58+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
