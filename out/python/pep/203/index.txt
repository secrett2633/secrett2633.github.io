3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-ce60b0a6591d04ed.js"],""]
4:["slug","python/pep/203","c"]
0:["e6YNzZ2BVZ8NBZ6boXfWj",[[["",{"children":[["slug","python/pep/203","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"203\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/203","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T25e7,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0203/">PEP 203 - Augmented Assignments</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 13-Jul-2000</p>
</blockquote>
<h2>PEP 203: 증강 할당 (Augmented Assignments)</h2>
<ul>
<li><strong>작성자:</strong> Thomas Wouters</li>
<li><strong>상태:</strong> Final (최종)</li>
<li><strong>유형:</strong> Standards Track</li>
<li><strong>생성일:</strong> 2000년 7월 13일</li>
<li><strong>Python 버전:</strong> 2.0</li>
</ul>
<h3>서론</h3>
<p>PEP 203은 Python 2.0에 도입될 증강 할당(augmented assignment) 연산자에 대한 제안을 다룹니다. 이 문서는 해당 기능의 상태와 소유권을 추적하며, 기능에 대한 설명과 이를 지원하기 위해 필요한 변경 사항을 설명합니다. 또한, 메일링 리스트 포럼에서 진행된 논의를 요약하고 추가 정보가 필요한 경우 URL을 제공합니다.</p>
<h3>제안된 의미론 (Proposed Semantics)</h3>
<p>증강 할당은 <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>**=</code>, <code>&#x3C;&#x3C;=</code>, <code>>>=</code>, <code>&#x26;=</code>, <code>^=</code>, <code>|=</code>와 같은 새로운 연산자를 도입합니다. 이 연산자들은 일반적인 이항(binary) 연산자와 동일하게 작동하지만, 좌변 객체가 이를 지원하는 경우 제자리(in-place)에서 연산을 수행하며, 좌변은 한 번만 평가됩니다.</p>
<p><code>x += y</code>와 같은 표현식에서, 객체 <code>x</code>가 로드된 후 <code>y</code>가 <code>x</code>에 더해지고, 그 결과 객체가 원래 위치에 다시 저장됩니다. 두 인수에 대한 정확한 동작은 <code>x</code>의 타입과 <code>y</code>의 타입에 따라 달라집니다.</p>
<p>Python에서 증강 할당의 핵심 아이디어는 단순히 이항 연산의 결과를 좌변 피연산자에 저장하는 일반적인 방식을 더 쉽게 작성하는 것을 넘어, 좌변 피연산자가 자체적으로 수정되어야 함을 인지하고 수정된 복사본을 생성하는 대신 자체적으로 연산하도록 하는 것입니다.</p>
<p>이를 가능하게 하기 위해, Python 클래스 및 C 확장 타입에 여러 새로운 훅(hook)이 추가되었습니다. 이 훅들은 해당 객체가 증강 할당 연산의 좌변으로 사용될 때 호출됩니다. 클래스나 타입이 in-place 훅을 구현하지 않으면, 해당 이항 연산에 대한 일반 훅이 사용됩니다.</p>
<p>예를 들어, <code>x</code>라는 인스턴스 객체에 대해 <code>x += y</code> 표현식은 <code>x.__iadd__(y)</code>를 호출하려고 시도합니다. 이는 <code>__add__</code>의 in-place 변형입니다. 만약 <code>__iadd__</code>가 없으면 <code>x.__add__(y)</code>가 시도되고, <code>__add__</code>도 없으면 <code>y.__radd__(x)</code>가 시도됩니다. <code>__iadd__</code>에는 우변(right-hand-side) 변형이 없습니다. <code>__iadd__</code> 훅은 <code>__add__</code>와 유사하게 동작해야 하며, <code>x</code> 변수에 할당될 연산의 결과(자신일 수도 있음)를 반환해야 합니다.</p>
<p>C 확장 타입의 경우, 훅은 <code>PyNumberMethods</code> 및 <code>PySequenceMethods</code> 구조체의 멤버입니다. 일반적인 <code>x &#x3C;augop> y</code>의 경우, 주 연산 대상 객체는 <code>x</code>입니다. In-place 연산은 in-place 수정이 지원되지 않을 때 일반 이항 연산으로 대체됩니다.</p>
<h3>도입 배경 (Rationale)</h3>
<p>이 기능을 Python에 추가하는 주요 이유는 표현의 간결성(simplicity of expression)과 in-place 연산(in-place operations) 지원이라는 두 가지입니다. 궁극적인 결과는 구문(syntax)의 간결성과 표현의 간결성 사이의 절충점입니다. 증강 할당은 이전에 불가능했던 것을 추가하는 것이 아니라, 이러한 작업을 더 쉽게 만듭니다.</p>
<p>증강 할당을 추가하면 Python의 구문이 더 복잡해집니다. 그러나 이러한 새로운 할당 형식은 할당과 이항 연산 간의 결합으로 이해하기 쉽고, 이해하는 데 큰 개념적 도약이 필요하지 않습니다. 또한, 증강 할당을 가진 다른 언어들이 이 기능이 인기 있고 많이 사용된다는 것을 보여주었습니다.</p>
<p><code>&#x3C;x> = &#x3C;x> &#x3C;operator> &#x3C;y></code> 형태의 표현식은 이러한 언어에서 추가 구문을 사용할 가치가 있을 만큼 충분히 흔하며, Python에서도 이러한 표현식이 적지 않습니다. 특히 Python에서는 이항 연산자로 리스트를 연결할 수 있어 자주 사용됩니다. 이러한 표현식을 <code>&#x3C;x> &#x3C;operator>= &#x3C;y></code>로 작성하는 것이 더 읽기 쉽고 오류 발생 가능성이 적습니다.</p>
<p>새로운 in-place 연산은 특히 행렬 계산 및 대규모 객체를 필요로 하는 다른 응용 프로그램에 유용합니다. 이러한 패키지들은 현재의 이항 연산이 항상 새 객체를 생성하므로, 기존의 (대규모) 객체에 단일 항목을 추가하는 것이 전체 객체를 복사하고 (메모리 부족을 유발할 수 있음) 단일 항목을 추가한 다음, 참조 횟수에 따라 원본 객체를 삭제하는 결과를 초래할 수 있습니다.</p>
<p>이 문제를 해결하기 위해 현재 패키지들은 객체를 in-place로 수정하기 위해 메서드나 함수를 사용해야 하는데, 이는 증강 할당 표현식보다 가독성이 떨어집니다. 증강 할당은 이 모든 문제를 해결하지는 못하겠지만, 시작점입니다.</p>
<h3>새로운 메서드 (New Methods)</h3>
<p>제안된 구현은 Python 클래스가 증강 할당 연산자를 오버로드(overload)하기 위해 구현할 수 있는 11가지 훅을 추가합니다. 이들은 다음과 같습니다:</p>
<ul>
<li><code>__iadd__</code> (in-place addition)</li>
<li><code>__isub__</code> (in-place subtraction)</li>
<li><code>__imul__</code> (in-place multiplication)</li>
<li><code>__idiv__</code> (in-place division)</li>
<li><code>__imod__</code> (in-place modulo)</li>
<li><code>__ipow__</code> (in-place power)</li>
<li><code>__ilshift__</code> (in-place left shift)</li>
<li><code>__irshift__</code> (in-place right shift)</li>
<li><code>__iand__</code> (in-place bitwise AND)</li>
<li><code>__ixor__</code> (in-place bitwise XOR)</li>
<li><code>__ior__</code> (in-place bitwise OR)</li>
</ul>
<p><code>__iadd__</code>에서 'i'는 'in-place'를 의미합니다.</p>
<p>C 확장 타입의 경우, <code>PyNumberMethods</code>에 <code>nb_inplace_*</code> 멤버가, <code>PySequenceMethods</code>에는 <code>sq_inplace_concat</code> 및 <code>sq_inplace_repeat</code> 멤버가 추가됩니다. 바이너리 호환성(binary compatibility)을 유지하기 위해 <code>tp_flags</code> <code>TypeObject</code> 멤버는 이 슬롯에 할당된 공간이 있는지 확인하는 데 사용됩니다.</p>
<h3>구현 (Implementation)</h3>
<p>증강 할당의 현재 구현은 앞서 언급된 메서드와 슬롯 외에 13개의 새로운 바이트코드(bytecodes)와 13개의 새로운 API 함수를 추가합니다.</p>
<p>새로운 API 함수는 기존 이항 연산 API 함수의 in-place 버전입니다:</p>
<ul>
<li><code>PyNumber_InPlaceAdd</code></li>
<li><code>PyNumber_InPlaceSubtract</code></li>
<li><code>PyNumber_InPlaceMultiply</code></li>
<li><code>PyNumber_InPlaceDivide</code></li>
<li><code>PyNumber_InPlaceRemainder</code></li>
<li><code>PyNumber_InPlacePower</code></li>
<li><code>PyNumber_InPlaceLshift</code></li>
<li><code>PyNumber_InPlaceRshift</code></li>
<li><code>PyNumber_InPlaceAnd</code></li>
<li><code>PyNumber_InPlaceXor</code></li>
<li><code>PyNumber_InPlaceOr</code></li>
<li><code>PySequence_InPlaceConcat</code></li>
<li><code>PySequence_InPlaceRepeat</code></li>
</ul>
<p>이 함수들은 Python 클래스 훅(객체가 Python 클래스 인스턴스인 경우) 또는 C 타입의 숫자(number) 또는 시퀀스(sequence) 메서드를 호출합니다.</p>
<p>새로운 바이트코드는 다음과 같습니다:</p>
<ul>
<li><code>INPLACE_ADD</code>, <code>INPLACE_SUBTRACT</code>, <code>INPLACE_MULTIPLY</code>, <code>INPLACE_DIVIDE</code>, <code>INPLACE_REMAINDER</code>, <code>INPLACE_POWER</code>, <code>INPLACE_LEFTSHIFT</code>, <code>INPLACE_RIGHTSHIFT</code>, <code>INPLACE_AND</code>, <code>INPLACE_XOR</code>, <code>INPLACE_OR</code> (이들은 <code>BINARY_*</code> 바이트코드의 미러링 버전이며, InPlace API 함수 호출로 구현됩니다.)</li>
<li><code>ROT_FOUR</code> (상위 4개 스택 항목을 회전)</li>
<li><code>DUP_TOPX</code> (상위 N개 항목을 복제)</li>
</ul>
<p><code>DUP_TOPX</code>는 편의를 위한 바이트코드이며 필수는 아닙니다.</p>
<h3>공개 문제 (Open Issues)</h3>
<ul>
<li><code>PyNumber_InPlace</code> API는 일반 <code>PyNumber</code> API의 부분 집합으로, 증강 할당 구문을 지원하는 데 필요한 함수만 포함합니다. 다른 in-place API 함수가 필요하면 나중에 추가될 수 있습니다.</li>
<li><code>DUP_TOPX</code> 바이트코드는 편의성 바이트코드로, 실제로 필수는 아닙니다. 이 바이트코드가 가치가 있는지 고려해야 합니다.</li>
</ul>
<hr>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 203 - Augmented Assignments"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 16:13:23+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
