3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-19cfc001fdac3337.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-51594f997fc19690.js"],""]
4:["slug","python/pep/696","c"]
0:["FeyCvJug7In7AgUZlfHUx",[[["",{"children":[["slug","python/pep/696","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"696\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/696","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T4a39,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0696/">PEP 696 - Type Defaults for Type Parameters</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 14-Jul-2022</p>
</blockquote>
<p>PEP 696 – 타입 파라미터의 기본값 (Type Defaults for Type Parameters)</p>
<h2>개요</h2>
<p>이 PEP (Python Enhancement Proposal)는 <code>TypeVar</code>, <code>ParamSpec</code>, <code>TypeVarTuple</code>을 포함한 타입 파라미터에 '타입 기본값 (type defaults)' 개념을 도입합니다. 이는 특정 타입이 지정되지 않았을 때 타입 파라미터에 대한 기본값으로 작동합니다.</p>
<p>C++, TypeScript, Rust와 같은 일부 인기 있는 언어에서는 이미 기본 타입 인자(default type argument)를 지원하고 있습니다. PEP 695의 작성자가 몇몇 일반적인 언어의 타입 파라미터 문법에 대한 조사를 수행했으며, 그 내용은 해당 PEP의 부록 A에서 확인할 수 있습니다.</p>
<h2>동기 (Motivation)</h2>
<p>타입 파라미터의 기본값은 제네릭(Generic) 타입을 사용할 때 명시적인 타입 인자를 제공하지 않아도 되도록 하여 코드의 가독성과 사용 편의성을 높입니다.</p>
<p><strong>예시 1: <code>TypeVar</code> 기본값</strong>
<code>T = TypeVar("T", default=int)</code>는 <code>T</code>에 대한 타입이 지정되지 않으면 <code>int</code>로 간주됩니다.</p>
<pre><code class="language-python">T = TypeVar("T", default=int) # 타입이 지정되지 않으면 T는 int로 간주됩니다.
@dataclass
class Box(Generic[T]):
    value: T | None = None

reveal_type(Box()) # type은 Box[int]입니다.
reveal_type(Box(value="Hello World!")) # type은 Box[str]입니다.
</code></pre>
<p><strong>예시 2: <code>Generator</code>의 타입 정의 개선</strong>
<code>Generator</code>와 같은 내장 타입의 스텁(stub) 정의를 개선하는 데 유용합니다.</p>
<pre><code class="language-python">YieldT = TypeVar("YieldT")
SendT = TypeVar("SendT", default=None)
ReturnT = TypeVar("ReturnT", default=None)

class Generator(Generic[YieldT, SendT, ReturnT]):
    ...

Generator[int] == Generator[int, None] == Generator[int, None, None]
</code></pre>
<p><strong>예시 3: 특정 타입이 주로 사용되는 제네릭</strong>
일반적으로 하나의 타입에 대해 제네릭하게 사용되는 경우에도 유용합니다.</p>
<pre><code class="language-python">class Bot: ...
BotT = TypeVar("BotT", bound=Bot, default=Bot)
class Context(Generic[BotT]):
    bot: BotT

class MyBot(Bot): ...

reveal_type(Context().bot) # type은 Bot입니다. (현재는 Any가 될 수 있음)
reveal_type(Context[MyBot]().bot) # type은 MyBot입니다.
</code></pre>
<p>이 기능은 명시적으로 타입을 사용하는 개발자뿐만 아니라, 자동 완성 기능을 사용하여 개발 속도를 높이는 비-타이핑 사용자에게도 도움이 됩니다.</p>
<p>이러한 설계 패턴은 <code>discord.py</code> (위 예시 출처), <code>NumPy</code> (<code>ndarray</code>의 <code>dtype</code> 기본값이 <code>float64</code>가 되도록 함), <code>TensorFlow</code> (<code>Tensor</code> 및 <code>Layer</code> 정의 간소화)와 같은 프로젝트에서 흔히 나타납니다.</p>
<h2>명세 (Specification)</h2>
<h3>기본값 순서 및 서브스크립션 규칙 (Default Ordering and Subscription Rules)</h3>
<p>기본값이 없는 타입 파라미터는 기본값이 있는 타입 파라미터 뒤에 올 수 없습니다. 이는 <code>TypeError</code>를 발생시키고, 타입 체커(type checker)는 이를 오류로 플래그해야 합니다.</p>
<pre><code class="language-python">DefaultStrT = TypeVar("DefaultStrT", default=str)
T = TypeVar("T")

class NonDefaultFollowsDefault(Generic[DefaultStrT, T]): ... # 유효하지 않음: 기본값이 없는 TypeVar는 기본값이 있는 TypeVar 뒤에 올 수 없습니다.

class NoNonDefaults(Generic[DefaultStrT, DefaultIntT]): ...
# NoNoneDefaults == NoNoneDefaults[str] == NoNoneDefaults[str, int] (모두 유효)

class OneDefault(Generic[T, DefaultBoolT]): ...
# OneDefault[float] == OneDefault[float, bool] (유효)
reveal_type(OneDefault) # type is type[OneDefault[T, DefaultBoolT = bool]]
reveal_type(OneDefault[float]()) # type is OneDefault[float, bool]
</code></pre>
<p>PEP 695에서 도입된 Python 3.12의 새로운 제네릭 문법에서는 이 규칙이 컴파일 타임에 강제됩니다.</p>
<pre><code class="language-python">type Alias[DefaultT = int, T] = tuple[DefaultT, T] # SyntaxError
def generic_func[DefaultT = int, T](x: DefaultT, y: T) -> None: ... # SyntaxError
class GenericClass[DefaultT = int, T]: ... # SyntaxError
</code></pre>
<h3><code>ParamSpec</code> 기본값 (ParamSpec Defaults)</h3>
<p><code>ParamSpec</code>의 기본값은 <code>TypeVar</code>와 동일한 문법을 사용하지만, 단일 타입 대신 타입 리스트, 줄임표(<code>...</code>) 리터럴 또는 다른 스코프 내의 <code>ParamSpec</code>을 사용합니다.</p>
<pre><code class="language-python">DefaultP = ParamSpec("DefaultP", default=[str, int])
class Foo(Generic[DefaultP]): ...
reveal_type(Foo) # type is type[Foo[DefaultP = [str, int]]]
reveal_type(Foo()) # type is Foo[[str, int]]
reveal_type(Foo[[bool, bool]]()) # type is Foo[[bool, bool]]
</code></pre>
<h3><code>TypeVarTuple</code> 기본값 (TypeVarTuple Defaults)</h3>
<p><code>TypeVarTuple</code>의 기본값은 <code>TypeVar</code>와 동일한 문법을 사용하지만, 단일 타입 대신 언팩된(unpacked) 튜플 타입 또는 다른 스코프 내의 <code>TypeVarTuple</code>을 사용합니다.</p>
<pre><code class="language-python">DefaultTs = TypeVarTuple("DefaultTs", default=Unpack[tuple[str, int]])
class Foo(Generic[*DefaultTs]): ...
reveal_type(Foo) # type is type[Foo[DefaultTs = *tuple[str, int]]]
reveal_type(Foo()) # type is Foo[str, int]
reveal_type(Foo[int, bool]()) # type is Foo[int, bool]
</code></pre>
<h3>다른 타입 파라미터를 기본값으로 사용 (Using Another Type Parameter as default)</h3>
<p>이 기능을 통해 제네릭의 타입 파라미터가 누락되었지만 다른 타입 파라미터가 지정된 경우 해당 값을 재사용할 수 있습니다. 다른 타입 파라미터를 기본값으로 사용하려면 기본값과 타입 파라미터가 동일한 타입이어야 합니다.</p>
<pre><code class="language-python">StartT = TypeVar("StartT", default=int)
StopT = TypeVar("StopT", default=StartT) # StopT의 기본값은 StartT를 따릅니다.
StepT = TypeVar("StepT", default=int | None)

class slice(Generic[StartT, StopT, StepT]): ...

reveal_type(slice()) # type is slice[int, int, int | None]
reveal_type(slice[str]()) # type is slice[str, str, int | None]
</code></pre>
<p><strong>스코프 규칙 (Scoping Rules)</strong>
<code>T1</code>이 <code>T2</code>의 기본값으로 사용되는 경우, <code>T1</code>은 제네릭의 파라미터 리스트에서 <code>T2</code>보다 먼저 사용되어야 합니다. 외부 스코프의 타입 파라미터를 기본값으로 사용하는 것은 지원되지 않습니다.</p>
<p><strong>바운드 규칙 (Bound Rules)</strong>
<code>T1</code>의 바운드(bound)는 <code>T2</code>의 바운드의 서브타입(subtype)이어야 합니다.</p>
<pre><code class="language-python">T1 = TypeVar("T1", bound=int)
TypeVar("Ok", default=T1, bound=float) # 유효: int는 float의 서브타입입니다.
TypeVar("Invalid", default=T1, bound=str) # 유효하지 않음: int는 str의 서브타입이 아닙니다.
</code></pre>
<p><strong>제약 규칙 (Constraint Rules)</strong>
<code>T2</code>의 제약 조건은 <code>T1</code>의 제약 조건의 슈퍼셋(superset)이어야 합니다.</p>
<pre><code class="language-python">T1 = TypeVar("T1", bound=int)
TypeVar("Invalid", float, str, default=T1) # 유효하지 않음: 상위 바운드 int가 제약 조건 float 또는 str과 호환되지 않습니다.
</code></pre>
<h3>제네릭의 파라미터로서의 타입 파라미터 (Type Parameters as Parameters to Generics)</h3>
<p>기본값 내에서 제네릭의 파라미터로 타입 파라미터를 사용하는 것은 허용됩니다.</p>
<pre><code class="language-python">T = TypeVar("T")
ListDefaultT = TypeVar("ListDefaultT", default=list[T])
class Bar(Generic[T, ListDefaultT]): ...

reveal_type(Bar[int]) # type is type[Bar[int, list[int]]]
reveal_type(Bar[int]()) # type is Bar[int, list[int]]
</code></pre>
<h3>특수화 규칙 (Specialisation Rules)</h3>
<p>타입 파라미터는 현재 더 이상 서브스크립션될 수 없습니다.</p>
<h3>제네릭 <code>TypeAlias</code> (Generic TypeAlias es)</h3>
<p>제네릭 <code>TypeAlias</code>는 일반적인 서브스크립션 규칙에 따라 추가로 서브스크립션될 수 있어야 합니다. 기본값이 재정의되지 않은 타입 파라미터는 <code>TypeAlias</code>에 대체된 것처럼 처리되지만, 나중에 추가 특수화가 가능합니다.</p>
<pre><code class="language-python">MyAlias: TypeAlias = SomethingWithNoDefaults[int, DefaultStrT] # 유효
reveal_type(MyAlias[bool]()) # type is SomethingWithNoDefaults[int, bool]
</code></pre>
<h3>서브클래싱 (Subclassing)</h3>
<p>기본값이 있는 타입 파라미터를 가진 제네릭의 서브클래스는 <code>Generic TypeAlias</code>와 유사하게 작동합니다. 즉, 서브클래스는 일반 서브스크립션 규칙에 따라 추가 서브스크립션될 수 있으며, 재정의되지 않은 기본값은 대체되고, 해당 기본값을 가진 타입 파라미터는 나중에 추가 특수화가 가능합니다.</p>
<pre><code class="language-python">class SubclassMe(Generic[T, DefaultStrT]): x: DefaultStrT
class Bar(SubclassMe[int, DefaultStrT]): ...
reveal_type(Bar()) # type is Bar[str]
reveal_type(Bar[bool]()) # type is Bar[bool]
</code></pre>
<h3><code>bound</code>와 <code>default</code> 사용 (Using bound and default)</h3>
<p><code>bound</code>와 <code>default</code>가 모두 전달되면, <code>default</code>는 <code>bound</code>의 서브타입이어야 합니다. 그렇지 않으면 타입 체커가 오류를 발생시켜야 합니다.</p>
<pre><code class="language-python">TypeVar("Ok", bound=float, default=int) # 유효: int는 float의 서브타입입니다.
TypeVar("Invalid", bound=str, default=int) # 유효하지 않음: 바운드와 기본값이 호환되지 않습니다.
</code></pre>
<h3>제약 조건 (Constraints)</h3>
<p>제약 조건이 있는 <code>TypeVar</code>의 경우, 기본값은 제약 조건 중 하나여야 합니다. 제약 조건 중 하나의 서브타입일지라도, 타입 체커는 오류를 발생시켜야 합니다.</p>
<pre><code class="language-python">TypeVar("Ok", float, str, default=float) # 유효
TypeVar("Invalid", float, str, default=int) # 유효하지 않음: float 또는 str 중 하나를 예상했으나 int를 받았습니다.
</code></pre>
<h3>함수 기본값 (Function Defaults)</h3>
<p>제네릭 함수에서 타입 파라미터가 아무것도 해결되지 않을 때 타입 체커는 타입 파라미터의 기본값을 사용할 수 있습니다. 이 사용법의 의미론은 지정되지 않은 상태로 남아있습니다.</p>
<h3><code>TypeVarTuple</code> 뒤에 오는 기본값 (Defaults following TypeVarTuple)</h3>
<p><code>TypeVarTuple</code> 바로 뒤에 오는 <code>TypeVar</code>는 기본값을 가질 수 없습니다. 이는 타입 인자가 <code>TypeVarTuple</code>에 바인딩되어야 하는지 또는 기본값이 있는 <code>TypeVar</code>에 바인딩되어야 하는지에 대한 모호성을 유발하기 때문입니다.</p>
<pre><code class="language-python">Ts = TypeVarTuple("Ts")
T = TypeVar("T", default=bool)
class Foo(Generic[Ts, T]): ... # 타입 체커 오류

Foo[int, str, float] # Ts = (int, str, float), T = bool 또는 Ts = (int, str), T = float 로 해석될 수 있습니다.
</code></pre>
<p>Python 3.12의 내장 제네릭 문법에서는 이 경우 <code>SyntaxError</code>를 발생시켜야 합니다.
하지만, 기본값이 있는 <code>TypeVarTuple</code> 뒤에 기본값이 있는 <code>ParamSpec</code>이 오는 것은 허용됩니다. <code>ParamSpec</code>과 <code>TypeVarTuple</code>에 대한 타입 인자 사이에 모호성이 없기 때문입니다.</p>
<h3>서브타이핑 (Subtyping)</h3>
<p>타입 파라미터 기본값은 제네릭 클래스의 서브타이핑 규칙에 영향을 미치지 않습니다. 특히, 클래스가 제네릭 프로토콜과 호환되는지 여부를 고려할 때 기본값은 무시될 수 있습니다.</p>
<h3>기본값으로서의 <code>TypeVarTuple</code> (TypeVarTuple s as Defaults)</h3>
<p><code>TypeVarTuple</code>을 기본값으로 사용하는 것은 지원되지 않습니다. 그 이유는 다음과 같습니다.</p>
<ol>
<li>스코프 규칙이 외부 스코프의 타입 파라미터 사용을 허용하지 않습니다.</li>
<li>PEP 646에 명시된 대로, 단일 객체의 타입 파라미터 리스트에 여러 <code>TypeVarTuple</code>이 나타날 수 없습니다.
이러한 이유로 현재 <code>TypeVarTuple</code>이 다른 <code>TypeVarTuple</code>의 기본값으로 사용될 수 있는 유효한 위치는 없습니다.</li>
</ol>
<h3>바인딩 규칙 (Binding rules)</h3>
<p>타입 파라미터 기본값은 속성 접근(호출 및 서브스크립션 포함)에 의해 바인딩되어야 합니다.</p>
<pre><code class="language-python">class Foo[T = int]:
    def meth(self) -> Self:
        return self
reveal_type(Foo.meth) # type is (self: Foo[int]) -> Foo[int]
</code></pre>
<h2>구현 (Implementation)</h2>
<p>런타임(runtime) 시에는 <code>typing</code> 모듈에 다음과 같은 변경 사항이 필요합니다.</p>
<ul>
<li><code>TypeVar</code>, <code>ParamSpec</code>, <code>TypeVarTuple</code> 클래스는 <code>default</code>로 전달된 타입을 노출해야 합니다. 이는 <code>__default__</code> 속성으로 제공되며, 인자가 전달되지 않으면 <code>None</code>, <code>default=None</code>이면 <code>NoneType</code>이 됩니다.</li>
<li><code>GenericAlias</code>에는 다음 변경 사항이 필요합니다.
<ul>
<li>서브스크립션에 필요한 기본값을 결정하는 로직</li>
<li>서브스크립션 (<code>Generic[T, DefaultT]</code>)이 유효한지 결정하는 로직</li>
</ul>
</li>
<li>타입 파라미터 리스트의 문법이 기본값을 허용하도록 업데이트되어야 합니다.</li>
</ul>
<p>런타임 변경 사항에 대한 참조 구현은 <a href="https://github.com/Gobot1234/cpython/tree/pep-696">https://github.com/Gobot1234/cpython/tree/pep-696</a>에서, 타입 체커 구현은 <a href="https://github.com/Gobot1234/mypy/tree/TypeVar-defaults">https://github.com/Gobot1234/mypy/tree/TypeVar-defaults</a>에서 확인할 수 있습니다.
Pyright는 현재 이 기능을 지원합니다.</p>
<h3>문법 변경 (Grammar changes)</h3>
<p>PEP 695에서 추가된 문법은 대괄호 안에 <code>=</code> 연산자를 사용하여 타입 파라미터의 기본값을 지정하는 방식으로 확장됩니다.</p>
<pre><code class="language-python"># TypeVars
class Foo[T = str]: ...
# ParamSpecs
class Baz[**P = [int, str]]: ...
# TypeVarTuples
class Qux[*Ts = *tuple[int, bool]]: ...
# TypeAliases
type Foo[T, U = str] = Bar[T, U]
</code></pre>
<p>타입 파라미터의 바운드(bound)와 마찬가지로, 기본값은 게으르게(lazily) 평가되며, 불필요한 따옴표 사용을 피하기 위해 동일한 스코프 규칙을 따릅니다.</p>
<p>컴파일러는 기본값이 없는 타입 파라미터가 기본값이 있는 타입 파라미터 뒤에 올 수 없으며, 기본값이 있는 <code>TypeVar</code>가 <code>TypeVarTuple</code> 바로 뒤에 올 수 없도록 강제합니다.</p>
<h2>채택되지 않은 대안 (Rejected Alternatives)</h2>
<h3><code>type.__new__</code>의 <code>**kwargs</code>에 타입 파라미터 기본값을 전달 (Allowing the Type Parameters Defaults to Be Passed to type.<strong>new</strong>'s **kwargs)</h3>
<p>이 방식은 가독성이 좋고 <code>TypeVar</code> 단항(unary) 문법과 유사하지만, <code>T</code>가 이미 메타클래스/슈퍼클래스에 전달되거나 런타임에 <code>Generic</code>을 상속하지 않는 클래스를 지원할 수 있으므로 하위 호환성이 없습니다.</p>
<pre><code class="language-python">T = TypeVar("T")
@dataclass
class Box(Generic[T], T=int): # 제안되었던 대안
    value: T | None = None
</code></pre>
<h3>기본값 뒤에 비-기본값 허용 (Allowing Non-defaults to Follow Defaults)</h3>
<p>기본값이 있는 타입 파라미터 뒤에 기본값이 없는 타입 파라미터가 오는 것을 허용하는 것은 혼란스럽고 잠재적으로 모호합니다. 인자 순서를 변경하는 것은 많은 코드베이스를 망가뜨릴 수 있으며, 대부분 <code>TypeAlias</code>를 사용하여 해결할 수 있습니다.</p>
<h3><code>default</code>가 암시적으로 <code>bound</code>가 되도록 허용 (Having default Implicitly Be bound)</h3>
<p>초기 버전의 이 PEP에서는 <code>default</code> 값이 전달되지 않으면 <code>bound</code>로 암시적으로 설정되었습니다. 이는 편리할 수 있지만, 기본값이 없는 타입 파라미터가 기본값이 있는 타입 파라미터 뒤에 오는 경우를 발생시킬 수 있습니다. 또한 <code>Any</code>가 암시적 기본값인 경우에 의존하는 소수의 코드베이스에 대한 변경 사항이 될 수 있었습니다.</p>
<h3>함수 시그니처에서 기본값을 가진 타입 파라미터 사용 허용 (Allowing Type Parameters With Defaults To Be Used in Function Signatures)</h3>
<p>이전 버전에서는 함수 시그니처에서 기본값을 가진 <code>TypeVarLike</code> 사용이 허용되었지만, "Function Defaults" 섹션에 설명된 이유로 제거되었습니다.</p>
<h3>외부 스코프의 타입 파라미터를 <code>default</code>로 허용 (Allowing Type Parameters from Outer Scopes in default)</h3>
<p>이 기능은 추가적인 복잡성만큼의 가치가 없는 너무 틈새(niche) 기능으로 간주되었습니다.</p>
<h2>감사 (Acknowledgements)</h2>
<p>이 PEP에 대한 피드백을 제공해 준 Eric Traut, Jelle Zijlstra, Joshua Butt, Danny Yamamoto, Kaylynn Morgan, Jakub Kuczys에게 감사를 표합니다.</p>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인 또는 CC0-1.0-Universal 라이선스 중 더 관대한 조건으로 배포됩니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1098,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 696 - Type Defaults for Type Parameters"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 13:04:16+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
