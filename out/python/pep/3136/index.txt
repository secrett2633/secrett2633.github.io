3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/3136","c"]
0:["jf5MDuRUbMNVvRN9tv5rq",[[["",{"children":[["slug","python/pep/3136","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3136\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3136","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T3579,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3136/">PEP 3136 - Labeled break and continue</a></p>
<p><strong>상태:</strong> Rejected | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 30-Jun-2007</p>
</blockquote>
<h1>PEP 3136 – Labeled break 및 continue</h1>
<h2>개요 (Abstract)</h2>
<p>이 PEP는 Python의 <code>break</code> 및 <code>continue</code> 문에 레이블(label) 지원을 제안합니다. 이 아이디어는 다른 언어의 레이블이 있는 <code>break</code> 및 <code>continue</code> 기능과, 저자가 드물지만 지속적으로 이러한 기능의 필요성을 느꼈던 경험에서 영감을 받았습니다.</p>
<h2>거부 통지 (Rejection Notice)</h2>
<p>이 PEP는 거부되었습니다. 관련된 논의는 <a href="https://mail.python.org/pipermail/python-3000/2007-July/008663.html">https://mail.python.org/pipermail/python-3000/2007-July/008663.html</a>에서 확인할 수 있습니다.</p>
<h2>서론 (Introduction)</h2>
<p>현재 Python에서 <code>break</code> 문은 프로그래머가 루프를 조기에 종료할 수 있게 하고, <code>continue</code> 문은 루프의 다음 반복으로 조기에 이동할 수 있게 합니다. 이들은 가장 안쪽에 있는(innermost enclosing) 루프에만 적용될 수 있습니다.</p>
<p><code>break</code> 및 <code>continue</code> 문에 레이블 지원을 추가하는 것은 기존 동작의 논리적 확장입니다. 레이블이 있는 <code>break</code> 및 <code>continue</code>는 중첩된 루프(nested loops)를 사용하는 복잡한 코드의 가독성과 유연성을 향상시킬 수 있습니다.</p>
<p>이 PEP의 예시와 논의는 주로 <code>break</code> 문을 참조하지만, 모든 예시와 동기는 레이블이 있는 <code>continue</code>에도 동일하게 적용됩니다.</p>
<h2>동기 (Motivation)</h2>
<p>프로그래머가 바깥쪽 루프의 다음 반복으로 이동하거나, 여러 루프를 한 번에 종료하려는 경우, 현재 Python에는 몇 가지 "덜 우아한(less-than elegant)" 방법들이 있습니다.</p>
<h3>현재의 우회 방법 (Current Workarounds)</h3>
<ol>
<li>
<p><strong>플래그 변수 사용:</strong></p>
<pre><code class="language-python">for a in a_list:
    time_to_break_out_of_a = False
    # ...
    for b in b_list:
        # ...
        if condition_one(a, b):
            break # 가장 안쪽 루프만 종료
        # ...
        if condition_two(a, b):
            time_to_break_out_of_a = True
            break # 가장 안쪽 루프만 종료
    # ...
    if time_to_break_out_of_a:
        break # 바깥쪽 루프 종료
</code></pre>
<p>이 방법은 바깥쪽 루프를 종료하기 위해 5줄의 코드와 <code>time_to_break_out_of_a</code>라는 추가 변수를 필요로 합니다. 이 5줄은 코드 전반에 걸쳐 분산되어 있어 제어 흐름을 이해하기 어렵게 만듭니다. 또한, <code>time_to_break_out_of_a</code> 변수 검사 이전에 코드가 잘못 삽입될 위험이 있어 오류 발생 가능성이 있습니다.</p>
</li>
<li>
<p><strong>예외(Exception) 사용:</strong></p>
<pre><code class="language-python">class BreakOutOfALoop(Exception):
    pass

for a in a_list:
    # ...
    try:
        for b in b_list:
            # ...
            if condition_one(a, b):
                break # 가장 안쪽 루프만 종료
            # ...
            if condition_two(a, b):
                raise BreakOutOfALoop # 바깥쪽 루프 종료를 위해 예외 발생
    except BreakOutOfALoop:
        break # 예외를 잡아서 바깥쪽 루프 종료
    # ...
</code></pre>
<p>이 방법은 새로운 단일 목적의 예외 클래스와 5줄의 코드를 필요로 하며, 기본적인 제어 흐름이 여러 줄에 걸쳐 분산됩니다. 가장 안쪽 루프는 <code>break</code>로, 바깥쪽 루프는 예외로 종료하는 방식은 우아하지 않습니다.</p>
</li>
<li>
<p><strong>이중 <code>break</code> 사용 (조건이 저렴할 경우):</strong></p>
<pre><code class="language-python">for a in a_list:
    # ...
    for b in b_list:
        # ...
        if condition_one(a, b):
            break
        # ...
        if condition_two(a, b):
            break
    # ...
    if condition_two(a, b): # 조건 재확인
        break
</code></pre>
<p>이중 <code>break</code>는 여전히 우아하지 않으며, <code>b</code> 변수가 바깥쪽 루프까지 "누설(bleeds)"되는 것에 의존합니다. 이는 초보자에게는 놀랍고 직관적이지 않으며 좋은 관행으로 간주되지 않을 수 있습니다.</p>
</li>
</ol>
<p>레이블이 있는 <code>break</code> 및 <code>continue</code>는 이러한 문제들을 해결하여, 제어 흐름을 명확하게 하고, 추가 변수나 예외 없이 여러 루프를 종료할 수 있게 해줍니다.</p>
<h3>다른 언어의 사례 (Other languages)</h3>
<ul>
<li><strong>Perl</strong>: 루프에 <code>ALOOP:</code>와 같은 레이블을 붙이고 <code>last ALOOP;</code>를 사용하여 특정 레이블의 루프를 종료합니다. <code>last</code>는 Python의 <code>break</code>와 동일합니다.</li>
<li><strong>PHP</strong>: <code>break 1;</code> 또는 <code>break 2;</code>와 같이 숫자를 사용하여 몇 번째 바깥 루프를 종료할지 지정합니다. 여기서 <code>break 1</code>은 가장 안쪽 루프를 종료하는 것과 같습니다.</li>
<li><strong>C/C++, Java, Ruby</strong>: 이 언어들도 유사한 구조를 가지고 있습니다.</li>
</ul>
<p>이러한 언어의 방식은 제어 흐름이 <code>break</code> 문 하나에 완전히 캡슐화되어 있어 이해하기 쉽습니다.</p>
<h2>이 PEP가 제안하지 않는 것 (What this PEP is not)</h2>
<p>이 PEP는 Python에 <code>GOTO</code> 문을 추가하자는 제안이 아닙니다. <code>GOTO</code>는 프로그래머가 임의의 코드 블록이나 줄로 점프할 수 있게 하여 제어 흐름을 추적하기 어렵게 만듭니다. <code>break</code> 및 <code>continue</code> (레이블 지원 여부와 관계없이)는 <code>GOTO</code>의 한 형태로 볼 수 있지만, 훨씬 더 제한적입니다. 이 PEP의 목표는 기존의 <code>break</code> 및 <code>continue</code> 제어 흐름 도구를 확장하여 제어 흐름을 더 이해하기 쉽게 만드는 것입니다.</p>
<p>레이블이 있는 <code>break</code> 및 <code>continue</code>는 다른 함수나 메서드로 제어를 전달할 수 없으며, 현재 스코프 내의 임의의 코드 줄로도 제어를 전달할 수 없습니다. 이는 <code>GOTO</code>와는 매우 다르고 훨씬 더 제한적입니다.</p>
<h2>명세 (Specification)</h2>
<p>모든 제안에서, <code>break</code>와 <code>continue</code>는 단독으로 사용될 경우 현재와 같이 가장 안쪽 루프에 적용되는 기본 동작을 유지합니다.</p>
<h3>제안 A - 명시적 레이블 (Explicit labels)</h3>
<p><code>for</code> 및 <code>while</code> 루프 문법에 선택적으로 <code>as</code> 또는 <code>label</code> (문맥적 키워드)과 식별자를 추가하여 루프를 식별합니다. <code>break</code> (및 <code>continue</code>) 문 뒤에 이 식별자를 붙여 어떤 루프를 종료(또는 계속)할지 지정합니다.</p>
<p><strong><code>as</code> 키워드 사용 예시:</strong></p>
<pre><code class="language-python">for a in a_list as a_loop:
    # ...
    for b in b_list as b_loop:
        # ...
        if condition_one(a, b):
            break b_loop # 일반적인 break와 동일
        # ...
        if condition_two(a, b):
            break a_loop # 'a_loop' 레이블이 붙은 루프 종료
        # ...
</code></pre>
<p><strong><code>label</code> 키워드 사용 예시:</strong></p>
<pre><code class="language-python">for a in a_list label a_loop:
    # ...
    for b in b_list label b_loop:
        # ...
        if condition_one(a, b):
            break b_loop # 일반적인 break와 동일
        # ...
        if condition_two(a, b):
            break a_loop # 'a_loop' 레이블이 붙은 루프 종료
        # ...
</code></pre>
<p>이 제안은 언어 문법(<code>break</code>, <code>continue</code>, <code>for</code>, <code>while</code> 문법)에 수정이 필요하며, 새로운 문맥적 키워드(<code>label</code> 또는 <code>as</code> 확장)가 필요합니다.</p>
<h3>제안 B - 숫자 인수를 이용한 <code>break</code> 및 <code>continue</code> (Numeric break &#x26; continue)</h3>
<p><code>for</code> 및 <code>while</code> 루프의 문법을 변경하는 대신, <code>break</code>와 <code>continue</code>가 PHP와 유사하게 종료하려는 바깥쪽 루프의 인덱스를 나타내는 숫자 인수를 취합니다. Pythonic하게 0부터 인덱싱하는 것을 제안합니다.</p>
<pre><code class="language-python">for a in a_list:
    # ...
    for b in b_list:
        # ...
        if condition_one(a,b):
            break 0 # 일반적인 break와 동일 (가장 안쪽 루프)
        # ...
        if condition_two(a,b):
            break 1 # 한 단계 바깥 루프 종료
        # ...
</code></pre>
<p>너무 큰 숫자, 음수, 또는 정수가 아닌 값을 전달하면 <code>IndexError</code>를 발생시킬 수 있습니다. 이 제안은 기존 Python 프로그램에는 변경을 요구하지 않습니다.</p>
<h3>제안 C - 반복적인 메서드 (The reduplicative method)</h3>
<p><code>break</code> 및 <code>continue</code> 문법을 변경하여 같은 줄에 여러 <code>break</code> 및 <code>continue</code> 문을 허용합니다. 예를 들어, <code>break break</code>는 첫 번째와 두 번째 바깥 루프를 종료합니다.</p>
<pre><code class="language-python">for a in a_list:
    # ...
    for b in b_list:
        # ...
        if condition_one(a,b):
            break # 일반적인 break
        # ...
        if condition_two(a,b):
            break break # 두 단계 바깥 루프 종료
        # ...
</code></pre>
<p>이 방식은 <code>break continue</code>와 같이 내부 루프를 종료하고 다음 바깥 루프를 계속하는 것도 가능하게 합니다. 저자는 이 제안이 이해하기 어렵다는 이유로 거부될 것으로 예상했습니다. 이 제안도 기존 Python 프로그램에 변경을 요구하지 않습니다.</p>
<h3>제안 D - 명시적 이터레이터 (Explicit iterators)</h3>
<p><code>for</code> 및 <code>while</code> 루프 문법에 레이블을 추가하는 대신, 레이블이 있는 <code>break</code>를 사용하려는 프로그래머는 이터레이터(iterator)를 명시적으로 생성하고 식별자에 할당해야 합니다.</p>
<pre><code class="language-python">a_iter = iter(a_list)
for a in a_iter:
    # ...
    b_iter = iter(b_list)
    for b in b_iter:
        # ...
        if condition_one(a,b):
            break b_iter # 'b_iter'와 연결된 루프 종료
        # ...
        if condition_two(a,b):
            break a_iter # 'a_iter'와 연결된 루프 종료
        # ...
</code></pre>
<p>이터레이터가 아닌 객체를 <code>break</code> 또는 <code>continue</code>에 전달하면 <code>TypeError</code>를 발생시키고, 존재하지 않는 식별자를 전달하면 <code>NameError</code>를 발생시킵니다. 이 제안은 레이블이 있는 루프를 생성하기 위해 한 줄의 추가 코드만 필요하며, 기존 Python 프로그램에는 변경을 요구하지 않습니다.</p>
<h3>제안 E - 명시적 이터레이터 및 이터레이터 메서드 (Explicit iterators and iterator methods)</h3>
<p>이것은 제안 D의 변형입니다. <code>break</code> 및 <code>continue</code>의 가장 기본적인 사용 외에 다른 기능이 필요한 경우 이터레이터를 명시적으로 생성해야 합니다. <code>break</code> 및 <code>continue</code>의 문법을 수정하는 대신, <code>.break()</code> 및 <code>.continue()</code> 메서드를 이터레이터 타입에 추가할 수 있습니다.</p>
<pre><code class="language-python">a_iter = iter(a_list)
for a in a_iter:
    # ...
    b_iter = iter(b_list)
    for b in b_iter:
        # ...
        if condition_one(a,b):
            b_iter.break() # 'b_iter'와 연결된 루프 종료
        # ...
        if condition_two(a,b):
            a_iter.break() # 'a_iter'와 연결된 루프 종료
        # ...
</code></pre>
<p>저자는 이 제안이 "순수한 추함(sheer ugliness)"이라는 이유로 거부될 것이라고 예상했습니다. 하지만 이 제안은 언어 문법 변경이나 기존 Python 프로그램에 대한 변경을 전혀 요구하지 않습니다.</p>
<h2>결론 (Conclusion)</h2>
<p>PEP 3136은 중첩 루프에서 <code>break</code> 및 <code>continue</code> 문의 제한적인 동작을 개선하기 위해 여러 가지 아이디어를 탐색했습니다. 하지만 최종적으로 거부되어, Python은 여전히 <code>break</code> 및 <code>continue</code>에 레이블을 지원하지 않습니다. 이는 Python의 "명시적인 것이 암시적인 것보다 낫다(Explicit is better than implicit)"는 철학과 <code>GOTO</code>와 같은 복잡한 제어 흐름을 피하려는 경향과 관련이 있을 수 있습니다. 따라서 Python 개발자는 여전히 플래그 변수나 예외 처리와 같은 기존의 우회 방법을 사용하여 다중 루프를 제어해야 합니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Rejected] PEP 3136 - Labeled break and continue"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:34:24+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
