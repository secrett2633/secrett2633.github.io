3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-19cfc001fdac3337.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-51594f997fc19690.js"],""]
4:["slug","python/pep/3110","c"]
0:["FeyCvJug7In7AgUZlfHUx",[[["",{"children":[["slug","python/pep/3110","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3110\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3110","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T22c3,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3110/">PEP 3110 - Catching Exceptions in Python 3000</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 16-Jan-2006</p>
</blockquote>
<p>파이썬 3000의 예외 처리 (PEP 3110)</p>
<h2>개요</h2>
<p>이 PEP (Python Enhancement Proposal)는 Python 3.0에서 예외(exception) 처리 구문의 모호성을 제거하고, 예외 클래스를 간소화하며, 예외의 가비지 컬렉션(garbage collection)을 단순화하고, 언어의 크기를 줄이는 것을 목표로 하는 변경 사항을 소개합니다.</p>
<h2>도입 배경 (Rationale)</h2>
<p>Python 2.x의 <code>except</code> 절은 문법적 모호성을 가지고 있었습니다. 파서는 <code>except &#x3C;expression>, &#x3C;expression>:</code> 구문을 <code>except &#x3C;type>, &#x3C;type>:</code> 또는 <code>except &#x3C;type>, &#x3C;name>:</code> 중 어느 것으로 해석해야 할지 구별하기 어려웠습니다. Python 2는 후자(예외 타입을 잡고 변수에 할당하는 방식)를 선택했으며, 이로 인해 전자의 경우 괄호로 묶어야 했습니다: <code>except (&#x3C;type>, &#x3C;type>):</code>.</p>
<p>PEP 352에 명시된 바와 같이, 예외를 튜플처럼 다루는 기능이 제거될 예정이었습니다. 이는 <code>except os.error, (errno, errstr):</code>와 같은 코드가 더 이상 작동하지 않음을 의미합니다. 자동 언패킹(unpacking)이 불가능해짐에 따라, <code>except</code> 대상(target)으로 튜플을 사용하는 기능도 제거하는 것이 바람직했습니다.</p>
<p>또한, PEP 344에 따라 Python 3의 예외 인스턴스는 <code>__traceback__</code> 속성을 가지게 됩니다. 이 속성은 "예외 -> 트레이스백 -> 스택 프레임 -> 예외"의 참조 사이클(reference cycle)을 유발하여, 다음 가비지 컬렉션 실행 시점까지 모든 지역 변수가 범위 내에 유지되는 가비지 컬렉션 문제를 발생시켰습니다. PEP 3110은 <code>except</code> 스위트(suite)의 끝에서 대상 이름(target name)을 삭제하는 정리(cleanup) 의미론을 추가하여 이 문제를 해결하고자 했습니다.</p>
<p>"무언가를 하는 한 가지 – 그리고 바람직하게는 단 하나의 – 명확한 방법이 있어야 한다"는 원칙에 따라 중복 기능을 통합하는 것이 바람직했습니다. 이를 위해 <code>sys</code> 모듈의 <code>exc_value</code>, <code>exc_type</code>, <code>exc_traceback</code> 속성은 동일한 정보를 제공하는 <code>sys.exc_info()</code>로 대체되어 제거될 예정이었습니다. 이 속성들은 이미 PEP 3100에서 제거 대상으로 지정되어 있었습니다.</p>
<h2>문법 변경 (Grammar Changes)</h2>
<p>Python 3에서는 <code>except</code> 문의 문법이 다음과 같이 변경됩니다:</p>
<p>이전 (Python 2.x):</p>
<pre><code>except_clause: 'except' [test [',' test]]
</code></pre>
<p>이후 (Python 3.x):</p>
<pre><code>except_clause: 'except' [test ['as' NAME]]
</code></pre>
<p>콤마(<code>,</code>) 토큰 대신 <code>as</code> 키워드를 사용함으로써, <code>except (AttributeError, os.error):</code>와 같은 구문은 예외 클래스의 튜플로 명확하게 이해될 수 있게 되었습니다. 이 새로운 문법은 Greg Ewing에 의해 처음 제안되었고, BDFL (Guido van Rossum)의 지지를 받았습니다.</p>
<p>또한, <code>as</code> 뒤에 오는 토큰의 제약이 <code>test</code>에서 <code>NAME</code>으로 변경되어, 유효한 식별자(identifier)만 <code>except</code>의 대상(target)으로 사용할 수 있게 됩니다.</p>
<p>위의 문법은 예외 클래스로 괄호로 묶인 튜플을 항상 요구합니다. 이는 Python 2.x와 3.x에서 다른 의미를 가질 수 있어 잡기 어려운 버그를 유발할 수 있었던 모호한 <code>except A, B:</code> 구문이 Python 3.x 코드에서는 허용되지 않도록 합니다.</p>
<h2>의미론적 변경 (Semantic Changes)</h2>
<p>PEP 344와 관련된 가비지 컬렉션 문제를 해결하기 위해, Python 3의 <code>except</code> 문은 대상을 삭제하는 추가 바이트코드(bytecode)를 생성하여 참조 사이클을 제거합니다. Phillip J. Eby가 제안한 소스 대 소스 번역은 다음과 같습니다:</p>
<p><code>try: try_body except E as N: except_body ...</code></p>
<p>는 (Python 2.5 용어로) 다음과 같이 번역됩니다:</p>
<pre><code class="language-python">try:
    try_body
except E, N:  # Python 2.x equivalent for illustration
    try:
        except_body
    finally:
        N = None
        del N
...
</code></pre>
<p>이 구현은 이미 <code>py3k</code> (이전에는 <code>p3yk</code>) 브랜치에 반영되었습니다.</p>
<h2>호환성 문제 (Compatibility Issues)</h2>
<p>거의 모든 <code>except</code> 절이 변경되어야 합니다.</p>
<ul>
<li>식별자(identifier)를 대상으로 하는 <code>except</code> 절은 <code>except E, N:</code>에서 <code>except E as N:</code>으로 변환됩니다.</li>
<li>튜플이 아닌, 식별자가 아닌 대상을 가진 <code>except</code> 절 (예: <code>a.b.c[d]</code>)은 <code>except E, T:</code>에서 <code>except E as t: T = t</code>로 변환되어야 합니다.
이 두 가지 경우는 Guido van Rossum의 2to3 유틸리티와 <code>except</code> fixer를 사용하여 처리할 수 있습니다.</li>
</ul>
<p>튜플 대상을 가진 <code>except</code> 절은 수동으로 개별 사례에 따라 변환해야 합니다. 이러한 변경은 일반적으로 예외 클래스 자체의 변경을 수반합니다. 이러한 변경은 일반적으로 자동화할 수 없지만, 2to3 유틸리티는 <code>except</code> 절의 대상이 튜플인 경우를 지적하여 변환을 단순화할 수 있습니다.</p>
<p><code>except</code> 스위트가 끝난 후에도 예외 인스턴스를 유지해야 하는 상황은 다음과 같이 쉽게 변환할 수 있습니다:</p>
<p>이전:</p>
<pre><code class="language-python">try:
    # ...
except E as N:
    # ...
    # ...
</code></pre>
<p>이후:</p>
<pre><code class="language-python">try:
    # ...
except E as N:
    n = N # N의 값을 n에 할당하여 블록 종료 후에도 유지
    # ...
    # ...
</code></pre>
<p>이러한 방식으로 블록 끝에서 <code>N</code>이 삭제되더라도 <code>n</code>은 계속 존재하며 정상적으로 사용될 수 있습니다.</p>
<p>마지막으로, <code>sys</code> 모듈의 <code>exc_type</code>, <code>exc_value</code>, <code>exc_traceback</code> 속성 사용은 모두 제거되어야 합니다. 이들은 각각 <code>sys.exc_info()[0]</code>, <code>sys.exc_info()[1]</code>, <code>sys.exc_info()[2]</code>로 대체될 수 있으며, 2to3의 <code>sysexcattrs</code> fixer를 통해 이러한 변환이 수행될 수 있습니다.</p>
<h3>Python 2.6 - 3.0 호환성</h3>
<p>Python 2.6과 3.0 간의 전방 호환성을 용이하게 하기 위해, <code>except ... as ...:</code> 문법은 2.x 시리즈로 백포트(backported)될 예정입니다. 따라서 문법은 다음과 같이 변경됩니다:</p>
<p>이전:</p>
<pre><code>except_clause: 'except' [test [',' test]]
</code></pre>
<p>이후:</p>
<pre><code>except_clause: 'except' [test [('as' | ',') test]]
</code></pre>
<p><code>except</code> 문의 스위트 종료 시 정리 의미론은 2.x 릴리스 시리즈에는 포함되지 않을 것입니다.</p>
<h2>미해결 문제 (Open Issues)</h2>
<h3><code>sys.exc_info()</code> 교체 또는 삭제</h3>
<p><code>sys.exc_info()</code>를 삭제하거나 <code>sys.exception</code> 속성 또는 <code>sys.get_exception()</code> 함수로 대체하는 아이디어는 <code>python-3000</code> 메일링 리스트에서 여러 번 제기되었고, PEP 344의 "미해결 문제" 섹션에서도 언급되었습니다.</p>
<p><code>sys.exc_info()</code> 호출 및 일부 속성 접근을 교체하는 2to3 fixer는 간단하겠지만, <code>sys.exc_info()</code>의 값을 인수로 기대하는 함수를 정적 분석(static analysis)으로 찾아 수정하는 것은 훨씬 더 어려울 것입니다. 마찬가지로, 이는 <code>sys.exc_info()</code>를 기반으로 정의된 모든 API에 대한 문서를 다시 작성해야 하는 필요성을 해결하지 못합니다.</p>
<h2>구현 (Implementation)</h2>
<p>이 PEP는 53342 및 53349 리비전에서 구현되었습니다. Python 2.6에서 새로운 <code>except</code> 문법에 대한 지원은 55446 리비전에서 구현되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1098,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 3110 - Catching Exceptions in Python 3000"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:21:16+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
