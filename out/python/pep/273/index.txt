3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-19cfc001fdac3337.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-51594f997fc19690.js"],""]
4:["slug","python/pep/273","c"]
0:["FeyCvJug7In7AgUZlfHUx",[[["",{"children":[["slug","python/pep/273","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"273\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/273","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T315f,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0273/">PEP 273 - Import Modules from Zip Archives</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 11-Oct-2001</p>
</blockquote>
<h2>개요</h2>
<p>이 문서는 Python Enhancement Proposal (PEP) 273, "Import Modules from Zip Archives"의 내용을 한국어 사용자가 이해하기 쉽게 번역하고 정리한 것입니다. 이 PEP는 Python 모듈과 패키지를 <code>.zip</code> 아카이브에서 임포트할 수 있는 기능을 추가하는 것을 제안합니다.</p>
<hr>
<h2>PEP 273: Zip 아카이브에서 모듈 임포트</h2>
<ul>
<li><strong>작성자:</strong> James C. Ahlstrom</li>
<li><strong>상태:</strong> Final (최종)</li>
<li><strong>유형:</strong> Standards Track</li>
<li><strong>작성일:</strong> 2001년 10월 11일</li>
<li><strong>Python 버전:</strong> 2.3</li>
<li><strong>최종 수정일:</strong> 2025년 2월 1일 (GitHub)</li>
</ul>
<h3>초록 (Abstract)</h3>
<p>이 PEP는 <code>.zip</code> 아카이브에서 Python 모듈(<code>*.py</code>, <code>*.py[co]</code>) 및 패키지를 임포트할 수 있는 기능을 추가합니다. 동일한 코드가 <code>os.listdir</code>를 사용할 수 있는 경우 일반 디렉토리 임포트 속도를 높이는 데 사용됩니다.</p>
<h3>참고 (Note)</h3>
<p>Zip 임포트 기능은 Python 2.3에 추가되었지만, 최종 구현 방식은 이 PEP에 설명된 방식과 다릅니다. Python 2.3의 구현은 SourceForge 패치 #652586에 기반하며, 이는 PEP 302에 설명된 새로운 임포트 훅(import hooks)을 사용합니다. 따라서 이 PEP의 나머지 내용은 역사적인 의미만 가집니다.</p>
<h3>사양 (Specification)</h3>
<p>현재 <code>sys.path</code>는 디렉토리 이름을 나타내는 문자열 리스트입니다. 이 PEP가 구현된다면, <code>sys.path</code>의 항목은 <code>.zip</code> 파일 아카이브의 이름을 나타내는 문자열이 될 수 있습니다. <code>.zip</code> 아카이브는 패키지 임포트를 지원하기 위해 서브디렉토리 구조를 포함할 수 있습니다. <code>.zip</code> 아카이브는 서브디렉토리와 동일한 방식으로 임포트를 처리합니다.</p>
<p>구현은 Python 코어의 C 코드로 이루어지며, 지원되는 모든 Python 플랫폼에서 작동합니다.</p>
<p><code>.zip</code> 아카이브에는 모든 종류의 파일이 포함될 수 있지만, <code>*.py</code>와 <code>*.py[co]</code> 파일만 임포트 가능합니다. 동적 모듈(<code>*.pyd</code>, <code>*.so</code>)의 <code>.zip</code> 임포트는 허용되지 않습니다.</p>
<p><code>sys.path</code>가 기본 디렉토리 이름을 가지듯이, 기본 <code>.zip</code> 아카이브 이름도 추가됩니다. 그렇지 않으면 아카이브에서 모든 Python 라이브러리 파일을 임포트할 방법이 없습니다.</p>
<h3>서브디렉토리 동등성 (Subdirectory Equivalence)</h3>
<p><code>.zip</code> 아카이브는 서브디렉토리 트리와 정확히 동일하게 취급되어야 하며, 이는 현재 및 미래의 규칙에 기반한 패키지 임포트를 지원하기 위함입니다. 모든 <code>.zip</code> 데이터는 Central Directory에서 가져오며, 데이터는 정확해야 하고, 손상된 <code>.zip</code> 파일은 지원하지 않습니다.</p>
<p>예를 들어, <code>sys.path</code>에 <code>/A/B/SubDir</code>와 <code>/C/D/E/Archive.zip</code>가 있고, <code>Q</code> 패키지에서 <code>modfoo</code>를 임포트하려 한다고 가정해봅시다. <code>import.c</code>는 경로 및 확장자 목록을 생성하고 파일을 찾을 것입니다. 생성된 경로 목록은 <code>.zip</code> 임포트에서도 변경되지 않습니다. <code>import.c</code>가 <code>/A/B/SubDir/Q/R/modfoo.pyc</code> 경로를 생성한다면, <code>/C/D/E/Archive.zip/Q/R/modfoo.pyc</code> 경로도 생성합니다. <code>SubDir</code> 경로에서 파일을 찾는 것은 아카이브 내에서 <code>Q/R/modfoo.pyc</code>를 찾는 것과 정확히 동일합니다.</p>
<p><code>/A/B/SubDir/*</code>와 그 모든 서브디렉토리를 <code>.zip</code>으로 압축하면, <code>.zip</code> 파일은 해당 서브디렉토리와 동일하게 임포트를 처리할 것입니다.</p>
<p>그러나 완전히 동일하지는 않습니다. <code>.zip</code> 파일에서는 동적 모듈(<code>.dll</code>, <code>.pyd</code>, <code>.so</code> 등)을 임포트할 수 없습니다. 이들은 운영체제에 종속적이며, 파일 시스템에 실제 파일로 존재해야만 로드될 가능성이 높습니다. <code>.zip</code> 파일에서 동적 모듈을 추출하여 일반 파일로 작성한 후 로드하는 방법도 고려할 수 있지만, 이는 임시 파일을 생성하고 <code>dynload_*.c</code>와 같은 복잡한 문제를 처리해야 하므로 좋은 방법이 아닙니다.</p>
<p><code>*.pyc</code>를 임포트하려고 시도할 때, 해당 파일이 없으면 <code>*.pyo</code>가 대신 사용됩니다. 그 반대도 마찬가지입니다. <code>*.pyc</code>와 <code>*.pyo</code> 둘 다 없거나 매직 넘버가 유효하지 않으면, <code>*.py</code>가 컴파일되어 임포트를 처리하지만, 컴파일된 파일은 저장되지 않습니다. Python은 일반적으로 <code>*.py</code>와 동일한 디렉토리에 저장하지만, <code>.zip</code> 파일에 직접 쓰는 것은 바람직하지 않습니다. <code>.zip</code> 아카이브의 디렉토리에 쓸 수도 있지만, 이는 디렉토리를 복잡하게 만들 수 있습니다(예: <code>/usr/bin</code>인 경우).</p>
<p>컴파일된 파일을 저장하지 않으면 <code>.zip</code> 임포트가 매우 느려지고, 사용자는 무엇이 문제인지 파악하기 어려울 것입니다. 따라서 <code>*.py</code>와 함께 <code>*.pyc</code> 및 <code>*.pyo</code>를 아카이브에 포함하는 것이 가장 좋습니다.</p>
<h3>효율성 (Efficiency)</h3>
<p><code>.zip</code> 아카이브에서 파일을 찾는 유일한 방법은 선형 검색입니다. 따라서 <code>sys.path</code>의 각 <code>.zip</code> 파일에 대해 이름을 한 번 검색한 후, 이름과 기타 관련 데이터를 정적 Python 딕셔너리에 저장합니다. 딕셔너리의 키는 <code>sys.path</code>의 아카이브 이름과 아카이브 내의 파일 이름(서브디렉토리 포함)을 결합한 것입니다. 이는 <code>import.c</code>가 생성하는 이름과 정확히 일치하여 조회를 쉽게 만듭니다.</p>
<p>이 동일한 메커니즘은 디렉토리(비-zip) 임포트의 속도를 높이는 데도 사용됩니다.</p>
<h3>zlib</h3>
<p>압축된 <code>.zip</code> 아카이브는 압축 해제를 위해 zlib를 필요로 합니다. 다른 임포트보다 먼저 <code>zlib</code> 임포트를 시도합니다. <code>zlib</code>를 사용할 수 없으면 압축된 파일 임포트는 "missing zlib" 메시지와 함께 실패합니다.</p>
<h3>부팅 (Booting)</h3>
<p>Python은 <code>site.py</code>를 임포트하고, <code>site.py</code>는 <code>os</code>, <code>nt</code>, <code>ntpath</code>, <code>stat</code>, <code>UserDict</code>를 임포트합니다. 또한 <code>sitecustomize.py</code>를 임포트할 수 있으며, 이는 더 많은 모듈을 임포트할 수 있습니다. <code>site.py</code>가 임포트되기 전에 <code>.zip</code> 임포트가 가능해야 합니다.</p>
<p><code>sys.path</code>에 기본 디렉토리가 있듯이, 하나 이상의 기본 <code>.zip</code> 아카이브도 있어야 합니다.</p>
<p>문제는 그 이름이 무엇이 되어야 하는지입니다. 이름은 Python 버전과 연결되어야 하므로, 동일한 머신에 여러 Python 버전이 있을 때도 Python 실행 파일이 해당 라이브러리를 올바르게 찾을 수 있습니다.</p>
<p><code>sys.path</code>에 하나의 이름이 추가됩니다. Unix에서는 디렉토리가 <code>sys.prefix + "/lib"</code>이고, 파일 이름은 <code>"python%s%s.zip" % (sys.version[0], sys.version[2])</code>입니다. 따라서 Python 2.2와 <code>prefix /usr/local</code>의 경우, <code>/usr/local/lib/python2.2/</code>는 이미 <code>sys.path</code>에 있으며, <code>/usr/local/lib/python22.zip</code>가 추가될 것입니다. Windows에서는 파일이 <code>python22.dll</code>의 전체 경로이며, "dll"이 "zip"으로 대체됩니다. <code>.zip</code> 아카이브 이름은 항상 <code>sys.path</code>의 두 번째 항목으로 삽입됩니다. 첫 번째는 <code>main.py</code>의 디렉토리입니다.</p>
<h3>디렉토리 임포트 (Directory Imports)</h3>
<p><code>.zip</code> 임포트의 속도를 높이는 데 사용되는 정적 Python 딕셔너리는 일반 디렉토리 임포트의 속도를 높이는 데도 사용할 수 있습니다. <code>sys.path</code>에서 <code>.zip</code> 아카이브가 아닌 각 항목에 대해 <code>os.listdir</code>를 호출하고, 디렉토리 내용을 딕셔너리에 추가합니다. 그런 다음 이중 루프에서 <code>fopen()</code>을 호출하는 대신 딕셔너리를 확인합니다. 이는 임포트 속도를 크게 향상시킵니다. <code>os.listdir</code>가 없으면 딕셔너리는 사용되지 않습니다.</p>
<h3>벤치마크 (Benchmarks)</h3>
<p>| Case | Original 2.2a3 | Using os.listdir | Zip Uncomp | Zip Compr |
| :--- | :--- | :--- | :--- | :--- |
| 1    | 3.2            | 2.5              | 3.2->1.02  | 2.3->0.87 |
| 2    | 2.8            | 3.9              | 3.0->1.32  | Case 1과 동일 |
| 3    | 5.7            | 5.7              | 5.7->5.7   | 2.1->1.8 |
| 4    | 9.4            | 9.4              | 9.3->9.35  | Case 3과 동일 |</p>
<ul>
<li><strong>Case 1:</strong> 로컬 드라이브 C:, <code>sys.path</code>는 기본값.</li>
<li><strong>Case 2:</strong> 로컬 드라이브 C:, 파일이 있는 디렉토리가 <code>sys.path</code>의 끝에 있음.</li>
<li><strong>Case 3:</strong> 네트워크 드라이브, <code>sys.path</code>는 기본값.</li>
<li><strong>Case 4:</strong> 네트워크 드라이브, 파일이 있는 디렉토리가 <code>sys.path</code>의 끝에 있음.</li>
</ul>
<p>벤치마크는 Pentium 4 clone, 1.4 GHz, 256 Meg, Windows 2000 및 Linux/Samba 네트워크 서버 환경에서 수행되었습니다. 시간은 초 단위이며, 약 100개의 Lib 모듈을 임포트하는 데 걸린 시간입니다. Case 2와 4는 "올바른" 디렉토리가 <code>sys.path</code>의 끝으로 이동된 경우입니다. "Uncomp"는 압축되지 않은 <code>.zip</code> 아카이브를, "Compr"는 압축된 아카이브를 의미합니다.</p>
<p>초기 시간은 시스템 재부팅 후의 시간이며, "->" 이후의 시간은 반복 실행 후의 시간입니다. 재부팅 후 C:에서 임포트하는 시간은 "Original" 케이스에서 상당히 가변적이지만 더 현실적입니다.</p>
<h3>사용자 정의 임포트 (Custom Imports)</h3>
<p>이 로직은 필요한 Python 모듈(이 경우 <code>os</code>)을 사용할 수 있게 될 때까지 기본 검색을 사용하여 임포트하는 기능을 보여줍니다. 이는 사용자 정의 임포터(custom importers)를 부트스트랩하는 데 사용될 수 있습니다. 예를 들어, <code>__init__.py</code>에 <code>importer()</code>가 존재하면, 임포트에 사용될 수 있습니다. <code>importer()</code>는 <code>os</code> 및 다른 모듈을 자유롭게 임포트할 수 있으며, 이들은 기본 메커니즘에서 처리됩니다. 이 PEP는 어떤 사용자 정의 임포터도 정의하지 않으며, 이 설명은 정보 제공을 위한 것입니다.</p>
<h3>구현 (Implementation)</h3>
<p>C 구현은 SourceForge 패치 492105로 제공되었습니다. 이는 패치 652586 및 현재 CVS에 의해 대체되었습니다.</p>
<p>Paul Moore가 최신 CVS에 맞게 업데이트한 새 버전은 645650입니다. 이 역시 패치 652586 및 현재 CVS에 의해 대체되었습니다.</p>
<p>Just van Rossum의 경쟁 구현인 652586은 PEP 302의 최종 구현의 기반이 되었습니다. PEP 273은 PEP 302의 임포트 훅(import hooks)을 사용하여 구현되었습니다.</p>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인에 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1098,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 273 - Import Modules from Zip Archives"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 17:52:44+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
