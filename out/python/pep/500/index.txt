3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/500","c"]
0:["SAPzS3zi9tsG5MkeKvxIA",[[["",{"children":[["slug","python/pep/500","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"500\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/500","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2552,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0500/">PEP 500 - A protocol for delegating datetime methods to their tzinfo implementations</a></p>
<p><strong>상태:</strong> Rejected | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 08-Aug-2015</p>
</blockquote>
<h2>PEP 500 – <code>datetime</code> 메서드를 <code>tzinfo</code> 구현체로 위임하기 위한 프로토콜</h2>
<ul>
<li><strong>작성자</strong>: Alexander Belopolsky, Tim Peters</li>
<li><strong>논의</strong>: Datetime-SIG list</li>
<li><strong>상태</strong>: Rejected (거부됨)</li>
<li><strong>유형</strong>: Standards Track</li>
<li><strong>요구 사항</strong>: PEP 495</li>
<li><strong>생성일</strong>: 2015년 8월 8일</li>
<li><strong>결의</strong>: Datetime-SIG 메시지</li>
</ul>
<hr>
<h3>초록 (Abstract)</h3>
<p>이 PEP는 <code>datetime.tzinfo</code> 인터페이스의 구체적인 구현체들이 지역 시간(aware datetime)의 산술 연산, 포매팅 및 파싱을 재정의하는 데 사용할 수 있는 새로운 프로토콜인 PDDM ("A Protocol for Delegating Datetime Methods")을 명시합니다. 이 새로운 프로토콜을 지원하기 위한 <code>datetime.datetime</code> 클래스의 변경 사항들을 설명하고, 지역 시간 <code>datetime</code> 인스턴스가 "엄격한(strict)" 산술 규칙을 따르도록 하는 데 필요한 프로토콜의 일부를 구현하는 새로운 추상 클래스 <code>datetime.tzstrict</code>를 제안합니다.</p>
<h3>도입 배경 (Rationale)</h3>
<p>Python 3.5를 기준으로, 동일한 <code>tzinfo</code> 객체를 공유하는 지역 시간 <code>datetime</code> 인스턴스들은 (년, 월, 일, 시, 분, 초, 마이크로초) 7-튜플과 큰 정수 간의 단순한 일대일 대응(bijection)에 의해 유도되는 산술 규칙을 따릅니다. 이러한 산술 연산에서 <code>YEAR-11-02T12:00</code>와 <code>YEAR-11-01T12:00</code>의 차이는 항상 24시간입니다. 그러나, 예를 들어 <code>US/Eastern</code> 시간대에서는 2014년 11월 1일과 11월 2일 사이의 밤에 2014년 11월 2일 02:00에 현지 시계가 한 시간 되돌려지면서 추가적인 한 시간이 발생했기 때문에, 2014-11-01T12:00와 2014-11-02T12:00 사이에는 25시간이 존재합니다.</p>
<p>많은 비즈니스 애플리케이션에서는 Python의 단순화된 로컬 날짜 보기를 사용해야 합니다. 예를 들어, 어떤 자동차 렌탈 회사도 일광 절약 시간제(DST) 종료 시점을 지나는 한 주에 대해 다른 주보다 더 많은 요금을 청구하거나, 고객에게 한 시간 일찍 차량을 반납하도록 요구하지 않을 것입니다. 따라서 지역 시간 <code>datetime</code> 산술 규칙을 변경하는 것은 하위 호환성 문제(backward compatibility nightmare)를 야기할 뿐만 아니라, 합법적이고 일반적인 사용 사례에 대한 지원을 없앨 것입니다.</p>
<p>로컬 시간 산술 연산에 대한 보편적인 규칙을 선택하는 것이 불가능하기 때문에, PEP 500은 이러한 규칙의 구현을 <code>datetime.tzinfo</code> 인터페이스를 구현하는 클래스에 위임할 것을 제안했습니다. 이러한 위임이 이루어지면, 사용자들은 <code>tzinfo</code> 값으로 다른 클래스의 인스턴스를 선택하는 것만으로도 다른 산술 연산 규칙을 선택할 수 있게 될 것입니다.</p>
<h3>프로토콜 (Protocol)</h3>
<p>PDDM을 지원하는 <code>tzinfo</code> 서브클래스는 다음 메서드들을 정의할 수 있습니다.</p>
<h4><code>datetime</code>의 뺄셈 (Subtraction of datetime)</h4>
<ul>
<li><code>__datetime_diff__(self, dt1, dt2)</code>: 두 <code>datetime.datetime</code> 인스턴스를 인수로 받아, 첫 번째 <code>datetime</code> 인스턴스부터 두 번째 인스턴스까지 경과한 시간을 나타내는 <code>datetime.timedelta</code> 인스턴스를 반환해야 합니다.</li>
</ul>
<h4>덧셈 (Addition)</h4>
<ul>
<li><code>__datetime_add__(self, dt, delta)</code>: <code>datetime</code>과 <code>timedelta</code> 인스턴스 두 개를 인수로 받아, <code>datetime</code> 인스턴스를 반환해야 합니다.</li>
</ul>
<h4><code>timedelta</code>의 뺄셈 (Subtraction of timedelta)</h4>
<ul>
<li><code>__datetime_sub__(self, dt, delta)</code>: <code>datetime</code>과 <code>timedelta</code> 인스턴스 두 개를 인수로 받아, <code>datetime</code> 인스턴스를 반환해야 합니다.</li>
</ul>
<h4>포매팅 (Formatting)</h4>
<ul>
<li><code>__datetime_isoformat__(self, dt, separator=None)</code>: <code>datetime</code> 인스턴스와 선택적 <code>separator</code>를 인수로 받아, 주어진 <code>datetime</code> 인스턴스의 문자열 표현을 생성해야 합니다.</li>
<li><code>__datetime_strftime__(self, dt, format_string)</code>: <code>datetime</code> 인스턴스와 포맷 문자열을 인수로 받아, 주어진 포맷에 따라 <code>datetime</code> 인스턴스의 문자열 표현을 생성해야 합니다.</li>
</ul>
<h4>파싱 (Parsing)</h4>
<ul>
<li><code>__datetime_strptime__(cls, dt_string, format_string)</code> (클래스 메서드): <code>PDDM</code>을 지원하는 <code>tzinfo</code> 서브클래스는 <code>__datetime_strptime__</code>이라는 클래스 메서드를 정의하고, 자신이 구현하는 시간대의 "표준(canonical)" 이름을 레지스트리에 등록할 수 있습니다. (레지스트리에 대한 자세한 설명은 PEP에 TODO로 명시되어 있습니다.)</li>
</ul>
<h3><code>datetime</code> 메서드 변경 사항 (Changes to datetime methods)</h3>
<h4>뺄셈 (Subtraction)</h4>
<p><code>datetime</code> 클래스의 <code>__sub__</code> 메서드는 다음과 같이 변경될 예정이었습니다.</p>
<pre><code class="language-python">class datetime:
    def __sub__(self, other):
        if isinstance(other, datetime):
            try:
                self_diff = self.tzinfo.__datetime_diff__
            except AttributeError:
                self_diff = None
            try:
                other_diff = self.tzinfo.__datetime_diff__
            except AttributeError:
                other_diff = None

            if self_diff is not None:
                if self_diff is not other_diff and self_diff.__func__ is not other_diff.__func__:
                    raise ValueError("Cannot find difference of two datetimes with "
                                     "different tzinfo.__datetime_diff__ implementations.")
                return self_diff(self, other)
        elif isinstance(other, timedelta):
            try:
                sub = self.tzinfo.__datetime_sub__
            except AttributeError:
                pass
            else:
                return sub(self, other)
        return NotImplemented # current implementation
</code></pre>
<h4>덧셈 (Addition)</h4>
<p><code>datetime</code> 인스턴스에 <code>timedelta</code>를 더하는 연산은 <code>self.tzinfo.__datetime_add__</code> 메서드가 정의되어 있을 때 해당 메서드로 위임될 예정이었습니다.</p>
<h3>엄격한 연산 (Strict arithmetics)</h3>
<p><code>datetime</code> 모듈에 <code>datetime.tzinfo</code> 클래스의 새로운 추상 서브클래스인 <code>datetime.tzstrict</code>가 추가될 예정이었습니다. 이 서브클래스는 <code>utcoffset()</code>, <code>tzname()</code>, <code>dst()</code> 메서드를 구현하지 않지만, PDDM의 일부 메서드를 구현할 예정이었습니다.</p>
<p><code>tzstrict</code>에 의해 구현될 PDDM 메서드들은 다음 코드와 동등할 예정이었습니다.</p>
<pre><code class="language-python">class tzstrict(tzinfo):
    def __datetime_diff__(self, dt1, dt2):
        utc_dt1 = dt1.astimezone(timezone.utc)
        utc_dt2 = dt2.astimezone(timezone.utc)
        return utc_dt2 - utc_dt1

    def __datetime_add__(self, dt, delta):
        utc_dt = dt.astimezone(timezone.utc)
        return (utc_dt + delta).astimezone(self)

    def __datetime_sub__(self, dt, delta):
        utc_dt = dt.astimezone(timezone.utc)
        return (utc_dt - delta).astimezone(self)
</code></pre>
<h3>파싱 및 포매팅 (Parsing and formatting)</h3>
<p><code>datetime</code> 메서드인 <code>strftime</code>와 <code>isoformat</code>은 해당 메서드들이 <code>tzinfo</code> 멤버에 정의되어 있을 때 그 메서드들로 위임될 예정이었습니다.</p>
<p><code>datetime.strptime</code> 메서드에 <code>%Z</code> 지시어가 포함된 포맷 문자열이 주어지면, 주어진 시간대 이름으로 레지스트리에서 <code>tzinfo</code> 구현체를 찾아 해당 <code>__datetime_strptime__</code> 메서드를 호출할 예정이었습니다.</p>
<h3>적용 분야 (Applications)</h3>
<p>이 PEP는 다음을 포함한 다양한 시간 관리 체계의 서드파티 구현을 가능하게 할 예정이었습니다.</p>
<ul>
<li>율리우스력(Julian) / Microsoft Excel 달력</li>
<li>윤초(leap second)를 지원하는 "올바른(Right)" 시간대</li>
<li>프랑스 혁명력 (많은 작업 필요)</li>
</ul>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인에 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Rejected] PEP 500 - A protocol for delegating datetime methods to their tzinfo implementations"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 22:43:18+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
