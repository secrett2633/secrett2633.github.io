3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-1a135130af3e1cae.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/264","c"]
0:["8N6icDw00Cy0kKVlExSq2",[[["",{"children":[["slug","python/pep/264","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"264\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/264","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T1887,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0264/">PEP 264 - Future statements in simulated shells</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 30-Jul-2001</p>
</blockquote>
<h2>PEP 264: 시뮬레이션 셸에서의 <code>__future__</code> 문 (Future statements in simulated shells)</h2>
<h3>개요</h3>
<p>PEP 264는 "시뮬레이션 대화형 셸" (simulated interactive shells)이 "실제" 대화형 셸에서 <code>__future__</code> 문의 동작을 시뮬레이션하는 명확한 방법이 없다는 PEP 236의 문제점을 해결하고자 합니다. 즉, <code>__future__</code> 문의 효과가 셸의 수명 동안 유지되도록 하는 것이 목표입니다.</p>
<p>또한, 이 PEP는 <code>compile()</code> 함수를 호출하는 코드에 영향을 미치는 <code>__future__</code> 문의 효과가 <code>compile()</code>에 상속되는 것을 막을 수 없다는 PEP 236의 또 다른 미해결 문제도 다룹니다.</p>
<p>이 PEP는 첫 번째 문제를 해결하기 위해 내장 함수 <code>compile()</code>에 선택적 네 번째 인자를 추가하고, <code>__future__.py</code>에 정의된 <code>_Feature</code> 인스턴스에 정보를 추가하며, 표준 라이브러리 모듈 <code>codeop</code> 및 <code>code</code>에 이러한 셸의 구성을 용이하게 하는 메커니즘을 추가할 것을 제안합니다. 두 번째 문제는 <code>compile()</code>에 선택적 인자를 하나 더 추가하여, 이 인자가 0이 아닐 경우 <code>future</code> 문의 효과 상속을 억제함으로써 처리됩니다.</p>
<h3>명세 (Specification)</h3>
<ol>
<li>
<p><strong><code>compile()</code> 함수의 변경:</strong></p>
<ul>
<li>내장 함수 <code>compile()</code>에 네 번째 선택적 인자 <code>flags</code>를 추가할 것을 제안합니다. 이 인자가 생략되면 Python 2.1과 동일하게 동작합니다.</li>
<li><code>flags</code>는 정수 값으로, 컴파일 시 다양한 옵션을 비트필드(bitfield) 형태로 나타냅니다. 이 비트필드는 Python 인터프리터의 C 부분에서 <code>future</code> 문을 참조하는 데 이미 사용되는 <code>CO_*</code> 플래그와 동일한 값을 가집니다.</li>
<li><code>compile()</code>은 제공된 <code>flags</code>에서 인식할 수 없는 비트가 설정되어 있으면 <code>ValueError</code> 예외를 발생시킵니다.</li>
<li>제공된 <code>flags</code>는 항상 설정될 플래그와 비트와이즈 OR (bitwise-OR) 됩니다. 단, 새로운 다섯 번째 선택적 인자가 0이 아닌 정수일 경우, 제공된 <code>flags</code>만 정확히 사용되는 플래그 세트가 됩니다.</li>
</ul>
</li>
<li>
<p><strong><code>__future__</code> 모듈의 변경:</strong></p>
<ul>
<li>현재 Python에 노출되지 않은 이 플래그들을 노출하기 위해 <code>__future__.py</code>의 <code>_Feature</code> 객체에 필요한 비트를 포함하는 <code>.compiler_flag</code> 속성을 추가할 것을 제안합니다. 이를 통해 다음과 같은 코드를 작성할 수 있습니다.
<pre><code class="language-python">import __future__
def compile_generator(func_def):
    return compile(func_def, "&#x3C;input>", "suite", __future__.generators.compiler_flag)
</code></pre>
</li>
<li>또한, <code>codeob.co_flags &#x26; __future__.generators.compiler_flag</code>와 같은 방식으로 코드 객체가 특정 <code>future</code> 기능으로 컴파일되었는지 확인할 수 있게 됩니다.</li>
<li><code>__future__</code> 모듈에 <code>.all_feature_flags</code> 속성을 추가하여 실행 중인 인터프리터가 지원하는 모든 <code>__future__</code> 옵션을 쉽게 열거할 수 있게 합니다.</li>
</ul>
</li>
<li>
<p><strong><code>codeop</code> 모듈의 변경:</strong></p>
<ul>
<li>표준 라이브러리 모듈 <code>codeop</code>에 두 개의 클래스를 추가할 것을 제안합니다.</li>
<li><code>Compile</code> 클래스: <code>__call__</code> 메서드를 가지며, 2.1 버전의 내장 <code>compile</code>과 유사하게 동작하지만, <code>__future__</code> 문을 컴파일한 후 이를 "기억"하고 이후의 모든 코드를 해당 <code>__future__</code> 옵션이 적용된 상태로 컴파일합니다. 이는 위에서 언급된 <code>__future__</code> 모듈의 새로운 기능을 사용합니다.</li>
<li><code>CommandCompiler</code> 클래스: 기존 <code>codeop.compile_command</code> 함수의 역할을 수행하지만, <code>__future__</code>를 인식하는 방식으로 동작합니다.</li>
</ul>
</li>
<li>
<p><strong><code>code</code> 모듈의 변경:</strong></p>
<ul>
<li>표준 라이브러리 모듈 <code>code</code>의 <code>InteractiveInterpreter</code> 클래스를 수정하여 <code>CommandCompiler</code>를 사용하도록 제안합니다. 이는 기본 Python 셸의 동작을 더욱 가깝게 에뮬레이트하기 위함입니다.</li>
</ul>
</li>
</ol>
<h3>하위 호환성 (Backward Compatibility)</h3>
<p>기존 코드에는 거의 또는 전혀 영향을 미치지 않을 것입니다. <code>compile</code>에 대한 변경 사항은 기존 코드에 영향을 주지 않으며, <code>codeop</code>에 새로운 함수나 클래스를 추가하는 것도 마찬가지입니다. <code>code.InteractiveInterpreter</code>를 사용하는 기존 코드는 동작이 변경될 수 있지만, 이는 "실제" Python 셸을 더 잘 모방하게 되므로 더 나은 방향으로의 변화입니다.</p>
<h3>전방 호환성 (Forward Compatibility)</h3>
<p>새로운 <code>__future__</code> 기능을 추가할 때 <code>Lib/__future__.py</code>에 필요한 작업이 약간 더 복잡해질 것입니다. 그 외의 모든 것은 잘 작동해야 합니다.</p>
<h3>구현 (Implementation)</h3>
<p>초기 구현은에서 찾아볼 수 있습니다. 팀 피터스(Tim Peters)의 약간의 수정 후, 이 구현들은 이미 체크인되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1318,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 264 - Future statements in simulated shells"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 17:47:23+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
