3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-ce60b0a6591d04ed.js"],""]
4:["slug","python/pep/442","c"]
0:["e6YNzZ2BVZ8NBZ6boXfWj",[[["",{"children":[["slug","python/pep/442","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"442\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/442","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T3712,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0442/">PEP 442 - Safe object finalization</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 18-May-2013</p>
</blockquote>
<p>파이썬 개발자를 위한 PEP 442 – 안전한 객체 마무리 (Safe Object Finalization)</p>
<h2>요약 (Abstract)</h2>
<p>이 PEP(Python Enhancement Proposal)는 현재 Python의 객체 마무리(finalization) 기능이 가진 한계를 다루는 것을 목표로 합니다. 그 목적은 객체 그래프(object graph) 내에서의 위치에 상관없이, 모든 객체에 대해 최종 처리기(finalizer)를 정의하고 실행할 수 있도록 하는 것입니다.</p>
<p>이 PEP는 Python 코드에 어떠한 변경도 요구하지 않습니다. 기존 최종 처리기를 가진 객체들은 자동으로 이 개선의 혜택을 받게 됩니다.</p>
<h2>정의 (Definitions)</h2>
<ul>
<li><strong>참조(Reference):</strong> 한 객체에서 다른 객체로 향하는 방향성 링크입니다. 참조 대상 객체는 참조를 가진 객체가 살아있는 동안, 그리고 참조가 해제되지 않는 한 메모리에 유지됩니다. 이 PEP는 약한 참조(weak reference)가 아닌 일반 참조에 중점을 둡니다.</li>
<li><strong>약한 참조(Weak reference):</strong> 한 객체에서 다른 객체로 향하는 방향성 링크이지만, 참조 대상 객체를 메모리에 유지시키지 않습니다.</li>
<li><strong>참조 순환(Reference cycle):</strong> 객체들 간의 방향성 링크로 이루어진 순환 부분 그래프(cyclic subgraph)로, 순수한 참조 카운트(reference-counting) 방식으로는 이 객체들이 회수되지 않도록 만듭니다.</li>
<li><strong>순환 고립 객체(Cyclic isolate, CI):</strong> 외부로부터 어떤 객체도 참조되지 않으며, 하나 이상의 참조 순환을 포함하고, 객체들이 여전히 사용 가능한(non-broken) 상태인 객체들의 독립적인 부분 그래프입니다. 이 객체들은 각자의 최종 처리기에서 서로에게 접근할 수 있습니다.</li>
<li><strong>순환 가비지 컬렉터(Cyclic garbage collector, GC):</strong> 순환 고립 객체를 감지하고 이를 순환 쓰레기(cyclic trash)로 만드는 장치입니다. 순환 쓰레기 내의 객체들은 결국 참조가 해제되고 참조 카운트가 0으로 떨어지면서 자연스럽게 소멸됩니다.</li>
<li><strong>순환 쓰레기(Cyclic trash, CT):</strong> GC에 의해 객체들이 해제되기 시작한 이전 순환 고립 객체입니다. 순환 쓰레기 내의 객체들은 잠재적인 좀비(zombies) 상태입니다. 만약 Python 코드에서 접근될 경우, 이상한 <code>AttributeError</code>부터 크래시까지 다양한 증상이 나타날 수 있습니다.</li>
<li><strong>좀비/손상된 객체(Zombie / broken object):</strong> 순환 쓰레기의 일부인 객체입니다. 이 용어는 객체가 안전하지 않다는 것을 강조합니다. 객체의 외부 참조가 해제되었을 수 있거나, 객체가 참조하는 다른 객체가 좀비 상태일 수 있습니다. 따라서 최종 처리기와 같은 임의의 코드에서 접근해서는 안 됩니다.</li>
<li><strong>최종 처리기(Finalizer):</strong> 객체가 소멸될 때 호출되는 함수 또는 메서드입니다. 최종 처리기는 객체에 접근하여 객체가 보유하고 있던 자원(예: 뮤텍스 또는 파일 디스크립터)을 해제할 수 있습니다. <code>__del__</code> 메서드가 대표적인 예입니다.</li>
<li><strong>부활(Resurrection):</strong> 최종 처리기가 순환 고립 객체 내의 객체에 대한 새로운 참조를 생성하는 과정입니다. 이는 <code>__del__</code> 메서드의 특이하지만 지원되는 부수 효과(side-effect)로 발생할 수 있습니다.</li>
</ul>
<h2>영향 (Impact)</h2>
<p>이 PEP는 CPython 구현 세부 사항을 논의하지만, 마무리(finalization) 의미론의 변경은 전체 Python 생태계에 영향을 미칠 것으로 예상됩니다. 특히, 이 PEP는 "<code>__del__</code> 메서드를 가진 객체는 참조 순환의 일부가 되어서는 안 된다"는 현재의 지침을 더 이상 유효하지 않게 만듭니다.</p>
<h2>이점 (Benefits)</h2>
<p>이 PEP의 주요 이점은 <code>__del__</code> 메서드를 가진 객체나 <code>finally</code> 블록을 가진 제너레이터(generator)와 같은 최종 처리기를 가진 객체에 관한 것입니다. 이러한 객체들은 이제 참조 순환의 일부일지라도 회수될 수 있습니다.</p>
<p>이 PEP는 또한 다음과 같은 추가적인 이점을 위한 길을 닦습니다:</p>
<ul>
<li>모듈 종료(module shutdown) 절차가 더 이상 전역 변수를 <code>None</code>으로 설정할 필요가 없을 수도 있습니다. 이는 잘 알려진 짜증나는 문제들을 해결할 수 있습니다.</li>
</ul>
<p>이 PEP는 다음의 의미론은 변경하지 않습니다:</p>
<ul>
<li>참조 순환에 갇힌 약한 참조(weak references).</li>
<li>사용자 정의 <code>tp_dealloc</code> 함수를 가진 C 확장 타입(C extension types).</li>
</ul>
<h2>설명 (Description)</h2>
<h3>참조 카운트 방식 소멸 (Reference-counted disposal)</h3>
<p>일반적인 참조 카운트 방식 소멸에서는 객체의 최종 처리기가 객체가 할당 해제되기 직전에 호출됩니다. 만약 최종 처리기가 객체를 부활(resurrect)시키면, 할당 해제는 중단됩니다.</p>
<p>그러나 객체가 이미 최종 처리된 경우, 최종 처리기는 호출되지 않습니다. 이는 좀비(zombies) 객체를 최종 처리하는 것을 방지합니다.</p>
<h3>순환 고립 객체 소멸 (Disposal of cyclic isolates)</h3>
<p>순환 고립 객체(CI)는 가비지 컬렉터(GC)에 의해 먼저 감지된 다음 소멸됩니다. 감지 단계는 변경되지 않으므로 여기서는 설명하지 않습니다. 전통적으로 CI의 소멸은 다음 순서로 작동했습니다:</p>
<ol>
<li>CI 객체에 대한 약한 참조가 해제되고, 콜백이 호출됩니다. 이 시점에서 객체는 여전히 안전하게 사용할 수 있습니다.</li>
<li>GC가 CI 내부의 알려진 모든 참조를 체계적으로 끊으면서 (<code>tp_clear</code> 함수 사용) CI는 CT(Cyclic Trash)가 됩니다.</li>
<li>아무것도 하지 않습니다. 모든 CT 객체는 2단계에서 (참조 해제의 부수 효과로) 소멸되었어야 합니다. 이 컬렉션은 완료됩니다.</li>
</ol>
<p>이 PEP는 CI 소멸을 다음 순서로 변경할 것을 제안합니다 (새로운 단계는 <strong>굵게</strong> 표시):</p>
<ol>
<li>CI 객체에 대한 약한 참조가 해제되고, 콜백이 호출됩니다. 이 시점에서 객체는 여전히 안전하게 사용할 수 있습니다.</li>
<li><strong>모든 CI 객체의 최종 처리기(finalizer)가 호출됩니다.</strong></li>
<li><strong>CI는 다시 한 번 순회되어 여전히 고립되어 있는지 확인합니다. 만약 CI 내의 최소 하나의 객체가 CI 외부에서 도달 가능하다고 판단되면, 이 컬렉션은 중단되고 전체 CI가 부활됩니다. 그렇지 않으면 다음으로 진행합니다.</strong></li>
<li>GC가 CI 내부의 알려진 모든 참조를 체계적으로 끊으면서 (<code>tp_clear</code> 함수 사용) CI는 CT가 됩니다.</li>
<li>아무것도 하지 않습니다. 모든 CT 객체는 4단계에서 (참조 해제의 부수 효과로) 소멸되었어야 합니다. 이 컬렉션은 완료됩니다.</li>
</ol>
<p><strong>참고:</strong> GC는 위 2단계 이후에 CI를 재계산하지 않으므로, 전체 부분 그래프(subgraph)가 여전히 고립되어 있는지 확인하는 3단계가 필요합니다.</p>
<h3>C-레벨 변경 (C-level changes)</h3>
<p>타입 객체는 새로운 <code>tp_finalize</code> 슬롯을 얻게 되며, <code>__del__</code> 메서드는 이 슬롯에 매핑됩니다 (그리고 역으로도). 제너레이터는 <code>tp_del</code> 대신 이 슬롯을 사용하도록 수정됩니다. <code>tp_finalize</code> 함수는 유효하고 살아있는 <code>PyObject</code>를 유일한 인수로 받아 호출되는 일반적인 C 함수입니다. 호출자가 객체의 참조 카운트를 조작할 것이므로, <code>tp_finalize</code> 함수는 이를 조작할 필요가 없습니다. 그러나 호출자에게 반환하기 전에 원래의 예외 상태(exception state)가 복원되었는지 확인해야 합니다.</p>
<p>호환성을 위해 <code>tp_del</code>은 타입 구조에 유지됩니다. <code>tp_del</code>이 <code>NULL</code>이 아닌 객체의 처리는 변경되지 않습니다. 즉, CI의 일부인 경우 최종 처리되지 않고 <code>gc.garbage</code>에 남게 됩니다. 그러나 CPython 소스 트리에서는 (테스트 목적을 제외하고) 더 이상 <code>NULL</code>이 아닌 <code>tp_del</code>이 발견되지 않습니다.</p>
<p>특히 사용자 정의 할당 해제자(custom deallocator)에서 <code>tp_finalize</code>를 쉽게 호출할 수 있도록 두 개의 새로운 C API 함수가 제공됩니다.</p>
<p>내부적으로, GC 관리 객체의 GC 헤더에 하나의 비트가 예약되어 객체가 최종 처리되었음을 알립니다. 이는 객체를 두 번 최종 처리하는 것을 방지하는 데 도움이 됩니다 (특히 GC에 의해 손상된 CT 객체를 최종 처리하는 것을 방지합니다).</p>
<p><strong>참고:</strong> GC가 활성화되지 않은 객체도 <code>tp_finalize</code> 슬롯을 가질 수 있습니다. 이러한 객체는 추가 비트가 필요하지 않습니다. <code>tp_finalize</code> 함수는 할당 해제자에서만 호출될 수 있으므로, 부활되는 경우를 제외하고는 두 번 호출될 수 없기 때문입니다.</p>
<h2>논의 (Discussion)</h2>
<h3>예측 가능성 (Predictability)</h3>
<p>이 방식을 따르면, 객체의 최종 처리기는 나중에 부활하더라도 항상 정확히 한 번 호출됩니다.</p>
<p>CI 객체의 경우, 최종 처리기가 호출되는 순서 (위의 2단계)는 정의되어 있지 않습니다.</p>
<h3>안전성 (Safety)</h3>
<p>제안된 변경이 안전한 이유를 설명하는 것이 중요합니다. 두 가지 측면을 논의해야 합니다:</p>
<ul>
<li>최종 처리기가 좀비 객체(최종 처리되고 있는 객체 포함)에 접근할 수 있는가?</li>
<li>최종 처리기가 객체 그래프를 변경하여 CI에 영향을 미치면 어떻게 되는가?</li>
</ul>
<p>첫 번째 문제를 논의해 봅시다. 가능한 경우를 두 가지 범주로 나눌 수 있습니다:</p>
<ul>
<li><strong>최종 처리되는 객체가 CI의 일부인 경우:</strong> 구성상 CI 내의 객체는 아직 좀비가 아닙니다. CI 최종 처리기는 어떤 참조도 끊기기 전에 호출되기 때문입니다. 따라서 최종 처리기는 존재하지 않는 좀비 객체에 접근할 수 없습니다.</li>
<li><strong>최종 처리되는 객체가 CI/CT의 일부가 아닌 경우:</strong> 정의상 CI/CT 내의 객체는 CI/CT 외부에서 자신을 가리키는 참조를 가지고 있지 않습니다. 따라서 최종 처리기는 어떤 좀비 객체에도 도달할 수 없습니다 (최종 처리되는 객체 자체가 좀비 객체로부터 참조되었다 하더라도).</li>
</ul>
<p>이제 두 번째 문제입니다. 세 가지 잠재적인 경우가 있습니다:</p>
<ul>
<li><strong>최종 처리기가 CI 객체에 대한 기존 참조를 해제하는 경우:</strong> CI 객체는 GC가 이를 끊으려고 시도하기 전에 소멸될 수 있으며, 이는 문제가 없습니다 (GC는 이 가능성을 인지하고 있기만 하면 됩니다).</li>
<li><strong>최종 처리기가 CI 객체에 대한 새로운 참조를 생성하는 경우:</strong> 이는 CI 객체의 최종 처리기에서만 발생할 수 있습니다 (위에서 이유를 설명했습니다). 따라서 새로운 참조는 모든 CI 최종 처리기가 호출된 후 (위의 3단계) GC에 의해 감지될 것이며, 어떤 객체도 손상되지 않고 컬렉션이 중단될 것입니다.</li>
<li><strong>최종 처리기가 비-CI 객체에 대한 참조를 해제하거나 생성하는 경우:</strong> 구성상 이것은 문제가 되지 않습니다.</li>
</ul>
<h2>구현 (Implementation)</h2>
<p>구현은 <code>http://hg.python.org/features/finalize/</code> 저장소의 <code>finalize</code> 브랜치에서 확인할 수 있습니다.</p>
<h2>검증 (Validation)</h2>
<p>일반적인 Python 테스트 스위트 실행 외에도, 이 구현은 참조 순환, 객체 부활, 그리고 레거시 <code>tp_del</code> 슬롯을 포함한 다양한 마무리 가능성에 대한 테스트 케이스를 추가했습니다.</p>
<p>또한 이 구현은 다음 테스트 스위트에서 어떠한 회귀(regression)도 발생시키지 않는다는 것이 확인되었습니다:</p>
<ul>
<li>Tulip (제너레이터를 광범위하게 사용)</li>
<li>Tornado</li>
<li>SQLAlchemy</li>
<li>Django</li>
<li>zope.interface</li>
</ul>
<h2>참고 자료 (References)</h2>
<ul>
<li>참조 순환 컬렉션 및 약한 참조 콜백에 대한 참고 사항: <code>http://hg.python.org/cpython/file/4e687d53b645/Modules/gc_weakref.txt</code></li>
<li>제너레이터 메모리 누수: <code>http://bugs.python.org/issue17468</code></li>
<li>객체가 GC에 의해 수집될 수 있는지 여부를 결정하도록 허용: <code>http://bugs.python.org/issue9141</code></li>
<li>GC 기반 모듈 종료 절차: <code>http://bugs.python.org/issue812369</code></li>
</ul>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인에 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 442 - Safe object finalization"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 21:54:42+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
