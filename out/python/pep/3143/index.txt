3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-19cfc001fdac3337.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-51594f997fc19690.js"],""]
4:["slug","python/pep/3143","c"]
0:["FeyCvJug7In7AgUZlfHUx",[[["",{"children":[["slug","python/pep/3143","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3143\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3143","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T5ac2,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3143/">PEP 3143 - Standard daemon process library</a></p>
<p><strong>상태:</strong> Deferred | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 26-Jan-2009</p>
</blockquote>
<h2>초록 (Abstract)</h2>
<p>잘 작동하는 유닉스(Unix) 데몬(daemon) 프로그램을 작성하는 것은 다소 복잡하고 제대로 구현하기 까다롭지만, 프로그램이 해야 할 다른 작업과는 관계없이 대부분의 데몬에서 그 단계는 비슷합니다.</p>
<p>이 PEP는 데몬 프로세스가 되는 작업을 위한 간단한 인터페이스를 제공하는 패키지를 Python 표준 라이브러리에 도입할 것을 제안합니다.</p>
<h2>PEP 연기 (PEP Deferral)</h2>
<p>이 PEP에서 다루는 개념들에 대한 추가적인 탐구는 현재 PEP의 목표를 추진하고 피드백을 수집 및 통합하며, 이를 효과적으로 수행할 충분한 시간을 가진 '챔피언'의 부재로 인해 연기되었습니다.</p>
<h2>명세 (Specification)</h2>
<h3>예제 사용 (Example usage)</h3>
<p><code>DaemonContext</code>를 직접 사용하는 간단한 예시입니다.</p>
<pre><code class="language-python">import daemon
from spam import do_main_program

with daemon.DaemonContext():
    do_main_program()
</code></pre>
<p>더 복잡한 사용 예시입니다.</p>
<pre><code class="language-python">import os
import grp
import signal
import daemon
import lockfile

from spam import (
    initial_program_setup,
    do_main_program,
    program_cleanup,
    reload_program_config,
)

context = daemon.DaemonContext(
    working_directory='/var/lib/foo',
    umask=0o002,
    pidfile=lockfile.FileLock('/var/run/spam.pid'),
)

context.signal_map = {
    signal.SIGTERM: program_cleanup,
    signal.SIGHUP: 'terminate',
    signal.SIGUSR1: reload_program_config,
}

mail_gid = grp.getgrnam('mail').gr_gid
context.gid = mail_gid

important_file = open('spam.data', 'w')
interesting_file = open('eggs.data', 'w')
context.files_preserve = [important_file, interesting_file]

initial_program_setup()
with context:
    do_main_program()
</code></pre>
<h3>인터페이스 (Interface)</h3>
<p>새로운 패키지 <code>daemon</code>이 표준 라이브러리에 추가됩니다.</p>
<p><code>DaemonContext</code> 클래스는 데몬 프로세스로 실행되는 프로그램의 설정과 프로세스 컨텍스트를 나타내기 위해 정의됩니다.</p>
<h3><code>DaemonContext</code> 객체 (DaemonContext objects)</h3>
<p><code>DaemonContext</code> 인스턴스는 프로그램이 데몬이 될 때의 동작 설정 및 프로세스 컨텍스트를 나타냅니다. 동작 및 환경은 <code>open</code> 메서드를 호출하기 전에 인스턴스에 옵션을 설정하여 사용자 정의됩니다.</p>
<p>각 옵션은 <code>DaemonContext</code> 생성자에 키워드 인수로 전달될 수 있으며, <code>open</code>을 호출하기 전에는 언제든지 인스턴스의 속성에 할당하여 변경할 수 있습니다. 예를 들어, <code>wibble</code> 및 <code>wubble</code>이라는 옵션에 대해 다음 호출은:</p>
<pre><code class="language-python">foo = daemon.DaemonContext(wibble=bar, wubble=baz)
foo.open()
</code></pre>
<p>다음과 동일합니다.</p>
<pre><code class="language-python">foo = daemon.DaemonContext()
foo.wibble = bar
foo.wubble = baz
foo.open()
</code></pre>
<p>다음 옵션들이 정의됩니다.</p>
<ul>
<li>
<p><strong><code>files_preserve</code></strong></p>
<ul>
<li><strong>기본값:</strong> <code>None</code></li>
<li>데몬 시작 시 닫히지 않아야 하는 파일 목록입니다. <code>None</code>인 경우, 모든 열린 파일 디스크립터가 닫힙니다.</li>
<li>목록의 요소는 파일 디스크립터(파일 객체의 <code>fileno()</code> 메서드가 반환하는 값) 또는 Python 파일 객체입니다. 각 요소는 데몬 시작 중에 닫히지 않을 파일을 지정합니다.</li>
</ul>
</li>
<li>
<p><strong><code>chroot_directory</code></strong></p>
<ul>
<li><strong>기본값:</strong> <code>None</code></li>
<li>프로세스의 유효 루트 디렉터리로 설정할 디렉터리의 전체 경로입니다. <code>None</code>인 경우, 루트 디렉터리가 변경되지 않음을 지정합니다.</li>
</ul>
</li>
<li>
<p><strong><code>working_directory</code></strong></p>
<ul>
<li><strong>기본값:</strong> <code>'/'</code></li>
<li>데몬 시작 시 프로세스가 변경해야 할 작업 디렉터리의 전체 경로입니다.</li>
<li>프로세스가 해당 파일 시스템에 현재 작업 디렉터리를 가지고 있으면 파일 시스템을 언마운트할 수 없으므로, 이 값은 기본값으로 두거나 데몬이 실행되는 동안 합리적인 "홈 디렉터리"로 설정해야 합니다.</li>
</ul>
</li>
<li>
<p><strong><code>umask</code></strong></p>
<ul>
<li><strong>기본값:</strong> <code>0</code></li>
<li>데몬 시작 시 프로세스에 설정할 파일 접근 생성 마스크("umask")입니다.</li>
<li>프로세스는 부모 프로세스로부터 umask를 상속받으므로, 데몬을 시작하면 umask가 이 값으로 재설정되어 데몬이 예상하는 접근 모드로 파일을 생성할 수 있습니다.</li>
</ul>
</li>
<li>
<p><strong><code>pidfile</code></strong></p>
<ul>
<li><strong>기본값:</strong> <code>None</code></li>
<li>PID 잠금 파일을 위한 컨텍스트 매니저입니다. 데몬 컨텍스트가 열리고 닫힐 때, <code>pidfile</code> 컨텍스트 매니저에 진입하고 종료합니다.</li>
</ul>
</li>
<li>
<p><strong><code>detach_process</code></strong></p>
<ul>
<li><strong>기본값:</strong> <code>None</code></li>
<li><code>True</code>이면 데몬 컨텍스트를 열 때 프로세스 컨텍스트를 분리하고, <code>False</code>이면 분리하지 않습니다.</li>
<li>인스턴스 초기화 시 지정되지 않은 경우(<code>None</code>), 기본적으로 <code>True</code>로 설정되며, 프로세스 분리가 불필요하다고 판단되는 경우(예: <code>init</code>, <code>initd</code>, 또는 <code>inetd</code>에 의해 프로세스가 시작된 경우)에만 <code>False</code>로 설정됩니다.</li>
</ul>
</li>
<li>
<p><strong><code>signal_map</code></strong></p>
<ul>
<li><strong>기본값:</strong> 시스템 의존적</li>
<li>운영 체제 시그널과 콜백 동작 간의 매핑입니다.</li>
<li>이 매핑은 데몬 컨텍스트가 열릴 때 사용되며, 각 시그널 핸들러의 동작을 결정합니다.
<ul>
<li><code>None</code> 값은 시그널을 무시합니다 (<code>signal.SIG_IGN</code>으로 시그널 동작을 설정).</li>
<li>문자열 값은 <code>DaemonContext</code> 인스턴스의 속성 이름으로 사용됩니다. 해당 속성의 값은 시그널 핸들러의 동작으로 사용됩니다.</li>
<li>다른 모든 값은 시그널 핸들러의 동작으로 사용됩니다.</li>
</ul>
</li>
<li>기본값은 실행 중인 시스템에 정의된 시그널에 따라 달라집니다. <code>signal</code> 모듈에 실제로 정의된 다음 목록의 각 항목은 기본 맵에 나타납니다.
<ul>
<li><code>signal.SIGTTIN</code>: <code>None</code></li>
<li><code>signal.SIGTTOU</code>: <code>None</code></li>
<li><code>signal.SIGTSTP</code>: <code>None</code></li>
<li><code>signal.SIGTERM</code>: <code>'terminate'</code></li>
</ul>
</li>
<li>프로그램이 자식 프로세스와 어떻게 상호작용할지에 따라, <code>signal.SIGCHLD</code> 시그널(자식 프로세스가 종료될 때 수신)을 포함하는 시그널 맵을 지정해야 할 수도 있습니다. 시그널 핸들러가 필요한 상황을 결정하는 방법에 대한 자세한 내용은 특정 운영 체제의 문서를 참조하십시오.</li>
</ul>
</li>
<li>
<p><strong><code>uid</code></strong></p>
<ul>
<li><strong>기본값:</strong> <code>os.getuid()</code></li>
</ul>
</li>
<li>
<p><strong><code>gid</code></strong></p>
<ul>
<li><strong>기본값:</strong> <code>os.getgid()</code></li>
<li>데몬 시작 시 프로세스를 전환할 사용자 ID("UID") 값 및 그룹 ID("GID") 값입니다.</li>
<li>기본값인 프로세스의 실제 UID 및 GID는 프로세스에 의해 상속된 모든 유효 권한 상승을 포기합니다.</li>
</ul>
</li>
<li>
<p><strong><code>prevent_core</code></strong></p>
<ul>
<li><strong>기본값:</strong> <code>True</code></li>
<li><code>True</code>인 경우, <code>root</code>로 실행되는 데몬에서 민감한 정보가 유출되는 것을 방지하기 위해 코어 파일 생성을 막습니다.</li>
</ul>
</li>
<li>
<p><strong><code>stdin</code></strong></p>
<ul>
<li><strong>기본값:</strong> <code>None</code></li>
</ul>
</li>
<li>
<p><strong><code>stdout</code></strong></p>
<ul>
<li><strong>기본값:</strong> <code>None</code></li>
</ul>
</li>
<li>
<p><strong><code>stderr</code></strong></p>
<ul>
<li><strong>기본값:</strong> <code>None</code></li>
<li><code>stdin</code>, <code>stdout</code>, <code>stderr</code> 각각은 <code>sys.stdin</code>, <code>sys.stdout</code>, <code>sys.stderr</code> 표준 I/O 스트림의 새 파일로 사용될 파일 유사(file-like) 객체입니다. 따라서 파일은 <code>stdin</code>의 경우 최소 <code>r</code> 모드, <code>stdout</code> 및 <code>stderr</code>의 경우 <code>w+</code> 모드로 열려 있어야 합니다.</li>
<li>객체에 파일 디스크립터를 반환하는 <code>fileno()</code> 메서드가 있는 경우, 해당 파일은 데몬 시작 중에 닫히지 않습니다 (즉, <code>files_preserve</code>에 나열된 것처럼 처리됩니다).</li>
<li><code>None</code>인 경우, 해당 시스템 스트림은 <code>os.devnull</code>로 명명된 파일로 다시 바인딩됩니다.</li>
</ul>
</li>
</ul>
<p>다음 메서드들이 정의됩니다.</p>
<ul>
<li>
<p><strong><code>open()</code></strong></p>
<ul>
<li><strong>반환:</strong> <code>None</code></li>
<li>데몬 컨텍스트를 열어 현재 프로그램을 데몬 프로세스로 전환합니다. 이 메서드는 다음 단계를 수행합니다.
<ul>
<li>이 인스턴스의 <code>is_open</code> 속성이 <code>True</code>이면 즉시 반환합니다. 이를 통해 한 인스턴스에서 <code>open</code>을 여러 번 호출해도 안전합니다.</li>
<li><code>prevent_core</code> 속성이 <code>True</code>이면, 프로세스의 코어 덤프를 방지하기 위해 프로세스의 리소스 제한을 설정합니다.</li>
<li><code>chroot_directory</code> 속성이 <code>None</code>이 아니면, 프로세스의 유효 루트 디렉터리를 해당 디렉터리로 설정합니다 (<code>os.chroot</code>를 통해).
<ul>
<li>이를 통해 데몬 프로세스를 "chroot 감옥" 내에서 실행하여 프로세스의 비정상적인 동작으로 인한 시스템 노출을 제한할 수 있습니다. 지정된 디렉터리가 이미 이 목적을 위해 설정되어 있어야 합니다.</li>
</ul>
</li>
<li>프로세스 UID 및 GID를 <code>uid</code> 및 <code>gid</code> 속성 값으로 전환합니다.</li>
<li>모든 열린 파일 디스크립터를 닫습니다. <code>files_preserve</code> 속성에 나열된 파일 및 <code>stdin</code>, <code>stdout</code>, <code>stderr</code> 속성에 해당하는 파일은 제외합니다.</li>
<li>현재 작업 디렉터리를 <code>working_directory</code> 속성으로 지정된 경로로 변경합니다.</li>
<li>파일 접근 생성 마스크를 <code>umask</code> 속성으로 지정된 값으로 재설정합니다.</li>
<li><code>detach_process</code> 옵션이 <code>True</code>이면, 현재 프로세스를 자체 프로세스 그룹으로 분리하고, 모든 제어 터미널과 연결을 해제합니다.</li>
<li><code>signal_map</code> 속성으로 지정된 시그널 핸들러를 설정합니다.</li>
<li><code>stdin</code>, <code>stdout</code>, <code>stderr</code> 속성 중 <code>None</code>이 아닌 것이 있으면, <code>sys.stdin</code>, <code>sys.stdout</code>, 및/또는 <code>sys.stderr</code> 시스템 스트림을 해당 속성으로 표현되는 파일에 바인딩합니다. 속성에 파일 디스크립터가 있는 경우, 디스크립터가 복제됩니다 (이름을 다시 바인딩하는 대신).</li>
<li><code>pidfile</code> 속성이 <code>None</code>이 아니면, 해당 컨텍스트 매니저에 진입합니다.</li>
<li>향후 <code>open</code> 및 <code>close</code> 호출을 위해 이 인스턴스를 열린 상태로 표시합니다.</li>
<li>Python 종료 처리 중에 호출되도록 <code>close</code> 메서드를 등록합니다.</li>
</ul>
</li>
<li>함수가 반환되면, 실행 중인 프로그램은 데몬 프로세스가 됩니다.</li>
</ul>
</li>
<li>
<p><strong><code>close()</code></strong></p>
<ul>
<li><strong>반환:</strong> <code>None</code></li>
<li>데몬 컨텍스트를 닫습니다. 이 메서드는 다음 단계를 수행합니다.
<ul>
<li>이 인스턴스의 <code>is_open</code> 속성이 <code>False</code>이면 즉시 반환합니다. 이를 통해 한 인스턴스에서 <code>close</code>를 여러 번 호출해도 안전합니다.</li>
<li><code>pidfile</code> 속성이 <code>None</code>이 아니면, 해당 컨텍스트 매니저를 종료합니다.</li>
<li>향후 <code>open</code> 및 <code>close</code> 호출을 위해 이 인스턴스를 닫힌 상태로 표시합니다.</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong><code>is_open</code></strong></p>
<ul>
<li><strong>반환:</strong> 인스턴스가 열려 있으면 <code>True</code>, 그렇지 않으면 <code>False</code></li>
<li>이 속성은 인스턴스가 현재 열려 있는지 여부를 나타내는 상태를 노출합니다. 인스턴스의 <code>open</code> 메서드가 호출되었고 그 후에 <code>close</code> 메서드가 호출되지 않았다면 <code>True</code>입니다.</li>
</ul>
</li>
<li>
<p><strong><code>terminate(signal_number, stack_frame)</code></strong></p>
<ul>
<li><strong>반환:</strong> <code>None</code></li>
<li><code>signal.SIGTERM</code> 시그널을 위한 시그널 핸들러입니다. 다음 단계를 수행합니다.
<ul>
<li>시그널을 설명하는 <code>SystemExit</code> 예외를 발생시킵니다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>이 클래스는 또한 <code>__enter__</code> 및 <code>__exit__</code> 메서드를 통해 컨텍스트 매니저 프로토콜을 구현합니다.</p>
<ul>
<li>
<p><strong><code>__enter__()</code></strong></p>
<ul>
<li><strong>반환:</strong> <code>DaemonContext</code> 인스턴스</li>
<li>인스턴스의 <code>open()</code> 메서드를 호출한 다음, 인스턴스를 반환합니다.</li>
</ul>
</li>
<li>
<p><strong><code>__exit__(exc_type, exc_value, exc_traceback)</code></strong></p>
<ul>
<li><strong>반환:</strong> 컨텍스트 매니저 프로토콜에 정의된 대로 <code>True</code> 또는 <code>False</code></li>
<li>인스턴스의 <code>close()</code> 메서드를 호출한 다음, 예외가 처리되었으면 <code>True</code>, 그렇지 않으면 <code>False</code>를 반환합니다.</li>
</ul>
</li>
</ul>
<h2>동기 (Motivation)</h2>
<p>유닉스 데몬으로 작성된 프로그램의 대부분은 명세와 매우 유사한 동작을 구현하거나, 올바른 데몬 동작에 비춰볼 때 제대로 작동하지 않는 데몬입니다.</p>
<p>이러한 단계들은 대부분의 구현에서 거의 동일해야 하지만, 매우 구체적이고 누락하거나 잘못 구현하기 쉽기 때문에, 표준 라이브러리에서 표준화되고 잘 테스트된 구현의 주요 대상이 됩니다.</p>
<h2>근거 (Rationale)</h2>
<h3>올바른 데몬 동작 (Correct daemon behaviour)</h3>
<p>Stevens [stevens] §2.6에 따르면, 프로그램은 유닉스 데몬 프로세스가 되기 위해 다음 단계를 수행해야 합니다.</p>
<ul>
<li>모든 열린 파일 디스크립터를 닫습니다.</li>
<li>현재 작업 디렉터리를 변경합니다.</li>
<li>파일 접근 생성 마스크를 재설정합니다.</li>
<li>백그라운드에서 실행됩니다.</li>
<li>프로세스 그룹에서 분리됩니다.</li>
<li>터미널 I/O 시그널을 무시합니다.</li>
<li>제어 터미널에서 분리됩니다.</li>
<li>제어 터미널을 다시 획득하지 않습니다.</li>
<li>다음 상황을 올바르게 처리합니다.
<ul>
<li>System V <code>init</code> 프로세스에 의해 시작됨.</li>
<li><code>SIGTERM</code> 시그널에 의한 데몬 종료.</li>
<li>자식 프로세스가 <code>SIGCLD</code> 시그널을 생성.</li>
</ul>
</li>
</ul>
<p>데몬 도구 [slack-daemon]는 (기능 요약에서) 프로그램을 잘 작동하는 유닉스 데몬 프로세스로 전환할 때 수행되어야 할 동작을 나열합니다. 이는 별도의 프로그램을 데몬 프로세스로 호출한다는 점에서 이 PEP의 의도와 다릅니다. 프로그램이 이미 실행된 후에 스스로 시작하는 데몬에 적합한 기능은 다음과 같습니다.</p>
<ul>
<li>데몬에 대한 올바른 프로세스 컨텍스트를 설정합니다.</li>
<li><code>initd(8)</code> 또는 <code>inetd(8)</code>에 의해 시작될 때 합리적으로 동작합니다.</li>
<li>특별한 권한으로 데몬이 잘못 설치된 경우 보안 위험을 줄이기 위해 모든 <code>suid</code> 또는 <code>sgid</code> 권한을 철회합니다.</li>
<li><code>root</code>로 실행되는 데몬에서 민감한 정보가 유출되는 것을 방지하기 위해 코어 파일 생성을 막습니다 (선택 사항).</li>
<li>주어진 이름의 데몬이 한 번에 하나만 실행되도록 보장하기 위해 PID 파일을 생성하고 잠금으로써 데몬의 이름을 지정합니다 (선택 사항).</li>
<li>데몬을 실행할 사용자 및 그룹을 설정합니다 (선택 사항, <code>root</code>만 해당).</li>
<li><code>chroot</code> 감옥을 생성합니다 (선택 사항, <code>root</code>만 해당).</li>
<li>데몬의 <code>stdout</code> 및 <code>stderr</code>를 캡처하여 <code>syslog</code>로 보냅니다 (선택 사항).</li>
</ul>
<h3>데몬은 서비스가 아니다 (A daemon is not a service)</h3>
<p>이 PEP는 다른 운영 체제의 유사한 동작과는 달리, 위에서 언급된 올바른 동작이 관련 있는 유닉스 스타일의 데몬만을 다룹니다.</p>
<p>많은 시스템에는 "서비스(service)"라는 관련 개념이 있습니다. 서비스는 이 PEP의 모델과 다릅니다. 현재 프로그램이 데몬 프로세스로 계속 실행되는 대신, 서비스는 백그라운드에서 실행될 추가 프로세스를 시작하고, 현재 프로세스는 정의된 채널을 통해 해당 추가 프로세스와 통신합니다.</p>
<p>이 PEP의 유닉스 스타일 데몬 모델은 다른 것들 중에서도 서비스의 백그라운드 프로세스 부분을 구현하는 데 사용될 수 있습니다. 그러나 이 PEP는 서비스를 설정하고 관리하는 다른 측면을 다루지 않습니다.</p>
<h2>참조 구현 (Reference Implementation)</h2>
<p><code>python-daemon</code> 패키지 [python-daemon]입니다.</p>
<h2>다른 데몬 구현 (Other daemon implementations)</h2>
<p>이 PEP 이전에, 몇몇 기존의 서드파티 Python 라이브러리 또는 도구는 이 PEP의 올바른 데몬 동작 중 일부를 구현했습니다.</p>
<p>참조 구현은 다음 구현들의 상당히 직접적인 후속작입니다.</p>
<ul>
<li>Python cookbook 레시피 #66012 [cookbook-66012] 및 #278731 [cookbook-278731]에 커뮤니티에서 많은 좋은 아이디어가 기여되었습니다.</li>
<li><code>bda.daemon</code> 라이브러리 [bda.daemon]는 [cookbook-66012]의 구현입니다. 이것은 [python-daemon]의 전신입니다.</li>
</ul>
<p>이 PEP와 다른 Python 데몬 구현들은 다음과 같습니다.</p>
<ul>
<li><code>zdaemon</code> 도구 [zdaemon]는 Zope 프로젝트를 위해 작성되었습니다. [slack-daemon]처럼, 다른 프로그램을 데몬 프로세스로 실행하는 데 사용되기 때문에 이 명세와 다릅니다.</li>
<li>Python 라이브러리 <code>daemon</code> [clapper-daemon]은 (홈페이지에 따르면) 더 이상 유지 관리되지 않습니다. 버전 1.0.1 기준으로 [stevens]의 기본 단계를 구현합니다.</li>
<li><code>daemonize</code> 라이브러리 [seutter-daemonize] 또한 [stevens]의 기본 단계를 구현합니다.</li>
<li>Ray Burr의 <code>daemon.py</code> 모듈 [burr-daemon]은 [stevens] 절차뿐만 아니라 PID 파일 처리 및 <code>syslog</code>로의 출력 리디렉션을 제공합니다.</li>
<li>Twisted [twisted]는 놀랍지 않게도, Twisted 프레임워크의 나머지 부분과 통합된 프로세스 데몬화(daemonisation) API의 구현을 포함합니다. 이는 이 PEP의 API와는 상당히 다릅니다.</li>
<li><code>[clapper-daemon]</code>을 사용하는 Python <code>initd</code> 라이브러리 [dagitses-initd]는 데몬 프로세스를 제어하기 위한 유닉스 <code>initd(8)</code>의 동등한 것을 구현합니다.</li>
</ul>
<h2>참고 자료 (References)</h2>
<ul>
<li>[stevens]: Unix Network Programming, W. Richard Stevens, 1994 Prentice Hall.</li>
<li>[slack-daemon]: The (non-Python) “libslack” implementation of a daemon tool http://www.libslack.org/daemon/ by “raf” <a href="mailto:raf@raf.org">raf@raf.org</a>.</li>
<li>[python-daemon]: The python-daemon library http://pypi.python.org/pypi/python-daemon/ by Ben Finney et al.</li>
<li>[cookbook-66012]: Python Cookbook recipe 66012, “Fork a daemon process on Unix” http://code.activestate.com/recipes/66012/.</li>
<li>[cookbook-278731]: Python Cookbook recipe 278731, “Creating a daemon the Python way” http://code.activestate.com/recipes/278731/.</li>
<li>[bda.daemon]: The bda.daemon library http://pypi.python.org/pypi/bda.daemon/ by Robert Niederreiter et al.</li>
<li>[zdaemon]: The zdaemon tool http://pypi.python.org/pypi/zdaemon/ by Guido van Rossum et al.</li>
<li>[clapper-daemon]: The daemon library http://pypi.python.org/pypi/daemon/ by Brian Clapper.</li>
<li>[seutter-daemonize]: The daemonize library http://daemonize.sourceforge.net/ by Jerry Seutter.</li>
<li>[burr-daemon]: The daemon.py module http://www.nightmare.com/~ryb/code/daemon.py by Ray Burr.</li>
<li>[twisted]: The Twisted application framework http://pypi.python.org/pypi/Twisted/ by Glyph Lefkowitz et al.</li>
<li>[dagitses-initd]: The Python initd library http://pypi.python.org/pypi/initd/ by Michael Andreas Dagitses.</li>
</ul>
<h2>저작권 (Copyright)</h2>
<p>이 저작물은 공개 도메인으로 지정됩니다. 저작물을 공개 도메인으로 지정하는 것이 법적으로 불가능한 범위 내에서는, 저작권자는 이 저작물의 모든 수령인에게 저작권에 의해 제한될 수 있는 모든 권리와 자유를 부여합니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1098,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Deferred] PEP 3143 - Standard daemon process library"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:36:57+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
