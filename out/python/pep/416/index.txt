3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-aecaf5ac7a84facf.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-e3ea38185bb36cd2.js"],""]
4:["slug","python/pep/416","c"]
0:["x02Anhkwgp1He7ftuyAhh",[[["",{"children":[["slug","python/pep/416","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"416\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/416","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/da5e1dc2b9a7c5bb.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T3b1d,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0416/">PEP 416 - Add a frozendict builtin type</a></p>
<p><strong>상태:</strong> Rejected | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 29-Feb-2012</p>
</blockquote>
<p>파이썬 PEP 416: frozendict 내장 타입 추가 제안 (거부됨)</p>
<h2>개요</h2>
<p>이 문서는 PEP (Python Enhancement Proposal) 416의 내용을 한국어 사용자가 이해하기 쉽도록 번역하고 정리한 것입니다. PEP 416은 <code>frozendict</code>라는 새로운 내장 타입을 Python에 추가할 것을 제안했으나, 최종적으로 <strong>거부</strong>되었습니다.</p>
<h2>목차</h2>
<ul>
<li>거부 공지 (Rejection Notice)</li>
<li>요약 (Abstract)</li>
<li>제안 배경 (Rationale)</li>
<li>제약 조건 (Constraints)</li>
<li>구현 (Implementation)</li>
<li>해시 가능한 dict 레시피 (Recipe: hashable dict)</li>
<li>반대 의견 (Objections)</li>
<li>대안: dictproxy (Alternative: dictproxy)</li>
<li>기존 구현 사례 (Existing implementations)</li>
<li>링크 (Links)</li>
<li>저작권 (Copyright)</li>
</ul>
<hr>
<h3>거부 공지 (Rejection Notice)</h3>
<p>PEP 416은 다음을 포함한 여러 이유로 인해 거부되었습니다.</p>
<ul>
<li><strong>사용률 저조:</strong> Raymond Hettinger에 따르면, <code>frozendict</code>의 사용률은 낮습니다. 사용하는 경우에도 <code>frozendict</code>를 전역 또는 클래스 수준 "상수"를 선언하는 것과 같은 힌트로 사용하는 경향이 있었습니다. 이는 이름에 여전히 재할당할 수 있기 때문에 진정으로 변경 불가능하지 않습니다.</li>
<li><strong>가변 기본값 문제에 대한 기존 해결책:</strong> 가변 기본값 인자(mutable default arguments) 문제를 피하기 위한 기존의 관용적인 방법들이 있습니다.</li>
<li><strong>최적화 불확실성:</strong> PyPy에서 <code>frozendict</code>를 사용하여 코드를 최적화할 수 있을지는 불확실하며, 다른 많은 것들이 먼저 변경되어야 할 것입니다. 일반적인 컴파일 시간 조회(compile-time lookups)의 경우도 마찬가지입니다.</li>
<li><strong>다중 스레드/프로세스:</strong> 여러 스레드는 공유 <code>dict</code>를 변경하지 않기로 약속할 수 있으며, 강제할 큰 필요가 없습니다. 여러 프로세스는 <code>dict</code>를 공유할 수 없습니다.</li>
<li><strong>보안 샌드박스:</strong> 제한된 범위라도 Python으로 작성된 보안 샌드박스를 추가하는 것은, 샌드박스가 실제로 안전하다는 것을 증명하기 어려운 내재된 어려움 때문에 많은 사람들이 반대합니다. 이러한 이유로 표준 라이브러리(stdlib)에 곧 추가될 예정이 없으므로, 이 사용 사례는 PEP의 범위에서 벗어납니다.</li>
</ul>
<p><strong>하지만,</strong> 기존의 읽기 전용 <code>dict</code> 프록시를 내장 타입으로 노출하는 것은 좋은 아이디어로 받아들여졌습니다. (생성자 호출을 허용하도록 변경해야 할 것입니다.)</p>
<p><strong>업데이트 (2012-04-15):</strong> 새로운 <code>MappingProxyType</code> 타입이 Python 3.3의 <code>types</code> 모듈에 추가되었습니다.</p>
<h3>요약 (Abstract)</h3>
<p>새로운 <code>frozendict</code> 내장 타입을 추가하는 것을 제안합니다.</p>
<h3>제안 배경 (Rationale)</h3>
<p><code>frozendict</code>는 읽기 전용 매핑(read-only mapping)입니다. 즉, 키를 추가하거나 제거할 수 없으며, 키는 항상 동일한 값에 매핑됩니다. 하지만 <code>frozendict</code>의 값은 해시 가능하지 않을 수 있습니다. <code>frozendict</code>는 모든 값이 해시 가능할 때만 해시 가능합니다.</p>
<p><strong>사용 사례:</strong></p>
<ul>
<li>기본 설정과 같은 변경 불가능한 전역 변수(immutable global variable)로 사용합니다.</li>
<li>함수 매개변수의 기본값으로 사용하여 가변 기본 인자(mutable default arguments) 문제를 피합니다.</li>
<li>캐시를 구현합니다. <code>frozendict</code>는 함수 키워드를 저장하는 데 사용될 수 있습니다.</li>
<li>매핑의 키 또는 집합(set)의 멤버로 <code>frozendict</code>를 사용할 수 있습니다.</li>
<li>여러 스레드나 프로세스에 의해 <code>frozendict</code>가 공유될 때, 특히 해시 가능한 <code>frozendict</code>의 경우 잠금(lock)이 필요 없게 합니다. 이는 코루틴(제너레이터 + 그린렛)이 전역 상태를 수정하는 것을 금지하는 데도 도움이 될 것입니다.</li>
<li><code>frozendict</code> 조회(lookup)는 매핑이 읽기 전용이므로 런타임 대신 컴파일 시간에 수행될 수 있습니다.</li>
<li><code>frozendict</code>는 디버그 빌드(debug build)에 특정한 코드와 같이 조건부 코드를 컴파일 시점에 제거하기 위한 전처리기(preprocessor) 대신 사용될 수 있습니다.</li>
<li><code>frozendict</code>는 보안 모듈을 위한 읽기 전용 객체 프록시(read-only object proxies)를 구현하는 데 도움이 됩니다. 예를 들어, <code>__builtins__</code> 매핑 또는 <code>type.__dict__</code>에 <code>frozendict</code> 타입을 사용하는 것이 가능했을 것입니다. 이는 <code>frozendict</code>가 PyDict C API와 호환되기 때문입니다.</li>
<li><code>frozendict</code>는 일부 경우에 읽기 전용 프록시의 필요성을 피하게 합니다. <code>frozendict</code>에서 항목을 가져오는 것은 빠른 조회인 반면, 프록시는 함수 호출을 요구하므로 <code>frozendict</code>가 프록시보다 빠릅니다.</li>
</ul>
<h3>제약 조건 (Constraints)</h3>
<ul>
<li><code>frozendict</code>는 <code>Mapping</code> 추상 기본 클래스를 구현해야 합니다.</li>
<li><code>frozendict</code>의 키와 값은 순서가 정해지지 않을 수 있습니다.</li>
<li><code>frozendict</code>는 모든 키와 값이 해시 가능할 때 해시 가능합니다.</li>
<li><code>frozendict</code>의 해시 값은 항목 생성 순서에 의존하지 않습니다.</li>
</ul>
<h3>구현 (Implementation)</h3>
<ul>
<li><code>PyDictObject</code>를 기반으로 <code>PyFrozenDictObject</code> 구조체를 추가하며, 추가적으로 "<code>Py_hash_t hash;</code>" 필드를 가집니다.</li>
<li><code>frozendict.__hash__()</code>는 <code>hash(frozenset(self.items()))</code>를 사용하여 구현되며, 결과를 개인 해시 속성(private hash attribute)에 캐시합니다.</li>
<li><code>frozendict</code>를 <code>collections.abc.Mapping</code>으로 등록합니다.</li>
<li><code>frozendict</code>는 <code>PyDict_GetItem()</code>과 함께 사용될 수 있지만, <code>PyDict_SetItem()</code> 및 <code>PyDict_DelItem()</code>은 <code>TypeError</code>를 발생시킵니다.</li>
</ul>
<h3>해시 가능한 dict 레시피 (Recipe: hashable dict)</h3>
<p><code>frozendict</code>가 해시 가능하도록 보장하려면, <code>frozendict</code>를 생성하기 전에 값을 확인할 수 있습니다.</p>
<pre><code class="language-python">import itertools

def hashabledict(*args, **kw):
    # 모든 값이 해시 가능한지 확인
    for key, value in itertools.chain(args, kw.items()):
        if isinstance(value, (int, str, bytes, float, frozenset, complex)):
            # 해시 가능한 것으로 알려진 내장 타입의 경우 해시 계산을 피함 (느릴 수 있음)
            continue
        hash(value) # 키는 이미 frozendict가 확인하므로 검사하지 않음
    return frozendict.__new__(cls, *args, **kw)
</code></pre>
<h3>반대 의견 (Objections)</h3>
<ul>
<li>
<p><strong><code>namedtuple</code>이 <code>frozendict</code>의 요구사항을 충족할 수 있다?</strong></p>
<ul>
<li><code>namedtuple</code>은 매핑이 아니며, <code>Mapping</code> 추상 기본 클래스를 구현하지 않습니다.</li>
</ul>
</li>
<li>
<p><strong><code>frozendict</code>는 "디스크립터(descriptors)"를 사용하여 Python으로 구현될 수 있고, "실질적으로 상수(practically constant)"이기만 하면 된다?</strong></p>
<ul>
<li><code>frozendict</code>가 Python을 강화(보안 목적)하는 데 사용된다면, C로 구현되어야 합니다. C로 구현된 타입이 더 빠릅니다.</li>
</ul>
</li>
<li>
<p><strong>PEP 351이 거부되었다?</strong></p>
<ul>
<li>PEP 351은 객체를 "고정(freeze)"하려고 시도하며, 따라서 가변 객체를 변경 불가능한 객체(다른 타입을 사용하여)로 변환할 수 있습니다. <code>frozendict</code>는 아무것도 변환하지 않습니다. 만약 값이 해시 가능하지 않다면 <code>hash(frozendict)</code>는 <code>TypeError</code>를 발생시킵니다. 객체를 고정하는 것은 이 PEP의 목적이 아닙니다.</li>
</ul>
</li>
</ul>
<h3>대안: dictproxy (Alternative: dictproxy)</h3>
<p>Python에는 <code>type.__dict__</code> 게터 디스크립터(getter descriptor)에 의해 사용되는 내장 <code>dictproxy</code> 타입이 있습니다. 이 타입은 공개되지 않습니다. <code>dictproxy</code>는 딕셔너리의 읽기 전용 뷰(read-only view)이지만, 읽기 전용 매핑은 아닙니다. 딕셔너리가 수정되면 <code>dictproxy</code>도 수정됩니다.</p>
<p><code>dictproxy</code>는 <code>ctypes</code>와 Python C API를 사용하여 사용할 수 있습니다. 예를 들어, Ikkei Shimomura의 "make dictproxy object via ctypes.pythonapi and type() (Python recipe 576540)"를 참조하세요. 이 레시피에는 <code>dictproxy</code>가 "가변(mutable)"인지 확인하는 테스트가 포함되어 있습니다.</p>
<p>그러나 <code>dictproxy</code>는 그 가변성(mutable property)이 문제가 되지 않는 일부 경우에 딕셔너리 복사를 피하기 위해 유용할 수 있습니다.</p>
<h3>기존 구현 사례 (Existing implementations)</h3>
<p><strong>화이트리스트(Whitelist) 접근 방식:</strong></p>
<ul>
<li>Aristotelis Mikropoulos의 "Implementing an Immutable Dictionary (Python recipe 498072)". <code>frozendict</code>와 유사하지만 완전히 읽기 전용은 아닙니다. 개인 내부 <code>dict</code>에 접근할 수 있습니다. <code>__hash__</code>를 구현하지 않으며, <code>__init__()</code>를 다시 호출하여 매핑을 수정할 수 있는 구현 문제가 있습니다.</li>
<li>PyWebmail의 <code>ImmutableDict</code> 타입 (<code>webmail.utils.ImmutableDict</code>). 키와 값이 해시 가능하면 해시 가능합니다. 완전히 읽기 전용은 아닙니다. 내부 <code>dict</code>는 공개 속성입니다.</li>
<li><code>remember</code> 프로젝트의 <code>remember.dicts.FrozenDict</code>. 캐시를 구현하는 데 사용됩니다. <code>FrozenDict</code>는 함수 콜백을 저장하는 데 사용됩니다. <code>FrozenDict</code>는 해시 가능할 수 있습니다. 딕셔너리를 복사하지 않고 <code>dict</code>로부터 <code>FrozenDict</code>를 생성하는 <code>supply_dict()</code> 클래스 메서드를 가지고 있습니다. <code>__init__()</code>를 호출하여 매핑을 수정할 수 있고, 해시 값이 항목 생성 순서에 따라 달라질 수 있는 구현 문제가 있습니다. 매핑은 완전히 읽기 전용이 아니며, 내부 <code>dict</code>는 Python에서 접근 가능합니다.</li>
</ul>
<p><strong>블랙리스트(Blacklist) 접근 방식: <code>dict</code>를 상속하고 쓰기 메서드를 오버라이드하여 예외를 발생시키는 방식.</strong> 완전히 읽기 전용은 아니며, 여전히 그러한 "고정된 딕셔너리"에 <code>dict</code> 메서드를 호출하여 수정할 수 있습니다.</p>
<ul>
<li><code>brownie</code>: <code>brownie.datastructures.ImmutableDict</code>. 키와 값이 해시 가능하면 해시 가능합니다.</li>
<li><code>werkzeug</code> 프로젝트도 동일한 코드를 가집니다: <code>werkzeug.datastructures.ImmutableDict</code>. <code>ImmutableDict</code>는 전역 상수(설정 옵션)에 사용됩니다. Flask 프로젝트는 <code>werkzeug</code>의 <code>ImmutableDict</code>를 기본 설정에 사용합니다.</li>
<li>SQLAlchemy 프로젝트: <code>sqlalchemy.util.immutabledict</code>. 해시 가능하지 않으며, <code>union()</code>이라는 추가 메서드를 가집니다. <code>immutabledict</code>는 매핑을 기대하는 일부 함수의 매개변수 기본값으로 사용됩니다. 예: <code>SqlSoup.map()</code>의 <code>mapper_args=immutabledict()</code>.</li>
<li>Oren Tirosh의 "Frozen dictionaries (Python recipe 414283)". 키와 값이 해시 가능하면 해시 가능합니다. 다음 프로젝트에 포함되어 있습니다:
<ul>
<li><code>lingospot</code>: <code>frozendict/frozendict.py</code></li>
<li><code>factor-graphics</code>: <code>python/fglib/util_ext_frozendict.py</code>의 <code>frozendict</code> 타입</li>
</ul>
</li>
<li>George Sakkis가 작성한 <code>gsakkis-utils</code> 프로젝트에는 <code>frozendict</code> 타입이 포함되어 있습니다: <code>datastructs.frozendict</code>.</li>
<li><code>characters</code>: <code>scripts/python/frozendict.py</code>. 해시 가능합니다. <code>__init__()</code>는 <code>__init__</code>을 <code>None</code>으로 설정합니다.</li>
<li>이전 NLTK (1.x): <code>nltk.util.frozendict</code>. 키와 값은 해시 가능해야 합니다. <code>__init__()</code>는 매핑을 수정하기 위해 두 번 호출될 수 있습니다. <code>frozendict</code>는 객체를 "고정"하는 데 사용됩니다.</li>
</ul>
<p><strong>해시 가능한 <code>dict</code>: <code>dict</code>를 상속하고 <code>__hash__</code> 메서드만 추가하는 방식.</strong></p>
<ul>
<li><code>pypy.rpython.lltypesystem.lltype.frozendict</code>. 해시 가능하지만 매핑의 수정을 거부하지는 않습니다.</li>
<li><code>factor-graphics</code>: <code>python/fglib/util_ext_frozendict.py</code>의 <code>hashabledict</code> 타입.</li>
</ul>
<h3>링크 (Links)</h3>
<ul>
<li>Issue #14162: PEP 416: Add a builtin frozendict type</li>
<li>PEP 412: Key-Sharing Dictionary (issue #13903)</li>
<li>PEP 351: The freeze protocol</li>
<li>The case for immutable dictionaries; and the central misunderstanding of PEP 351</li>
<li>make dictproxy object via ctypes.pythonapi and type() (Python recipe 576540) by Ikkei Shimomura.</li>
<li>C 확장을 사용하여 읽기 전용 객체 프록시를 구현하는 Python 보안 모듈:
<ul>
<li><code>pysandbox</code></li>
<li><code>mxProxy</code></li>
<li><code>zope.proxy</code></li>
<li><code>zope.security</code></li>
</ul>
</li>
</ul>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인에 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Rejected] PEP 416 - Add a frozendict builtin type"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 21:34:46+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
