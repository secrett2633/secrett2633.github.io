3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/440","c"]
0:["SAPzS3zi9tsG5MkeKvxIA",[[["",{"children":[["slug","python/pep/440","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"440\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/440","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T52a0,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0440/">PEP 440 - Version Identification and Dependency Specification</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 18-Mar-2013</p>
</blockquote>
<h2>PEP 440 – 버전 식별 및 의존성 명세 (Version Identification and Dependency Specification)</h2>
<h3>개요 (Abstract)</h3>
<p>이 PEP는 Python 소프트웨어 배포판의 버전을 식별하고 특정 버전에 대한 의존성을 선언하는 표준화된 체계를 설명합니다. 이 문서는 이전 버전 관리 표준화 시도인 PEP 345 및 PEP 386의 여러 한계점을 다루고 있습니다.</p>
<h3>정의 (Definitions)</h3>
<ul>
<li><strong>프로젝트 (Projects):</strong> 통합을 위해 제공되는 소프트웨어 구성 요소입니다. Python 라이브러리, 프레임워크, 스크립트, 플러그인, 애플리케이션, 데이터 또는 기타 리소스 모음 등이 포함됩니다. 공개 Python 프로젝트는 일반적으로 Python Package Index (PyPI)에 등록됩니다.</li>
<li><strong>릴리스 (Releases):</strong> 프로젝트의 고유하게 식별되는 스냅샷입니다.</li>
<li><strong>배포판 (Distributions):</strong> 릴리스를 게시하고 배포하는 데 사용되는 패키지 파일입니다.</li>
<li><strong>빌드 도구 (Build tools):</strong> 개발 시스템에서 실행되어 소스 및 바이너리 배포 아카이브를 생성하는 자동화된 도구입니다.</li>
<li><strong>인덱스 서버 (Index servers):</strong> 버전 및 의존성 메타데이터를 게시하고 허용되는 메타데이터에 제약을 가하는 활성 배포 레지스트리입니다.</li>
<li><strong>설치 도구 (Installation tools):</strong> 배포 대상에서 실행되도록 특별히 고안된 통합 도구로, 인덱스 서버 또는 기타 지정된 위치에서 소스 및 바이너리 배포 아카이브를 사용하고 대상 시스템에 배포합니다.</li>
<li><strong>자동화된 도구 (Automated tools):</strong> 빌드 도구, 인덱스 서버, 게시 도구, 통합 도구 및 배포 버전 및 의존성 메타데이터를 생성하거나 사용하는 기타 모든 소프트웨어를 포함하는 총칭입니다.</li>
</ul>
<h3>버전 체계 (Version Scheme)</h3>
<p>배포판은 모든 정의된 버전 비교 작업을 지원하는 공개 버전 식별자로 식별됩니다. 이 버전 체계는 특정 배포 아카이브가 제공하는 배포 버전을 설명하는 데 사용될 뿐만 아니라 소프트웨어를 빌드하거나 실행하는 데 필요한 의존성 버전에 대한 제약을 설정하는 데도 사용됩니다.</p>
<h4>공개 버전 식별자 (Public version identifiers)</h4>
<p>표준 공개 버전 식별자는 다음 체계를 따라야 합니다.</p>
<p><code>[N!]N(.N)*[{a|b|rc}N][.postN][.devN]</code></p>
<p>공개 버전 식별자는 선행 또는 후행 공백을 포함해서는 안 됩니다. 또한 주어진 배포판 내에서 고유해야 합니다.</p>
<p>설치 도구는 이 체계를 따르지 않는 공개 버전을 무시해야 하지만, 아래에 명시된 정규화(normalization)를 포함해야 합니다.</p>
<p>공개 버전 식별자는 최대 5개의 세그먼트로 나뉩니다.</p>
<ul>
<li><strong>Epoch 세그먼트 (Epoch segment):</strong> <code>N!</code></li>
<li><strong>릴리스 세그먼트 (Release segment):</strong> <code>N(.N)*</code></li>
<li><strong>프리-릴리스 세그먼트 (Pre-release segment):</strong> <code>{a|b|rc}N</code></li>
<li><strong>포스트-릴리스 세그먼트 (Post-release segment):</strong> <code>.postN</code></li>
<li><strong>개발 릴리스 세그먼트 (Development release segment):</strong> <code>.devN</code></li>
</ul>
<p>모든 숫자 구성 요소는 ASCII 숫자의 시퀀스로 표현된 음이 아닌 정수여야 합니다. 또한 텍스트 문자열이 아닌 숫자 값에 따라 해석되고 정렬되어야 합니다.</p>
<h4>로컬 버전 식별자 (Local version identifiers)</h4>
<p>로컬 버전 식별자는 다음 체계를 따라야 합니다.</p>
<p><code>&#x3C;public version identifier>[+&#x3C;local version label>]</code></p>
<p>이는 일반적인 공개 버전 식별자(이전 섹션에서 정의됨)와 임의의 "로컬 버전 레이블"로 구성되며, 더하기 기호(+)로 구분됩니다. 로컬 버전 레이블에는 특정 의미가 할당되지 않지만, 일부 구문 제한이 적용됩니다.</p>
<p>로컬 버전 식별자는 상위 프로젝트의 완전히 API (및 해당되는 경우 ABI) 호환 패치 버전을 나타내는 데 사용됩니다.</p>
<p>로컬 버전 레이블은 다음 허용 문자 집합으로 제한되어야 합니다.</p>
<ul>
<li>ASCII 문자 (<code>[a-zA-Z]</code>)</li>
<li>ASCII 숫자 (<code>[0-9]</code>)</li>
<li>마침표 (<code>.</code>)</li>
</ul>
<p>로컬 버전 레이블은 ASCII 문자 또는 숫자로 시작하고 끝나야 합니다.</p>
<h4>최종 릴리스 (Final releases)</h4>
<p>릴리스 세그먼트와 선택적으로 epoch 식별자로만 구성된 버전 식별자를 "최종 릴리스"라고 합니다.</p>
<p>릴리스 세그먼트는 점으로 구분된 하나 이상의 음이 아닌 정수 값으로 구성됩니다.</p>
<p><code>N(.N)*</code></p>
<p>프로젝트 내의 최종 릴리스는 일관되게 증가하는 방식으로 번호가 매겨져야 합니다. 그렇지 않으면 자동화된 도구가 올바르게 업그레이드할 수 없습니다.</p>
<h4>프리-릴리스 (Pre-releases)</h4>
<p>일부 프로젝트는 최종 릴리스 이전에 사용자 테스트를 지원하기 위해 "알파, 베타, 릴리스 후보" 프리-릴리스 주기를 사용합니다.</p>
<p>프로젝트의 개발 주기 일부로 사용되는 경우, 이러한 프리-릴리스는 버전 식별자에 프리-릴리스 세그먼트를 포함하여 표시됩니다.</p>
<ul>
<li><code>X.YaN</code> (알파 릴리스)</li>
<li><code>X.YbN</code> (베타 릴리스)</li>
<li><code>X.YrcN</code> (릴리스 후보)</li>
<li><code>X.Y</code> (최종 릴리스)</li>
</ul>
<p>릴리스 세그먼트와 프리-릴리스 세그먼트로만 구성된 버전 식별자를 "프리-릴리스"라고 합니다.</p>
<h4>포스트-릴리스 (Post-releases)</h4>
<p>일부 프로젝트는 배포된 소프트웨어에 영향을 미치지 않는 최종 릴리스의 사소한 오류(예: 릴리스 노트의 오류 수정)를 해결하기 위해 포스트-릴리스를 사용합니다.</p>
<p>프로젝트의 개발 주기 일부로 사용되는 경우, 이러한 포스트-릴리스는 버전 식별자에 포스트-릴리스 세그먼트를 포함하여 표시됩니다.</p>
<p><code>X.Y.postN</code> (포스트-릴리스)</p>
<p>개발 릴리스 세그먼트 없이 포스트-릴리스 세그먼트를 포함하는 버전 식별자를 "포스트-릴리스"라고 합니다.</p>
<h4>개발 릴리스 (Developmental releases)</h4>
<p>일부 프로젝트는 정기적인 개발 릴리스를 수행하며, 시스템 패키지 관리자(특히 Linux 배포판의 경우)는 나중에 나올 프로젝트 릴리스와 충돌하지 않는 소스 컨트롤에서 직접 초기 릴리스를 생성할 수 있습니다.</p>
<p>프로젝트의 개발 주기 일부로 사용되는 경우, 이러한 개발 릴리스는 버전 식별자에 개발 릴리스 세그먼트를 포함하여 표시됩니다.</p>
<p><code>X.Y.devN</code> (개발 릴리스)</p>
<p>개발 릴리스 세그먼트를 포함하는 버전 식별자를 "개발 릴리스"라고 합니다.</p>
<h4>버전 Epoch (Version epochs)</h4>
<p>버전 식별자에 포함되는 경우, epoch는 다른 모든 구성 요소 이전에 나타나며 느낌표(<code>!</code>)로 릴리스 세그먼트와 구분됩니다.</p>
<p><code>E!X.Y</code> (epoch가 있는 버전 식별자)</p>
<p>명시적인 epoch가 주어지지 않으면 암시적인 epoch는 <code>0</code>입니다. 대부분의 버전 식별자는 epoch를 포함하지 않습니다. 명시적인 epoch는 프로젝트가 버전 번호 지정 방식을 변경하여 일반적인 버전 정렬 규칙이 잘못된 결과를 제공하는 경우에만 필요합니다.</p>
<h4>정규화 (Normalization)</h4>
<p>기존 버전과의 더 나은 호환성을 유지하기 위해 버전을 파싱할 때 고려해야 할 여러 "대체" 구문이 있습니다. 이러한 구문은 버전을 파싱할 때 고려되어야 하지만, 위에서 정의된 표준 구문으로 "정규화"되어야 합니다.</p>
<ul>
<li><strong>대소문자 구분 (Case sensitivity):</strong> 모든 ASCII 문자는 버전 내에서 대소문자를 구분하지 않고 해석되어야 하며, 표준 형식은 소문자입니다. (예: <code>1.1RC1</code>은 <code>1.1rc1</code>로 정규화됩니다.)</li>
<li><strong>정수 정규화 (Integer Normalization):</strong> 모든 정수는 <code>int()</code> 내장 함수를 통해 해석되며 출력의 문자열 형식으로 정규화됩니다. (예: <code>00</code>은 <code>0</code>으로 정규화됩니다.)</li>
<li><strong>프리-릴리스 구분자 (Pre-release separators):</strong> 프리-릴리스는 릴리스 세그먼트와 프리-릴리스 세그먼트 사이에 <code>.</code> , <code>-</code> 또는 <code>_</code> 구분자를 허용합니다. 표준 형식은 구분자가 없는 것입니다.</li>
<li><strong>프리-릴리스 철자 (Pre-release spelling):</strong> 프리-릴리스는 <code>a</code>, <code>b</code>, <code>rc</code>에 대해 <code>alpha</code>, <code>beta</code>, <code>c</code>, <code>pre</code>, <code>preview</code>와 같은 추가 철자를 허용합니다.</li>
<li><strong>암시적 프리-릴리스 번호 (Implicit pre-release number):</strong> 프리-릴리스는 숫자를 생략할 수 있으며, 이 경우 암시적으로 <code>0</code>으로 가정됩니다.</li>
<li><strong>포스트-릴리스 구분자 (Post release separators):</strong> 포스트-릴리스는 <code>.</code> , <code>-</code> 또는 <code>_</code> 구분자를 허용하며 구분자를 모두 생략하는 것도 허용합니다. 표준 형식은 <code>.</code> 구분자를 사용하는 것입니다.</li>
<li><strong>포스트-릴리스 철자 (Post release spelling):</strong> 포스트-릴리스는 <code>rev</code> 및 <code>r</code>과 같은 추가 철자를 허용합니다.</li>
<li><strong>암시적 포스트-릴리스 번호 (Implicit post release number):</strong> 포스트-릴리스는 숫자를 생략할 수 있으며, 이 경우 암시적으로 <code>0</code>으로 가정됩니다.</li>
<li><strong>암시적 포스트-릴리스 (Implicit post releases):</strong> 포스트-릴리스는 포스트 식별자를 모두 생략할 수 있습니다. 이 형식을 사용할 때 구분자는 반드시 <code>-</code>여야 하며 다른 형식은 허용되지 않습니다.</li>
<li><strong>개발 릴리스 구분자 (Development release separators):</strong> 개발 릴리스는 <code>.</code> , <code>-</code> 또는 <code>_</code> 구분자를 허용하며 구분자를 모두 생략하는 것도 허용합니다. 표준 형식은 <code>.</code> 구분자를 사용하는 것입니다.</li>
<li><strong>암시적 개발 릴리스 번호 (Implicit development release number):</strong> 개발 릴리스는 숫자를 생략할 수 있으며, 이 경우 암시적으로 <code>0</code>으로 가정됩니다.</li>
<li><strong>로컬 버전 세그먼트 (Local version segments):</strong> 로컬 버전에서는 세그먼트 구분자로 <code>.</code> 외에 <code>-</code>와 <code>_</code>의 사용도 허용됩니다. 표준 형식은 <code>.</code> 문자를 사용하는 것입니다.</li>
<li><strong>선행 <code>v</code> 문자 (Preceding v character):</strong> 일반적인 버전 표기인 <code>v1.0</code>을 지원하기 위해 버전 앞에 단일 리터럴 <code>v</code> 문자가 올 수 있습니다. 이 문자는 모든 목적을 위해 무시되어야 하며, 버전의 모든 정규화된 형식에서 생략되어야 합니다.</li>
<li><strong>선행 및 후행 공백 (Leading and Trailing Whitespace):</strong> 선행 및 후행 공백은 묵시적으로 무시되고 버전의 모든 정규화된 형식에서 제거되어야 합니다.</li>
</ul>
<h4>호환 버전 체계 예시 (Examples of compliant version schemes)</h4>
<ul>
<li><strong>간단한 "major.minor" 버전 관리:</strong> <code>0.1</code>, <code>0.2</code>, <code>0.3</code>, <code>1.0</code>, <code>1.1</code> ...</li>
<li><strong>간단한 "major.minor.micro" 버전 관리:</strong> <code>1.1.0</code>, <code>1.1.1</code>, <code>1.1.2</code>, <code>1.2.0</code> ...</li>
<li><strong>알파, 베타, 후보 프리-릴리스를 포함하는 "major.minor" 버전 관리:</strong> <code>0.9</code>, <code>1.0a1</code>, <code>1.0a2</code>, <code>1.0b1</code>, <code>1.0rc1</code>, <code>1.0</code>, <code>1.1a1</code> ...</li>
</ul>
<h3>버전 지정자 (Version specifiers)</h3>
<p>버전 지정자는 쉼표로 구분된 일련의 버전 절로 구성됩니다. 예를 들어:</p>
<p><code>~= 0.9, >= 1.0, != 1.3.4.*, &#x3C; 2.0</code></p>
<p>비교 연산자는 버전 절의 종류를 결정합니다.</p>
<ul>
<li><code>~=</code> : 호환 릴리스 절 (Compatible release clause)</li>
<li><code>==</code> : 버전 일치 절 (Version matching clause)</li>
<li><code>!=</code> : 버전 제외 절 (Version exclusion clause)</li>
<li><code>&#x3C;=</code>, <code>>=</code> : 포괄적 순서 비교 절 (Inclusive ordered comparison clause)</li>
<li><code>&#x3C;</code>, <code>></code> : 배타적 순서 비교 절 (Exclusive ordered comparison clause)</li>
<li><code>===</code> : 임의 동등성 절 (Arbitrary equality clause)</li>
</ul>
<p>쉼표(<code>,</code>)는 논리 <code>and</code> 연산자와 같습니다. 후보 버전은 지정자 전체와 일치하기 위해 모든 주어진 버전 절과 일치해야 합니다.</p>
<h4>호환 릴리스 (<code>~=</code>) (Compatible release)</h4>
<p>호환 릴리스 절은 호환 릴리스 연산자 <code>~=</code>와 버전 식별자로 구성됩니다. 이는 지정된 버전과 호환될 것으로 예상되는 모든 후보 버전과 일치합니다.</p>
<p>예를 들어, <code>~= 2.2</code>는 <code>2.2</code> 이상이지만 <code>3.0</code> 미만인 버전을 의미합니다.</p>
<h4>버전 일치 (<code>==</code>) (Version matching)</h4>
<p>버전 일치 절은 버전 일치 연산자 <code>==</code>와 버전 식별자를 포함합니다. 기본적으로 버전 일치 연산자는 엄격한 동등성 비교를 기반으로 합니다.</p>
<p><code>== 1.1.*</code>와 같이 후행 <code>.*</code>를 추가하여 접두사 일치를 요청할 수 있습니다.</p>
<h4>버전 제외 (<code>!=</code>) (Version exclusion)</h4>
<p>버전 제외 절은 버전 제외 연산자 <code>!=</code>와 버전 식별자를 포함합니다. 허용되는 버전 식별자와 비교 의미론은 버전 일치 연산자와 동일하지만, 일치의 의미가 반전됩니다.</p>
<h4>프리-릴리스 처리 (Handling of pre-releases)</h4>
<p>개발 릴리스를 포함한 모든 종류의 프리-릴리스는 다음 경우를 제외하고 모든 버전 지정자에서 묵시적으로 제외됩니다.</p>
<ul>
<li>시스템에 이미 존재하는 경우</li>
<li>사용자가 명시적으로 요청한 경우</li>
<li>버전 지정자를 충족하는 유일한 사용 가능한 버전이 프리-릴리스인 경우</li>
</ul>
<p>의존성 해결 도구는 기본적으로 다음을 수행해야 합니다.</p>
<ul>
<li>모든 버전 지정자에 대해 이미 설치된 프리-릴리스를 허용합니다.</li>
<li>버전 지정자를 충족하는 최종 또는 포스트 릴리스가 없는 버전 지정자에 대해 원격으로 사용 가능한 프리-릴리스를 허용합니다.</li>
<li>다른 모든 프리-릴리스는 고려 대상에서 제외합니다.</li>
</ul>
<h3>직접 참조 (Direct references)</h3>
<p>일부 자동화된 도구는 일반 버전 지정자의 대안으로 직접 참조 사용을 허용할 수 있습니다. 직접 참조는 지정자 <code>@</code>와 명시적인 URL로 구성됩니다.</p>
<p>예를 들어, 로컬 소스 아카이브는 직접 참조될 수 있습니다.
<code>pip @ file:///localbuilds/pip-1.3.1.zip</code></p>
<p>모든 직접 참조는 보안 전송 메커니즘(예: <code>https</code>)을 지정하고, 확인을 위해 URL에 예상 해시 값을 포함해야 합니다.</p>
<h3>버전 관리 명세 업데이트 (Updating the versioning specification)</h3>
<p>버전 관리 명세는 새로운 PEP 또는 메타데이터 버전 변경 없이 설명을 통해 업데이트될 수 있습니다. 버전 식별 및 비교 구문 및 의미론에 영향을 미치는 모든 기술적 변경은 새로운 PEP에서 정의될 업데이트된 버전 관리 체계를 필요로 합니다.</p>
<h3>PEP 386과의 차이점 요약 (Summary of differences from PEP 386)</h3>
<ul>
<li>버전 지정자에 대한 설명이 버전 관리 PEP로 이동되었습니다.</li>
<li>리소스에 대한 직접 참조를 위한 표준 표기법으로 "직접 참조(direct reference)" 개념이 추가되었습니다.</li>
<li>시스템 통합자가 패치된 빌드를 업스트림 도구에서 지원되는 방식으로 표시하고, 바이너리 배포판의 버전에 빌드 태그를 통합할 수 있도록 "로컬 버전 식별자(local version identifier)" 및 "로컬 버전 레이블(local version label)" 개념이 추가되었습니다.</li>
<li>"호환 릴리스(compatible release)" 절이 추가되었습니다.</li>
<li>접두사 기반 버전 일치를 위한 후행 와일드카드 구문 및 제외가 추가되었습니다.</li>
<li><code>.devN</code> 접미사의 최상위 정렬 위치가 변경되었습니다.</li>
<li>단일 값 버전 번호가 허용되었습니다.</li>
<li>선행 또는 후행 공백의 명시적인 제외가 이루어졌습니다.</li>
<li>날짜 기반 버전에 대한 명시적인 지원이 이루어졌습니다.</li>
<li>PyPI의 기존 버전 메타데이터와의 호환성을 향상시키기 위한 명시적인 정규화 규칙이 추가되었습니다.</li>
<li>프리-릴리스는 이미 존재하거나 의존성을 충족하기 위해 필요한 경우가 아니면 묵시적으로 제외됩니다.</li>
<li>포스트 릴리스는 한정되지 않은 릴리스와 동일하게 처리됩니다.</li>
<li>메타데이터 버전 간의 순서 지정 및 의존성이 논의되었습니다.</li>
<li><code>c</code>에서 <code>rc</code>를 선호하도록 전환되었습니다.</li>
</ul>
<h3>부록 B: 정규 표현식을 사용한 버전 문자열 파싱 (Appendix B : Parsing version strings with regular expressions)</h3>
<p>공개 버전 식별자 섹션에서 언급했듯이, 게시된 버전 식별자는 표준 형식을 사용해야 합니다. 이 섹션에서는 버전이 이미 해당 형식인지 테스트하는 데 사용할 수 있는 정규 표현식과, 그렇지 않은 경우 후속 정규화를 위해 다양한 구성 요소를 추출하는 데 사용할 수 있는 정규 표현식을 제공합니다.</p>
<p>버전 식별자가 표준 형식인지 테스트하는 함수 예시는 다음과 같습니다.</p>
<pre><code class="language-python">import re

def is_canonical(version):
    return re.match(r'^([1-9][0-9]*!)?(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*((a|b|rc)(0|[1-9][0-9]*))?(\.post(0|[1-9][0-9]*))?(\.dev(0|[1-9][0-9]*))?$', version) is not None
</code></pre>
<p>버전 식별자의 구성 요소를 추출하기 위해 <code>packaging</code> 프로젝트에서 정의한 다음 정규 표현식을 사용할 수 있습니다.</p>
<pre><code class="language-python">VERSION_PATTERN = r"""
    v?
    (?:
        (?:(?P&#x3C;epoch>[0-9]+)!)?             # epoch
        (?P&#x3C;release>[0-9]+(?:\.[0-9]+)*)    # release segment
        (?P&#x3C;pre>                            # pre-release
            [-_\.]?
            (?P&#x3C;pre_l>alpha|a|beta|b|preview|pre|c|rc)
            [-_\.]?
            (?P&#x3C;pre_n>[0-9]+)?
        )?
        (?P&#x3C;post>                           # post release
            (?:-(?P&#x3C;post_n1>[0-9]+))
            |
            (?:
                [-_\.]?
                (?P&#x3C;post_l>post|rev|r)
                [-_\.]?
                (?P&#x3C;post_n2>[0-9]+)?
            )
        )?
        (?P&#x3C;dev>                            # dev release
            [-_\.]?
            (?P&#x3C;dev_l>dev)
            [-_\.]?
            (?P&#x3C;dev_n>[0-9]+)?
        )?
    )
    (?:\+(?P&#x3C;local>[a-z0-9]+(?:[-_\.][a-z0-9]+)*))? # local version
"""
_regex = re.compile(
    r"^\s*" + VERSION_PATTERN + r"\s*$",
    re.VERBOSE | re.IGNORECASE,
)
</code></pre>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 440 - Version Identification and Dependency Specification"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 21:53:38+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
