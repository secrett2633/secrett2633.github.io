3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/431","c"]
0:["SAPzS3zi9tsG5MkeKvxIA",[[["",{"children":[["slug","python/pep/431","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"431\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/431","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T30e2,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0431/">PEP 431 - Time zone support improvements</a></p>
<p><strong>상태:</strong> Superseded | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 11-Dec-2012</p>
</blockquote>
<h1>PEP 431 – 시간대 지원 개선</h1>
<h2>개요 (Abstract)</h2>
<p>이 PEP는 Python 표준 라이브러리에 구체적인 시간대 지원을 구현하고, 일광 절약 시간(DST) 변경 시 모호한 시간 지정을 처리하기 위한 시간대 API 개선을 제안했습니다.</p>
<h2>철회 (Withdrawal)</h2>
<p>PEP 431은 오랜 논의 끝에 철회되었습니다. <code>datetime</code> 모듈의 구현에서 문제라고 생각했던 부분이 의도적인 설계 결정으로 밝혀졌기 때문입니다. 예를 들어, <code>datetime</code>은 시간대 산술(time zone arithmetic) 시 DST 전환을 완전히 무시하도록 설계되었으며, 모호한 <code>datetime</code>을 구분하지 않도록 의도되었습니다. 따라서 이 PEP에서 제안했던 <code>is_dst</code> 플래그는 유용한 기능을 할 수 없어 무의미해졌습니다.</p>
<p><strong>업데이트:</strong> 이 PEP는 이후 **PEP 615 "표준 라이브러리의 IANA 시간대 데이터베이스 지원(Support for the IANA Time Zone Database in the Standard Library)"**에 의해 대체되었으며, 이 PEP 615에 따라 Python 3.9에 <code>zoneinfo</code> 모듈이 추가되었습니다.</p>
<h2>제안 (Proposal)</h2>
<h3>구체적인 시간대 지원 (Concrete Time Zone Support)</h3>
<p>Python의 표준 라이브러리는 고정 오프셋을 지원하는 <code>tzinfo</code> 베이스 클래스 외에 구체적인 시간대 구현을 제공하지 않았습니다. 시간대를 제대로 지원하려면 DST 변경을 포함하여 현재 및 과거의 모든 시간대에 대한 데이터베이스가 필요합니다. 그러나 이러한 정보는 자주 변경되므로, Python 릴리스에 포함되더라도 몇 달 안에 구식이 될 수 있습니다.</p>
<p>따라서 시간대 지원은 주로 <code>pytz</code>와 <code>dateutil</code>이라는 두 개의 서드파티 모듈을 통해서만 가능했습니다. 이 두 모듈은 "zoneinfo" 데이터베이스를 포함하고 래핑합니다. "tz" 또는 "The Olsen database"라고도 불리는 이 데이터베이스는 시간대에 대한 사실상의 표준이며, OS X를 포함한 대부분의 Unix 및 Unix 계열 운영 체제에 포함되어 있습니다.</p>
<p>이러한 배경을 바탕으로, PEP 431은 <code>zoneinfo</code> 데이터를 지원하는 코드를 표준 라이브러리에 포함하되, 기본적으로 운영 체제의 <code>zoneinfo</code> 데이터 사본을 사용하도록 제안했습니다. 운영 체제는 일반적으로 자체 업데이트 메커니즘을 통해 이 데이터를 최신 상태로 유지합니다.</p>
<p>Windows와 같이 <code>zoneinfo</code> 데이터베이스를 포함하지 않는 운영 체제의 경우, Python 소스 배포판에 <code>zoneinfo</code> 데이터베이스 사본이 포함되며, 최신 <code>zoneinfo</code> 데이터베이스를 포함하는 배포판은 Python Package Index에서도 제공되어 <code>easy_install</code> 또는 <code>pip</code>과 같은 패키징 도구로 쉽게 설치할 수 있도록 제안되었습니다.</p>
<h3>로컬 시간대 가져오기 (Getting the Local Time Zone)</h3>
<p>Unix 시스템에서는 사용 중인 시간대의 이름을 찾는 표준적인 방법이 없습니다. EST, PDT와 같은 시간대 약어 정보만 제공되는데, 이 약어들은 모호한 경우가 많아 현재 위치한 시간대를 정확히 파악하기 어렵습니다.</p>
<p>그러나 컴파일된 시간대 정보는 <code>/etc/localtime</code>에 위치하므로, 시간대 이름을 모르더라도 올바른 시간대 정보를 가진 로컬 시간대 객체를 생성하는 것이 가능합니다. 이에 따라 <code>datetime</code> 모듈에 로컬 시간대를 반환하는 함수를 제공해야 한다고 제안되었습니다. 이 지원은 Lennart Regebro의 <code>tzlocal</code> 모듈을 새로운 <code>datetime</code> 모듈에 통합함으로써 이루어질 예정이었습니다.</p>
<p>Windows의 경우, 로컬 Windows 시간대 이름을 조회하고, Unicode 컨소시엄에서 제공하는 Windows 시간대 이름과 <code>zoneinfo</code> 시간대 이름 간의 매핑을 사용하여 <code>zoneinfo</code> 시간대로 변환하도록 제안되었습니다.</p>
<h3>모호한 시간 처리 (Ambiguous Times)</h3>
<p>일광 절약 시간(DST)이 해제될 때 시계는 한 시간 뒤로 돌아갑니다. 이로 인해 해당 시간 동안의 시간은 DST 적용 상태와 비적용 상태로 두 번 발생하게 됩니다. 반대로 DST가 시작될 때는 한 시간이 사라집니다.</p>
<p>기존의 시간대 API는 DST 전환 중 발생하는 두 가지 모호한 시간을 구별할 수 없었습니다. 예를 들어, 스톡홀름에서는 <code>2012-10-28 02:00:00</code>이 UTC 기준 <code>2012-10-28 00:00:00</code>과 <code>2012-10-28 01:00:00</code>에 두 번 발생합니다.</p>
<p><code>pytz</code>는 이 문제를 해결하기 위해 <code>tzinfo</code> 객체의 여러 메서드에 <code>is_dst</code> 매개변수를 추가하여 필요할 때 시간을 명확하게 구분할 수 있도록 했습니다. PEP 431은 이러한 <code>is_dst</code> 매개변수를 <code>datetime</code> API의 관련 메서드에 추가하여 이 기능을 <code>datetime</code>에 직접 통합할 것을 제안했습니다.</p>
<h2>구현 API (Implementation API)</h2>
<h3><code>zoneinfo</code> 데이터베이스 (The zoneinfo database)</h3>
<p>Python 소스 제어 시스템의 <code>Lib/tzdata</code> 디렉터리에 최신 버전의 <code>zoneinfo</code> 데이터베이스를 포함하도록 제안되었습니다. 이 데이터베이스는 모든 Python 기능 및 버그 수정 릴리스 전에 업데이트되어야 합니다. 소스에서 설치할 때 이 데이터베이스의 설치를 활성화/비활성화하는 새로운 <code>configure</code> 옵션인 <code>--enable-internal-timezone-database</code> 및 <code>--disable-internal-timezone-database</code>가 구현될 예정이었습니다.</p>
<h3><code>datetime</code> 모듈 변경 사항 (Changes in the datetime module)</h3>
<p>새로운 시간대 지원의 공개 API는 하나의 새 클래스, 하나의 새 함수, 하나의 새 예외 및 네 개의 새 컬렉션을 포함할 예정이었습니다. 또한, <code>datetime</code> 객체의 여러 메서드에 새로운 <code>is_dst</code> 매개변수가 추가될 예정이었습니다.</p>
<h4>새 클래스 <code>dsttimezone</code></h4>
<p>이 클래스는 DST 지원을 구현하는 <code>tzinfo</code> 베이스 클래스의 구체적인 구현을 제공합니다.</p>
<h4>새 함수 <code>zoneinfo(name=None, db_path=None)</code></h4>
<p>이 함수는 유효한 <code>zoneinfo</code> 시간대(예: "US/Eastern", "Europe/Warsaw", "Etc/GMT")를 지정하는 <code>name</code> 문자열을 받습니다. <code>name</code>이 제공되지 않으면 로컬 시간대를 조회합니다. 유효하지 않은 <code>zone</code> 이름이 주어지거나 로컬 시간대를 검색할 수 없으면 <code>UnknownTimeZoneError</code> 예외를 발생시킵니다.</p>
<p>이 함수는 또한 사용할 <code>zoneinfo</code> 데이터베이스의 위치에 대한 선택적 경로인 <code>db_path</code>를 받을 수 있습니다. 지정되지 않은 경우, 함수는 다음 순서로 데이터베이스를 찾습니다:</p>
<ol>
<li><code>tzdata-update</code> 모듈이 설치되어 있는지 확인하고 해당 데이터베이스를 사용합니다.</li>
<li><code>/usr/share/zoneinfo</code>에 데이터베이스가 있으면 사용합니다.</li>
<li><code>Lib/tzdata</code>에 있는 Python 제공 데이터베이스를 사용합니다.</li>
</ol>
<h4>새로운 매개변수 <code>is_dst</code></h4>
<p>DST 전환 시 시간 모호성을 처리하기 위해 여러 메서드에 새로운 <code>is_dst</code> 매개변수가 추가될 예정이었습니다.</p>
<ul>
<li><code>tzinfo.utcoffset(dt, is_dst=False)</code></li>
<li><code>tzinfo.dst(dt, is_dst=False)</code></li>
<li><code>tzinfo.tzname(dt, is_dst=False)</code></li>
<li><code>datetime.astimezone(tz, is_dst=False)</code></li>
</ul>
<p><code>is_dst</code> 매개변수는 <code>False</code>(기본값), <code>True</code>, 또는 <code>None</code>이 될 수 있습니다.</p>
<ul>
<li><code>False</code>: 주어진 <code>datetime</code>이 일광 절약 시간 중이 아닌 것으로 해석되어야 함을 지정합니다. 이는 기존 동작을 유지하기 위한 기본값입니다.</li>
<li><code>True</code>: 주어진 <code>datetime</code>이 일광 절약 시간 중인 것으로 해석되어야 함을 지정합니다.</li>
<li><code>None</code>: 지정된 시간이 DST 전환 중 모호한 경우 <code>AmbiguousTimeError</code> 예외를 발생시킵니다. 또한 DST로 전환할 때 "사라진 시간(missing time)" 중에 시간이 지정된 경우 <code>NonExistentTimeError</code>를 발생시킵니다.</li>
</ul>
<h4>새로운 예외 (New exceptions)</h4>
<ul>
<li><strong><code>UnknownTimeZoneError</code></strong>: <code>KeyError</code>의 서브클래스로, 찾을 수 없는 시간대 지정을 제공할 때 발생합니다.</li>
<li><strong><code>InvalidTimeError</code></strong>: <code>AmbiguousTimeError</code>와 <code>NonExistentTimeError</code>의 기본 클래스 역할을 하며, 이 두 예외를 개별적으로 포착할 수 있게 합니다. <code>ValueError</code>의 서브클래스입니다.</li>
<li><strong><code>AmbiguousTimeError</code></strong>: <code>is_dst</code>를 <code>None</code>으로 설정하고 모호한 <code>datetime</code> 지정을 제공할 때 발생합니다.</li>
<li><strong><code>NonExistentTimeError</code></strong>: <code>is_dst</code>를 <code>None</code>으로 설정하고 일광 절약 시간 때문에 존재하지 않는 시간을 <code>datetime</code> 지정으로 제공할 때 발생합니다.</li>
</ul>
<h4>새로운 컬렉션 (New collections)</h4>
<ul>
<li><code>all_timezones</code>: 사용할 수 있는 시간대 이름의 전체 목록을 알파벳순으로 정렬합니다.</li>
<li><code>common_timezones</code>: 유용하고 현재 사용되는 시간대 목록을 알파벳순으로 정렬합니다.</li>
</ul>
<h3><code>tzdata-update</code> 패키지 (The tzdata-update package)</h3>
<p><code>zoneinfo</code> 데이터베이스는 <code>easy_install</code>/<code>pip</code>/<code>buildout</code>으로 쉽게 설치할 수 있도록 패키징될 예정이었습니다. 이 패키지는 설치에 필요한 코드 외에는 어떠한 Python 코드도 설치하거나 포함하지 않습니다. 내부 데이터베이스와 동일한 도구로 최신 상태를 유지하며, <code>zoneinfo</code> 데이터베이스가 업데이트될 때마다 릴리스되고 동일한 버전 스키마를 사용할 예정이었습니다.</p>
<h2><code>pytz</code> API와의 차이점 (Differences from the pytz API)</h2>
<ul>
<li><code>pytz</code>는 <code>tzinfo</code>에 <code>is_dst</code>가 없다는 점을 해결하기 위해 <code>localize()</code> 및 <code>normalize()</code> 함수를 제공했지만, <code>is_dst</code>가 <code>datetime.tzinfo</code>에 직접 구현되면 더 이상 필요하지 않습니다.</li>
<li><code>pytz</code>의 <code>timezone()</code> 함수는 Python 3.2에서 도입된 <code>timezone</code> 클래스와의 충돌을 피하기 위해 <code>zoneinfo()</code>로 명명될 예정이었습니다. <code>zoneinfo()</code>는 인자 없이 호출될 경우 로컬 시간대를 반환할 예정이었습니다.</li>
<li><code>pytz.StaticTzInfo</code> 클래스는 정적 시간대에 대한 <code>is_dst</code> 지원을 제공했지만, <code>is_dst</code> 지원이 <code>datetime.tzinfo</code>에 포함되면 더 이상 필요하지 않습니다.</li>
<li><code>InvalidTimeError</code>는 <code>ValueError</code>의 서브클래스입니다.</li>
</ul>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인에 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Superseded] PEP 431 - Time zone support improvements"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 21:43:32+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
