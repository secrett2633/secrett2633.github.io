3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/234","c"]
0:["jf5MDuRUbMNVvRN9tv5rq",[[["",{"children":[["slug","python/pep/234","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"234\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/234","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T53ce,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0234/">PEP 234 - Iterators</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 30-Jan-2001</p>
</blockquote>
<h1>PEP 234 – Iterators</h1>
<ul>
<li><strong>작성자:</strong> Ka-Ping Yee, Guido van Rossum</li>
<li><strong>상태:</strong> Final (최종)</li>
<li><strong>유형:</strong> Standards Track</li>
<li><strong>생성일:</strong> 2001년 1월 30일</li>
<li><strong>Python 버전:</strong> 2.1 (Python 2.2에 구현됨)</li>
</ul>
<h2>초록 (Abstract)</h2>
<p>이 문서는 <code>for</code> 루프의 동작을 제어하기 위해 객체가 제공할 수 있는 이터레이션(iteration) 인터페이스를 제안합니다. 루프 동작은 이터레이터 객체를 생성하는 메서드를 제공함으로써 사용자 정의될 수 있습니다. 이터레이터는 호출될 때마다 시퀀스(sequence)의 다음 항목을 생성하는 <code>get next value</code> 연산을 제공하며, 더 이상 항목이 없을 때는 예외를 발생시킵니다.</p>
<p>또한, 딕셔너리의 키(keys)와 파일의 라인(lines)에 대한 특정 이터레이터를 제안하며, <code>dict.has_key(key)</code>를 <code>key in dict</code>로 표현할 수 있도록 하는 제안도 포함합니다.</p>
<p><strong>참고:</strong> 이 PEP는 두 번째 저자(Guido van Rossum)에 의해 거의 전면적으로 다시 작성되었으며, Python 2.2 CVS 트렁크에 체크인된 실제 구현을 설명합니다. 초기 버전의 일부 난해한 제안들은 현재 철회되었으며, 나중에 별도의 PEP의 주제가 될 수 있습니다.</p>
<h2>C API 명세 (C API Specification)</h2>
<ul>
<li>
<p><strong><code>StopIteration</code> 예외 정의:</strong> 이터레이션의 끝을 알리는 새로운 예외 <code>StopIteration</code>이 정의되었습니다.</p>
</li>
<li>
<p><strong><code>tp_iter</code> 슬롯:</strong> 이터레이터를 요청하기 위한 새로운 슬롯 <code>tp_iter</code>가 타입(type) 객체 구조에 추가되었습니다. 이 슬롯은 <code>PyObject *</code> 인수를 하나 받고 <code>PyObject *</code>를 반환하거나 <code>NULL</code>을 반환하는 함수여야 합니다. 이 슬롯을 사용하기 위해 <code>PyObject_GetIter()</code>라는 새로운 C API 함수가 추가되었습니다.</p>
</li>
<li>
<p><strong><code>tp_iternext</code> 슬롯:</strong> 이터레이션의 다음 값을 얻기 위한 새로운 슬롯 <code>tp_iternext</code>가 타입 구조에 추가되었습니다. 이 슬롯을 사용하기 위해 <code>PyIter_Next()</code>라는 새로운 C API 함수가 추가되었습니다. <code>tp_iternext</code> 슬롯이 <code>NULL</code>을 반환하는 경우, 다음과 같은 세 가지 가능성이 있습니다.</p>
<ul>
<li>예외가 설정되지 않음: 이터레이션의 끝을 의미합니다.</li>
<li><code>StopIteration</code> 예외(또는 파생 클래스)가 설정됨: 이터레이션의 끝을 의미합니다.</li>
<li>다른 예외가 설정됨: 일반적인 오류 발생을 의미합니다.</li>
</ul>
<p>상위 레벨 함수인 <code>PyIter_Next()</code>는 <code>StopIteration</code> 예외가 발생하면 이를 지우므로, <code>NULL</code> 반환 조건은 더 간단합니다.</p>
<ul>
<li>예외가 설정되지 않음: 이터레이션이 끝났음을 의미합니다.</li>
<li>예외가 설정됨: 오류가 발생했음을 의미하며, 일반적으로 전파되어야 합니다.</li>
</ul>
</li>
<li>
<p><strong><code>next()</code> 메서드 자동 생성:</strong> C로 구현된 이터레이터는 <code>tp_iternext</code> 슬롯과 유사한 의미를 가진 <code>next()</code> 메서드를 직접 구현해서는 안 됩니다. <code>PyType_Ready()</code>에 의해 타입의 딕셔너리가 초기화될 때, <code>tp_iternext</code> 슬롯의 존재는 해당 슬롯을 래핑(wrapping)하는 <code>next()</code> 메서드가 타입의 <code>tp_dict</code>에 추가되도록 합니다.</p>
</li>
<li>
<p><strong><code>Py_TPFLAGS_HAVE_ITER</code> 플래그:</strong> 바이너리 하위 호환성을 보장하기 위해 <code>tp_flags</code> 필드에 <code>Py_TPFLAGS_HAVE_ITER</code>라는 새로운 플래그가 추가되었습니다. <code>tp_iter</code> 또는 <code>tp_iternext</code> 슬롯에 접근하기 전에 이 플래그를 확인해야 합니다.</p>
</li>
<li>
<p><strong>시퀀스 객체를 위한 폴백(Fallback):</strong> <code>PyObject_GetIter()</code> 함수는 인수가 <code>tp_iter</code> 함수를 구현하지 않는 시퀀스일 경우, 폴백(fallback) 의미론을 구현합니다. 이 경우 가벼운(lightweight) 시퀀스 이터레이터 객체가 구성되어 시퀀스의 항목들을 자연스러운 순서로 이터레이트합니다.</p>
</li>
<li>
<p><strong>바이트코드 변경:</strong> <code>for</code> 루프에 대해 생성되는 Python 바이트코드는 새로운 opcode인 <code>GET_ITER</code>와 <code>FOR_ITER</code>를 사용하도록 변경되었습니다. 이는 루프 변수의 다음 값을 가져오기 위해 시퀀스 프로토콜 대신 이터레이터 프로토콜을 사용합니다.</p>
</li>
<li>
<p><strong>자기 자신을 반환하는 <code>tp_iter</code>:</strong> 이터레이터는 <code>tp_iter</code> 슬롯이 자기 자신에 대한 참조를 반환하도록 구현해야 합니다. 이는 <code>for</code> 루프에서 시퀀스가 아닌 이터레이터를 사용할 수 있게 하기 위해 필요합니다.</p>
</li>
<li>
<p><strong><code>StopIteration</code> 이후 동작:</strong> 이터레이터 구현(C 또는 Python)은 이터레이터가 소진(exhaustion)을 알린 후에는 <code>tp_iternext</code> 또는 <code>next()</code> 메서드에 대한 후속 호출도 계속해서 소진을 알려야 함을 보장해야 합니다.</p>
</li>
</ul>
<h2>Python API 명세 (Python API Specification)</h2>
<ul>
<li><strong><code>StopIteration</code> 예외:</strong> <code>StopIteration</code> 예외는 표준 예외 중 하나로 노출되며, <code>Exception</code>을 상속합니다.</li>
<li><strong><code>iter()</code> 내장 함수:</strong> <code>iter()</code>라는 새로운 내장 함수가 정의되었으며, 두 가지 방식으로 호출할 수 있습니다.
<ul>
<li><code>iter(obj)</code>: <code>PyObject_GetIter(obj)</code>를 호출합니다.</li>
<li><code>iter(callable, sentinel)</code>: <code>callable</code>을 호출하여 새로운 값을 생성하고, 반환 값을 <code>sentinel</code> 값과 비교하는 특별한 종류의 이터레이터를 반환합니다. 반환 값이 <code>sentinel</code>과 같으면 이터레이션의 끝을 알리며 <code>StopIteration</code>이 발생합니다. 같지 않으면 다음 값으로 반환됩니다. <code>callable</code>이 예외를 발생시키면 정상적으로 전파됩니다.</li>
</ul>
</li>
<li><strong>이터레이터 객체의 <code>next()</code> 메서드:</strong> <code>iter()</code> 함수에 의해 반환된 이터레이터 객체는 <code>next()</code> 메서드를 가집니다. 이 메서드는 이터레이션의 다음 값을 반환하거나, 이터레이션의 끝을 알리기 위해 <code>StopIteration</code> 예외를 발생시킵니다. 다른 예외는 오류를 나타내며 정상적으로 전파되어야 합니다.</li>
<li><strong>사용자 정의 이터러블 및 이터레이터:</strong>
<ul>
<li>클래스는 <code>__iter__()</code> 메서드를 정의하여 이터레이션 방식을 정의할 수 있습니다. 이 메서드는 추가 인수를 받지 않고 유효한 이터레이터 객체를 반환해야 합니다.</li>
<li>이터레이터가 되고자 하는 클래스는 두 가지 메서드를 구현해야 합니다: 위에서 설명한 대로 동작하는 <code>next()</code> 메서드와 <code>self</code>를 반환하는 <code>__iter__()</code> 메서드.</li>
</ul>
</li>
<li><strong>두 가지 프로토콜:</strong>
<ul>
<li><code>__iter__()</code> 또는 <code>__getitem__()</code>을 구현하는 객체는 <code>for</code> 루프를 통해 이터레이트될 수 있습니다.</li>
<li><code>next()</code>를 구현하는 객체는 이터레이터로 기능할 수 있습니다.
컨테이너류 객체는 일반적으로 첫 번째 프로토콜을 지원합니다. 이터레이터는 현재 두 프로토콜을 모두 지원해야 합니다.</li>
</ul>
</li>
</ul>
<h2>딕셔너리 이터레이터 (Dictionary Iterators)</h2>
<ul>
<li><strong><code>key in dict</code> 구문:</strong> 딕셔너리는 <code>has_key()</code> 메서드와 동일한 테스트를 구현하는 <code>sq_contains</code> 슬롯을 구현합니다. 이는 <code>if k in dict:</code>와 같이 작성할 수 있음을 의미하며, <code>if dict.has_key(k):</code>와 동등합니다.</li>
<li><strong>딕셔너리 키 이터레이션:</strong> 딕셔너리는 딕셔너리의 키를 효율적으로 이터레이트하는 이터레이터를 반환하는 <code>tp_iter</code> 슬롯을 구현합니다. 이 이터레이션 동안 딕셔너리는 수정되어서는 안 되지만, 기존 키의 값을 설정하는 것은 허용됩니다(삭제나 추가, <code>update()</code> 메서드는 허용되지 않음). 이는 <code>for k in dict:</code>와 같이 작성할 수 있음을 의미하며, <code>for k in dict.keys():</code>보다 훨씬 빠릅니다.</li>
<li><strong>명시적 이터레이터 메서드:</strong> 딕셔너리에 명시적으로 다른 종류의 이터레이터를 반환하는 메서드들이 추가되었습니다.
<ul>
<li><code>for key in dict.iterkeys(): ...</code> (키 이터레이터)</li>
<li><code>for value in dict.itervalues(): ...</code> (값 이터레이터)</li>
<li><code>for key, value in dict.iteritems(): ...</code> (키-값 쌍 이터레이터)
<code>for x in dict</code>는 <code>for x in dict.iterkeys()</code>의 축약형입니다.</li>
</ul>
</li>
</ul>
<h2>파일 이터레이터 (File Iterators)</h2>
<p>파일 객체에 대한 이터레이터 제안은 파일의 라인(line)을 이터레이트하는 일반적인 관용구(idiom)가 보기 흉하고 느리다는 불만에 대한 좋은 해결책을 제공합니다.</p>
<ul>
<li>
<p><strong>파일 라인 이터레이션:</strong> 파일은 <code>iter(f.readline, "")</code>와 동등한 <code>tp_iter</code> 슬롯을 구현합니다. 이는 <code>for line in file: ...</code>와 같이 작성할 수 있음을 의미하며, <code>while 1: line = file.readline(); if not line: break; ...</code>보다 빠릅니다.</p>
</li>
<li>
<p><strong>파괴적인(Destructive) 이터레이터:</strong> 일부 이터레이터는 파괴적(destructive)입니다. 즉, 모든 값을 소비하며, 동일한 값을 독립적으로 이터레이트하는 두 번째 이터레이터를 쉽게 생성할 수 없습니다. 파일을 다시 열거나 <code>seek()</code>를 사용하여 처음으로 이동할 수 있지만, 파이프(pipe)나 스트림 소켓(stream socket)과 같은 일부 파일 유형에서는 이러한 해결책이 작동하지 않습니다.</p>
</li>
<li>
<p><strong>내부 버퍼링 및 제약 사항:</strong> 파일 이터레이터는 내부 버퍼를 사용하므로, 이를 다른 파일 연산(<code>file.readline()</code> 등)과 혼합하면 올바르게 작동하지 않을 수 있습니다. 예를 들어, 두 개의 연속된 <code>for</code> 루프에서 파일 이터레이터를 사용할 때, 첫 번째 루프가 읽어들인 버퍼를 두 번째 루프가 고려하지 않아 예상과 다르게 동작할 수 있습니다. 올바른 사용법은 이터레이터 객체를 변수에 할당하여 재사용하는 것입니다.</p>
<pre><code class="language-python">it = iter(file)
for line in it:
    if line == "\n":
        break
for line in it:
    print(line)
</code></pre>
<p>이러한 제약 사항의 이유는 <code>for line in file</code>이 파일을 라인별로 이터레이트하는 권장되고 표준적인 방법이 되어야 하며, 가능한 한 빨라야 하기 때문입니다. 이터레이터 버전은 이터레이터 내부 버퍼 덕분에 <code>readline()</code>을 호출하는 것보다 훨씬 빠릅니다.</p>
</li>
</ul>
<h2>제안 배경 (Rationale)</h2>
<p>이 제안의 모든 부분이 포함되면, 일관되고 유연한 방식으로 많은 우려 사항을 해결합니다. 주요 장점은 다음과 같습니다.</p>
<ul>
<li>확장 가능한 이터레이터 인터페이스를 제공합니다.</li>
<li>리스트(list) 이터레이션의 성능 향상을 가능하게 합니다.</li>
<li>딕셔너리(dictionary) 이터레이션의 큰 성능 향상을 가능하게 합니다.</li>
<li>요소에 대한 무작위 접근(random access)을 제공하는 척하지 않고, 단순히 이터레이션만을 위한 인터페이스를 제공할 수 있게 합니다.</li>
<li>시퀀스 및 매핑을 에뮬레이트하는 모든 기존 사용자 정의 클래스 및 확장 객체와 하위 호환됩니다.</li>
<li>시퀀스가 아닌 컬렉션(non-sequence collections)을 이터레이트하는 코드를 더 간결하고 읽기 쉽게 만듭니다.</li>
</ul>
<h2>해결된 문제 (Resolved Issues)</h2>
<p>다음 주제들은 합의 또는 BDFL(Benevolent Dictator For Life, Guido van Rossum)의 결정에 따라 해결되었습니다.</p>
<ul>
<li><strong><code>next()</code> 메서드 이름:</strong> <code>next()</code>에 대한 두 가지 대안적 철자(<code>__next__()</code>, <code>__call__()</code>)가 제안되었지만 거부되었습니다.
<ul>
<li><code>__next__()</code> 반대 의견: <code>for</code> 루프에서 많이 사용되지만, 사용자 코드가 <code>next()</code>를 직접 호출할 수도 있으므로 <code>__next__()</code>는 보기 좋지 않습니다. 또한, <code>prev()</code>, <code>current()</code>, <code>reset()</code>과 같은 작업으로 프로토콜을 확장할 가능성이 있는데, 이때 <code>__prev__()</code>, <code>__current__()</code>, <code>__reset__()</code>과 같은 이름은 원하지 않을 것입니다.</li>
<li><code>__call__()</code> 반대 의견 (원래 제안): 문맥을 벗어나면 <code>x()</code>는 읽기 어렵지만, <code>x.next()</code>는 명확합니다. 모든 특수 목적 객체가 가장 일반적인 연산을 위해 <code>__call__()</code>을 사용하려 할 위험이 있으며, 이는 명확성보다 더 많은 혼란을 야기할 수 있습니다.</li>
<li><strong>결정:</strong> <code>next()</code>를 사용합니다. (회고적으로는 <code>__next__()</code>를 사용하고 <code>next(it)</code>와 같은 새로운 내장 함수를 두는 것이 더 좋았을 수도 있지만, Python 2.2에 이미 배포되어 너무 늦었습니다.)</li>
</ul>
</li>
<li><strong>이터레이터 재시작:</strong> 이터레이터를 재시작하는 기능이 요청되었지만, 이는 시퀀스에 대해 <code>iter()</code>를 반복적으로 호출하여 처리해야 하며, 이터레이터 프로토콜 자체를 통해서는 처리하지 않기로 결정되었습니다.</li>
<li><strong><code>StopIteration</code> 예외 비용:</strong> <code>StopIteration</code> 예외가 너무 비싸지 않냐는 의문이 제기되었습니다. <code>StopIteration</code> 예외에 대한 여러 대안(특수 값 <code>End</code>, 이터레이터가 끝났는지 테스트하는 함수 <code>end()</code>, <code>IndexError</code> 재사용)이 제안되었습니다.
<ul>
<li>특수 값 <code>End</code>의 문제점: 시퀀스가 그 특수 값을 포함할 경우, 루프가 경고 없이 조기에 종료될 수 있습니다.</li>
<li><code>end()</code> 함수 호출의 문제점: 이터레이션당 두 번의 호출이 필요하며, 이는 예외 테스트보다 훨씬 비쌉니다.</li>
<li><code>IndexError</code> 재사용의 문제점: 진정한 오류일 수 있는 <code>IndexError</code>가 루프를 조기에 종료함으로써 가려질 수 있어 혼란을 야기할 수 있습니다.</li>
<li><strong>결정:</strong> <code>StopIteration</code> 예외를 사용합니다.</li>
</ul>
</li>
<li><strong>표준 이터레이터 타입:</strong> 모든 이터레이터가 파생되어야 하는 표준 이터레이터 타입에 대한 요청이 있었지만 거부되었습니다. 이는 Python의 방식이 아니라고 판단되었습니다.</li>
<li><strong><code>key in dict</code>의 의미:</strong> <code>dict.has_key(x)</code>와 같은 <code>x in dict</code>의 해석이 가장 유용하다고 판단되었습니다. <code>x in list</code>가 값의 존재 여부를 확인하는 반면, <code>x in dict</code>가 키의 존재 여부를 확인하는 것에 대한 반대가 있었지만, 리스트와 딕셔너리 간의 대칭성이 약하므로 이 주장은 큰 의미가 없다고 결론지었습니다.</li>
<li><strong><code>iter()</code> 이름:</strong> <code>iter()</code>는 축약형이며 <code>iterate()</code>, <code>traverse()</code>와 같은 대안이 제안되었지만 너무 길게 느껴졌습니다. Python은 <code>repr()</code>, <code>str()</code>, <code>len()</code>과 같이 일반적인 내장 함수에 축약형을 사용한 역사가 있습니다.
<ul>
<li><strong>결정:</strong> <code>iter()</code>를 사용합니다.</li>
<li>두 가지 다른 연산(객체에서 이터레이터를 가져오는 것과 센티널 값을 가진 함수를 위한 이터레이터를 만드는 것)에 동일한 이름을 사용하는 것이 다소 보기 흉하다는 의견이 있었지만, 두 연산 모두 이터레이터를 반환하므로 기억하기 쉽다는 이유로 유지되었습니다.</li>
<li><strong>결정:</strong> 내장 함수 <code>iter()</code>는 찾을 센티널(sentinel) 값인 선택적 인수를 받습니다.</li>
</ul>
</li>
<li><strong><code>StopIteration</code> 후 <code>next()</code> 호출:</strong> 특정 이터레이터 객체가 <code>StopIteration</code>을 한 번 발생시킨 후, 후속 <code>next()</code> 호출에서도 계속 <code>StopIteration</code>을 발생시켜야 하는지에 대한 논의가 있었습니다.
<ul>
<li><strong>결정:</strong> <code>StopIteration</code>이 발생한 후에는 <code>it.next()</code>를 호출해도 계속 <code>StopIteration</code>이 발생합니다. (Python 2.2에서는 구현되지 않았지만 Python 2.3에서 수정되었습니다.)</li>
</ul>
</li>
<li><strong>파일 객체가 자기 자신 이터레이터:</strong> 파일 객체가 자체적으로 <code>next()</code> 메서드를 가진 이터레이터가 되어야 한다는 제안이 있었지만, 이는 "끈적한 StopIteration (sticky StopIteration)" 기능을 구현하기 더 어렵게 만들 수 있다는 단점 때문에 잠정적으로 거부되었습니다.</li>
<li><strong>이터레이터 프로토콜 확장 (<code>prev()</code>, <code>current()</code>, <code>rewind()</code> 등):</strong> <code>prev()</code>, <code>current()</code>, <code>finished()</code>, <code>rewind()</code>, <code>__len__()</code>, <code>position()</code> 등 이터레이터 프로토콜 확장에 대한 요청이 있었지만, 많은 경우 임의의 버퍼링을 추가하지 않고는 쉽게 구현할 수 없거나 전혀 합리적으로 구현할 수 없기 때문에 거부되었습니다.</li>
<li><strong><code>for x in dict</code>의 의미:</strong> <code>for x in dict:</code>가 딕셔너리의 키, 값 또는 항목 중 무엇을 할당해야 하는지에 대한 긴 논의가 있었습니다. <code>if x in y</code>와 <code>for x in y</code> 사이의 대칭성은 키를 이터레이트해야 함을 시사했습니다. 실용적인 관점에서 <code>dict.items()</code>와 <code>dict.keys()</code> 사용이 거의 비슷하다는 점, 그리고 <code>dict.keys()</code>를 사용하는 많은 루프가 결국 <code>dict[x]</code>를 통해 해당 값을 사용하는 점을 들어 항목(키와 값)을 이터레이트하는 것이 더 많은 경우를 지원할 수 있다는 주장이 있었습니다. 하지만 Guido van Rossum은 <code>for x in dict</code>와 <code>if x in dict</code> 사이의 일관성이 매우 중요하다고 판단했습니다.
<ul>
<li><strong>결정 (BDFL 결정):</strong> <code>for x in dict</code>는 키를 이터레이트하며, 딕셔너리는 다른 종류의 딕셔너리 이터레이터를 반환하기 위해 <code>iteritems()</code>, <code>iterkeys()</code>, <code>itervalues()</code>를 가집니다. <code>for key, value in dict.iteritems():</code>를 사용하면 항목(items)에 대한 빠른 이터레이션이 가능합니다.</li>
</ul>
</li>
</ul>
<h2>이메일 목록 (Mailing Lists)</h2>
<p>이터레이터 프로토콜은 SourceForge의 다음 메일링 리스트에서 광범위하게 논의되었습니다.</p>
<ul>
<li><code>http://lists.sourceforge.net/lists/listinfo/python-iterators</code></li>
<li>초기에는 Yahoo에서 일부 논의가 이루어졌으며, 아카이브는 여전히 접근 가능합니다.
<ul>
<li><code>http://groups.yahoo.com/group/python-iter</code></li>
</ul>
</li>
</ul>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인(public domain)에 있습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 234 - Iterators"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 17:02:22+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
