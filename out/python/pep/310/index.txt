3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/310","c"]
0:["jf5MDuRUbMNVvRN9tv5rq",[[["",{"children":[["slug","python/pep/310","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"310\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/310","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2be1,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0310/">PEP 310 - Reliable Acquisition/Release Pairs</a></p>
<p><strong>상태:</strong> Rejected | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 18-Dec-2002</p>
</blockquote>
<h2>PEP 310 – 신뢰할 수 있는 자원 획득/해제 쌍</h2>
<p><strong>작성자:</strong> Michael Hudson, Paul Moore
<strong>상태:</strong> Rejected (거부됨)
<strong>유형:</strong> Standards Track
<strong>생성일:</strong> 2002년 12월 18일
<strong>Python 버전:</strong> 2.4</p>
<hr>
<h3>개요 (Abstract)</h3>
<p>다음과 같이 작성하는 데 있어 타이핑 부담을 줄이는 방법이 있으면 좋을 것입니다:</p>
<pre><code class="language-python">the_lock.acquire()
try:
    ....
finally:
    the_lock.release()
</code></pre>
<p>이 PEP는 위 코드를 일반화하는 구문(<code>with</code> 블록)과 "작은 'i'" 인터페이스를 제안합니다.</p>
<h3>발표 (Pronouncement)</h3>
<p>이 PEP는 <a href="https://peps.python.org/pep-0343/">PEP 343</a>에 찬성하여 거부되었습니다.</p>
<h3>제안 배경 (Rationale)</h3>
<p>Python의 예외 처리 철학의 장점 중 하나는 "잘못된" 행동(예: 일부 시스템 호출의 반환 값을 확인하지 않는 것)을 하기 어렵게 만든다는 점입니다. 현재 이러한 이점은 자원 정리(resource cleanup)에는 적용되지 않습니다. 자원(예: 락(lock))을 획득하고 해제하는 현재 구문은 다음과 같습니다:</p>
<pre><code class="language-python">the_lock.acquire()
try:
    ....
finally:
    the_lock.release()
</code></pre>
<p>이 구문은 획득(acquisition)과 해제(release) 사이에 (상당히 커질 수 있는) 코드 블록을 배치하여, 코드가 자원을 올바르게 관리하는지 "한눈에" 확인하기 어렵게 만듭니다. 또 다른 흔한 오류는 <code>acquire</code> 호출을 <code>try</code> 블록 내에 코딩하는 것인데, 이는 <code>acquire</code>가 실패할 경우 락을 잘못 해제하게 만듭니다.</p>
<h3>기본 구문 및 의미 (Basic Syntax and Semantics)</h3>
<p><code>with</code> 문의 구문은 다음과 같습니다:</p>
<p><code>'with' [ var '=' ] expr ':' suite</code></p>
<p>이 문은 다음 일련의 문장과 동일하게 정의됩니다:</p>
<pre><code class="language-python">var = expr
if hasattr(var, "__enter__"):
    var.__enter__()
try:
    suite
finally:
    var.__exit__()
</code></pre>
<p>(<code>__exit__</code> 메서드의 존재는 <code>__enter__</code>와 달리 확인되지 않아 <code>with</code> 문에서 부적절한 객체를 사용하는 경우 오류가 발생하도록 합니다.)</p>
<p>변수가 생략되면 이름 없는 객체가 스택에 할당됩니다. 이 경우 <code>suite</code>는 이름 없는 객체에 접근할 수 없습니다.</p>
<h3>가능한 확장 (Possible Extensions)</h3>
<p>기본 구문에 대한 여러 잠재적 확장이 Python 개발자 목록에서 논의되었습니다. 이 PEP에서 제안하는 해결책에는 이러한 확장 중 어떤 것도 포함되지 않습니다. 많은 경우, 양쪽 방향의 주장이 거의 비슷하게 강력합니다. 이러한 경우, PEP는 항상 단순성을 선택했는데, 이는 추가적인 기능이 필요할 때 기존 <code>try</code> 블록을 사용할 수 있기 때문입니다.</p>
<h4>다중 표현식 (Multiple expressions)</h4>
<p>하나의 <code>with</code> 문 안에 여러 표현식을 허용하는 제안이 있었습니다. <code>__enter__</code> 메서드는 왼쪽에서 오른쪽으로 호출되고, <code>__exit__</code> 메서드는 오른쪽에서 왼쪽으로 호출될 것입니다. 이렇게 하는 이점은 하나 이상의 자원이 관리되는 경우 중첩된 <code>with</code> 문으로 인해 코드가 오른쪽 여백으로 치우칠 수 있다는 것입니다. 이 문제에 대한 해결책은 다른 깊은 중첩의 경우와 동일하게 일부 코드를 별도의 함수로 분리하는 것입니다. 또한, <code>__exit__</code> 메서드 중 하나가 예외를 발생시키는 경우(다른 <code>__exit__</code> 메서드도 호출되어야 하는가?) 발생하는 문제도 다루어야 합니다.</p>
<h4>예외 처리 (Exception handling)</h4>
<p>예외가 발생할 때 호출되고 예외를 처리하거나 다시 발생시킬 수 있는 선택적 <code>__except__</code> 핸들러를 포함하도록 프로토콜을 확장하는 것이 제안되었습니다. 이 확장의 의미론을 정확하고 이해하기 쉽게 만들 수 있을지는 전혀 명확하지 않습니다. 예를 들어, 예외 핸들러가 정의된 경우 <code>try ... except ... else</code>와 동일한 코드가 되어야 하고, 그렇지 않은 경우 <code>try ... finally</code>가 되어야 할까요? 일반적으로 컴파일 시점에 이를 어떻게 결정할 수 있을까요? 대안은 코드를 <code>try ... finally</code> 내부에 <code>try ... except</code>로 확장되는 것으로 정의하는 것입니다. 그러나 이것이 실제 상황에서 올바르게 작동하지 않을 수도 있습니다.</p>
<p>예외 처리에 대해 확인된 유일한 사용 사례는 트랜잭션 처리(정상적인 완료 시 commit, 예외 발생 시 rollback)입니다. 이는 기존의 <code>try ... except ... else</code> 블록으로 처리하는 것이 아마도 더 쉬울 것이므로, 이 PEP는 예외 핸들러에 대한 지원을 포함하지 않습니다.</p>
<h3>구현 시 고려 사항 (Implementation Notes)</h3>
<p><code>with</code> 문과 동일하게 지정된 코드에는 잠재적인 경쟁 조건(race condition)이 있습니다. 예를 들어, <code>__enter__</code> 메서드 호출 완료와 <code>try</code> 블록 시작 사이에 <code>KeyboardInterrupt</code> 예외가 발생하면 <code>__exit__</code> 메서드는 호출되지 않을 것입니다. 이는 자원 누수(resource leaks) 또는 교착 상태(deadlocks)로 이어질 수 있습니다. (XXX Guido는 이러한 종류의 경쟁 조건에 대해 중요하게 생각하며, 이를 처리하기 위해 일부 C 언어 마법을 작성할 예정이라고 언급했습니다. <code>with</code> 문의 구현은 이를 따라야 합니다.)</p>
<h3>미해결 문제 (Open Issues)</h3>
<ul>
<li>
<p>기존 클래스(예: 파일과 유사한 객체 및 락)가 적절한 <code>__enter__</code> 및 <code>__exit__</code> 메서드를 가져야 할까요? 찬성하는 명백한 이유는 편의성(어댑터 불필요)입니다. 반대하는 주장은 내장 파일이 이를 가지지만 (예를 들어) <code>StringIO</code>는 가지지 않는다면, 파일 객체에 "with"를 사용하는 코드를 <code>StringIO</code> 객체와 재사용할 수 없다는 것입니다. 따라서 <code>__exit__ = close</code>는 사용자 정의 클래스가 지원해야 할 수도 있는 "파일과 유사한 객체" 프로토콜의 일부가 됩니다.</p>
</li>
<li>
<p><code>__enter__</code> 훅(hook)은 불필요할 수 있습니다. 많은 사용 사례에서 어댑터 클래스가 필요하며, 이 경우 <code>__enter__</code> 훅이 수행하는 작업은 <code>__init__</code> 훅에서 쉽게 수행될 수 있습니다.</p>
</li>
<li>
<p>객체 수명 주기(lifetimes)를 명시적으로 제어하는 방법이 있다면, <code>__exit__</code> 훅의 기능은 기존 <code>__del__</code> 훅으로 대체될 수 있었을 것입니다. 이 접근 방식의 지지자와의 이메일 교환에서 저자 중 한 명은 이것이 올바른 아이디어가 아니라는 확신을 더욱 굳혔습니다.</p>
</li>
<li>
<p><code>__exit__</code> 메서드를 "close"라고 부르거나, <code>__exit__</code> 메서드가 발견되지 않으면 "close" 메서드를 고려해야 한다고 제안되었습니다. 이는 "with ..." 구문의 "즉시 사용 가능한 유용성"을 높이기 위함입니다.</p>
</li>
<li>
<p><code>with ...</code> 블록과 제너레이터(Generator) 사이에는 개념적으로 유사점이 있으며, 이로 인해 <code>for</code> 루프가 <code>with</code> 블록 기능을 구현할 수 있다는 제안이 있었습니다. 일부 수준에서는 깔끔하지만, 우리는 <code>for</code> 루프는 루프 본연의 기능에 충실해야 한다고 생각합니다.</p>
</li>
</ul>
<h3>대안적 아이디어 (Alternative Ideas)</h3>
<ul>
<li>
<p><strong>IEXEC:</strong> Holger Krekel – XML과 유사한 구문을 가진 일반화된 접근 방식 (URL을 찾을 수 없음). Holger는 모니터링되는 블록의 제어 흐름 세부 정보를 알려주는 "실행 모니터"에 대한 훨씬 더 광범위한 아이디어를 가지고 있습니다. 흥미롭지만, 이러한 아이디어는 언어를 깊고 미묘하게 변경할 수 있으며, 따라서 다른 PEP에 속합니다.</p>
</li>
<li>
<p>모든 Smalltalk/Ruby 익명 블록 스타일 확장은 분명히 이 PEP의 내용을 포함합니다.</p>
</li>
<li>
<p><a href="https://peps.python.org/pep-0319/">PEP 319</a>는 같은 영역에 있지만, python-dev에서 논의되었을 때 지지를 얻지 못했습니다.</p>
</li>
</ul>
<h3>하위 호환성 (Backwards Compatibility)</h3>
<p>이 PEP는 새로운 키워드를 제안하므로 <code>__future__</code> 게임이 필요할 것입니다.</p>
<h3>채택 비용 (Cost of Adoption)</h3>
<ul>
<li>언어가 점점 커지고 복잡해진다고 주장하는 사람들은 또 다른 불평할 거리를 갖게 될 것입니다.</li>
<li>가르쳐야 할 또 다른 내용이 생깁니다.</li>
<li>이 제안이 유용하려면, 표준 라이브러리 및 다른 코드의 많은 파일과 유사한 클래스 및 락과 유사한 클래스에 <code>__exit__ = close</code> 또는 유사한 내용이 추가되어야 할 것입니다.</li>
</ul>
<h3>미채택 비용 (Cost of Non-Adoption)</h3>
<p>올바른 코드를 작성하는 것이 잘못된 코드를 작성하는 것보다 계속해서 더 많은 노력을 필요로 할 것입니다.</p>
<h3>참고 자료 (References)</h3>
<p>이곳에 언급할 수 있는 다양한 python-list 및 python-dev 토론이 있습니다.</p>
<ul>
<li>Michael Hudson과 Bill Soudan 간의 오프리스트 대화 (허가를 받고 공개됨)
<a href="http://starship.python.net/crew/mwh/pep310/">http://starship.python.net/crew/mwh/pep310/</a></li>
<li>Samuele Pedroni의 python-dev 게시물
<a href="https://mail.python.org/pipermail/python-dev/2003-August/037795.html">https://mail.python.org/pipermail/python-dev/2003-August/037795.html</a></li>
<li><code>[Python-Dev] pre-PEP: Resource-Release Support for Generators</code> 제목의 python-dev 스레드 (2003년 8월 시작)
<a href="https://mail.python.org/pipermail/python-dev/2003-August/037803.html">https://mail.python.org/pipermail/python-dev/2003-August/037803.html</a></li>
</ul>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 공용 도메인(public domain)에 있습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Rejected] PEP 310 - Reliable Acquisition/Release Pairs"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 18:11:37+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
