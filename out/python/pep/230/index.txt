3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-19cfc001fdac3337.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-51594f997fc19690.js"],""]
4:["slug","python/pep/230","c"]
0:["FeyCvJug7In7AgUZlfHUx",[[["",{"children":[["slug","python/pep/230","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"230\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/230","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T4d12,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0230/">PEP 230 - Warning Framework</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 28-Nov-2000</p>
</blockquote>
<p>PEP 230 – 경고 프레임워크</p>
<p>이 문서는 Python Enhancement Proposal (PEP) 230의 내용을 한국어 사용자가 이해하기 쉽게 번역하고 정리한 것입니다. Python 개발자들이 이 PEP의 제안 내용, 도입 배경, 그리고 실제 Python 사용에 미치는 영향을 명확하게 이해할 수 있도록 돕는 것이 목표입니다.</p>
<hr>
<h2>초록 (Abstract)</h2>
<p>이 PEP는 경고 메시지를 발행하고 이를 처리하는 방식을 제어하기 위한 C 및 Python 수준의 API와 명령줄 플래그(command line flags)를 제안합니다. 이 제안은 주로 Guido van Rossum (GvR)이 2000년 11월 5일 <code>python-dev</code>에 게시한 제안을 기반으로 하며, 같은 날 Paul Prescod가 게시한 대안 제안(예: 경고 분류에 클래스 사용)에서 몇 가지 아이디어를 통합했습니다. 또한, 이 제안을 구현하려는 시도에서 여러 작은 조정이 이루어졌습니다.</p>
<h2>동기 (Motivation)</h2>
<p>Python 3000이 다가오면서, 오류 외에도 오래되거나 더 이상 사용되지 않는 기능(deprecated features)의 사용에 대해 경고를 발행할 필요성이 생겼습니다. 또한, C 코드와 Python 코드 모두에서, 컴파일 시점과 런타임 시점 모두에서 경고를 발행할 수 있어야 하는 다른 많은 이유들이 있습니다.</p>
<p>경고는 치명적이지 않으므로, 프로그램이 단일 실행 중에 동일한 경고를 여러 번 발생시킬 수 있습니다. 프로그램이 동일한 경고를 끊임없이 출력한다면 번거로울 것입니다. 따라서, 중복되는 동일한 경고를 억제하는 메커니즘이 필요합니다.</p>
<p>어떤 경고를 출력할지 사용자가 제어할 수 있는 것도 바람직합니다. 일반적으로 모든 경고를 항상 보는 것이 유용하지만, 프로덕션 프로그램에서 코드를 즉시 수정하기 어려운 경우가 있을 수 있습니다. 이 경우, 경고를 억제하는 방법이 있어야 합니다.</p>
<p>프로그램 개발 중 특정 경고를 억제할 수 있는 것도 유용합니다. 예를 들어, 즉시 수정할 수 없는 서드파티 코드(3rd party code)에서 경고가 발생하거나, 코드를 수정할 방법이 없는 경우 (완전히 정상적인 코드에 대해 경고 메시지가 생성될 수 있음)가 있습니다. 이러한 경우 모든 경고를 억제하도록 제공하는 것은 현명하지 않습니다. 개발자는 나머지 코드에 대한 경고를 놓칠 수 있기 때문입니다.</p>
<p>반면에, 일부 또는 모든 경고를 오류로 처리하는 것이 더 나은 상황도 생각할 수 있습니다. 예를 들어, 특정 더 이상 사용되지 않는 기능(deprecated feature)이 사용되어서는 안 된다는 로컬 코딩 표준이 있을 수 있습니다. 이를 강제하기 위해, 이 특정 기능에 대한 경고를 예외(exception)를 발생시키는 오류로 전환할 수 있는 기능이 유용합니다 (반드시 모든 경고를 오류로 전환하지 않고도).</p>
<p>따라서, 다음과 같은 기준에 따라 경고를 필터링하거나 예외로 변경할 수 있는 유연한 "경고 필터(warning filter)"를 도입할 것을 제안합니다.</p>
<ul>
<li>코드가 생성된 위치 (패키지, 모듈 또는 함수별)</li>
<li>경고 카테고리 (아래에서 논의됨)</li>
<li>특정 경고 메시지</li>
</ul>
<p>경고 필터는 명령줄과 Python 코드 모두에서 제어할 수 있어야 합니다.</p>
<h2>경고 발행을 위한 API (APIs For Issuing Warnings)</h2>
<p><strong>Python에서 경고를 발행하는 방법:</strong></p>
<pre><code class="language-python">import warnings
warnings.warn(message[, category[, stacklevel]])
</code></pre>
<p><code>category</code> 인수는 주어지면 경고 카테고리 클래스(아래 참조)여야 하며, 기본값은 <code>warnings.UserWarning</code>입니다. 특정 발행된 경고가 경고 필터에 의해 오류로 변경되면 예외를 발생시킬 수 있습니다. <code>stacklevel</code>은 다음과 같이 Python으로 작성된 래퍼 함수(wrapper functions)에서 사용할 수 있습니다.</p>
<pre><code class="language-python">def deprecation(message):
    warn(message, DeprecationWarning, level=2)
</code></pre>
<p>이것은 경고가 <code>deprecation()</code> 함수 자체의 소스가 아닌, <code>deprecation()</code>의 호출자를 참조하도록 만듭니다 (후자는 경고 메시지의 목적을 무너뜨릴 것이기 때문입니다).</p>
<p><strong>C에서 경고를 발행하는 방법:</strong></p>
<pre><code class="language-c">int PyErr_Warn(PyObject *category, char *message);
</code></pre>
<p>정상적으로는 <code>0</code>을 반환하고, 예외가 발생하면 <code>1</code>을 반환합니다 (경고가 예외로 변환되었거나, 메모리 부족과 같은 구현 오류로 인해). <code>category</code> 인수는 경고 카테고리 클래스(아래 참조)이거나 <code>NULL</code>이어야 합니다. <code>NULL</code>인 경우 <code>PyExc_RuntimeWarning</code>이 기본값으로 사용됩니다. <code>PyErr_Warn()</code> 함수가 <code>1</code>을 반환할 때, 호출자는 일반적인 예외 처리를 수행해야 합니다.</p>
<p><code>PyErr_Warn()</code>의 현재 C 구현은 <code>warnings</code> 모듈(Python으로 구현됨)을 임포트하고 <code>warn()</code> 함수를 호출합니다. 이는 경고 기능을 구현하기 위해 추가해야 하는 C 코드의 양을 최소화합니다.</p>
<h2>경고 카테고리 (Warnings Categories)</h2>
<p>경고 카테고리를 나타내는 여러 내장 예외(built-in exceptions)가 있습니다. 이 분류는 경고 그룹을 필터링하는 데 유용합니다. 현재 다음과 같은 경고 카테고리 클래스가 정의되어 있습니다.</p>
<ul>
<li><strong>Warning</strong> – 모든 경고 카테고리 클래스의 기본 클래스이며, 그 자체로 <code>Exception</code>의 서브클래스입니다.</li>
<li><strong>UserWarning</strong> – <code>warnings.warn()</code>의 기본 카테고리입니다.</li>
<li><strong>DeprecationWarning</strong> – 더 이상 사용되지 않는 기능(deprecated features)에 대한 경고의 기본 카테고리입니다.</li>
<li><strong>SyntaxWarning</strong> – 의심스러운 구문 기능(dubious syntactic features)에 대한 경고의 기본 카테고리입니다.</li>
<li><strong>RuntimeWarning</strong> – 의심스러운 런타임 기능(dubious runtime features)에 대한 경고의 기본 카테고리입니다.</li>
</ul>
<p>이러한 표준 경고 카테고리는 C에서는 <code>PyExc_Warning</code>, <code>PyExc_UserWarning</code> 등으로 사용할 수 있습니다. Python에서는 <code>__builtin__</code> 모듈에서 사용할 수 있으므로 별도의 임포트가 필요하지 않습니다.</p>
<p>사용자 코드는 표준 경고 카테고리 중 하나를 서브클래싱하여 추가 경고 카테고리를 정의할 수 있습니다. 경고 카테고리는 항상 <code>Warning</code> 클래스의 서브클래스여야 합니다.</p>
<h2>경고 필터 (The Warnings Filter)</h2>
<p>경고 필터는 경고가 무시될지, 표시될지, 또는 오류(예외 발생)로 전환될지를 제어합니다.</p>
<p>경고 필터에는 세 가지 측면이 있습니다.</p>
<ul>
<li>특정 <code>warnings.warn()</code> 또는 <code>PyErr_Warn()</code> 호출의 처리 방식을 효율적으로 결정하는 데 사용되는 데이터 구조.</li>
<li>Python 소스 코드에서 필터를 제어하기 위한 API.</li>
<li>필터를 제어하기 위한 명령줄 스위치.</li>
</ul>
<p>경고 필터는 여러 단계로 작동합니다. 동일한 경고가 코드의 동일한 위치에서 반복적으로 발행되는 (일반적일 것으로 예상되는) 경우에 최적화되어 있습니다.</p>
<p>먼저, 경고 필터는 경고가 발행된 모듈(module)과 줄 번호(line number)를 수집합니다. 이 정보는 <code>sys._getframe()</code>을 통해 쉽게 얻을 수 있습니다.</p>
<p>개념적으로, 경고 필터는 필터 사양(filter specifications)의 정렬된 목록을 유지합니다. 특정 경고는 목록의 각 필터 사양과 차례로 일치시켜 일치를 찾을 때까지 비교합니다. 일치하는 항목이 발견되면 해당 경고의 처리 방식이 결정됩니다. 각 항목은 다음과 같은 튜플입니다.</p>
<p><code>(category, message, module, lineno, action)</code></p>
<ul>
<li><code>category</code>: 경고 카테고리가 일치해야 하는 클래스( <code>warnings.Warning</code>의 서브클래스).</li>
<li><code>message</code>: 경고 메시지가 일치해야 하는 컴파일된 정규 표현식(정규식은 대소문자를 구분하지 않음).</li>
<li><code>module</code>: 모듈 이름이 일치해야 하는 컴파일된 정규 표현식.</li>
<li><code>lineno</code>: 경고가 발생한 줄 번호가 일치해야 하는 정수, 또는 모든 줄 번호에 일치하는 <code>0</code>.</li>
<li><code>action</code>: 다음 문자열 중 하나입니다.
<ul>
<li><code>"error"</code> – 일치하는 경고를 예외로 전환합니다.</li>
<li><code>"ignore"</code> – 일치하는 경고를 절대 출력하지 않습니다.</li>
<li><code>"always"</code> – 일치하는 경고를 항상 출력합니다.</li>
<li><code>"default"</code> – 경고가 발행된 각 위치에 대해 일치하는 경고의 첫 번째 발생을 출력합니다.</li>
<li><code>"module"</code> – 경고가 발행된 각 모듈에 대해 일치하는 경고의 첫 번째 발생을 출력합니다.</li>
<li><code>"once"</code> – 일치하는 경고의 첫 번째 발생만 출력합니다.</li>
</ul>
</li>
</ul>
<p><code>Warning</code> 클래스는 내장 <code>Exception</code> 클래스에서 파생되었으므로, 경고를 오류로 전환하려면 단순히 <code>category(message)</code>를 발생시키면 됩니다.</p>
<h2>경고 출력 및 형식화 훅 (Warnings Output And Formatting Hooks)</h2>
<p>경고 필터가 경고를 발행하기로 결정할 때(예외를 발생시키기로 결정할 때는 제외), <code>warnings.showwarning(message, category, filename, lineno)</code> 함수에 정보를 전달합니다. 이 함수의 기본 구현은 경고 텍스트를 <code>sys.stderr</code>에 쓰고, <code>filename</code>의 소스 줄을 보여줍니다. <code>sys.stderr</code>와 다른 파일을 지정하는 데 사용할 수 있는 선택적 5번째 인수가 있습니다.</p>
<p>경고의 형식화는 별도의 함수인 <code>warnings.formatwarning(message, category, filename, lineno)</code>에 의해 수행됩니다. 이 함수는 <code>showwarning()</code> 함수와 동일한 효과를 얻기 위해 인쇄할 수 있는 문자열(새 줄 문자를 포함하고 새 줄로 끝날 수 있음)을 반환합니다.</p>
<h2>경고 필터 조작을 위한 API (API For Manipulating Warning Filters)</h2>
<pre><code class="language-python">warnings.filterwarnings(action, message="", category=Warning, module="", lineno=0)
</code></pre>
<p>이 함수는 인수의 타입을 확인하고, 메시지(message)와 모듈(module) 정규 표현식을 컴파일한 다음, 이를 튜플로 경고 필터 앞에 삽입합니다. (역주: 원문에는 <code>action</code> 인수가 첫 번째로 명시되어 있지만, 실제 Python 구현에서는 <code>action</code>이 첫 번째 인수로 옵니다. PEP에서는 명시적으로 인자 순서를 설명하지 않고 인자 이름만 나열했습니다.)</p>
<pre><code class="language-python">warnings.resetwarnings()
</code></pre>
<p>경고 필터를 비어있는 상태로 재설정합니다.</p>
<h2>명령줄 구문 (Command Line Syntax)</h2>
<p>가장 일반적인 필터링 동작을 지정하기 위한 명령줄 옵션이 있어야 하며, 다음을 포함할 것으로 예상됩니다.</p>
<ul>
<li>모든 경고 억제</li>
<li>어디서든 특정 경고 메시지 억제</li>
<li>특정 모듈의 모든 경고 억제</li>
<li>모든 경고를 예외로 전환</li>
</ul>
<p>다음과 같은 명령줄 옵션 구문을 제안합니다.</p>
<p><code>-Waction[:message[:category[:module[:lineno]]]]</code></p>
<p>여기서:</p>
<ul>
<li><code>'action'</code>은 허용되는 동작(<code>"error"</code>, <code>"default"</code>, <code>"ignore"</code>, <code>"always"</code>, <code>"once"</code>, 또는 <code>"module"</code>) 중 하나의 약어입니다.</li>
<li><code>'message'</code>는 메시지 문자열입니다. 메시지 텍스트가 <code>'message'</code>의 초기 서브스트링(initial substring)인 경고와 일치합니다 (매칭은 대소문자를 구분하지 않음).</li>
<li><code>'category'</code>는 표준 경고 카테고리 클래스 이름의 약어이거나 <code>[package.]module.classname</code> 형식의 사용자 정의 경고 카테고리 클래스의 정규화된 이름(fully-qualified name)입니다.</li>
<li><code>'module'</code>은 모듈 이름입니다 ( <code>package.module</code>일 수 있음).</li>
<li><code>'lineno'</code>는 정수 줄 번호입니다.</li>
</ul>
<p><code>'action'</code>을 제외한 모든 부분은 생략될 수 있으며, 공백을 제거한 후 빈 값은 생략된 값과 동일하게 처리됩니다.</p>
<p>Python 명령줄을 파싱하는 C 코드는 모든 <code>-W</code> 옵션의 본문을 문자열 목록에 저장하며, 이 목록은 <code>sys.warnoptions</code>로 <code>warnings</code> 모듈에 제공됩니다. <code>warnings</code> 모듈은 처음 임포트될 때 이를 파싱합니다. <code>sys.warnoptions</code>를 파싱하는 동안 감지된 오류는 치명적이지 않습니다. 메시지가 <code>sys.stderr</code>에 기록되고 옵션 처리가 계속됩니다.</p>
<p><strong>예시:</strong></p>
<ul>
<li><code>-Werror</code> : 모든 경고를 오류로 전환</li>
<li><code>-Wall</code> : 모든 경고를 표시</li>
<li><code>-Wignore</code> : 모든 경고 무시</li>
<li><code>-Wi:hello</code> : 메시지 텍스트가 "hello"로 시작하는 경고 무시</li>
<li><code>-We::Deprecation</code> : <code>DeprecationWarning</code>을 오류로 전환</li>
<li><code>-Wi:::spam:10</code> : <code>spam</code> 모듈의 10번째 줄에 있는 모든 경고 무시</li>
<li><code>-Wi:::spam -Wd:::spam:10</code> : <code>spam</code> 모듈의 모든 경고 무시 (단, 10번째 줄은 제외)</li>
<li><code>-We::Deprecation -Wd::Deprecation:spam</code> : <code>DeprecationWarning</code>을 오류로 전환 (단, <code>spam</code> 모듈은 제외)</li>
</ul>
<h2>미해결 문제 (Open Issues)</h2>
<p>몇 가지 미해결 문제는 다음과 같습니다.</p>
<ul>
<li>예외 메커니즘을 사용할 수 없는 렉싱(lexing) 또는 파싱(parsing) 중에 경고를 발행하는 것은 어떻게 할 것인가?</li>
<li>제안된 명령줄 구문은 약간 보기 좋지 않습니다 (간단한 경우는 <code>-Werror</code>, <code>-Wignore</code> 등 나쁘지 않지만). 더 나은 아이디어가 있을까요?</li>
<li>필터 사양이 너무 복잡할까봐 약간 걱정됩니다. 카테고리(category)와 모듈(module)로만 필터링하는 것으로는 충분할까요? (메시지 텍스트와 줄 번호는 제외)</li>
<li>모듈 이름과 파일 이름 사이에 약간의 혼동이 있습니다. 보고는 파일 이름을 사용하지만, 필터 사양은 모듈 이름을 사용합니다. 파일 이름도 허용해야 할까요?</li>
<li>패키지(packages)가 올바르게 처리되는지에 대해 전혀 확신이 없습니다.</li>
<li>더 많은 표준 경고 카테고리가 필요할까요? 아니면 더 적게?</li>
<li>시작 오버헤드(start-up overhead)를 최소화하기 위해 <code>warnings</code> 모듈은 <code>PyErr_Warn()</code>의 첫 번째 호출 시 임포트됩니다. 임포트 시 <code>-W</code> 옵션에 대한 명령줄 파싱을 수행합니다. 따라서, 경고가 없는 프로그램은 유효하지 않은 <code>-W</code> 옵션에 대해 불평하지 않을 수 있습니다.</li>
</ul>
<h2>거부된 우려 사항 (Rejected Concerns)</h2>
<p>Paul Prescod, Barry Warsaw, Fred Drake는 제가 중요하지 않다고 생각하는 몇 가지 추가 우려 사항을 제기했습니다. 여기에서 이에 대해 다룹니다 (우려 사항은 그들의 정확한 말은 아니며 의역되었습니다).</p>
<ul>
<li><strong>Paul:</strong> <code>warn()</code>은 쉽게 사용할 수 있도록 내장 함수(built-in)이거나 문(statement)이어야 합니다.
<ul>
<li><strong>응답:</strong> <code>"from warnings import warn"</code>도 충분히 쉽습니다.</li>
</ul>
</li>
<li><strong>Paul:</strong> 내부 루프(inner loop)에서 경고를 발생시키는 속도에 민감한 모듈이 있다면 어떻게 해야 할까요? 경고를 탐지하는 오버헤드를 비활성화할 수 있어야 합니다 (단순히 경고를 억제하는 것 이상으로).
<ul>
<li><strong>응답:</strong> 경고가 발생하지 않도록 내부 루프를 다시 작성하세요.</li>
</ul>
</li>
<li><strong>Paul:</strong> 경고의 전체 컨텍스트를 보고 싶다면 어떻게 해야 할까요?
<ul>
<li><strong>응답:</strong> <code>-Werror</code>를 사용하여 예외로 전환하세요.</li>
</ul>
</li>
<li><strong>Paul:</strong> 경고 사양의 일부를 생략하는 데 <code>":*:*:"</code>이 <code>":::"</code>보다 좋습니다.
<ul>
<li><strong>응답:</strong> 저는 그렇게 생각하지 않습니다.</li>
</ul>
</li>
<li><strong>Barry:</strong> <code>lineno</code>가 범위 지정일 수 있으면 좋을 것입니다.
<ul>
<li><strong>응답:</strong> 이미 너무 복잡합니다.</li>
</ul>
</li>
<li><strong>Barry:</strong> 저만의 경고 동작(action)을 추가하고 싶습니다. <code>action</code>이 문자열뿐만 아니라 호출 가능한(callable) 객체일 수도 있다면 어떨까요? 그러면 IDE에서 <code>"mygui.popupWarningsDialog"</code>로 설정할 수 있을 것입니다.
<ul>
<li><strong>응답:</strong> 그 목적을 위해서는 <code>warnings.showwarning()</code>를 오버라이드하면 됩니다.</li>
</ul>
</li>
<li><strong>Fred:</strong> <code>Warning</code> 카테고리 클래스가 <code>__builtin__</code>에 있어야 하는 이유는 무엇입니까?
<ul>
<li><strong>응답:</strong> <code>warnings</code> 모듈을 임포트하는 <code>PyErr_Warn()</code>의 첫 번째 호출 이전에 C에서 경고 카테고리를 사용할 수 있어야 한다는 점을 고려할 때, 이것이 가장 간단한 구현입니다. 내장으로 제공하는 데 문제가 없다고 봅니다.</li>
</ul>
</li>
</ul>
<h2>구현 (Implementation)</h2>
<p>여기 프로토타입 구현이 있습니다: <a href="http://sourceforge.net/patch/?func=detailpatch&#x26;patch_id=102715&#x26;group_id=5470">http://sourceforge.net/patch/?func=detailpatch&#x26;patch_id=102715&#x26;group_id=5470</a></p>
<p>소스: <a href="https://github.com/python/peps/blob/main/peps/pep-0230.rst">https://github.com/python/peps/blob/main/peps/pep-0230.rst</a>
최종 수정: 2025-02-01 08:55:40 GMT</p>
<hr>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1098,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 230 - Warning Framework"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 16:53:00+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
