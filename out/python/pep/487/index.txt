3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/487","c"]
0:["SAPzS3zi9tsG5MkeKvxIA",[[["",{"children":[["slug","python/pep/487","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"487\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/487","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T1b87,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0487/">PEP 487 - Simpler customisation of class creation</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 27-Feb-2015</p>
</blockquote>
<p>PEP 487 – 클래스 생성 사용자 정의 간소화</p>
<h2>개요</h2>
<p>이 PEP (Python Enhancement Proposal)는 클래스 생성 시 사용자 정의 방식을 간소화하기 위해 <code>__init_subclass__</code> 훅(hook)과 <code>__set_name__</code> 훅을 도입합니다. 기존에는 메타클래스(metaclass)를 통해 클래스 생성을 사용자 정의했지만, 이는 메타클래스 충돌(metaclass conflicts)과 같은 복잡성을 야기했습니다. 새로운 메커니즘은 메타클래스보다 이해하고 사용하기 쉬워, 파이썬의 메타클래스 기능에 대한 보다 부드러운 진입점을 제공합니다.</p>
<h2>배경</h2>
<p>메타클래스는 클래스 생성을 사용자 정의하는 강력한 도구이지만, 여러 메타클래스를 자동으로 결합하는 방법이 없다는 문제가 있습니다. 이는 서로 다른 라이브러리에서 온 두 개의 기본 클래스를 상속할 때 예기치 않게 복합 메타클래스를 수동으로 생성해야 하는 상황을 초래할 수 있습니다.</p>
<h2>제안</h2>
<p>이 PEP는 메타클래스의 일반적인 사용 사례 중 대부분을 다음 두 가지 훅으로 해결할 것을 제안합니다.</p>
<ol>
<li>
<p><strong><code>__init_subclass__</code> 훅</strong>: 특정 클래스의 모든 서브클래스가 생성될 때 초기화 코드를 실행하는 클래스 메서드 훅입니다.
예시:</p>
<pre><code class="language-python">class QuestBase:
    def __init_subclass__(cls, swallow, **kwargs):
        cls.swallow = swallow
        super().__init_subclass__(**kwargs)

class Quest(QuestBase, swallow="african"):
    pass

print(Quest.swallow) # 출력: african
</code></pre>
<p>이 훅은 암묵적으로 <code>@classmethod</code>로 동작하며, 협력적 다중 상속(cooperative multiple inheritance)을 위한 종단점 역할을 합니다.</p>
</li>
<li>
<p><strong><code>__set_name__</code> 훅</strong>: 클래스 바디에 정의된 모든 어트리뷰트(특히 디스크립터)가 클래스에 바인딩될 때 호출됩니다. 이 훅은 디스크립터가 자신의 <code>owner</code> 클래스와 클래스 내에서의 <code>name</code>을 알 수 있도록 하여, 메타클래스 없이도 디스크립터를 더 유용하게 사용할 수 있게 합니다.
예시:</p>
<pre><code class="language-python">import weakref

class WeakAttribute:
    def __get__(self, instance, owner):
        return instance.__dict__[self.name]()
    def __set__(self, instance, value):
        instance.__dict__[self.name] = weakref.ref(value)
    # 새로운 초기화 훅:
    def __set_name__(self, owner, name):
        self.name = name

class TreeNode:
    parent = WeakAttribute()
    def __init__(self, parent):
        self.parent = parent
</code></pre>
<p>이 예시에서 <code>parent</code> 어트리뷰트는 약한 참조(weak reference)로 저장되어 순환 참조를 방지하고 가비지 컬렉션을 용이하게 합니다.</p>
</li>
</ol>
<h2>주요 이점</h2>
<ul>
<li><strong>클래스 정의 시 동작 상속의 용이성</strong>: 메타클래스에 비해 <code>__init_subclass__</code>는 일반적인 메서드 상속과 유사하여 이해하기 쉽고, 클래스 정의 프로세스의 단계들을 점진적으로 이해하는 데 도움이 됩니다.</li>
<li><strong>메타클래스 충돌 가능성 감소</strong>: <code>__init_subclass__</code> 메서드를 기존 타입에 추가하는 것은 <code>__init__</code> 메서드를 추가하는 것과 유사한 수준의 위험을 가지며, 라이브러리 작성자가 하위 호환성(backward compatibility)을 깨뜨릴 위험이 줄어듭니다. 이는 라이브러리 작성자들이 메타클래스 사용을 주저하게 만드는 주요 원인이었습니다.</li>
</ul>
<h2>클래스 사용의 새로운 방법</h2>
<p>이 새로운 훅들은 다양한 클래스 디자인 패턴을 메타클래스 없이 구현할 수 있게 합니다.</p>
<ul>
<li><strong>서브클래스 등록</strong>: 플러그인 시스템과 같이 새로운 서브클래스를 등록할 때 유용합니다.
<pre><code class="language-python">class PluginBase:
    subclasses = []
    def __init_subclass__(cls, **kwargs):
        super().__init_subclass__(**kwargs)
        cls.subclasses.append(cls)
</code></pre>
</li>
<li><strong>트레잇(Trait) 디스크립터</strong>: 값의 범위를 확인하는 등 특정 "트레잇"을 구현하는 디스크립터를 메타클래스의 도움 없이 구현할 수 있습니다.</li>
</ul>
<h2>구현 세부 사항</h2>
<p>훅은 다음과 같은 순서로 호출됩니다.</p>
<ol>
<li><code>type.__new__</code>는 새로운 클래스가 초기화된 후 디스크립터의 <code>__set_name__</code> 훅을 호출합니다.</li>
<li>이후 <code>super().__init_subclass__</code>를 통해 기본 클래스의 <code>__init_subclass__</code>를 호출합니다. 이는 서브클래스 초기화 시 이미 완전히 초기화된 디스크립터를 볼 수 있음을 의미합니다.</li>
</ol>
<p>PEP 487은 <code>type.__init__</code>이 키워드 인수를 명시적으로 금지하는 현재 CPython의 불일치점을 개선하고, <code>type.__init__</code>이 키워드 인수를 무시하도록 변경합니다.</p>
<h2>하위 호환성 문제</h2>
<p><code>type.__new__</code>의 정확한 호출 시퀀스가 약간 변경되지만, 일반적인 사용 사례는 의도한 대로 동작하도록 보장됩니다.
메타클래스가 <code>__new__</code> 메서드만 정의하고 키워드 인수를 처리하는 경우, 더 이상 <code>__init__</code> 메서드를 정의할 필요가 없으며, 이는 <code>__new__</code>를 오버라이드(override)하는 권장 사항과 일치합니다. 다만 <code>type.__new__</code>의 인수를 키워드 인수로 전달하는 방식은 <code>TypeError</code>를 발생시키지만, 이는 드문 경우이며 쉽게 수정 가능합니다.</p>
<h2>기각된 디자인 옵션</h2>
<p>이 PEP는 PEP 422에서 제안되었던 <code>__autodecorate__</code>와 같은 다른 훅이나 메타클래스처럼 클래스를 반환하는 방식 등 여러 대안을 검토했으나, 현재의 <code>__init_subclass__</code>와 <code>__set_name__</code> 방식을 채택했습니다. <code>__init_subclass__</code>에 명시적인 <code>@classmethod</code> 데코레이터를 요구하는 방안도 고려되었으나, 암묵적으로 동작하도록 결정되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 487 - Simpler customisation of class creation"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 22:33:21+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
