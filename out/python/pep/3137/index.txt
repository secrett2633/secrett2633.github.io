3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-19cfc001fdac3337.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-51594f997fc19690.js"],""]
4:["slug","python/pep/3137","c"]
0:["FeyCvJug7In7AgUZlfHUx",[[["",{"children":[["slug","python/pep/3137","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3137\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3137","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T3bdc,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3137/">PEP 3137 - Immutable Bytes and Mutable Buffer</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 26-Sep-2007</p>
</blockquote>
<p>Python Enhancement Proposal (PEP) 3137은 Python 3.0에서 <code>bytes</code> 타입의 불변성(immutable)과 가변성(mutable)을 명확하게 분리하는 제안입니다. 이 PEP는 초기 Python 3.0a1 버전에서 <code>bytes</code> 타입이 가변(mutable)으로 도입된 이후, 불변 <code>bytes</code> 타입의 필요성이 제기되면서 시작되었습니다.</p>
<h2>목표</h2>
<p>Python 개발자들이 이 PEP의 제안 내용, 도입 배경, 그리고 실제 Python 사용에 미치는 영향을 명확하게 이해할 수 있도록 돕는 것입니다.</p>
<h2>도입 배경 (Introduction)</h2>
<p>Python 3.0a1에서 가변(mutable) <code>bytes</code> 타입이 출시된 후, 불변(immutable) <code>bytes</code>를 표현할 방법이 필요하다는 압력이 커졌습니다. 초기에는 PEP 3118의 새로운 버퍼 API를 사용하여 <code>bytes</code> 객체를 일시적으로 불변하게 만드는 패치가 제안되었지만, 이는 적절한 접근 방식이 아니라고 판단되었습니다.</p>
<p>이후, <code>bytes</code> 타입을 불변으로 만들고 테스트 스위트의 오류를 수정하는 패치가 준비되었습니다. 이 작업은 <code>bytes</code>의 가변성에 의존하는 부분이 많지 않다는 것을 보여주었으며, 주로 작은 조각들을 모아 반환 값을 구성하는 코드에서만 가변성이 필요하다는 점이 드러났습니다.</p>
<p>이러한 논의와 <code>array</code> 모듈을 가변 <code>bytes</code> 타입의 대안으로 사용하는 것이 이상적이지 않다는 점을 고려하여, 가변 <code>bytes</code>와 불변 <code>bytes</code> 타입을 모두 가지는 제안이 나왔고, 이는 긍정적인 반응을 얻어 이 PEP의 필요성을 야기했습니다. 구현 전략 또한 명확해졌는데, 기존 <code>PyString</code> 구현에서 로케일 지원 및 암시적 유니코드 변환을 제거하여 불변 <code>bytes</code> 타입으로 사용하고, 새로운 <code>PyBytes</code> 구현을 가변 <code>bytes</code> 타입으로 유지하는 방식입니다.</p>
<h2>장점 (Advantages)</h2>
<ul>
<li>불변 <code>bytes</code> 타입의 한 가지 장점은 코드 객체에서 이를 사용할 수 있다는 점입니다.</li>
<li><code>bytes</code>를 키로 사용하여 효율적인 해시 테이블(hash table)을 생성할 수 있게 하여, HTTP 또는 SMTP와 같이 텍스트를 나타내는 <code>bytes</code> 기반 프로토콜을 파싱할 때 유용할 수 있습니다.</li>
<li>Python 2.x에서 바이너리 데이터(또는 인코딩된 텍스트)를 조작하던 코드를 새로운 디자인으로 포팅하는 것이 초기 3.0 디자인(가변 <code>bytes</code>)을 사용하는 것보다 쉬워집니다. 단순히 <code>str</code>을 <code>bytes</code>로 바꾸고 <code>b'...'</code> 리터럴을 사용하는 것만으로 가능해집니다.</li>
</ul>
<h2>명명 (Naming)</h2>
<p>Python 레벨에서 다음과 같은 타입 이름을 제안합니다:</p>
<ul>
<li><code>bytes</code>: 불변(immutable) <code>bytes</code> 배열 (<code>PyString</code>에 해당)</li>
<li><code>bytearray</code>: 가변(mutable) <code>bytes</code> 배열 (<code>PyBytes</code>에 해당)</li>
<li><code>memoryview</code>: 다른 객체에 대한 <code>bytes</code> 뷰 (<code>PyMemory</code>에 해당)</li>
</ul>
<p>이전의 <code>buffer</code> 타입은 PEP 3118에서 도입된 새로운 <code>memoryview</code> 타입과 너무 유사하여 중복되므로 제거됩니다.</p>
<h2>요약 (Summary)</h2>
<p>다양한 Python 버전에서의 타입 이름은 다음과 같이 요약됩니다:</p>
<p>| C 이름       | 2.x repr    | 3.0a1 repr  | 3.0a2 repr            |
| :----------- | :---------- | :---------- | :-------------------- |
| <code>PyUnicode</code>  | <code>unicode u''</code> | <code>str ''</code>    | <code>str ''</code>              |
| <code>PyString</code>   | <code>str ''</code>    | <code>str8 s''</code>  | <code>bytes b''</code>           |
| <code>PyBytes</code>    | N/A         | <code>bytes b''</code> | <code>bytearray bytearray(b'')</code> |
| <code>PyBuffer</code>   | <code>buffer</code>    | <code>buffer</code>    | N/A                   |
| <code>PyMemoryView</code> | N/A         | <code>memoryview</code>| <code>memoryview &#x3C;...></code>    |</p>
<h2>리터럴 표기법 (Literal Notations)</h2>
<p>Python 3.0a1에 도입된 <code>b'...'</code> 표기법은 불변 <code>bytes</code> 객체를 반환합니다. 가변 <code>bytes</code> 배열을 생성하려면 <code>bytearray(b'...')</code> 또는 <code>bytearray([...])</code>를 사용합니다. 후자의 형태는 <code>range(256)</code> 범위의 정수 리스트를 인자로 받습니다.</p>
<h2>기능 (Functionality)</h2>
<h3>PEP 3118 버퍼 API (PEP 3118 Buffer API)</h3>
<p><code>bytes</code>와 <code>bytearray</code> 모두 PEP 3118 버퍼 API를 구현합니다.</p>
<ul>
<li><code>bytes</code> 타입은 읽기 전용(read-only) 요청만 구현합니다.</li>
<li><code>bytearray</code> 타입은 쓰기 가능한(writable) 요청 및 데이터 잠금(data-locked) 요청도 허용합니다.</li>
<li>요소 데이터 타입은 항상 <code>'B'</code>(부호 없는 바이트)입니다.</li>
</ul>
<h3>생성자 (Constructors)</h3>
<p><code>bytes</code>와 <code>bytearray</code> 모두에 적용되는 네 가지 형태의 생성자가 있습니다.</p>
<ul>
<li><code>bytes(&#x3C;bytes>)</code>, <code>bytes(&#x3C;bytearray>)</code>, <code>bytearray(&#x3C;bytes>)</code>, <code>bytearray(&#x3C;bytearray>)</code>: 간단한 복사 생성자입니다. <code>bytes(&#x3C;bytes>)</code>는 (불변) 인자를 반환할 수 있지만, <code>bytearray(&#x3C;bytearray>)</code>는 항상 복사본을 만듭니다.</li>
<li><code>bytes(&#x3C;str>, &#x3C;encoding>[, &#x3C;errors>])</code>, <code>bytearray(&#x3C;str>, &#x3C;encoding>[, &#x3C;errors>])</code>: 텍스트 문자열을 인코딩합니다. <code>str.encode()</code> 메서드는 불변 <code>bytes</code> 객체를 반환합니다. <code>&#x3C;encoding></code> 인자는 필수이며, <code>&#x3C;errors></code>는 선택 사항입니다.</li>
<li><code>bytes(&#x3C;memory view>)</code>, <code>bytearray(&#x3C;memory view>)</code>: PEP 3118 버퍼 API를 구현하는 모든 객체로부터 <code>bytes</code> 또는 <code>bytearray</code> 객체를 생성합니다.</li>
<li><code>bytes(&#x3C;iterable of ints>)</code>, <code>bytearray(&#x3C;iterable of ints>)</code>: <code>range(256)</code> 범위의 정수 스트림으로부터 <code>bytes</code> 또는 <code>bytearray</code> 객체를 생성합니다.</li>
<li><code>bytes(&#x3C;int>)</code>, <code>bytearray(&#x3C;int>)</code>: 주어진 길이의 0으로 초기화된 <code>bytes</code> 또는 <code>bytearray</code> 객체를 생성합니다.</li>
</ul>
<h3>비교 (Comparisons)</h3>
<p><code>bytes</code>와 <code>bytearray</code> 타입은 서로 비교 및 정렬이 가능합니다. 예를 들어, <code>b'abc' == bytearray(b'abc') &#x3C; b'abd'</code>는 참입니다.
두 타입 중 하나를 <code>str</code> 객체와 동등성 비교하면 내용에 관계없이 <code>False</code>를 반환합니다. <code>str</code>과의 정렬 비교는 <code>TypeError</code>를 발생시킵니다.</p>
<h3>슬라이싱 (Slicing)</h3>
<ul>
<li><code>bytes</code> 객체를 슬라이싱하면 <code>bytes</code> 객체가 반환됩니다.</li>
<li><code>bytearray</code> 객체를 슬라이싱하면 <code>bytearray</code> 객체가 반환됩니다.</li>
<li><code>bytearray</code> 객체에 대한 슬라이스 할당(slice assignment)은 PEP 3118 버퍼 API를 구현하는 모든 객체 또는 <code>range(256)</code> 범위의 정수 iterable을 허용합니다.</li>
</ul>
<h3>인덱싱 (Indexing)</h3>
<ul>
<li><code>bytes</code>와 <code>bytearray</code>를 인덱싱하면 작은 정수(small ints)를 반환합니다.</li>
<li><code>bytearray</code> 객체의 항목에 대한 할당은 <code>range(256)</code> 범위의 정수를 허용합니다. (바이트 시퀀스에서 할당하려면 슬라이스 할당을 사용합니다.)</li>
</ul>
<h3><code>Str()</code> 및 <code>Repr()</code></h3>
<p><code>str()</code> 및 <code>repr()</code> 함수는 이들 객체에 대해 동일한 것을 반환합니다.</p>
<ul>
<li><code>bytes</code> 객체의 <code>repr()</code>은 <code>b'...'</code> 스타일의 리터럴을 반환합니다.</li>
<li><code>bytearray</code>의 <code>repr()</code>은 <code>"bytearray(b'...')" </code>형태의 문자열을 반환합니다.</li>
</ul>
<h3>연산자 (Operators)</h3>
<p>다음 연산자들은 언급된 경우를 제외하고 <code>bytes</code> 및 <code>bytearray</code> 타입에 의해 구현됩니다:</p>
<ul>
<li><code>b1 + b2</code>: 연결(concatenation). <code>bytes</code>/<code>bytearray</code> 혼합 피연산자의 경우, 반환 타입은 첫 번째 인자의 타입입니다.</li>
<li><code>b1 += b2</code>: <code>b1</code>이 <code>bytearray</code> 객체인 경우 <code>b1</code>을 변경합니다.</li>
<li><code>b * n</code>, <code>n * b</code>: 반복(repetition); <code>n</code>은 정수여야 합니다.</li>
<li><code>b *= n</code>: <code>b</code>가 <code>bytearray</code> 객체인 경우 <code>b</code>를 변경합니다.</li>
<li><code>b1 in b2</code>, <code>b1 not in b2</code>: 부분 문자열(substring) 테스트; <code>b1</code>은 PEP 3118 버퍼 API를 구현하는 모든 객체가 될 수 있습니다.</li>
<li><code>i in b</code>, <code>i not in b</code>: 단일 바이트 멤버십(membership) 테스트; <code>i</code>는 정수여야 합니다.</li>
<li><code>len(b)</code>: 바이트 수.</li>
<li><code>hash(b)</code>: 해시 값; <code>bytes</code> 타입에서만 구현됩니다.
<code>%</code> 연산자는 구현되지 않습니다.</li>
</ul>
<h3>메서드 (Methods)</h3>
<p>다음 메서드들은 <code>bytes</code>와 <code>bytearray</code> 모두에 유사한 의미론으로 구현됩니다. 이들은 <code>bytes</code> 인자에 대해 PEP 3118 버퍼 API를 구현하는 모든 것을 허용하며, 메서드가 호출된 객체(<code>self</code>)와 동일한 타입을 반환합니다:
<code>.capitalize()</code>, <code>.center()</code>, <code>.count()</code>, <code>.decode()</code>, <code>.endswith()</code>, <code>.expandtabs()</code>, <code>.find()</code>, <code>.index()</code>, <code>.isalnum()</code>, <code>.isalpha()</code>, <code>.isdigit()</code>, <code>.islower()</code>, <code>.isspace()</code>, <code>.istitle()</code>, <code>.isupper()</code>, <code>.join()</code>, <code>.ljust()</code>, <code>.lower()</code>, <code>.lstrip()</code>, <code>.partition()</code>, <code>.replace()</code>, <code>.rfind()</code>, <code>.rindex()</code>, <code>.rjust()</code>, <code>.rpartition()</code>, <code>.rsplit()</code>, <code>.rstrip()</code>, <code>.split()</code>, <code>.splitlines()</code>, <code>.startswith()</code>, <code>.strip()</code>, <code>.swapcase()</code>, <code>.title()</code>, <code>.translate()</code>, <code>.upper()</code>, <code>.zfill()</code></p>
<p>이는 Python 2.x의 <code>str</code> 타입에 있던 메서드들과 정확히 동일한 집합이며, <code>.encode()</code>는 제외됩니다. 서명과 의미론도 동일합니다. 그러나, 문자, 공백, 소문자 등과 같은 문자 클래스가 사용될 때는 ASCII 정의가 사용됩니다. <code>.encode()</code> 메서드는 Python 3000에서 인코딩 및 디코딩에 대한 더 엄격한 정의 때문에 제외됩니다.</p>
<p>또한, 두 타입 모두 16진수 값을 포함하는 문자열로부터 객체를 구성하는 클래스 메서드 <code>.fromhex()</code>를 구현합니다.
<code>bytearray</code> 타입은 MutableSequence ABC (PEP 3119 참조)에서 온 다음과 같은 추가 메서드를 구현합니다:
<code>.extend()</code>, <code>.insert()</code>, <code>.append()</code>, <code>.reverse()</code>, <code>.pop()</code>, <code>.remove()</code></p>
<h3><code>Bytes</code>와 <code>Str</code> 타입 (Bytes and the Str Type)</h3>
<p>Python 3.0a1의 <code>bytes</code> 타입과 마찬가지로, <code>bytes</code>(또는 <code>bytearray</code>) 객체와 <code>str</code> 객체를 인코딩을 지정하지 않고 혼합하려는 시도는 <code>TypeError</code> 예외를 발생시킵니다. (그러나, <code>bytes</code>/<code>bytearray</code>와 <code>str</code> 객체의 동등성 비교는 단순히 <code>False</code>를 반환합니다.)</p>
<p><code>bytes</code> 또는 <code>bytearray</code> 객체와 <code>str</code> 객체 간의 변환은 항상 인코딩을 사용하여 명시적이어야 합니다. 두 가지 동등한 API가 있습니다:</p>
<ul>
<li><code>str(b, &#x3C;encoding>[, &#x3C;errors>])</code>는 <code>b.decode(&#x3C;encoding>[, &#x3C;errors>])</code>와 동일합니다.</li>
<li><code>bytes(s, &#x3C;encoding>[, &#x3C;errors>])</code>는 <code>s.encode(&#x3C;encoding>[, &#x3C;errors>])</code>와 동일합니다.</li>
</ul>
<p>한 가지 예외가 있습니다: <code>str(b)</code>를 작성하여 인코딩을 지정하지 않고 <code>bytes</code> (또는 <code>bytearray</code>)를 <code>str</code>로 변환할 수 있습니다. 이는 <code>repr(b)</code>와 동일한 결과를 생성합니다. 이 예외는 모든 객체가 출력될 수 있다는 일반적인 약속 때문에 필요하며, 출력은 <code>str</code>로의 변환의 특별한 경우입니다. 그러나 <code>bytes</code> 객체를 출력할 때 개별 바이트를 문자로 해석한다는 보장은 없습니다.</p>
<p><code>str</code> 타입은 현재 PEP 3118 버퍼 API를 구현하고 있습니다. 이는 가끔 편리할 수 있지만, 버퍼 API를 통해 접근되는 바이트가 플랫폼 의존적인 인코딩을 나타내므로 잠재적으로 혼란스러울 수 있습니다. 따라서 PEP 3118 버퍼 API는 <code>str</code> 타입에서 제거될 예정입니다.</p>
<h3><code>basestring</code> 타입 (The basestring Type)</h3>
<p><code>basestring</code> 타입은 언어에서 제거될 것입니다. <code>isinstance(x, basestring)</code>를 사용하던 코드는 <code>isinstance(x, str)</code>를 사용하도록 변경되어야 합니다.</p>
<h3>피클링 (Pickling)</h3>
<p>이 내용은 독자의 연습 문제로 남겨져 있습니다.</p>
<hr>
<p>이 PEP는 Python 3.0에서 <code>bytes</code>와 <code>bytearray</code>라는 두 가지 별개의 타입을 도입하여, 바이너리 데이터 처리를 더욱 명확하고 안전하게 만들었습니다. 불변 <code>bytes</code>는 해싱 가능한 바이너리 시퀀스에 사용하고, 가변 <code>bytearray</code>는 바이너리 데이터를 조작할 때 사용함으로써 개발자들이 의도에 맞는 타입을 선택할 수 있도록 돕습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1098,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 3137 - Immutable Bytes and Mutable Buffer"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:34:47+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
