3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-1a135130af3e1cae.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/547","c"]
0:["8N6icDw00Cy0kKVlExSq2",[[["",{"children":[["slug","python/pep/547","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"547\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/547","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T248c,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0547/">PEP 547 - Running extension modules using the -m option</a></p>
<p><strong>상태:</strong> Deferred | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 25-May-2017</p>
</blockquote>
<h2>PEP 547 – <code>-m</code> 옵션을 사용하여 확장 모듈 실행</h2>
<p><strong>저자:</strong> Marcel Plch, Petr Viktorin
<strong>상태:</strong> 연기됨 (Deferred)
<strong>유형:</strong> 표준 트랙 (Standards Track)
<strong>생성일:</strong> 2017년 5월 25일
<strong>Python 버전:</strong> 3.7</p>
<h3>연기 알림 (Deferral Notice)</h3>
<p>이 PEP의 가장 중요한 활용 사례이자 유일하게 명시된 사례인 Cython은 아직 다단계 초기화(multi-phase initialization)를 지원할 준비가 되지 않았습니다. Cython은 C 수준의 정적 변수에 전역 상태를 유지합니다. 이 PEP는 상황이 바뀔 때까지 연기됩니다.</p>
<h3>개요 (Abstract)</h3>
<p>이 PEP는 PEP 489의 다단계 초기화(multi-phase initialization)를 사용하여 내장(built-in) 및 확장(extension) 모듈을 <code>__main__</code> 네임스페이스에서 실행할 수 있도록 하는 구현을 제안합니다. 이를 통해 다단계 초기화를 지원하는 모듈은 다음 명령을 사용하여 실행할 수 있습니다: <code>python3 -m _testmultiphase</code>.</p>
<h3>동기 (Motivation)</h3>
<p>현재 확장 모듈은 Python 소스 모듈의 모든 기능을 지원하지 않습니다. 특히, Python의 <code>-m</code> 옵션을 사용하여 확장 모듈을 스크립트처럼 실행하는 것은 불가능합니다. 이 기능을 가능하게 하는 기술적 기반은 PEP 489를 위해 마련되었으며, <code>-m</code> 옵션 활성화는 해당 PEP의 "향후 가능한 확장(Possible Future Extensions)" 섹션에 언급되어 있습니다. 제안된 추가 변경 사항은 기술적으로 비교적 적습니다.</p>
<h3>근거 (Rationale)</h3>
<p>확장 모듈이 <code>-m</code> 옵션을 지원하지 않는 문제는 전통적으로 Python 래퍼(wrapper)를 제공하는 방식으로 해결되었습니다. 예를 들어, <code>_pickle</code> 모듈의 커맨드 라인 인터페이스는 순수 Python <code>pickle</code> 모듈(순수 Python 재구현과 함께)에 있습니다. 이 방식은 C API를 사용하여 커맨드 라인 인터페이스를 구축하는 것이 번거롭기 때문에 표준 라이브러리 모듈에 잘 작동합니다. 그러나 다른 사용자들은 실행 가능한 확장 모듈을 직접 만들기를 원할 수 있습니다.</p>
<p>중요한 사용 사례는 C 확장 모듈로 컴파일되는 Python과 유사한 언어인 Cython입니다. Cython은 Python의 (거의) 상위 집합(superset)으로, Cython으로 Python 모듈을 컴파일해도 일반적으로 모듈의 기능이 변경되지 않으며, Cython 특정 기능을 점진적으로 추가할 수 있습니다. 이 PEP는 Cython 확장 모듈이 <code>-m</code> 옵션을 사용하여 실행될 때 Python counterparts와 동일하게 동작하도록 허용할 것입니다.</p>
<h3>배경 (Background)</h3>
<p>Python의 <code>-m</code> 옵션은 <code>runpy._run_module_as_main</code> 함수에 의해 처리됩니다. <code>-m</code>으로 지정된 모듈은 일반적으로 import되지 않습니다. 대신, 인터프리터 초기화 초기에 생성되는 <code>__main__</code> 모듈의 네임스페이스에서 실행됩니다.</p>
<p>Python 소스 모듈의 경우, 다른 모듈의 네임스페이스에서 실행하는 것은 문제가 되지 않습니다. 코드는 기존 모듈의 <code>__dict__</code>로 <code>locals</code>와 <code>globals</code>가 설정된 상태로 실행됩니다. 하지만 확장 모듈은 그렇지 않습니다. 확장 모듈의 <code>PyInit_*</code> 진입점은 전통적으로 <code>PyModule_Create</code>를 사용하여 새 모듈 객체를 생성하고 초기화했습니다.</p>
<p>Python 3.5부터 확장 모듈은 PEP 489의 다단계 초기화를 사용할 수 있습니다. 이 시나리오에서 <code>PyInit_*</code> 진입점은 모듈이 생성되고 초기화되는 방식을 설명하는 <code>PyModuleDef</code> 구조체를 반환합니다. 확장 모듈은 <code>Py_mod_create</code> 콜백을 사용하여 모듈 객체 생성을 사용자 정의하거나, <code>Py_mod_create</code>를 지정하지 않아 일반 모듈 객체를 사용할 수 있습니다. 그런 다음 <code>Py_mod_exec</code>라는 다른 콜백이 호출되어 메서드와 클래스로 모듈 객체를 채우는 방식으로 모듈 객체를 초기화합니다.</p>
<h3>제안 (Proposal)</h3>
<p>다단계 초기화는 확장 모듈을 다른 모듈의 네임스페이스에서 실행하는 것을 가능하게 합니다. 만약 <code>Py_mod_create</code> 콜백이 지정되지 않았다면, <code>__main__</code> 모듈은 새로 생성된 모듈 객체인 것처럼 <code>Py_mod_exec</code> 콜백에 전달되어 초기화될 수 있습니다.</p>
<p>이 방식의 한 가지 복잡한 점은 C 수준의 모듈 상태(C-level module state)입니다. 각 모듈에는 확장 모듈이 생성될 때 할당된 메모리 영역을 가리키는 <code>md_state</code> 포인터가 있습니다. <code>PyModuleDef</code>는 할당될 메모리의 양을 지정합니다.</p>
<p>구현은 <code>md_state</code> 메모리가 최대 한 번만 할당되도록 주의해야 합니다. 또한, <code>Py_mod_exec</code> 콜백은 모듈당 한 번만 호출되어야 합니다. <code>md_state</code> 포인터 자체가 가드 역할을 할 것입니다. 메모리 할당 및 <code>Py_mod_exec</code> 호출은 항상 함께 이루어지며, <code>md_state</code>가 이미 <code>NULL</code>이 아닌 경우 확장 모듈 초기화는 실패합니다.</p>
<p><code>__main__</code> 모듈은 확장 모듈로 생성되지 않으므로, <code>md_state</code>는 일반적으로 <code>NULL</code>입니다. <code>__main__</code>의 컨텍스트에서 확장 모듈을 초기화하기 전에, 해당 모듈의 <code>PyModuleDef</code>에 따라 모듈 상태가 할당될 것입니다.</p>
<p>PEP 489는 이러한 변경 사항을 일반적으로 가능하게 하도록 설계되었지만, 확장 모듈의 모듈 발견, 생성 및 초기화 단계를 분리하여 새로 초기화된 모듈 대신 다른 모듈을 사용할 수 있도록 해야 합니다. 또한, 이 기능은 <code>runpy</code> 및 <code>importlib</code>에 추가되어야 합니다.</p>
<h3>상세 규격 (Specification)</h3>
<p><code>importlib</code> 로더(loader)를 위한 새로운 선택적 메서드가 추가될 것입니다. 이 메서드는 <code>exec_in_module</code>이라고 불리며, 두 개의 위치 인수(positional arguments): 모듈 스펙(module spec)과 이미 존재하는 모듈을 받습니다. <code>__spec__</code> 또는 <code>__name__</code>과 같이 모듈에 이미 설정된 import 관련 속성은 무시됩니다.</p>
<p><code>runpy._run_module_as_main</code> 함수는 이 새로운 로더 메서드를 찾을 것입니다. 이 메서드가 존재하면 <code>runpy</code>는 모듈의 Python 코드를 로드하고 실행하려고 시도하는 대신 이 메서드를 실행합니다. 그렇지 않으면 <code>runpy</code>는 이전과 같이 작동합니다.</p>
<h4>ExtensionFileLoader 변경 사항 (ExtensionFileLoader Changes)</h4>
<p><code>importlib</code>의 <code>ExtensionFileLoader</code>는 새로운 함수인 <code>_imp.exec_in_module</code>을 호출하는 <code>exec_in_module</code> 구현을 얻게 될 것입니다.</p>
<p><code>_imp.exec_in_module</code>은 기존 메커니즘을 사용하여 확장 모듈의 <code>PyInit_*</code> 함수를 찾아 호출할 것입니다.</p>
<p><code>PyInit_*</code> 함수는 완전히 초기화된 모듈(단일 단계 초기화) 또는 <code>PyModuleDef</code>(PEP 489 다단계 초기화용)를 반환할 수 있습니다.</p>
<p>단일 단계 초기화의 경우, <code>_imp.exec_in_module</code>은 <code>ImportError</code>를 발생시킬 것입니다.</p>
<p>다단계 초기화의 경우, <code>PyModuleDef</code>와 초기화될 모듈은 새로운 함수인 <code>PyModule_ExecInModule</code>에 전달될 것입니다.</p>
<p>이 함수는 <code>PyModuleDef</code>가 <code>Py_mod_create</code> 슬롯을 지정하거나 모듈이 이미 초기화된 경우(즉, <code>md_state</code> 포인터가 <code>NULL</code>이 아닌 경우) <code>ImportError</code>를 발생시킬 것입니다. 그렇지 않으면, 이 함수는 <code>PyModuleDef</code>에 따라 모듈을 초기화할 것입니다.</p>
<h3>하위 호환성 (Backwards Compatibility)</h3>
<p>이 PEP는 하위 호환성을 유지합니다. 이 제안은 이전에 <code>__main__</code>으로 모듈을 실행하는 것을 지원하지 않았던 로더에 대해 새로운 함수와 새로운 로더 메서드만 추가합니다.</p>
<h3>참고 구현 (Reference Implementation)</h3>
<p>이 PEP의 참고 구현은 GitHub에서 확인할 수 있습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1318,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Deferred] PEP 547 - Running extension modules using the -m option"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 23:34:23+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
