3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/3154","c"]
0:["SAPzS3zi9tsG5MkeKvxIA",[[["",{"children":[["slug","python/pep/3154","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3154\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3154","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T30f3,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3154/">PEP 3154 - Pickle protocol version 4</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 11-Aug-2011</p>
</blockquote>
<h2>PEP 3154 – Pickle 프로토콜 버전 4</h2>
<ul>
<li><strong>작성자:</strong> Antoine Pitrou</li>
<li><strong>상태:</strong> Final (최종)</li>
<li><strong>유형:</strong> Standards Track (표준 트랙)</li>
<li><strong>생성일:</strong> 2011년 8월 11일</li>
<li><strong>Python 버전:</strong> 3.4</li>
</ul>
<hr>
<h3>초록 (Abstract)</h3>
<p><code>pickle</code> 모듈을 사용하여 직렬화된 데이터는 Python 버전 간에 이식 가능해야 합니다. 또한, 최신 언어 기능과 구현별 기능도 지원해야 합니다. 이러한 이유로 <code>pickle</code> 모듈은 여러 프로토콜(현재 0부터 3까지)을 인식하며, 각 프로토콜은 다른 Python 버전에서 도입되었습니다. 낮은 번호의 프로토콜 버전을 사용하면 이전 Python 버전과 데이터를 교환할 수 있으며, 높은 번호의 프로토콜을 사용하면 최신 기능에 접근하고 때로는 더 효율적인 자원 사용(직렬화/역직렬화에 필요한 CPU 시간 및 데이터 전송에 필요한 디스크 크기/네트워크 대역폭)이 가능합니다.</p>
<h3>도입 배경 (Rationale)</h3>
<p>현재 최신 프로토콜인 프로토콜 3은 Python 3.0과 함께 등장했으며, 언어의 새로운 호환 불가능한 기능(주로 기본 Unicode 문자열 및 새로운 <code>bytes</code> 객체)을 지원합니다. 당시에는 다른 방식으로 프로토콜을 개선할 기회가 주어지지 않았습니다.</p>
<p>이 PEP는 새로운 pickle 프로토콜 버전에서 점진적인 개선 사항들을 추진하려는 시도입니다. 새로운 pickle 프로토콜의 도입은 드문 일이므로, 가능한 한 많은 개선 사항을 모으기 위해 PEP 프로세스가 활용되었습니다.</p>
<h3>제안된 변경 사항 (Proposed changes)</h3>
<h4>프레이밍 (Framing)</h4>
<p>기존에는 스트림에서 객체를 역직렬화할 때( <code>loads()</code> 대신 <code>load()</code> 호출) 파일과 유사한 객체에서 많은 작은 <code>read()</code> 호출이 발생하여 잠재적으로 성능에 큰 영향을 미칠 수 있었습니다.</p>
<p>반면, 프로토콜 4는 바이너리 프레이밍 기능을 제공합니다. pickle의 일반적인 구조는 다음과 같습니다:</p>
<pre><code>+------+------+
| 0x80 | 0x04 | 프로토콜 헤더 (2 bytes)
+------+------+-----------+
| OP   | FRAME opcode (1 byte)
+------+------+-----------+
| MM MM MM MM MM MM MM MM | 프레임 크기 (8 bytes, little-endian)
+------+------------------+
| .... | 첫 번째 프레임 내용 (M bytes)
+------+
| OP   | FRAME opcode (1 byte)
+------+------+-----------+
| NN NN NN NN NN NN NN NN | 프레임 크기 (8 bytes, little-endian)
+------+------------------+
| .... | 두 번째 프레임 내용 (N bytes)
+------+
etc.
</code></pre>
<p>구현을 단순하게 유지하기 위해 pickle opcode가 프레임 경계를 넘어가는 것은 금지됩니다. 피클러(pickler)는 그러한 pickle을 생성하지 않도록 주의하고, 언피클러(unpickler)는 이를 거부합니다. 또한, "마지막 프레임" 마커는 없습니다. 마지막 프레임은 단순히 <code>STOP</code> opcode로 끝나는 프레임입니다. 잘 작성된 C 구현은 프레이밍 계층에 추가적인 메모리 복사가 필요 없어 전반적인 (역)직렬화 효율성을 유지합니다.</p>
<p><strong>참고:</strong> 피클러가 pickle 스트림을 프레임으로 분할하는 방법은 구현 세부 사항입니다. 예를 들어, 약 64 KiB에 도달하자마자 프레임을 "닫는" 것은 성능과 pickle 크기 오버헤드 모두에 합리적인 선택입니다.</p>
<h4>모든 opcode에 대한 바이너리 인코딩 (Binary encoding for all opcodes)</h4>
<p>프로토콜 3에서 여전히 사용되는 <code>GLOBAL</code> opcode는 pickle 스트림에서 줄 바꿈(newlines)을 찾는 소위 "텍스트" 모드를 사용합니다. 이는 또한 바이너리 프레이밍의 구현을 복잡하게 만듭니다. 프로토콜 4는 <code>GLOBAL</code> opcode의 사용을 금지하고, 스택에서 피연산자를 가져오는 새로운 opcode인 <code>STACK_GLOBAL</code>로 대체합니다.</p>
<h4>더 많은 "조회 가능한" 객체 직렬화 (Serializing more “lookupable” objects)</h4>
<p>기본적으로 pickle은 모듈-전역 함수와 클래스만 직렬화할 수 있습니다. 바인딩되지 않은 메서드(unbound methods)와 같은 다른 종류의 객체를 지원하는 것은 일반적인 요청입니다. 실제로 바인딩된 메서드(bound methods)와 같은 일부 객체에 대한 서드 파티 지원은 <code>multiprocessing</code> 모듈에 구현되어 있습니다.</p>
<p>PEP 3155의 <code>__qualname__</code> 속성은 이름으로 더 많은 객체를 조회할 수 있게 합니다. <code>STACK_GLOBAL</code> opcode가 점(dot)으로 구분된 이름을 허용하면 표준 pickle 구현이 이러한 모든 종류의 객체를 지원할 수 있게 됩니다.</p>
<h4>대형 객체를 위한 64비트 opcode (64-bit opcodes for large objects)</h4>
<p>현재 프로토콜 버전은 다양한 내장 타입( <code>str</code>, <code>bytes</code>)의 객체 크기를 32비트 정수로 내보냅니다. 이는 대용량 데이터의 직렬화를 금지합니다. 매우 큰 <code>bytes</code> 및 <code>str</code> 객체를 지원하기 위해 새로운 opcode가 필요합니다.</p>
<h4><code>set</code> 및 <code>frozenset</code>을 위한 네이티브 opcode (Native opcodes for sets and frozensets)</h4>
<p>많은 일반적인 내장 타입(예: <code>str</code>, <code>bytes</code>, <code>dict</code>, <code>list</code>, <code>tuple</code>)은 직렬화 및 역직렬화 시 자원 소비를 개선하기 위한 전용 opcode를 가지고 있습니다. 그러나 <code>set</code> 및 <code>frozenset</code>은 그렇지 않습니다. 이러한 opcode를 추가하는 것은 명백한 개선 사항입니다. 또한, 전용 <code>set</code> 지원은 자기 참조 <code>set</code>을 pickle할 수 없던 현재의 문제를 해결하는 데 도움이 될 수 있습니다 [2, cite: 1].</p>
<h4>키워드 인수로 <code>__new__</code> 호출 (Calling <strong>new</strong> with keyword arguments)</h4>
<p>현재, <code>__new__</code> 메서드가 키워드 전용 인수를 사용하도록 요구하는 클래스는 pickle될 수 없습니다(또는 오히려 역직렬화될 수 없습니다) [3, cite: 1]. 새로운 특수 메서드(<code>__getnewargs_ex__</code>)와 새로운 opcode(<code>NEWOBJ_EX</code>)가 모두 필요합니다. <code>__getnewargs_ex__</code> 메서드가 존재한다면, 두 개의 항목을 가진 튜플 <code>(args, kwargs)</code>를 반환해야 합니다. 여기서 첫 번째 항목은 위치 인수(positional arguments)의 튜플이고, 두 번째 항목은 클래스의 <code>__new__</code> 메서드에 대한 키워드 인수(keyword arguments)의 딕셔너리입니다.</p>
<h4>더 나은 문자열 인코딩 (Better string encoding)</h4>
<p>짧은 <code>str</code> 객체는 현재 길이가 4바이트 정수로 인코딩되어 낭비가 심합니다. 1바이트 길이 접두사를 가진 특정 opcode는 많은 pickle의 크기를 줄일 것입니다.</p>
<h4>더 작은 메모화 (Smaller memoization)</h4>
<p><code>PUT</code> opcode는 스택의 최상단 항목이 메모 딕셔너리의 어느 항목에 메모화될지 선택하기 위한 명시적인 인덱스를 모두 필요로 합니다. 그러나 실제로는 이러한 숫자는 순차적으로 할당됩니다. 새로운 opcode인 <code>MEMOIZE</code>는 대신 스택의 최상단 항목을 메모 딕셔너리의 현재 크기와 동일한 인덱스에 저장합니다. 이는 모든 비원자적 데이터 타입에 대해 <code>PUT</code> opcode가 방출되므로 더 짧은 pickle을 가능하게 합니다.</p>
<h3>새로운 opcode 요약 (Summary of new opcodes)</h3>
<p>다음은 제안된 구현의 상태를 반영합니다:</p>
<ul>
<li><strong><code>FRAME</code></strong>: 새로운 프레임을 도입합니다 (8바이트 프레임 크기와 프레임 내용이 뒤따릅니다).</li>
<li><strong><code>SHORT_BINUNICODE</code></strong>: 1바이트 크기 접두사(따라서 256바이트 미만)를 가진 UTF8 인코딩 <code>str</code> 객체를 스택에 푸시합니다.</li>
<li><strong><code>BINUNICODE8</code></strong>: 8바이트 크기 접두사를 가진 UTF8 인코딩 <code>str</code> 객체(2^32바이트보다 긴 문자열로, <code>BINUNICODE</code>를 사용하여 직렬화할 수 없는 경우)를 스택에 푸시합니다.</li>
<li><strong><code>BINBYTES8</code></strong>: 8바이트 크기 접두사를 가진 <code>bytes</code> 객체(2^32바이트보다 긴 <code>bytes</code> 객체로, <code>BINBYTES</code>를 사용하여 직렬화할 수 없는 경우)를 스택에 푸시합니다.</li>
<li><strong><code>EMPTY_SET</code></strong>: 새로운 빈 <code>set</code> 객체를 스택에 푸시합니다.</li>
<li><strong><code>ADDITEMS</code></strong>: 스택 최상단 항목들을 <code>set</code>에 추가합니다 (<code>EMPTY_SET</code>과 함께 사용).</li>
<li><strong><code>FROZENSET</code></strong>: 스택 최상단 항목들로부터 <code>frozenset</code> 객체를 생성하고 스택에 푸시합니다.</li>
<li><strong><code>NEWOBJ_EX</code></strong>: 스택 최상단 세 항목 <code>cls</code>, <code>args</code>, <code>kwargs</code>를 가져와 <code>cls.__new__(*args, **kwargs)</code> 호출 결과를 스택에 푸시합니다.</li>
<li><strong><code>STACK_GLOBAL</code></strong>: 스택 최상단 두 항목 <code>module_name</code>과 <code>qualname</code>을 가져와 <code>module_name</code>이라는 모듈에서 점(dot)으로 구분된 <code>qualname</code>을 조회한 결과를 스택에 푸시합니다.</li>
<li><strong><code>MEMOIZE</code></strong>: 스택 최상단 객체를 메모 딕셔너리에 메모 딕셔너리의 현재 크기와 동일한 인덱스로 저장합니다.</li>
</ul>
<h3>대안 아이디어 (Alternative ideas)</h3>
<h4>프리페칭 (Prefetching)</h4>
<p>Serhiy Storchaka는 알려진 pickle 청크를 명시적으로 선언하기 위해 프레이밍을 특별한 <code>PREFETCH</code> opcode(2 또는 4바이트 인수 포함)로 대체할 것을 제안했습니다. 대용량 데이터는 이러한 청크 외부에 pickle될 수 있습니다. 순진한(naïve) 언피클러는 <code>PREFETCH</code> opcode를 건너뛰고도 pickle을 제대로 디코딩할 수 있어야 하지만, 적절한 오류 처리를 위해서는 <code>PREFETCH</code> 길이가 opcode 경계에 해당하는지 확인해야 할 것입니다.</p>
<h3>감사 (Acknowledgments)</h3>
<ul>
<li>Alexandre Vassalotti</li>
<li>Serhiy Storchaka</li>
<li>Stefan Mihaila</li>
</ul>
<h3>참고 자료 (References)</h3>
<ul>
<li>“pickle not 64-bit ready”: <a href="http://bugs.python.org/issue11564">http://bugs.python.org/issue11564</a></li>
<li>“Cannot pickle self-referencing sets”: <a href="http://bugs.python.org/issue9269">http://bugs.python.org/issue9269</a></li>
<li>“pickle/copyreg doesn't support keyword only arguments in <strong>new</strong>”: <a href="http://bugs.python.org/issue4727">http://bugs.python.org/issue4727</a></li>
<li>“pickle should support methods”: <a href="http://bugs.python.org/issue9276">http://bugs.python.org/issue9276</a></li>
<li>Lib/multiprocessing/forking.py: <a href="http://hg.python.org/cpython/file/baea9f5f973c/Lib/multiprocessing/forking.py#l54">http://hg.python.org/cpython/file/baea9f5f973c/Lib/multiprocessing/forking.py#l54</a></li>
<li>Implement PEP 3154, by Alexandre Vassalotti <a href="http://bugs.python.org/issue17810">http://bugs.python.org/issue17810</a></li>
<li>Implement PEP 3154, by Stefan Mihaila <a href="http://bugs.python.org/issue15642">http://bugs.python.org/issue15642</a></li>
</ul>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인에 공개되었습니다.</p>
<hr>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 3154 - Pickle protocol version 4"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 19:20:26+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
