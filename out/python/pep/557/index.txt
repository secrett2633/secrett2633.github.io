3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-1a135130af3e1cae.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/557","c"]
0:["8N6icDw00Cy0kKVlExSq2",[[["",{"children":[["slug","python/pep/557","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"557\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/557","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T5b65,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0557/">PEP 557 - Data Classes</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 02-Jun-2017</p>
</blockquote>
<p>PEP 557 – Data Classes (데이터 클래스) 번역 및 요약</p>
<h2>개요</h2>
<p>PEP 557은 Python 3.7부터 표준 라이브러리에 추가된 <code>dataclasses</code> 모듈을 설명하는 문서입니다. 이 PEP는 주로 데이터를 저장하는 데 사용되는 클래스를 더 쉽고 간결하게 작성할 수 있도록 돕는 <code>Data Classes</code>의 개념과 구현을 소개합니다. <code>Data Classes</code>는 <code>namedtuple</code>의 가변 버전이자 기본값을 지원하는 형태로 이해할 수 있으며, 일반적인 클래스 정의 문법을 사용하므로 상속, 메타클래스, docstring, 사용자 정의 메서드 등 기존 Python 클래스의 모든 기능을 활용할 수 있습니다.</p>
<p><code>@dataclass</code> 데코레이터는 PEP 526에 정의된 변수 어노테이션(type annotation)이 있는 클래스 정의 내의 변수(이 문서에서는 "필드"라고 함)를 검사합니다. 이 필드들을 기반으로 데코레이터는 인스턴스 초기화, <code>repr</code> 표현, 비교 메서드 등 다양한 메서드 정의를 자동으로 생성하여 클래스에 추가합니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">@dataclass
class InventoryItem:
    '''재고 품목을 추적하는 클래스입니다.'''
    name: str
    unit_price: float
    quantity_on_hand: int = 0

    def total_cost(self) -> float:
        return self.unit_price * self.quantity_on_hand
</code></pre>
<p>위 <code>InventoryItem</code> 클래스에 <code>@dataclass</code> 데코레이터가 추가하면 다음과 같은 메서드가 자동으로 생성됩니다:</p>
<ul>
<li><code>__init__</code>: 인스턴스 초기화 메서드</li>
<li><code>__repr__</code>: 객체의 공식적인 문자열 표현을 반환하는 메서드</li>
<li><code>__eq__</code>, <code>__ne__</code>, <code>__lt__</code>, <code>__le__</code>, <code>__gt__</code>, <code>__ge__</code>: 비교 메서드들</li>
</ul>
<p><code>Data Classes</code>는 이러한 boilerplate 코드를 직접 작성하고 관리하는 수고를 덜어줍니다.</p>
<h2>도입 배경 (Rationale)</h2>
<p>값을 저장하고 속성으로 접근하는 데 주로 사용되는 클래스를 정의하려는 시도는 많았습니다. 대표적인 예시로는 <code>collections.namedtuple</code>, <code>typing.NamedTuple</code>, 그리고 인기 있는 <code>attrs</code> 프로젝트 등이 있습니다.</p>
<p>PEP 526을 통해 Python에 클래스 멤버의 타입을 간결하게 지정하는 방법이 추가되었고, 이 PEP는 해당 문법을 활용하여 <code>Data Classes</code>를 간단하고 자연스럽게 사용할 수 있도록 합니다. <code>Data Classes</code>는 베이스 클래스나 메타클래스를 사용하지 않으므로, 사용자는 <code>Data Classes</code>의 간섭 없이 상속과 메타클래스를 자유롭게 사용할 수 있습니다. 데코레이트된 클래스는 "일반적인" Python 클래스입니다.</p>
<p><code>Data Classes</code>의 주요 설계 목표 중 하나는 정적 타입 검사기(static type checkers)를 지원하는 것입니다. PEP 526 문법의 활용과 <code>fields()</code> 함수 및 <code>@dataclass</code> 데코레이터의 설계가 이에 해당합니다. 위에 언급된 일부 라이브러리는 동적인 특성 때문에 정적 타입 검사기와 함께 사용하기 어려울 수 있습니다.</p>
<p><code>Data Classes</code>는 기존 라이브러리를 완전히 대체하기 위한 것이 아닙니다. 하지만 표준 라이브러리에 포함됨으로써 많은 단순한 사용 사례에서 <code>Data Classes</code>를 활용할 수 있게 될 것입니다. 기존 라이브러리들은 각기 다른 기능 세트를 가지고 있으며, 계속해서 존재하고 발전할 것입니다.</p>
<p><code>Data Classes</code> 사용이 적절하지 않은 경우:</p>
<ul>
<li>튜플(tuple) 또는 딕셔너리(dict)와의 API 호환성이 필요한 경우.</li>
<li>PEP 484 및 526에서 제공하는 것 이상의 타입 유효성 검사 또는 값 유효성 검사/변환이 필요한 경우.</li>
</ul>
<h2>명세 (Specification)</h2>
<p>이 PEP에서 설명하는 모든 기능은 <code>dataclasses</code>라는 모듈에 포함됩니다.</p>
<p><code>@dataclass</code> 데코레이터는 클래스를 검사하여 필드를 찾습니다. 필드는 <code>__annotations__</code>에 식별된 모든 변수, 즉 타입 어노테이션(type annotation)이 있는 변수를 의미합니다. <code>__annotations__</code>는 클래스 선언 순서대로 정렬된 매핑(ordered mapping)임을 보장하며, 생성되는 모든 메서드에서 필드의 순서는 클래스에 나타나는 순서를 따릅니다.</p>
<p><code>@dataclass</code> 데코레이터는 다양한 "dunder" 메서드를 클래스에 추가합니다. 이미 클래스에 추가될 메서드 중 하나라도 존재하면 <code>TypeError</code>가 발생합니다. 데코레이터는 새로운 클래스를 생성하지 않고, 주어진 클래스 자체를 반환합니다.</p>
<p><code>@dataclass</code>는 일반적으로 매개변수나 괄호 없이 사용되지만, 다음과 같은 논리적 시그니처를 지원합니다:</p>
<pre><code class="language-python">def dataclass(*, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False)
</code></pre>
<p>매개변수는 다음과 같습니다:</p>
<ul>
<li><code>init</code> (기본값 <code>True</code>): <code>__init__</code> 메서드를 생성할지 여부를 결정합니다.</li>
<li><code>repr</code> (기본값 <code>True</code>): <code>__repr__</code> 메서드를 생성할지 여부를 결정합니다. 생성된 <code>repr</code> 문자열은 클래스 이름과 각 필드의 이름 및 <code>repr</code> 값을 포함합니다.</li>
<li><code>eq</code> (기본값 <code>True</code>): <code>__eq__</code> 메서드를 생성할지 여부를 결정합니다. 필드의 튜플처럼 클래스를 비교합니다.</li>
<li><code>order</code> (기본값 <code>False</code>): <code>True</code>인 경우 <code>__lt__</code>, <code>__le__</code>, <code>__gt__</code>, <code>__ge__</code> 메서드를 생성합니다. 이 메서드들은 필드의 튜플처럼 클래스를 순서대로 비교합니다. <code>order</code>가 <code>True</code>이고 <code>eq</code>가 <code>False</code>이면 <code>ValueError</code>가 발생합니다.</li>
<li><code>unsafe_hash</code> (기본값 <code>False</code>): <code>__hash__</code> 메서드가 생성되는 방식을 제어합니다. <code>eq</code>와 <code>frozen</code> 설정에 따라 <code>__hash__</code>가 생성됩니다. 일반적으로 <code>eq=True</code>이고 <code>frozen=True</code>일 때 <code>__hash__</code>가 생성되며, <code>eq=True</code>이고 <code>frozen=False</code>일 때 <code>__hash__</code>는 <code>None</code>으로 설정되어 해시 불가능(unhashable)하게 만듭니다. <code>unsafe_hash=True</code>를 사용하면 강제로 <code>__hash__</code>를 생성할 수 있지만, 이는 특별한 경우에만 권장됩니다.</li>
<li><code>frozen</code> (기본값 <code>False</code>): <code>True</code>인 경우 필드에 값을 할당할 때 예외를 발생시켜 읽기 전용(immutable) 인스턴스를 에뮬레이션합니다. <code>__setattr__</code> 또는 <code>__delattr__</code>가 클래스에 정의되어 있으면 <code>ValueError</code>가 발생합니다.</li>
</ul>
<h3>필드의 기본값</h3>
<p>필드는 일반 Python 문법을 사용하여 선택적으로 기본값을 지정할 수 있습니다:</p>
<pre><code class="language-python">@dataclass
class C:
    a: int        # 'a'는 기본값이 없음
    b: int = 0    # 'b'에 기본값 0 할당
</code></pre>
<p>기본값이 없는 필드 뒤에 기본값이 있는 필드가 오면 <code>TypeError</code>가 발생합니다.</p>
<h3><code>field()</code> 함수</h3>
<p>더 복잡한 필드 정보를 지정해야 하는 경우, 기본 필드 값을 <code>dataclasses.field()</code> 함수 호출로 대체할 수 있습니다. <code>field()</code>의 시그니처는 다음과 같습니다:</p>
<pre><code class="language-python">def field(*, default=MISSING, default_factory=MISSING, repr=True, hash=None, init=True, compare=True, metadata=None)
</code></pre>
<ul>
<li><code>default</code>: 필드의 기본값입니다.</li>
<li><code>default_factory</code>: 기본값이 필요할 때 호출될 인자 없는 콜러블(callable)입니다. 가변 기본값을 지정하는 데 사용됩니다. <code>default</code>와 <code>default_factory</code>를 동시에 지정하는 것은 에러입니다.</li>
<li><code>init</code>: <code>True</code>인 경우, 이 필드는 생성된 <code>__init__</code> 메서드의 매개변수에 포함됩니다.</li>
<li><code>repr</code>: <code>True</code>인 경우, 이 필드는 생성된 <code>__repr__</code> 메서드가 반환하는 문자열에 포함됩니다.</li>
<li><code>compare</code>: <code>True</code>인 경우, 이 필드는 생성된 비교 메서드(<code>__eq__</code>, <code>__gt__</code> 등)에 포함됩니다.</li>
<li><code>hash</code>: <code>bool</code> 또는 <code>None</code>입니다. <code>True</code>인 경우, 이 필드는 생성된 <code>__hash__</code> 메서드에 포함됩니다. <code>None</code>인 경우 <code>compare</code> 값에 따라 결정됩니다.</li>
<li><code>metadata</code>: 매핑(mapping) 또는 <code>None</code>입니다. <code>Data Classes</code> 자체에서는 사용되지 않으며, 서드파티 확장을 위한 메커니즘으로 제공됩니다.</li>
</ul>
<h3><code>Field</code> 객체</h3>
<p><code>Field</code> 객체는 각 정의된 필드를 설명하며, <code>fields()</code> 모듈 수준 메서드에 의해 반환됩니다. <code>Field</code> 객체의 속성으로는 <code>name</code>, <code>type</code>, <code>default</code>, <code>default_factory</code>, <code>init</code>, <code>repr</code>, <code>hash</code>, <code>compare</code>, <code>metadata</code> 등이 있습니다.</p>
<h3><code>__post_init__</code> 처리</h3>
<p>생성된 <code>__init__</code> 코드는 클래스에 <code>__post_init__</code> 메서드가 정의되어 있으면 이를 호출합니다. 이는 <code>self.__post_init__()</code> 형태로 호출됩니다. <code>__init__</code> 메서드가 생성되지 않으면 <code>__post_init__</code>도 자동으로 호출되지 않습니다. 이 메서드는 다른 필드에 의존하는 필드 값을 초기화하는 등의 용도로 사용될 수 있습니다.</p>
<pre><code class="language-python">@dataclass
class C:
    a: float
    b: float
    c: float = field(init=False)

    def __post_init__(self):
        self.c = self.a + self.b
</code></pre>
<h3>클래스 변수 (Class variables)</h3>
<p><code>dataclass</code> 데코레이터는 필드가 <code>PEP 526</code>에 정의된 클래스 변수인지 여부를 <code>typing.ClassVar</code> 타입 어노테이션을 통해 확인합니다. <code>ClassVar</code>인 필드는 <code>Data Class</code> 메커니즘에 의해 필드로 간주되지 않고 무시됩니다.</p>
<h3><code>Init-only</code> 변수</h3>
<p><code>dataclass</code>가 타입 어노테이션을 검사하는 또 다른 경우는 필드가 <code>init-only</code> 변수인지 확인하는 것입니다. <code>dataclasses.InitVar</code> 타입의 필드는 <code>init-only</code> 필드로 간주됩니다. 이는 실제 필드가 아니므로 <code>fields()</code> 함수에 의해 반환되지 않습니다. <code>Init-only</code> 필드는 생성된 <code>__init__</code> 메서드의 매개변수로 추가되며, 선택적인 <code>__post_init__</code> 메서드에 전달됩니다.</p>
<pre><code class="language-python">@dataclass
class C:
    i: int
    j: int = None
    database: InitVar[DatabaseType] = None # Init-only 변수

    def __post_init__(self, database):
        if self.j is None and database is not None:
            self.j = database.lookup('j')

c = C(10, database=my_database)
</code></pre>
<h3>불변 인스턴스 (Frozen instances)</h3>
<p><code>@dataclass</code> 데코레이터에 <code>frozen=True</code>를 전달하면 불변성(immutability)을 에뮬레이션할 수 있습니다. 이 경우 <code>Data Classes</code>는 <code>__setattr__</code> 및 <code>__delattr__</code> 메서드를 클래스에 추가하여 호출 시 <code>FrozenInstanceError</code>를 발생시킵니다.</p>
<h3>상속 (Inheritance)</h3>
<p><code>@dataclass</code> 데코레이터는 클래스의 모든 베이스 클래스를 역 MRO(Method Resolution Order) 순서로 탐색하여, 발견된 각 <code>Data Class</code>의 필드를 정렬된 필드 매핑에 추가합니다. 베이스 클래스의 필드가 모두 추가된 후, 현재 클래스의 필드를 추가합니다. 파생 클래스는 베이스 클래스를 오버라이드합니다.</p>
<pre><code class="language-python">@dataclass
class Base:
    x: Any = 15.0
    y: int = 0

@dataclass
class C(Base):
    z: int = 10
    x: int = 15 # Base의 x를 오버라이드

# 필드 순서는 x, y, z 이며, x의 최종 타입은 int가 됩니다.
</code></pre>
<h3>기본 팩토리 함수 (Default factory functions)</h3>
<p>필드가 <code>default_factory</code>를 지정하면, 해당 필드에 기본값이 필요할 때 인자 없이 호출됩니다. 예를 들어, 새 리스트 인스턴스를 생성하려면 <code>l: list = field(default_factory=list)</code>와 같이 사용합니다.</p>
<h3>가변 기본값 (Mutable default values)</h3>
<p>Python은 기본 멤버 변수 값을 클래스 속성에 저장하기 때문에, 클래스 인스턴스들이 동일한 가변 객체를 공유하는 문제가 발생할 수 있습니다. <code>Data Classes</code>는 이러한 문제를 방지하기 위해 <code>list</code>, <code>dict</code>, <code>set</code> 타입의 기본 매개변수를 감지하면 <code>TypeError</code>를 발생시킵니다.</p>
<p>가변 기본값을 피하는 올바른 방법은 <code>default_factory</code>를 사용하는 것입니다:</p>
<pre><code class="language-python">@dataclass
class D:
    x: list = field(default_factory=list)
# assert D().x is not D().x
</code></pre>
<h3>모듈 수준 헬퍼 함수 (Module level helper functions)</h3>
<p><code>dataclasses</code> 모듈은 다음 헬퍼 함수들을 제공합니다:</p>
<ul>
<li><code>fields(class_or_instance)</code>: <code>Data Class</code> 또는 <code>Data Class</code> 인스턴스의 필드를 정의하는 <code>Field</code> 객체 튜플을 반환합니다. <code>ClassVar</code> 또는 <code>InitVar</code>와 같은 의사(pseudo) 필드는 반환하지 않습니다.</li>
<li><code>asdict(instance, *, dict_factory=dict)</code>: <code>Data Class</code> 인스턴스를 딕셔너리로 변환합니다. <code>Data Classes</code>, <code>dicts</code>, <code>lists</code>, <code>tuples</code>는 재귀적으로 변환됩니다.</li>
<li><code>astuple(instance, *, tuple_factory=tuple)</code>: <code>Data Class</code> 인스턴스를 튜플로 변환합니다. <code>Data Classes</code>, <code>dicts</code>, <code>lists</code>, <code>tuples</code>는 재귀적으로 변환됩니다.</li>
<li><code>make_dataclass(cls_name, fields, *, bases=(), namespace=None)</code>: 새로운 <code>Data Class</code>를 동적으로 생성합니다.</li>
<li><code>replace(instance, **changes)</code>: <code>instance</code>와 동일한 타입의 새 객체를 생성하며, <code>changes</code>의 값으로 필드를 교체합니다. 새 객체는 <code>__init__</code> 메서드를 호출하여 생성되므로 <code>__post_init__</code>도 호출됩니다. <code>init=False</code>로 정의된 필드는 <code>changes</code>에 포함될 수 없습니다.</li>
<li><code>is_dataclass(class_or_instance)</code>: 매개변수가 <code>dataclass</code>이거나 <code>dataclass</code> 인스턴스이면 <code>True</code>를 반환하고, 그렇지 않으면 <code>False</code>를 반환합니다.</li>
</ul>
<h2>논의 (Discussion)</h2>
<h3><code>__slots__</code> 자동 설정 지원 여부</h3>
<p>초기 버전에서는 <code>__slots__</code>가 지원되지 않습니다. <code>__slots__</code>는 클래스 생성 시점에 추가되어야 하지만, <code>Data Class</code> 데코레이터는 클래스 생성 후에 호출됩니다. <code>__slots__</code>를 지원하려면 데코레이터가 새 클래스를 생성해야 하는데, 이는 예상치 못한 동작일 수 있기 때문입니다. 수동으로 <code>__slots__</code>를 추가하거나, <code>fields()</code>를 사용하여 클래스를 검사하고 <code>__slots__</code>가 설정된 새 클래스를 생성하는 함수를 작성하는 등의 해결 방법이 있습니다.</p>
<h3><code>namedtuple</code>을 사용하지 않는 이유</h3>
<ul>
<li><code>namedtuple</code>은 필드 수가 동일한 다른 <code>namedtuple</code>과 우연히 비교될 수 있습니다. <code>Data Classes</code>에서는 <code>False</code>를 반환합니다.</li>
<li><code>namedtuple</code>은 튜플과 우연히 비교될 수 있습니다. <code>Data Classes</code>에서는 <code>False</code>를 반환합니다.</li>
<li><code>namedtuple</code> 인스턴스는 항상 iterable이므로 필드를 추가하기 어렵습니다.</li>
<li>가변 인스턴스에 대한 옵션이 없습니다.</li>
<li>기본값을 지정할 수 없습니다.</li>
<li><code>__init__</code>, <code>__repr__</code> 등에 사용될 필드를 제어할 수 없습니다.</li>
<li>상속을 통한 필드 조합을 지원하지 않습니다.</li>
</ul>
<h3><code>typing.NamedTuple</code>을 사용하지 않는 이유</h3>
<p><code>typing.NamedTuple</code>은 정적으로 정의된 필드에 대해 <code>Data Classes</code>와 유사한 문법을 지원하지만, <code>namedtuple</code>을 생성하므로 <code>namedtuple</code>의 단점을 일부 공유합니다. <code>Data Classes</code>는 <code>typing.NamedTuple</code>과 달리 상속을 통한 필드 조합을 지원합니다.</p>
<h3><code>attrs</code>를 사용하지 않는 이유</h3>
<p><code>attrs</code>는 표준 라이브러리에 포함될 수 없을 정도로 빠르게 발전했습니다. <code>attrs</code>는 유효성 검사기(validators), 변환기(converters), 메타데이터 등 <code>Data Classes</code>에서 제안되지 않은 추가 기능을 지원합니다. <code>Data Classes</code>는 이러한 기능을 구현하지 않음으로써 단순성을 목표로 합니다.</p>
<h3><code>post-init</code> 매개변수</h3>
<p>초기 버전에서는 <code>__post_init__</code> 함수가 매개변수를 받지 않았습니다. 매개변수화된 초기화를 수행하는 일반적인 방법은 대체 클래스메서드 생성자(alternate classmethod constructor)를 제공하는 것이었습니다. <code>InitVar</code>가 추가됨으로써 <code>__post_init__</code> 함수는 이제 매개변수를 받을 수 있게 되었으며, 이 매개변수는 <code>__init__</code>을 통해 <code>__post_init__</code>로 전달됩니다.</p>
<h3><code>asdict</code> 및 <code>astuple</code> 함수 이름</h3>
<p><code>asdict()</code>와 <code>astuple()</code> 함수 이름은 PEP 8에 부합하지 않는다는 논의가 있었으나, <code>namedtuple._asdict()</code> 및 <code>attr.asdict()</code>와의 일관성을 유지하기 위해 현재 이름을 사용하기로 결정했습니다.</p>
<h2>거부된 아이디어 (Rejected ideas)</h2>
<h3><code>replace()</code>에서 <code>init=False</code> 필드를 새 객체 생성 후 복사</h3>
<p>이전 버전에서는 <code>init=False</code> 필드가 <code>__init__</code> 반환 후 원본 객체에서 새로 생성된 객체로 복사되도록 명시했지만, 이는 <code>__init__</code> 및 <code>__post_init__</code>를 사용하여 새 객체를 초기화하는 방식과 일치하지 않는다고 판단되어 거부되었습니다.</p>
<h3>가변 기본값 자동 지원</h3>
<p>리터럴 리스트 <code>[]</code>와 같은 가변 기본값을 자동으로 복사하여 각 인스턴스가 새로운 리스트를 얻도록 하자는 제안이 있었습니다. 그러나 이 결정에는 바람직하지 않은 부작용이 있었기 때문에, 최종적으로 <code>list</code>, <code>dict</code>, <code>set</code>과 같이 알려진 3가지 내장 가변 타입의 기본 매개변수 사용을 금지하기로 결정했습니다.</p>
<h2>예시 (Examples)</h2>
<h3>사용자 정의 <code>__init__</code> 메서드</h3>
<p>때때로 생성된 <code>__init__</code> 메서드만으로는 충분하지 않을 수 있습니다. 예를 들어, <code>*args</code>와 <code>**kwargs</code>를 저장하는 객체를 만들고 싶다면 <code>init=False</code>로 설정하고 사용자 정의 <code>__init__</code>을 작성할 수 있습니다.</p>
<pre><code class="language-python">@dataclass(init=False)
class ArgHolder:
    args: List[Any]
    kwargs: Mapping[Any, Any]

    def __init__(self, *args, **kwargs):
        self.args = args
        self.kwargs = kwargs

a = ArgHolder(1, 2, three=3)
</code></pre>
<h3>복잡한 예시</h3>
<p>기존의 길고 반복적인 <code>__init__</code> 및 <code>__repr__</code> 메서드를 가진 클래스를 <code>Data Class</code>로 전환하면 코드가 더 간결하고 선언적으로 바뀌며, 타입 힌트(typing)를 지원하고 다른 생성된 함수들을 포함할 수 있습니다.</p>
<p><strong>원본 클래스:</strong></p>
<pre><code class="language-python">class Application:
    def __init__(self, name, requirements, constraints=None, path='', executable_links=None, executables_dir=()):
        self.name = name
        self.requirements = requirements
        self.constraints = {} if constraints is None else constraints
        self.path = path
        self.executable_links = [] if executable_links is None else executable_links
        self.executables_dir = executables_dir
        self.additional_items = []

    def __repr__(self):
        return f'Application({self.name!r},{self.requirements!r},{self.constraints!r},{self.path!r},{self.executable_links!r},{self.executables_dir!r},{self.additional_items!r})'
</code></pre>
<p><strong><code>Data Class</code> 버전:</strong></p>
<pre><code class="language-python">@dataclass
class Application:
    name: str
    requirements: List[Requirement]
    constraints: Dict[str, str] = field(default_factory=dict)
    path: str = ''
    executable_links: List[str] = field(default_factory=list)
    executable_dir: Tuple[str] = ()
    additional_items: List[str] = field(init=False, default_factory=list)
</code></pre>
<p><code>Data Class</code> 버전은 더 선언적이며 코드가 적고, 타입 힌트를 지원하며, 다른 생성된 함수들을 포함합니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1318,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 557 - Data Classes"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 23:42:21+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
