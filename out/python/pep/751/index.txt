3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-aecaf5ac7a84facf.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-e3ea38185bb36cd2.js"],""]
4:["slug","python/pep/751","c"]
0:["x02Anhkwgp1He7ftuyAhh",[[["",{"children":[["slug","python/pep/751","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"751\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/751","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/da5e1dc2b9a7c5bb.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T5bf8,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0751/">PEP 751 - A file format to record Python dependencies for installation reproducibility</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 24-Jul-2024</p>
</blockquote>
<h1>PEP 751 – 설치 재현성을 위한 Python 종속성 기록 파일 형식</h1>
<h2>요약 (Abstract)</h2>
<p>이 PEP는 Python 환경에서 재현 가능한(reproducible) 설치를 가능하게 하는 새로운 종속성 명세 파일 형식을 제안합니다. 이 형식은 사람이 읽을 수 있고(human-readable), 기계적으로 생성될 수 있도록 설계되었습니다. 이 파일을 사용하는 설치 도구는 설치 시점에 종속성 해결(dependency resolution) 과정 없이 무엇을 설치해야 할지 계산할 수 있어야 합니다.</p>
<h2>동기 (Motivation)</h2>
<p>현재 Python 생태계에는 가상 환경에 어떤 직접 및 간접 종속성을 설치해야 하는지 명시하는 <code>lock file</code>과 같은 불변(immutable) 레코드를 생성하기 위한 표준이 존재하지 않습니다.</p>
<p>커뮤니티 내에 PDM, <code>pip freeze</code>, pip-tools, Poetry, uv와 같이 이 문제를 해결하기 위한 최소 다섯 가지의 잘 알려진 솔루션이 있다는 점을 고려할 때, <code>lock file</code>에 대한 전반적인 수요가 분명히 존재합니다.</p>
<p>이러한 도구들은 지원하는 <code>locking</code> 시나리오에서도 차이가 있습니다. 예를 들어, <code>pip freeze</code>와 <code>pip-tools</code>는 현재 환경에 대한 일회성 <code>lock file</code>만 생성하는 반면, PDM, Poetry, uv는 여러 환경과 사용 사례를 동시에 <code>lock</code>할 수 있습니다. 또한, 일부 도구(예: 파일 해시 포함 여부)의 공급망 공격(supply chain attacks)에 대한 보안 기본값 부족에 대한 우려도 있습니다.</p>
<p>표준의 부재는 몇 가지 단점을 야기합니다. <code>lock file</code>과 연동하려는 모든 도구는 어떤 형식을 지원할지 선택해야 하므로, 잠재적으로 사용자 지원이 어려워질 수 있습니다 (예: Dependabot이나 클라우드 제공업체가 특정 도구만 지원). 이는 도구 간의 이식성(portability)에도 영향을 미쳐 벤더 종속(vendor lock-in)을 초래합니다. 호환성과 상호 운용성이 부족하면 <code>lock file</code>을 둘러싼 도구들이 분열되어 사용자 및 도구 모두 어떤 <code>lock file</code> 형식을 사용할지 미리 선택해야 하므로, 다른 형식으로의 전환 비용이 발생합니다 (예: <code>lock file</code> 감사(auditing) 관련 도구). 단일 형식으로의 통합은 이러한 비용과 장벽을 제거합니다.</p>
<p>커뮤니티에서 표준에 가장 가까운 것은 <code>pip</code>의 <code>requirements file</code>이며, 앞서 언급된 모든 도구는 이를 직접 파일 형식으로 사용하거나 내보냅니다 (<code>requirements.txt</code> 등). 그러나 이 형식은 표준이 아니라 관례적으로 지원됩니다. 또한 <code>pip</code>의 요구 사항에 맞춰 설계되어 유연성과 사용 편의성이 제한됩니다 (예: 맞춤형 파일 형식). 마지막으로, 기본적으로 보안이 취약합니다 (예: 파일 해시 지원은 완전히 <code>opt-in</code> 기능이며, <code>requirements file</code>에 없는 다른 종속성을 찾지 않도록 <code>pip</code>에 명시적으로 지시해야 합니다).</p>
<p><strong>참고:</strong> PEP 665의 많은 동기가 이 PEP에도 적용됩니다.</p>
<h2>근거 (Rationale)</h2>
<p>이 PEP가 제안하는 파일 형식은 사람이 읽을 수 있도록(human-readable) 설계되었습니다. 이는 <code>lock file</code>에 원치 않는 종속성이 포함되지 않았는지 사람이 내용을 감사할 수 있도록 하기 위함입니다.</p>
<p>또한 이 파일 형식은 설치 시점에 <code>resolver</code>가 필요하지 않도록 설계되었습니다. 이는 <code>lock file</code>을 소비할 때 무엇이 설치될지 추론하는 것을 크게 단순화합니다. 또한 <code>lock file</code> 생성보다 훨씬 더 자주 발생하는 설치를 더 빠르게 수행할 수 있게 합니다.</p>
<p>파일의 데이터는 Python으로 작성되지 않은 도구에서도 사용할 수 있어야 합니다. 예를 들어, 클라우드 호스팅 제공업체가 선호하는 프로그래밍 언어로 자체 설치 도구를 작성할 수 있게 합니다. 이는 <code>lock file</code>을 작성하는 <code>lockers</code>와 <code>lock file</code>에서 설치하는 <code>installers</code>라는 개념을 도입합니다 (두 역할은 동일한 도구일 수 있습니다).</p>
<p>이 파일 형식은 좋은 보안 기본값(security defaults)을 장려해야 합니다. 이 형식은 사람이 직접 작성하도록 의도된 것이 아니므로, 도구가 보안 관련 세부 정보를 제공하는 것이 합리적이며 큰 부담이 되지 않습니다.</p>
<p><code>lock file</code>의 내용은 <code>requirements file</code>이 <code>lock file</code>로 사용될 때 (예: <code>pip-tools</code> 및 <code>pip freeze</code>가 생성하는 결과물) 대다수의 용도를 대체할 수 있어야 합니다. 이는 이 PEP에 명시된 파일 형식이 자체 내부 <code>lock file</code> 형식을 가진 도구의 최소한 <code>export target</code> 역할을 할 수 있음을 의미합니다.</p>
<p><code>lock file</code>은 <code>single-use</code> 및 <code>multi-use</code>일 수 있습니다. <code>single-use lock file</code>은 <code>requirements.txt</code> 파일과 같이 단일 사용 사례/목적을 제공하는 파일입니다 (프로젝트에 여러 <code>requirements file</code>이 있는 것이 드물지 않은 이유). <code>multi-use lock file</code>은 종종 <code>extras</code> 및 <code>Dependency Groups</code>를 통해 단일 파일 내에서 여러 사용 사례를 나타냅니다. 이 PEP는 <code>extras</code> 및 <code>dependency groups</code>를 적절하게 지정할 수 있도록 <code>Environment Markers</code>에 대한 추가 기능을 지원합니다. 이는 단일 <code>lock file</code>이 이러한 경우를 지원할 수 있게 합니다. 이는 잠재적인 <code>lock file</code> 수를 줄일 뿐만 아니라, 단일 패키지가 모든 사용 사례에서 일관되어야 할 때 더 쉽게 만듭니다 (여러 <code>single-use lock file</code>의 경우 여러 <code>lock file</code> 간의 조정을 필요로 합니다). 이 지원은 이 PEP가 <code>pyproject.toml</code> 파일에 기록될 수 있는 모든 패키지 설치 관련 데이터를 지원한다는 것을 의미합니다. 이 지원을 통해 일부 도구가 내부 <code>lock file</code>을 완전히 삭제하고 이 PEP가 명시하는 내용에만 의존할 수 있기를 바랍니다.</p>
<h2>명세 (Specification)</h2>
<h3>파일 이름 (File Name)</h3>
<p><code>lock file</code>은 <code>pylock.toml</code>로 이름 지어져야 하며, 특정 이름을 원하거나 여러 <code>lock file</code>이 존재하는 경우 정규 표현식 <code>r"^pylock\.([^.]+)\.toml$"</code>과 일치해야 합니다. <code>.toml</code> 파일 확장자를 사용하는 것은 편집기에서 구문 강조(syntax highlighting)를 쉽게 하고 파일 형식이 사람이 읽을 수 있도록 설계되었음을 강조하기 위함입니다.</p>
<p><code>lock file</code>은 <code>lock file</code>의 범위에 따라 적절한 디렉토리에 위치해야 합니다. 예를 들어, 단일 <code>pyproject.toml</code>에 대한 <code>locking</code>은 <code>pylock.toml</code>을 동일한 디렉토리에 배치합니다.</p>
<h3>파일 형식 (File Format)</h3>
<p>파일 형식은 <strong>TOML</strong>입니다.</p>
<p>도구는 <code>diff</code> 출력의 노이즈를 최소화하기 위해 일관된 방식으로 <code>lock file</code>을 작성해야 합니다. 테이블의 키는 일관된 순서로 기록되어야 하며, 배열도 일관된 순서로 정렬되어야 합니다.</p>
<p>주요 최상위 키들은 다음과 같습니다:</p>
<ul>
<li><strong><code>lock-version</code></strong>: (필수) 파일 형식 버전. 현재 <code>1.0</code>.</li>
<li><strong><code>environments</code></strong>: (선택) <code>lock file</code>이 호환되는 <code>Environment Markers</code> 목록.</li>
<li><strong><code>requires-python</code></strong>: (선택) <code>lock file</code>이 지원하는 최소 Python 버전.</li>
<li><strong><code>extras</code></strong>: (선택) 이 <code>lock file</code>이 지원하는 <code>extras</code> 목록.</li>
<li><strong><code>dependency-groups</code></strong>: (선택) 이 <code>lock file</code>이 공개적으로 지원하는 <code>Dependency Groups</code> 목록.</li>
<li><strong><code>default-groups</code></strong>: (선택) 기본적으로 설치되어야 할 합성 <code>dependency group</code>의 이름.</li>
<li><strong><code>created-by</code></strong>: (필수) <code>lock file</code>을 생성한 도구의 이름.</li>
<li><strong><code>[[packages]]</code></strong>: (필수) 설치될 수 있는 모든 패키지를 포함하는 테이블 배열.
<ul>
<li><strong><code>packages.name</code></strong>: (필수) 정규화된 패키지 이름.</li>
<li><strong><code>packages.version</code></strong>: (선택) 패키지 버전. <code>sdist</code> 또는 <code>wheel</code>이 지정될 때 기록되어야 합니다.</li>
<li><strong><code>packages.marker</code></strong>: (선택) 패키지가 설치되어야 할 시점을 지정하는 <code>environment marker</code>.</li>
<li><strong><code>packages.requires-python</code></strong>: (선택) 패키지의 Python 버전 호환성을 위한 <code>Version specifier</code>.</li>
<li><strong><code>[[packages.dependencies]]</code></strong>: (선택) 이 패키지의 직접적인 종속성인 다른 <code>[[packages]]</code> 항목을 기록. 감사 목적으로만 사용되며, 설치 시에는 사용되지 않습니다.</li>
<li><strong><code>[packages.vcs]</code></strong>: (선택, 다른 소스 필드와 상호 배타적) 버전 관리 시스템 (VCS) 소스 트리의 세부 정보.</li>
<li><strong><code>[packages.directory]</code></strong>: (선택, 다른 소스 필드와 상호 배타적) 로컬 디렉토리 소스 트리의 세부 정보.</li>
<li><strong><code>[packages.archive]</code></strong>: (선택, 다른 소스 필드와 상호 배타적) 아카이브 파일 (<code>wheel</code>, <code>sdist</code> 포함)에 대한 직접 참조.
<ul>
<li><strong><code>packages.archive.hashes</code></strong>: (필수) 파일의 알려진 해시 값. 최소 하나의 해시 알고리즘 (<code>sha256</code> 권장)을 포함해야 합니다.</li>
</ul>
</li>
<li><strong><code>packages.index</code></strong>: (선택) <code>sdist</code> 및/또는 <code>wheel</code>이 발견된 패키지 인덱스의 기본 URL.</li>
<li><strong><code>[packages.sdist]</code></strong>: (선택, 다른 소스 필드와 상호 배타적) 소스 배포판(Source distribution) 파일 세부 정보.</li>
<li><strong><code>[[packages.wheels]]</code></strong>: (선택) 바이너리 배포판(Binary distribution) <code>wheel</code> 파일 세부 정보.</li>
<li><strong><code>[[packages.attestation-identities]]</code></strong>: (선택) 이 패키지에 기록된 모든 파일에 대한 증명(attestation) 기록.</li>
<li><strong><code>[packages.tool]</code></strong>: (선택) 패키지 버전 수준의 도구 특정 데이터. 설치에 영향을 주지 않아야 합니다.</li>
</ul>
</li>
<li><strong><code>[tool]</code></strong>: (선택) <code>lock file</code> 수준의 도구 특정 데이터. 설치에 영향을 주지 않아야 합니다.</li>
</ul>
<h3>마커 표현식 구문 추가 (Additions to marker expression syntax)</h3>
<p>이 PEP는 <code>Environment Markers</code> 명세에 <code>extras</code> 및 <code>dependency_groups</code> 마커를 추가하여 <code>packages.marker</code> 내에서 <code>extras</code> 및 <code>dependency group</code> 관계를 표현할 수 있도록 제안합니다. 이러한 추가 기능은 이 PEP에 정의된 <code>lock file</code> 컨텍스트 내에서만 적용됩니다.</p>
<p>새로운 마커 <code>extras</code>와 <code>dependency_groups</code>가 도입됩니다.
마커 명세는 값에 <code>set</code>을 허용하도록 변경됩니다 (기존 <code>string</code> 및 <code>version</code> 지원에 더하여).
마커 표현식 구문은 <code>set</code>과 관련된 연산을 허용하도록 업데이트됩니다.</p>
<h3>예시 (Example)</h3>
<p>PEP 0751 문서에는 <code>pylock.toml</code> 파일의 예시가 포함되어 있습니다. 이 예시는 <code>lock-version</code>, <code>environments</code>, <code>requires-python</code>, <code>created-by</code>와 같은 최상위 키와 <code>attrs</code>, <code>cattrs</code>, <code>numpy</code>와 같은 패키지에 대한 자세한 정보(<code>name</code>, <code>version</code>, <code>requires-python</code>, <code>wheels</code> 및 해시 등)를 보여줍니다. 또한 <code>[tool]</code> 섹션을 통해 <code>mousebender</code>라는 도구가 <code>lock file</code>을 생성하는 데 사용된 명령어를 기록하는 방법을 보여줍니다.</p>
<h3>설치 (Installation)</h3>
<p><code>lock file</code>로부터 설치하는 과정은 다음과 같은 단계를 포함합니다 (단계 및 순서는 제안사항이며, 요구사항은 지침적입니다):</p>
<ol>
<li>설치할 <code>extras</code> 및 <code>dependency groups</code>를 수집하고 마커 평가를 위해 각각 <code>extras</code> 및 <code>dependency_groups</code>를 설정합니다. 기본적으로 <code>extras</code>는 빈 <code>set</code>, <code>dependency_groups</code>는 <code>default-groups</code>에서 생성된 <code>set</code>으로 설정됩니다.</li>
<li><code>lock-version</code>으로 지정된 메타데이터 버전이 지원되는지 확인합니다.</li>
<li><code>requires-python</code>이 지정된 경우, 설치 환경이 요구 사항을 충족하는지 확인합니다.</li>
<li><code>environments</code>가 지정된 경우, 최소 하나 이상의 환경 마커 표현식이 충족되는지 확인합니다.</li>
<li><code>[[packages]]</code>에 나열된 각 패키지에 대해:
<ul>
<li><code>marker</code>가 지정된 경우, 충족되는지 확인합니다.</li>
<li><code>requires-python</code>이 지정된 경우, 충족되는지 확인합니다.</li>
<li>패키지의 다른 충돌하는 인스턴스가 설치 예정되어 있지 않은지 확인합니다.</li>
<li>패키지의 소스가 적절하게 지정되었는지 확인합니다.</li>
<li>설치할 패키지 목록에 패키지를 추가합니다.</li>
</ul>
</li>
<li>설치할 각 패키지에 대해:
<ul>
<li><code>vcs</code>가 설정된 경우: 지정된 <code>commit-id</code>로 저장소를 <code>clone</code>하고, <code>subdirectory</code>를 고려하여 패키지를 빌드 및 설치합니다.</li>
<li><code>directory</code>가 설정된 경우: <code>subdirectory</code>를 고려하여 패키지를 빌드 및 설치합니다.</li>
<li><code>archive</code>가 설정된 경우: 파일을 가져오고, 파일 크기와 해시를 검증하며, <code>subdirectory</code>를 고려하여 패키지를 빌드 및 설치합니다.</li>
<li><code>wheels</code> 항목이 있는 경우: 적절한 <code>wheel</code> 파일을 찾아 가져오고 (URL/경로 또는 <code>packages.index</code> 사용), 파일 크기와 해시를 검증한 후 설치합니다.</li>
<li><code>sdist</code>만 설정된 경우: 파일을 가져오고 (URL/경로 또는 <code>packages.index</code> 사용), 파일 크기와 해시를 검증하며, 패키지를 빌드 및 설치합니다.</li>
</ul>
</li>
</ol>
<h3><code>requirements.txt</code> 파일과의 의미론적 차이 (Semantic differences with requirements.txt files)</h3>
<p><code>lock file</code>은 <code>requirements.txt</code> 파일과 몇 가지 중요한 의미론적 차이를 가집니다:</p>
<ul>
<li><strong>보안:</strong> <code>lock file</code>은 해시, 파일 크기, 파일 발견 위치(인덱스 및 실제 파일 위치)를 필수로 기록하여 감사 및 검증을 돕습니다. <code>requirements.txt</code>는 해시를 선택적으로 포함할 수 있지만, <code>opt-in</code> 기능이며 우회될 수 있습니다.</li>
<li><strong>명확한 환경 명세:</strong> <code>lock file</code>은 전체 파일에 대해 지원되는 Python 버전 및 환경을 명시적으로 지정합니다. 이는 <code>requirements.txt</code>가 특정 플랫폼을 대상으로 하는지 알기 어려운 문제를 해결합니다.</li>
<li><strong>구조화된 메타데이터:</strong> <code>lock file</code>의 <code>[tool]</code> 테이블은 <code>requirements.txt</code>의 주석과는 달리 구조화된 방식으로 도구별 메타데이터를 기록할 수 있습니다.</li>
<li><strong>다중 사용 (<code>Multi-use</code>) 지원:</strong> 이 PEP는 <code>multi-use lock file</code>을 지원하는 반면, <code>requirements file</code>은 <code>single-use</code>입니다.</li>
</ul>
<p>이 PEP는 <code>requirements file</code>을 완전히 대체하지는 않습니다. <code>requirements file</code>은 설치 시점 옵션 지정 (예: <code>--index-url</code>), 다른 <code>requirements file</code> 참조 (<code>-r</code>), 환경 변수 사용을 지원하기 때문입니다.</p>
<h3>보안 시사점 (Security Implications)</h3>
<p><code>security-first</code> 원칙을 기반으로 <code>lock file</code> 형식을 표준화함으로써 전체 패키지 설치를 더 안전하게 만드는 데 기여할 것으로 기대됩니다. 그러나 이 PEP가 모든 잠재적인 보안 문제를 해결하지는 않습니다.</p>
<ul>
<li><strong><code>lock file</code> 변조</strong>: <code>lock file</code>이 소스 제어에 적절히 관리되고 감사되지 않으면 악의적인 행위자가 파일을 변조할 수 있습니다. 이는 <code>lock file</code> 서명 (파일 내 <code>[tool]</code> 항목 또는 외부 채널을 통해)으로 완화될 수 있습니다.</li>
<li><strong>오인 설치 방지</strong>: 이 PEP는 사용자가 잘못된 패키지를 설치하는 것을 막지는 않습니다 (예: <code>typosquatting</code>을 통한 이름 혼동 공격).</li>
</ul>
<h3>교육 방법 (How to Teach This)</h3>
<p>사용자들은 다음 사항을 인지해야 합니다:</p>
<ul>
<li><strong>재현성</strong>: <code>lock file</code>은 특정 시점에 설치된 정확한 종속성 집합을 기록하여 미래에 동일한 환경을 재현할 수 있게 합니다. 이는 코드의 우발적인 손상을 방지합니다.</li>
<li><strong>협업</strong>: <code>lock file</code>을 통해 팀원 모두가 동일한 패키지 집합을 설치하여 일관된 개발 환경을 보장할 수 있습니다.</li>
<li><strong>보안</strong>: <code>lock file</code>은 항상 동일한 파일을 설치하도록 보장하여 악성 파일 설치 위험을 줄이고, 의도적인 종속성 업그레이드를 통해 변경 사항을 명확히 합니다.</li>
<li><strong>환경 호환성</strong>: <code>lock file</code>은 특정 환경에만 지원될 수 있습니다. <code>single-use</code> 또는 <code>multi-use</code>일 수 있으며, <code>extras</code> 및 <code>dependency groups</code>를 통해 다양한 사용 사례를 지원할 수 있습니다.</li>
<li><strong>도구 독립성</strong>: 이 PEP를 따르는 <code>lock file</code>은 명세를 구현하는 모든 <code>installer</code>에 의해 설치될 수 있습니다. 그러나 다른 <code>locker</code>를 사용한다고 해서 항상 동일한 결과가 보장되지는 않습니다.</li>
</ul>
<h2>거부된 아이디어 (Rejected Ideas)</h2>
<p>이 PEP를 개발하는 과정에서 여러 아이디어가 논의되었으나 최종적으로 거부되었습니다. 주요 거부 아이디어는 다음과 같습니다:</p>
<ul>
<li><strong>설치 목적으로 종속성 그래프 기록</strong>: 종속성 그래프를 기록하는 것은 더 많은 정보를 제공하지만, 감사 용이성에 영향을 미치는 불필요한 복잡성을 추가한다고 판단되었습니다.</li>
<li><strong>설치자가 종속성 해결 수행</strong>: 설치자가 종속성 해결을 수행하도록 하는 것은 <code>lock file</code> 감사를 복잡하게 만들고, <code>lockers</code>에 복잡성을 집중시키는 것이 더 나을 것으로 판단되었습니다.</li>
<li><strong>최소 해시 알고리즘 지원 요구</strong>: 특정 해시 알고리즘을 요구하는 것은 다른 Python 패키징 명세와 일치하지 않으며, 시간이 지남에 따라 알고리즘이 구식이 될 수 있다는 이유로 거부되었습니다.</li>
<li><strong>파일 이름 지정 방식</strong>: <code>*.pylock.toml</code> 사용, <code>.pylock</code> 확장자 사용, 또는 명명 규칙 없음 등의 아이디어가 있었으나, <code>pylock.toml</code>이 편집기 구문 강조 및 발견 용이성 측면에서 가장 적합하다고 판단되었습니다.</li>
<li><strong>파일 형식으로 JSON 또는 YAML 사용</strong>: TOML이 사람이 읽기 쉽고 <code>pyproject.toml</code>과의 일관성을 유지하기 위해 선택되었습니다.</li>
<li><strong>단일 해시 알고리즘</strong>: 파일 전체에 단일 해시 알고리즘을 강제하는 것은 대용량 파일의 재해시 비용과 유연성 부족으로 인해 거부되었습니다.</li>
<li><strong><code>lock file</code> 내용 자체 해싱 또는 생성 날짜 기록</strong>: <code>merge conflict</code> 문제를 야기할 수 있어 거부되었습니다.</li>
<li><strong>패키지 인덱스 기록</strong>: 불필요한 <code>bookkeeping</code>으로 간주되어 거부되었습니다.</li>
<li><strong><code>sdist</code> 빌드 요구사항 <code>locking</code></strong>: 복잡성과 <code>edge case</code> 문제로 인해 이 PEP에서 다루지 않고 미래의 PEP로 미뤄졌습니다.</li>
<li><strong>전용 <code>direct</code> 키</strong>: <code>VCS</code>, <code>directory</code>, <code>archive</code>와 같은 직접 URL 참조의 세 가지 경우가 명시적으로 정의되어 있으므로 불필요하다고 판단되었습니다.</li>
</ul>
<h2>결론</h2>
<p>PEP 751은 Python 생태계의 오랜 문제였던 재현 가능한 종속성 설치를 위한 표준화된 <code>lock file</code> 형식인 <code>pylock.toml</code>을 제안합니다. 이 형식은 사람이 읽을 수 있고 기계적으로 생성되며, 설치 시점에 종속성 해결 없이 빠른 설치를 목표로 합니다. 보안, 감사 용이성, <code>multi-use</code> 시나리오 지원에 중점을 두며, 기존 <code>requirements.txt</code> 파일의 한계를 극복하는 것을 목표로 합니다. 이 PEP는 Python 패키징 도구들이 일관되고 상호 운용 가능한 방식으로 종속성을 관리할 수 있는 기반을 마련하여, 개발자와 사용자 모두에게 이점을 제공할 것입니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 751 - A file format to record Python dependencies for installation reproducibility"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 13:40:01+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
