3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-1a135130af3e1cae.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/298","c"]
0:["8N6icDw00Cy0kKVlExSq2",[[["",{"children":[["slug","python/pep/298","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"298\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/298","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2b3e,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0298/">PEP 298 - The Locked Buffer Interface</a></p>
<p><strong>상태:</strong> Withdrawn | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 26-Jul-2002</p>
</blockquote>
<p>PEP 298 – 잠금된 버퍼 인터페이스</p>
<h2>개요</h2>
<p>이 문서는 Python 2.3 버전에서 제안된 '잠금된 버퍼 인터페이스(Locked Buffer Interface)'에 대한 PEP(Python Enhancement Proposal)를 한국어 사용자가 이해하기 쉽도록 번역 및 정리한 것입니다.</p>
<h2>목표</h2>
<p>Python 개발자들이 이 PEP의 제안 내용, 도입 배경, 그리고 실제 Python 사용에 미치는 영향을 명확하게 이해할 수 있도록 돕습니다.</p>
<hr>
<h3>PEP 298 – 잠금된 버퍼 인터페이스</h3>
<ul>
<li><strong>작성자:</strong> Thomas Heller</li>
<li><strong>상태:</strong> 철회됨 (Withdrawn)</li>
<li><strong>유형:</strong> 표준 트랙 (Standards Track)</li>
<li><strong>생성일:</strong> 2002년 7월 26일</li>
<li><strong>Python 버전:</strong> 2.3</li>
</ul>
<h3>요약 (Abstract)</h3>
<p>이 PEP는 '버퍼 인터페이스(buffer interface)'의 확장으로 '잠금된 버퍼 인터페이스'를 제안합니다. 이 인터페이스는 Python 2.2 이하 버전에서 정의된 '기존' 버퍼 인터페이스의 단점을 보완하며, 다음 의미를 가집니다.</p>
<ul>
<li>검색된 포인터의 생명 주기는 클라이언트가 명확하게 정의하고 제어합니다.</li>
<li>버퍼 크기는 <code>size_t</code> 데이터 타입으로 반환되어, <code>sizeof(int) != sizeof(void *)</code>인 플랫폼에서도 대용량 버퍼에 접근할 수 있습니다.
<ul>
<li>(Guido의 의견: 이 두 번째 내용은 '기존' 버퍼 인터페이스에도 새로운 플래그 비트를 도입하여 변경할 수 있는 부분인 것 같습니다.)</li>
</ul>
</li>
</ul>
<h3>명세 (Specification)</h3>
<p>잠금된 버퍼 인터페이스는 이 인터페이스를 구현하기로 선택한 모든 Python 객체의 내부 메모리 블록에 대한 크기와 포인터를 반환하는 새로운 함수들을 노출합니다.</p>
<p>객체로부터 버퍼를 검색하는 것은 해당 객체를 잠금(locked) 상태로 만듭니다. 이 상태에서는 버퍼가 해제되거나(freed), 크기가 변경되거나(resized), 재할당(reallocated)될 수 없습니다. 버퍼가 더 이상 사용되지 않으면, 잠금된 버퍼 인터페이스의 다른 함수를 호출하여 버퍼를 해제(release)함으로써 객체를 다시 잠금 해제(unlocked)해야 합니다.</p>
<p>만약 객체가 생명 주기 동안 버퍼의 크기를 변경하거나 재할당하지 않는다면, 이 해제 함수는 <code>NULL</code>일 수 있습니다. 이 함수를 호출하지 않으면(만약 <code>NULL</code>이 아니라면) 프로그래밍 오류이며 예기치 않은 결과를 초래할 수 있습니다.</p>
<p>잠금된 버퍼 인터페이스는 기존 버퍼 인터페이스에 있던 메모리 세그먼트 모델을 생략하며, 단일 메모리 블록만 노출할 수 있습니다. 이 메모리 블록은 전역 인터프리터 록(GIL, Global Interpreter Lock)을 보유하지 않고도 접근할 수 있습니다.</p>
<h3>구현 (Implementation)</h3>
<p><code>Include/object.h</code>에 새로운 플래그를 정의합니다.</p>
<pre><code class="language-c">/* PyBufferProcs contains bf_acquirelockedreadbuffer, bf_acquirelockedwritebuffer, and bf_releaselockedbuffer */
#define Py_TPFLAGS_HAVE_LOCKEDBUFFER (1L&#x3C;&#x3C;15)
</code></pre>
<p>이 플래그는 <code>Py_TPFLAGS_DEFAULT</code>에 포함됩니다.</p>
<pre><code class="language-c">#define Py_TPFLAGS_DEFAULT ( \
.... Py_TPFLAGS_HAVE_LOCKEDBUFFER | \
.... 0)
</code></pre>
<p><code>Include/object.h</code>의 <code>PyBufferProcs</code> 구조체를 새로운 필드로 확장합니다.</p>
<pre><code class="language-c">typedef size_t (*acquirelockedreadbufferproc)(PyObject *, const void **);
typedef size_t (*acquirelockedwritebufferproc)(PyObject *, void **);
typedef void (*releaselockedbufferproc)(PyObject *);
typedef struct {
    getreadbufferproc bf_getreadbuffer;
    getwritebufferproc bf_getwritebuffer;
    getsegcountproc bf_getsegcount;
    getcharbufferproc bf_getcharbuffer;
    /* locked buffer interface functions */
    acquirelockedreadbufferproc bf_acquirelockedreadbuffer;
    acquirelockedwritebufferproc bf_acquirelockedwritebuffer;
    releaselockedbufferproc bf_releaselockedbuffer;
} PyBufferProcs;
</code></pre>
<p>객체의 타입에서 <code>Py_TPFLAGS_HAVE_LOCKEDBUFFER</code> 플래그가 설정되어 있으면 새로운 필드가 존재합니다. <code>Py_TPFLAGS_HAVE_LOCKEDBUFFER</code> 플래그는 <code>Py_TPFLAGS_HAVE_GETCHARBUFFER</code> 플래그를 의미합니다.</p>
<p><code>acquirelockedreadbufferproc</code> 및 <code>acquirelockedwritebufferproc</code> 함수는 성공 시 메모리 블록의 크기를 바이트 단위로 반환하고, 전달된 <code>void *</code> 포인터를 채웁니다. 이 함수들이 실패하면(오류가 발생하거나 메모리 블록이 노출되지 않는 경우) <code>void *</code> 포인터를 <code>NULL</code>로 설정하고 예외를 발생시켜야 합니다. 이 경우 반환 값은 정의되지 않으며 사용해서는 안 됩니다.</p>
<p>이 함수들이 성공적으로 호출되면, 결국 원래 객체를 인자로 제공하여 <code>releaselockedbufferproc</code> 호출을 통해 버퍼를 해제해야 합니다. <code>releaselockedbufferproc</code>는 실패할 수 없습니다. 내부 잠금 카운터를 실제로 유지하는 객체의 경우, <code>releaselockedbufferproc</code> 함수가 너무 자주 호출되어 음수 잠금 카운터가 되면 치명적인 오류가 됩니다.</p>
<p>'기존' 버퍼 인터페이스와 유사하게, 이러한 함수들 중 어떤 것도 <code>NULL</code>로 설정될 수 있지만, <code>acquireread/writelockedbufferproc</code> 함수가 구현된 경우 <code>releaselockedbufferproc</code> 함수도 구현하는 것이 강력히 권장됩니다(비록 아무것도 하지 않더라도). 이는 확장 작성자가 <code>NULL</code> 값을 확인하고 호출하지 않는 것을 방지하기 위함입니다.</p>
<p>이 함수들은 직접 호출되지 않고, <code>Include/abstract.h</code>에 선언된 편의 함수(convenience functions)를 통해 호출됩니다.</p>
<pre><code class="language-c">int PyObject_AcquireLockedReadBuffer(PyObject *obj, const void **buffer, size_t *buffer_len);
int PyObject_AcquireLockedWriteBuffer(PyObject *obj, void **buffer, size_t *buffer_len);
void PyObject_ReleaseLockedBuffer(PyObject *obj);
</code></pre>
<p>앞의 두 함수는 성공 시 0을 반환하고, <code>buffer</code>를 메모리 위치로, <code>buffer_len</code>을 메모리 블록의 길이를 바이트 단위로 설정합니다. 실패하거나 <code>obj</code>에 의해 잠금된 버퍼 인터페이스가 구현되지 않은 경우 -1을 반환하고 예외를 설정합니다. 마지막 함수는 아무것도 반환하지 않으며 실패할 수 없습니다.</p>
<h3>하위 호환성 (Backward Compatibility)</h3>
<p>이 제안이 구현되면 <code>PyBufferProcs</code> 구조체의 크기가 변경되지만, 타입의 <code>tp_flags</code> 슬롯을 사용하여 추가 필드가 있는지 여부를 확인할 수 있습니다.</p>
<h3>참조 구현 (Reference Implementation)</h3>
<p>구현은 SourceForge 패치 관리자에 <code>https://bugs.python.org/issue652857</code>로 업로드되었습니다.</p>
<h3>추가 설명/의견 (Additional Notes/Comments)</h3>
<p>Python <code>string</code>, <code>unicode string</code>, <code>mmap</code> 객체 및 <code>array</code> 객체는 잠금된 버퍼 인터페이스를 노출할 것입니다.</p>
<p><code>mmap</code> 및 <code>array</code> 객체는 버퍼가 활성화된 동안 실제로 잠금 상태에 들어가지만, <code>string</code> 및 <code>unicode</code> 객체에는 필요하지 않습니다. 잠금된 <code>array</code> 객체의 크기 조정은 허용되지 않으며 예외를 발생시킵니다. 잠금된 <code>mmap</code> 객체를 닫는 것이 오류인지 아니면 잠금 카운터가 0에 도달할 때까지 연기될지는 구현 세부 사항입니다.</p>
<p><strong>Guido의 권장 사항:</strong></p>
<p>"그러나 대부분의 내장 타입(예: <code>string</code>, <code>bytes</code>)이 해제 기능을 구현하지 않는다면, 확장이 버퍼를 해제하는 것을 잊어도 작동하는 것처럼 보이는 것이 너무 쉽다는 점이 여전히 매우 우려됩니다. 저는 적어도 일부 내장 타입이 카운터를 사용하여 <code>acquire/release</code> 기능을 구현하고, 객체가 삭제될 때 카운터가 0인지 어서트(assert)할 것을 권장합니다. 어서트가 실패하면 누군가 객체를 해제하지 않고 객체에 대한 참조를 <code>DECREF</code>한 것입니다. (규칙은 객체를 <code>acquire</code>한 동안 객체에 대한 참조를 소유해야 한다는 것입니다.)</p>
<p>문자열의 경우, 문자열 객체가 카운터를 저장하기 위해 4바이트 더 커져야 하므로 비실용적일 수 있습니다. 하지만 새로운 <code>bytes</code> 객체 (PEP 296)는 카운터를 쉽게 구현할 수 있고, <code>array</code> 객체도 마찬가지입니다. 그렇게 하면 프로토콜의 올바른 사용을 테스트할 기회가 충분할 것입니다."</p>
<h3>커뮤니티 피드백 (Community Feedback)</h3>
<p>Greg Ewing은 잠금된 버퍼 인터페이스가 전혀 필요하지 않다고 의심하며, 포인터를 사용할 때마다 다시 가져오면 일반 버퍼 인터페이스를 사용할 수 있다고 생각했습니다. 하지만 <code>Py_DECREF()</code>와 같이 무해해 보이는 Python API 호출조차 임의의 Python 코드를 실행할 수 있기 때문에 이는 위험해 보입니다.</p>
<p>이 제안의 첫 번째 버전에는 해제 함수가 없었지만, <code>mmap</code> 및 <code>array</code> 객체는 <code>mmap</code> 객체가 잠기지 않으면 언제든지 닫힐 수 있고 <code>array</code> 객체가 버퍼의 크기를 변경하거나 재할당할 수 있기 때문에 이를 구현할 수 없었을 것이라는 점이 밝혀졌습니다.</p>
<p>이 PEP는 작성자 외에는 아무도 필요로 하지 않기 때문에 아마도 거부될 것입니다.</p>
<h3>참고 자료 (References)</h3>
<ul>
<li>The buffer interface <code>https://mail.python.org/pipermail/python-dev/2000-October/009974.html</code></li>
</ul>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인(public domain)으로 지정되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1318,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Withdrawn] PEP 298 - The Locked Buffer Interface"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 18:06:42+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
