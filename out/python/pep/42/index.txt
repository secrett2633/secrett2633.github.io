3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-1a135130af3e1cae.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/42","c"]
0:["8N6icDw00Cy0kKVlExSq2",[[["",{"children":[["slug","python/pep/42","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"42\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/42","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T53ee,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0042/">PEP 42 - Feature Requests</a></p>
<p><strong>상태:</strong> Withdrawn | <strong>유형:</strong> Process | <strong>작성일:</strong> 12-Sep-2000</p>
</blockquote>
<h1>PEP 42 – 기능 요청 (Feature Requests)</h1>
<ul>
<li><strong>작성자:</strong> Jeremy Hylton </li>
<li><strong>상태:</strong> 철회됨 (Withdrawn)</li>
<li><strong>유형:</strong> 프로세스 (Process)</li>
<li><strong>생성일:</strong> 2000년 9월 12일</li>
</ul>
<h2>중요 사항</h2>
<p>이 PEP는 <strong>철회되었습니다.</strong> 현재는 **구식(obsolete)**이며, 모든 새로운 기능 요청은 매우 간단한 요청의 경우 Python 버그 트래커로, 그 외의 모든 사항은 Ideas Discourse 카테고리로 제출해야 합니다. 이 문서는 <strong>역사적인 목적</strong>으로만 보존됩니다.</p>
<h2>서론</h2>
<p>이 PEP는 향후 Python 버전을 위해 고려될 수 있는 기능 요청 목록을 담고 있었습니다. 규모가 큰 기능 요청은 여기에 포함되지 않고 별도의 PEP로 설명되어야 했지만, 고유한 PEP가 생성되기 전까지는 여기에 나열될 수 있었습니다. (자세한 내용은 PEP 0을 참조하십시오.)</p>
<p>이 PEP는 실제로는 기능 요청인 버그 보고서를 닫을 수 있도록 생성되었습니다. "Open"으로 표시된 경우, 실제 버그 목록(이상적으로는 한 페이지 미만이어야 함)에서 주의를 분산시켰습니다. "Closed"로 표시된 경우, 잊혀지는 경향이 있었습니다. 당시의 절차는 다음과 같았습니다. 버그 보고서가 실제 기능 요청인 경우, 이 PEP에 기능 요청을 추가하고, 버그를 "기능 요청", "나중에", "닫힘"으로 표시한 다음, 버그에 이 상황을 설명하는 주석을 추가했습니다 (PEP를 명시적으로 언급). 또한, 대규모 기능 요청을 버그 데이터베이스에서 직접 별도의 PEP로 옮기는 것도 허용되었습니다.</p>
<p>이 PEP는 실제로 네 가지 범주로 나뉘어야 했습니다 (Laura Creighton의 분류):</p>
<ul>
<li>BDFL(Benevolent Dictator For Life)이 "나쁜 아이디어"라고 거부한 것. 다시 가져오지 말 것.</li>
<li>BDFL이 누군가가 코드를 작성하면 추가할 것. (또는, 코드를 제시하면 BDFL이 '이것을 변경하면 내가 추가하겠다'고 말할 것.)
<ul>
<li><strong>하위 분류:</strong>
<ul>
<li>BDFL이 정말로 코드를 보고 싶어 하는 것!</li>
<li>BDFL이 이것에 대해 결코 열성적이지는 않겠지만, 쉬울 때 포함시킬 것.</li>
</ul>
</li>
</ul>
</li>
<li>코드를 제시하면 BDFL이 결정을 내릴 것. "에이 별로", "너무 모호하다", "이것은 거부되었지만, 모호함 때문일 뿐이다"와 같은 반응이 나올 수 있음. 이 개선 사항이 마음에 든다면, 새로운 PEP를 만들 것.</li>
</ul>
<h2>핵심 언어 / 내장 기능 (Core Language / Builtins)</h2>
<ul>
<li><strong>더 깊이 중첩된 구문 트리 처리:</strong> 파서가 스택 크기에 하드코딩된 제한이 있어서 <code>eval("["*50 + "]"*50)</code>과 같은 깊이 중첩된 구문 트리를 처리하지 못하는 문제가 있었습니다. 이 제한을 높이거나 제거해야 한다는 요청이 있었습니다. 제거는 현재 컴파일러가 C 스택 오버플로우를 일으킬 수 있어 어려웠습니다. (참조: <a href="https://bugs.python.org/issue215555">https://bugs.python.org/issue215555</a>)</li>
<li><strong>비우발적인 IEEE-754 지원:</strong> Inf, NaN, 설정 가능한 트랩 등 IEEE-754 표준에 대한 비우발적인 지원이 필요하다는 요청이 있었습니다. 이는 큰 프로젝트로 간주되었습니다.</li>
<li><strong>Windows 특정 파일 이름 처리:</strong> Windows에서 특정 "매직" 이름을 가진 파일을 생성하거나 접근하려고 할 때 시스템이 멈추거나 충돌할 수 있는 문제가 있었습니다. 이는 운영체제(OS)의 버그이지만, 일부 애플리케이션은 사용자에게 이러한 문제를 숨기려 합니다. 이 문제가 발생하면 증상이 매우 혼란스러웠습니다. (참조: <code>prn.txt</code> 등의 파일 사용 시 멈춤 - <a href="https://bugs.python.org/issue481171">https://bugs.python.org/issue481171</a>)</li>
<li><strong><code>eval</code>과 자유 변수 (Free Variables):</strong> 자유 변수를 가진 코드 객체가 <code>eval</code>에 전달될 때, 자유 변수에 대한 바인딩을 전달하는 방법이 있으면 유용할 것이라는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue443866">https://bugs.python.org/issue443866</a>)</li>
</ul>
<h2>표준 라이브러리 (Standard Library)</h2>
<ul>
<li><strong><code>urllib</code> 모듈의 인증 프록시 지원:</strong> <code>urllib</code> 모듈이 인증이 필요한 프록시를 지원해야 한다는 요청이 있었습니다. (참조: SourceForge 버그 #210619 - <a href="https://bugs.python.org/issue210619">https://bugs.python.org/issue210619</a>)</li>
<li><strong><code>os.rename()</code>의 <code>EXDEV</code> 오류 처리 개선:</strong> <code>os.rename()</code>이 파일 시스템 경계를 넘어 작동하지 않는 플랫폼(예: Linux)에서 <code>EXDEV</code> 오류를 처리하기 위해 파일을 복사하고 원본을 제거하는 방식으로 수정되어야 한다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue212317">https://bugs.python.org/issue212317</a>)</li>
<li><strong><code>signal</code> 처리의 예상치 못한 동작:</strong> <code>signal</code> 처리가 항상 예상대로 작동하지 않는 문제가 있었습니다. 예를 들어, <code>sys.stdin.readline()</code>이 (반환하는) 시그널 핸들러에 의해 중단되면 <code>""</code>를 반환했습니다. 대신 예외(<code>EINTR</code>에 해당)를 발생시키거나 재시작하는 것이 더 나을 것이라는 요청이 있었습니다. 그러나 이러한 변경 사항은 블로킹(blocking) 및 인터럽트 가능한 I/O를 수행할 수 있는 모든 위치에 적용되어야 하므로 큰 프로젝트로 간주되었습니다. (참조: <a href="https://bugs.python.org/issue210599">https://bugs.python.org/issue210599</a>)</li>
<li><strong>Windows <code>utime</code>의 디렉토리 경로 허용:</strong> Windows <code>utime</code>이 디렉토리 경로를 받아들이도록 확장되어야 한다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue214245">https://bugs.python.org/issue214245</a>)</li>
<li><strong><code>copy.py</code>의 모듈 및 함수 타입 지원 확장:</strong> <code>copy.py</code>가 모듈 및 함수 타입까지 지원하도록 확장되어야 한다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue214553">https://bugs.python.org/issue214553</a>)</li>
<li><strong><code>marshal.load*()</code>의 잘못된 입력 검사 강화:</strong> <code>marshal.load*()</code>에 대한 잘못된 입력에 대한 검사를 강화해야 한다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue214754">https://bugs.python.org/issue214754</a>)</li>
<li><strong><code>rfc822.py</code>의 주소 필드 파싱 유연성:</strong> <code>rfc822.py</code>가 사양보다 주소 필드 파싱 유형에 더 관대해야 한다는 요청이 있었습니다. 특히, <code>"From: Amazon.com &#x3C;delivers-news2@amazon.com>"</code>과 같은 유효하지 않은 주소도 올바르게 파싱되어야 했습니다. (참조: <a href="https://bugs.python.org/issue210678">https://bugs.python.org/issue210678</a>)</li>
<li><strong><code>cgi.py</code>의 <code>FieldStorage</code> 클래스 메모리 효율성 개선:</strong> <code>cgi.py</code>의 <code>FieldStorage</code> 클래스가 대용량 바이너리 파일 업로드 시 메모리 사용에 더 보수적이어야 한다는 요청이 있었습니다. 두 가지 주요 문제가 지적되었습니다.
<ul>
<li><code>read_lines_to_outerboundary()</code>가 <code>readline()</code>을 사용하기 때문에 바이너리 파일 업로드 시 대량의 데이터가 메모리로 읽힐 수 있었습니다. 이는 섹션의 <code>Content-Type</code> 헤더를 확인하고 바이너리 유형인 경우 청크(chunked) 방식으로 읽어야 할 것이라는 제안이 있었습니다.</li>
<li>두 번째 문제는 <code>self.lines</code> 속성과 관련이 있었는데, 이는 <code>cgi.py</code>의 1.56 개정에서 제거되었습니다. (참조: <a href="https://bugs.python.org/issue210674">https://bugs.python.org/issue210674</a>, <a href="https://bugs.python.org/issue219806">https://bugs.python.org/issue219806</a>)</li>
</ul>
</li>
<li><strong><code>urllib</code>의 호스트 및 포트만 포함하는 프록시 정의 지원:</strong> <code>urllib</code>이 호스트와 포트만 포함하는 프록시 정의를 지원해야 한다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue210849">https://bugs.python.org/issue210849</a>)</li>
<li><strong><code>urlparse</code>의 RFC 2396 준수 업데이트:</strong> <code>urlparse</code>가 경로의 각 세그먼트에 대한 선택적 매개변수를 정의하는 RFC 2396을 준수하도록 업데이트되어야 한다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue210834">https://bugs.python.org/issue210834</a>)</li>
<li><strong><code>pickle</code>과 <code>cPickle</code> 예외 통합:</strong> <code>pickle</code>과 <code>cPickle</code>에서 발생하는 예외가 현재 다르며, 이를 통합해야 한다는 요청이 있었습니다 (아마도 예외는 두 모듈 모두에서 임포트되는 헬퍼 모듈에 정의되어야 할 것입니다).</li>
<li><strong>표준 라이브러리의 유니코드 지원 확장:</strong> 더 많은 표준 라이브러리 루틴이 유니코드를 지원해야 한다는 요청이 있었습니다. 예를 들어, <code>urllib.quote()</code>는 유니코드 문자열을 UTF-8로 변환한 다음 일반적인 <code>%HH</code> 변환을 수행할 수 있습니다. (참조: <a href="https://bugs.python.org/issue216716">https://bugs.python.org/issue216716</a>)</li>
<li><strong><code>str()</code> 또는 <code>__str__()</code>의 유니코드 문자열 반환 허용 방식:</strong> <code>str()</code> 또는 <code>__str__()</code>가 유니코드 문자열 객체를 반환해도 괜찮다는 것을 명시하는 방법이 있어야 한다는 요청이 있었습니다. 또는 <code>ustr()</code>와 같은 다른 함수가 제안되기도 했습니다. (참조: <a href="http://sf.net/patch/?func=detailpatch&#x26;patch_id=101527&#x26;group_id=5470">http://sf.net/patch/?func=detailpatch&#x26;patch_id=101527&#x26;group_id=5470</a>)</li>
<li><strong>다른 스레드에서 스레드 종료:</strong> 다른 스레드에서 스레드를 종료하거나, 시그널을 보내거나, 비동기 예외를 발생시키는 방법이 필요하다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue221115">https://bugs.python.org/issue221115</a>)</li>
<li><strong>디버거 (<code>pdb</code>)의 패키지 이해:</strong> 디버거(<code>pdb</code>)가 패키지를 이해해야 한다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue210631">https://bugs.python.org/issue210631</a>)</li>
<li><strong>새로운 종류의 임시 파일:</strong> Jim Fulton은 다음과 같은 아이디어를 제안했습니다:
<ul>
<li>데이터가 특정 크기를 초과하거나,</li>
<li>누군가가 파일 번호를 요청하기 전까지,</li>
<li>메모리에 데이터를 저장하는 새로운 종류의 임시 파일이 있으면 좋을지 궁금하다.</li>
<li>그러면 <code>cgi</code> 모듈(및 다른 애플리케이션)이 이 기능을 일관된 방식으로 사용할 수 있을 것이다.</li>
<li>(참조: <a href="https://bugs.python.org/issue415692">https://bugs.python.org/issue415692</a>)</li>
</ul>
</li>
<li><strong><code>binascii.b2a_base64()</code>의 줄바꿈 처리 유연성:</strong> Jim Fulton은 <code>binascii</code>의 <code>b2a_base64()</code> 함수가 줄바꿈을 추가하지 않거나 다른 것을 추가하는 것이 합리적인 상황이 있다고 지적했습니다.
<ul>
<li><strong>제안:</strong> 추가될 구분자 문자열을 지정하는 선택적 인수를 추가하고, 기본값은 <code>"\n"</code>으로 한다. <code>None</code>을 구분자 문자열로 특별 처리하여 패딩(pad) 바이트도 추가하지 않도록 할 수 있을까?</li>
<li>(참조: <a href="https://bugs.python.org/issue415694">https://bugs.python.org/issue415694</a>)</li>
</ul>
</li>
<li><strong><code>pydoc</code>과 HTML 문서 통합:</strong> <code>pydoc</code>이 HTML 문서와 통합되거나, 최소한 HTML 문서로 링크할 수 있어야 한다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue405554">https://bugs.python.org/issue405554</a>)</li>
<li><strong>Distutils의 <code>.c</code> 및 <code>.h</code> 파일 종속성 추론:</strong> Distutils가 <code>.c</code> 및 <code>.h</code> 파일에 대한 종속성을 추론해야 한다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue472881">https://bugs.python.org/issue472881</a>)</li>
<li><strong><code>asynchat</code>의 멀티스레딩 버그:</strong> <code>asynchat</code>이 멀티스레딩 환경에서 버그가 있다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue595217">https://bugs.python.org/issue595217</a>)</li>
<li><strong>고수준 모듈의 소켓 타임아웃 설정 옵션:</strong> <code>httplib</code>, <code>smtplib</code>, <code>nntplib</code> 등과 같은 고수준 모듈에 소켓 타임아웃을 설정하는 옵션이 있으면 좋겠다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue723287">https://bugs.python.org/issue723287</a>)</li>
<li><strong><code>curses</code> 라이브러리의 <code>newterm()</code> 및 <code>delscreen()</code> 누락:</strong> <code>curses</code> 라이브러리에 <code>newterm()</code> 및 <code>delscreen()</code>이라는 두 가지 중요한 호출이 누락되어 있다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue665572">https://bugs.python.org/issue665572</a>, <a href="http://bugs.debian.org/175590">http://bugs.debian.org/175590</a>)</li>
<li><strong>SSL 소켓의 비블로킹 I/O 지원:</strong> 내장 SSL 소켓 유형이 비블로킹 SSL I/O에 사용될 수 있으면 좋겠다는 요청이 있었습니다. 현재 Twisted와 같이 SSL을 사용하여 비동기 서버를 구현하는 패키지는 <code>pyopenssl</code>과 같은 타사 패키지를 요구해야 합니다.</li>
<li><strong>reST(reStructuredText) 표준 라이브러리 모듈:</strong> reST가 표준 라이브러리 모듈로 포함되어야 한다는 요청이 있었습니다.</li>
<li><strong>임포트 락 (Import Lock) 재설계:</strong> 임포트 락이 재설계되어야 한다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue683658">https://bugs.python.org/issue683658</a>)</li>
<li><strong>텍스트 파일 열기 API 개선:</strong> 일부 사람들이 보기에는 "U" 모드 플래그가 보기 흉하므로, 텍스트 파일을 여는 더 좋은 API가 필요하다는 요청이 있었습니다. <code>textfile(filename, mode, encoding)</code>라는 새로운 내장 타입에 대한 제안이 있었고, <code>bufsize</code> 인수가 포함되어야 하는지에 대한 의문도 제기되었습니다.</li>
<li><strong>Tkinter의 새로운 위젯 및/또는 매개변수 지원:</strong> Tkinter에 새로운 위젯 및/또는 매개변수를 지원해야 한다는 요청이 있었습니다.</li>
<li><strong>중첩 클래스의 <code>__name__</code> 및 피클링 동작:</strong> 다른 클래스 내에 정의된 클래스의 경우, <code>__name__</code>이 <code>"outer.inner"</code>여야 하고 피클링(pickling)이 작동해야 한다는 요청이 있었습니다. (GvR은 이것이 쉽거나 심지어 올바른지 더 이상 확신하지 못했습니다.) (참조: <a href="https://bugs.python.org/issue633930">https://bugs.python.org/issue633930</a>)</li>
<li><strong>명확한 폐기 정책 (Deprecation Policy) 결정 및 실행:</strong> (특히 모듈에 대해) 더 명확한 폐기 정책을 결정하고 이를 실행해야 한다는 요청이 있었습니다. (참조: <a href="https://mail.python.org/pipermail/python-dev/2002-April/023165.html">https://mail.python.org/pipermail/python-dev/2002-April/023165.html</a>)</li>
<li><strong><code>types</code> 모듈의 일반적인 사용에 대한 대안 제공:</strong> <code>types</code> 모듈의 일반적인 사용에 대한 대안을 제공해야 한다는 요청이 있었습니다. Skip Montanaro는 이 아이디어에 대한 proto-PEP를 게시했습니다. (참조: <a href="https://mail.python.org/pipermail/python-dev/2002-May/024346.html">https://mail.python.org/pipermail/python-dev/2002-May/024346.html</a>)</li>
<li><strong><code>types</code> 및 <code>string</code> 모듈에 대한 'pending deprecation' 사용:</strong> <code>types</code> 및 <code>string</code> 모듈에 대해 'pending deprecation'을 사용해야 한다는 요청이 있었습니다. 이는 아직 다루어지지 않은 부분(예: <code>string.whitespace</code> 및 <code>types.TracebackType</code>)에 대한 대안을 제공해야 함을 의미합니다. 이에 대한 합의를 얻을 수 없는 것으로 보였습니다.</li>
<li><strong>게으른 튜플 추적 (Lazily tracking tuples):</strong> (참조: <a href="https://mail.python.org/pipermail/python-dev/2002-May/023926.html">https://mail.python.org/pipermail/python-dev/2002-May/023926.html</a>, <a href="https://bugs.python.org/issue558745">https://bugs.python.org/issue558745</a>)</li>
<li><strong><code>as</code>를 키워드로 만들기:</strong> <code>as</code>가 오랫동안 의사(pseudo) 키워드였으므로 키워드로 만들어야 한다는 요청이 있었습니다. (Python 2.5에서는 폐기 예정이었고, 2.6에서는 키워드가 되었습니다.)</li>
</ul>
<h2>C API 요청 (C API wishes)</h2>
<ul>
<li><strong>Windows 임베디드 애플리케이션 지원 C API 함수 추가:</strong> <code>FILE *</code> 구조체가 인터프리터가 컴파일된 <code>FILE *</code>와 일치하지 않는 임베디드 애플리케이션을 빌드하는 Windows 사용자를 돕기 위해 C API 함수를 추가해야 한다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue210821">https://bugs.python.org/issue210821</a>) 이 버그 보고서에는 Borland C++ 빌더 애플리케이션이 MSVC로 빌드된 <code>python.dll</code>과 상호 작용할 수 있도록 하는 특정 제안이 있었습니다.</li>
</ul>
<h2>도구 (Tools)</h2>
<ul>
<li><strong>GUI 빌더 필요:</strong> Python에 GUI 빌더가 필요하다는 요청이 있었습니다. (참조: <a href="https://bugs.python.org/issue210820">https://bugs.python.org/issue210820</a>)</li>
</ul>
<h2>빌드 및 설치 (Building and Installing)</h2>
<ul>
<li><strong><code>Modules/makesetup</code>의 유효한 C 파일 생성 확인:</strong> <code>Modules/makesetup</code>이 다양한 <code>Setup</code> 파일에서 생성하는 <code>config.c</code> 파일이 유효한 C 코드인지 확인해야 한다는 요청이 있었습니다. 현재는 Python 또는 C 식별자로 허용되지 않는 문자를 포함하는 모듈 이름을 허용했습니다. (참조: <a href="https://bugs.python.org/issue216326">https://bugs.python.org/issue216326</a>)</li>
<li><strong>소스 빌드 시 <code>Include/graminit.h</code> 및 <code>Parser/graminit.c</code> 파일 덮어쓰기 방지:</strong> 소스에서 빌드할 때 <code>Include/graminit.h</code> 및 <code>Parser/graminit.c</code> 파일을 덮어쓰려고 시도하지 않아야 한다는 요청이 있었습니다. 특히 Subversion 또는 스냅샷에서 작업하는 것이 아니라 소스 릴리스를 다운로드하는 사용자에게 해당했습니다. 일부 사용자들은 특이한 빌드 환경에서 이를 문제로 여겼습니다. (참조: <a href="https://bugs.python.org/issue219221">https://bugs.python.org/issue219221</a>)</li>
<li><strong><code>configure</code> 스크립트 정리:</strong> <code>configure</code> 스크립트가 시간이 지나면서 다소 낡고 <code>autoconf</code>의 최신 기능을 잘 추적하지 못할 수 있으므로, 검토하고 정리해야 한다는 요청이 있었습니다. (참조: <a href="https://mail.python.org/pipermail/python-dev/2004-January/041790.html">https://mail.python.org/pipermail/python-dev/2004-January/041790.html</a>)</li>
<li><strong>FHS (Filesystem Hierarchy Standard) 준수:</strong> Python이 FHS를 준수하도록 만들어야 한다는 요청이 있었습니다. (참조: <a href="http://bugs.python.org/issue588756">http://bugs.python.org/issue588756</a>)</li>
</ul>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1318,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Withdrawn] PEP 42 - Feature Requests"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 15:56:44+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
