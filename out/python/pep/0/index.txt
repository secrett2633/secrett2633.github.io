3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/0","c"]
0:["SAPzS3zi9tsG5MkeKvxIA",[[["",{"children":[["slug","python/pep/0","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"0\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/0","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T5875,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0000/">PEP 0 - Index of Python Enhancement Proposals (PEPs)</a></p>
<p><strong>상태:</strong> Active | <strong>유형:</strong> Informational | <strong>작성일:</strong> 13-Jul-2000</p>
</blockquote>
<h2>PEP 0 – Python Enhancement Proposals (PEPs) 색인</h2>
<h3>소개</h3>
<p>PEP 번호는 PEP 편집자에 의해 할당되며, 한 번 할당되면 변경되지 않습니다. PEP 텍스트의 버전 관리 기록은 역사적 기록을 나타냅니다.</p>
<h3>주제별 색인</h3>
<p>전문 분야에 대한 PEP는 주제별로 색인화되어 있습니다.</p>
<ul>
<li><strong>Governance PEPs (거버넌스 PEPs):</strong> Python 프로젝트의 관리 및 운영 방식에 대한 제안.</li>
<li><strong>Packaging PEPs (패키징 PEPs):</strong> Python 패키지 배포 및 관리에 대한 제안.</li>
<li><strong>Release PEPs (릴리스 PEPs):</strong> Python 버전 릴리스 주기 및 프로세스에 대한 제안.</li>
<li><strong>Typing PEPs (타입 힌트 PEPs):</strong> Python의 타입 힌트(Type Hinting) 기능 및 관련 표준에 대한 제안.</li>
</ul>
<h3>API</h3>
<p>PEPs API는 게시된 모든 PEP의 메타데이터를 담고 있는 JSON 파일입니다. 자세한 내용은 해당 API 문서를 참조하세요.</p>
<h3>수치 색인</h3>
<p>모든 PEP를 번호순으로 정렬한 표를 포함합니다.</p>
<h3>카테고리별 색인</h3>
<p>PEP는 상태와 유형에 따라 여러 카테고리로 분류됩니다.</p>
<h4>프로세스 및 메타-PEPs (Process and Meta-PEPs)</h4>
<p>Python 커뮤니티의 절차, 워크플로우 또는 거버넌스 변경을 설명하거나 제안하는 PEPs입니다.</p>
<ul>
<li>PEP 1: PEP 목적 및 가이드라인</li>
<li>PEP 8: Python 코드 스타일 가이드</li>
<li>PEP 13: Python 언어 거버넌스</li>
<li>PEP 602: Python 연간 릴리스 주기</li>
<li>PEP 609: Python Packaging Authority (PyPA) 거버넌스</li>
</ul>
<h4>기타 정보 제공 PEPs (Other Informational PEPs)</h4>
<p>Python 생태계에 대한 배경 정보, 가이드라인 또는 기타 비규범적인 정보를 담고 있는 PEPs입니다.</p>
<ul>
<li>PEP 20: Python의 Zen</li>
<li>PEP 257: Docstring 컨벤션</li>
<li>PEP 333: Python 웹 서버 게이트웨이 인터페이스 (WSGI) v1.0</li>
<li>PEP 484: 타입 힌트 (Type Hints)</li>
<li>PEP 570: Python 위치 전용 매개변수 (Positional-Only Parameters)</li>
<li>PEP 572: 할당 표현식 (Assignment Expressions)</li>
</ul>
<h4>임시 PEPs (Provisional PEPs)</h4>
<p>잠정적으로 승인되었으나 인터페이스가 아직 변경될 수 있는 PEPs입니다.</p>
<ul>
<li>PEP 708: 의존성 혼동 공격 (Dependency Confusion Attacks) 완화를 위한 Repository API 확장</li>
</ul>
<h4>승인된 PEPs (Accepted PEPs)</h4>
<p>승인되었으나 아직 구현되지 않았을 수 있는 PEPs입니다.</p>
<ul>
<li>PEP 458: 서명된 저장소 메타데이터를 통한 안전한 PyPI 다운로드</li>
<li>PEP 649: Descriptors를 사용한 Annotation의 지연 평가 (Deferred Evaluation)</li>
<li>PEP 686: UTF-8 모드 기본값으로 만들기</li>
<li>PEP 703: CPython에서 GIL (Global Interpreter Lock)을 선택 사항으로 만들기</li>
<li>PEP 701: f-string의 문법적 형식화</li>
</ul>
<h4>검토 중인 PEPs (Open PEPs)</h4>
<p>현재 논의 및 수정 중인 제안입니다.</p>
<ul>
<li>PEP 467: 바이너리 시퀀스를 위한 사소한 API 개선</li>
<li>PEP 480: PyPI 침해 상황에서 살아남기: 패키지의 엔드투엔드 서명</li>
<li>PEP 603: <code>collections</code>에 <code>frozenmap</code> 타입 추가</li>
<li>PEP 638: 문법적 매크로 (Syntactic Macros)</li>
</ul>
<h4>완료된 PEPs (Finished PEPs)</h4>
<p>승인되었고 구현이 완료되었거나 더 이상 활성화되지 않는 안정적인 인터페이스를 가진 PEPs입니다.</p>
<ul>
<li>PEP 201: Lockstep Iteration</li>
<li>PEP 202: List Comprehensions</li>
<li>PEP 203: Augmented Assignments</li>
<li>PEP 205: Weak References</li>
<li>PEP 207: Rich Comparisons</li>
<li>PEP 208: Reworking the Coercion Model</li>
<li>PEP 214: Extended Print Statement</li>
<li>PEP 217: Display Hook for Interactive Use</li>
<li>PEP 218: Adding a Built-In Set Object Type</li>
<li>PEP 221: Import As</li>
<li>PEP 223: Change the Meaning of x Escapes</li>
<li>PEP 227: Statically Nested Scopes</li>
<li>PEP 229: Using Distutils to Build Python</li>
<li>PEP 230: Warning Framework</li>
<li>PEP 232: Function Attributes</li>
<li>PEP 234: Iterators</li>
<li>PEP 235: Import on Case-Insensitive Platforms</li>
<li>PEP 236: Back to the <strong>future</strong></li>
<li>PEP 237: Unifying Long Integers and Integers</li>
<li>PEP 238: Changing the Division Operator</li>
<li>PEP 250: Using site-packages on Windows</li>
<li>PEP 252: Making Types Look More Like Classes</li>
<li>PEP 253: Subtyping Built-in Types</li>
<li>PEP 255: Simple Generators</li>
<li>PEP 260: Simplify xrange()</li>
<li>PEP 261: Support for “wide” Unicode characters</li>
<li>PEP 263: Defining Python Source Code Encodings</li>
<li>PEP 264: Future statements in simulated shells</li>
<li>PEP 273: Import Modules from Zip Archives</li>
<li>PEP 274: Dict Comprehensions</li>
<li>PEP 277: Unicode file name support for Windows NT</li>
<li>PEP 278: Universal Newline Support</li>
<li>PEP 279: The enumerate() built-in function</li>
<li>PEP 282: A Logging System</li>
<li>PEP 285: Adding a bool type</li>
<li>PEP 289: Generator Expressions</li>
<li>PEP 292: Simpler String Substitutions</li>
<li>PEP 293: Codec Error Handling Callbacks</li>
<li>PEP 301: Package Index and Metadata for Distutils</li>
<li>PEP 302: New Import Hooks</li>
<li>PEP 305: CSV File API</li>
<li>PEP 307: Extensions to the pickle protocol</li>
<li>PEP 308: Conditional Expressions</li>
<li>PEP 309: Partial Function Application</li>
<li>PEP 311: Simplified Global Interpreter Lock Acquisition for Extensions</li>
<li>PEP 318: Decorators for Functions and Methods</li>
<li>PEP 322: Reverse Iteration</li>
<li>PEP 324: subprocess - New process module</li>
<li>PEP 327: Decimal Data Type</li>
<li>PEP 328: Imports: Multi-Line and Absolute/Relative</li>
<li>PEP 331: Locale-Independent Float/String Conversions</li>
<li>PEP 338: Executing modules as scripts</li>
<li>PEP 341: Unifying try-except and try-finally</li>
<li>PEP 342: Coroutines via Enhanced Generators</li>
<li>PEP 343: The “with” Statement</li>
<li>PEP 352: Required Superclass for Exceptions</li>
<li>PEP 353: Using ssize_t as the index type</li>
<li>PEP 357: Allowing Any Object to be Used for Slicing</li>
<li>PEP 358: The “bytes” Object</li>
<li>PEP 362: Function Signature Object</li>
<li>PEP 366: Main module explicit relative imports</li>
<li>PEP 370: Per user site-packages directory</li>
<li>PEP 371: Addition of the multiprocessing package to the standard library</li>
<li>PEP 372: Adding an ordered dictionary to collections</li>
<li>PEP 376: Database of Installed Python Distributions</li>
<li>PEP 378: Format Specifier for Thousands Separator</li>
<li>PEP 380: Syntax for Delegating to a Subgenerator</li>
<li>PEP 383: Non-decodable Bytes in System Character Interfaces</li>
<li>PEP 384: Defining a Stable ABI</li>
<li>PEP 389: argparse - New Command Line Parsing Module</li>
<li>PEP 391: Dictionary-Based Configuration For Logging</li>
<li>PEP 393: Flexible String Representation</li>
<li>PEP 397: Python launcher for Windows</li>
<li>PEP 405: Python Virtual Environments</li>
<li>PEP 409: Suppressing exception context</li>
<li>PEP 412: Key-Sharing Dictionary</li>
<li>PEP 414: Explicit Unicode Literal for Python 3.3</li>
<li>PEP 415: Implement context suppression with exception attributes</li>
<li>PEP 417: Including mock in the Standard Library</li>
<li>PEP 418: Add monotonic time, performance counter, and process time functions</li>
<li>PEP 420: Implicit Namespace Packages</li>
<li>PEP 421: Adding sys.implementation</li>
<li>PEP 424: A method for exposing a length hint</li>
<li>PEP 425: Compatibility Tags for Built Distributions</li>
<li>PEP 427: The Wheel Binary Package Format 1.0</li>
<li>PEP 428: The pathlib module – object-oriented filesystem paths</li>
<li>PEP 435: Adding an Enum type to the Python standard library</li>
<li>PEP 436: The Argument Clinic DSL</li>
<li>PEP 440: Version Identification and Dependency Specification</li>
<li>PEP 441: Improving Python ZIP Application Support</li>
<li>PEP 442: Safe object finalization</li>
<li>PEP 443: Single-dispatch generic functions</li>
<li>PEP 445: Add new APIs to customize Python memory allocators</li>
<li>PEP 446: Make newly created file descriptors non-inheritable</li>
<li>PEP 448: Additional Unpacking Generalizations</li>
<li>PEP 450: Adding A Statistics Module To The Standard Library</li>
<li>PEP 451: A ModuleSpec Type for the Import System</li>
<li>PEP 453: Explicit bootstrapping of pip in Python installations</li>
<li>PEP 454: Add a new tracemalloc module to trace Python memory allocations</li>
<li>PEP 456: Secure and interchangeable hash algorithm</li>
<li>PEP 461: Adding % formatting to bytes and bytearray</li>
<li>PEP 465: A dedicated infix operator for matrix multiplication</li>
<li>PEP 466: Network Security Enhancements for Python 2.7.x</li>
<li>PEP 468: Preserving the order of **kwargs in a function.</li>
<li>PEP 471: os.scandir() function – a better and faster directory iterator</li>
<li>PEP 475: Retry system calls failing with EINTR</li>
<li>PEP 476: Enabling certificate verification by default for stdlib http clients</li>
<li>PEP 477: Backport ensurepip (PEP 453) to Python 2.7</li>
<li>PEP 479: Change StopIteration handling inside generators</li>
<li>PEP 484: Type Hints</li>
<li>PEP 485: A Function for testing approximate equality</li>
<li>PEP 486: Make the Python Launcher aware of virtual environments</li>
<li>PEP 487: Simpler customisation of class creation</li>
<li>PEP 488: Elimination of PYO files</li>
<li>PEP 489: Multi-phase extension module initialization</li>
<li>PEP 492: Coroutines with async and await syntax</li>
<li>PEP 493: HTTPS verification migration tools for Python 2.7</li>
<li>PEP 495: Local Time Disambiguation</li>
<li>PEP 498: Literal String Interpolation</li>
<li>PEP 503: Simple Repository API</li>
<li>PEP 506: Adding A Secrets Module To The Standard Library</li>
<li>PEP 508: Dependency specification for Python Software Packages</li>
<li>PEP 515: Underscores in Numeric Literals</li>
<li>PEP 517: A build-system independent format for source trees</li>
<li>PEP 518: Specifying Minimum Build System Requirements for Python Projects</li>
<li>PEP 519: Adding a file system path protocol</li>
<li>PEP 520: Preserving Class Attribute Definition Order</li>
<li>PEP 523: Adding a frame evaluation API to CPython</li>
<li>PEP 524: Make os.urandom() blocking on Linux</li>
<li>PEP 525: Asynchronous Generators</li>
<li>PEP 526: Syntax for Variable Annotations</li>
<li>PEP 527: Removing Un(der)used file types/extensions on PyPI</li>
<li>PEP 528: Change Windows console encoding to UTF-8</li>
<li>PEP 529: Change Windows filesystem encoding to UTF-8</li>
<li>PEP 530: Asynchronous Comprehensions</li>
<li>PEP 538: Coercing the legacy C locale to a UTF-8 based locale</li>
<li>PEP 539: A New C-API for Thread-Local Storage in CPython</li>
<li>PEP 540: Add a new UTF-8 Mode</li>
<li>PEP 544: Protocols: Structural subtyping (static duck typing)</li>
<li>PEP 552: Deterministic pycs</li>
<li>PEP 553: Built-in breakpoint()</li>
<li>PEP 557: Data Classes</li>
<li>PEP 560: Core support for typing module and generic types</li>
<li>PEP 561: Distributing and Packaging Type Information</li>
<li>PEP 562: Module <strong>getattr</strong> and <strong>dir</strong></li>
<li>PEP 564: Add new time functions with nanosecond resolution</li>
<li>PEP 565: Show DeprecationWarning in <strong>main</strong></li>
<li>PEP 566: Metadata for Python Software Packages 2.1</li>
<li>PEP 567: Context Variables</li>
<li>PEP 570: Python Positional-Only Parameters</li>
<li>PEP 572: Assignment Expressions</li>
<li>PEP 573: Module State Access from C Extension Methods</li>
<li>PEP 574: Pickle protocol 5 with out-of-band data</li>
<li>PEP 578: Python Runtime Audit Hooks</li>
<li>PEP 584: Add Union Operators To dict</li>
<li>PEP 585: Type Hinting Generics In Standard Collections</li>
<li>PEP 586: Literal Types</li>
<li>PEP 587: Python Initialization Configuration</li>
<li>PEP 589: TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys</li>
<li>PEP 590: Vectorcall: a fast calling protocol for CPython</li>
<li>PEP 591: Adding a final qualifier to typing</li>
<li>PEP 592: Adding “Yank” Support to the Simple API</li>
<li>PEP 593: Flexible function and variable annotations</li>
<li>PEP 594: Removing dead batteries from the standard library</li>
<li>PEP 597: Add optional EncodingWarning</li>
<li>PEP 600: Future 'manylinux' Platform Tags for Portable Linux Built Distributions</li>
<li>PEP 604: Allow writing union types as X | Y</li>
<li>PEP 610: Recording the Direct URL Origin of installed distributions</li>
<li>PEP 612: Parameter Specification Variables</li>
<li>PEP 613: Explicit Type Aliases</li>
<li>PEP 614: Relaxing Grammar Restrictions On Decorators</li>
<li>PEP 615: Support for the IANA Time Zone Database in the Standard Library</li>
<li>PEP 616: String methods to remove prefixes and suffixes</li>
<li>PEP 617: New PEG parser for CPython</li>
<li>PEP 618: Add Optional Length-Checking To zip</li>
<li>PEP 621: Storing project metadata in pyproject.toml</li>
<li>PEP 623: Remove wstr from Unicode</li>
<li>PEP 624: Remove Py_UNICODE encoder APIs</li>
<li>PEP 625: Filename of a Source Distribution</li>
<li>PEP 626: Precise line numbers for debugging and other tools.</li>
<li>PEP 627: Recording installed projects</li>
<li>PEP 628: Add math.tau</li>
<li>PEP 629: Versioning PyPI's Simple API</li>
<li>PEP 632: Deprecate distutils module</li>
<li>PEP 634: Structural Pattern Matching: Specification</li>
<li>PEP 639: Improving License Clarity with Better Package Metadata</li>
<li>PEP 643: Metadata for Package Source Distributions</li>
<li>PEP 644: Require OpenSSL 1.1.1 or newer</li>
<li>PEP 646: Variadic Generics</li>
<li>PEP 647: User-Defined Type Guards</li>
<li>PEP 652: Maintaining the Stable ABI</li>
<li>PEP 654: Exception Groups and except*</li>
<li>PEP 655: Marking individual TypedDict items as required or potentially-missing</li>
<li>PEP 656: Platform Tag for Linux Distributions Using Musl</li>
<li>PEP 657: Include Fine Grained Error Locations in Tracebacks</li>
<li>PEP 660: Editable installs for pyproject.toml based builds (wheel based)</li>
<li>PEP 667: Consistent views of namespaces</li>
<li>PEP 669: Low Impact Monitoring for CPython</li>
<li>PEP 670: Convert macros to functions in the Python C API</li>
<li>PEP 673: Self Type</li>
<li>PEP 675: Arbitrary Literal String Type</li>
<li>PEP 678: Enriching Exceptions with Notes</li>
<li>PEP 680: tomllib: Support for Parsing TOML in the Standard Library</li>
<li>PEP 681: Data Class Transforms</li>
<li>PEP 682: Format Specifier for Signed Zero</li>
<li>PEP 683: Immortal Objects, Using a Fixed Refcount</li>
<li>PEP 684: A Per-Interpreter GIL</li>
<li>PEP 685: Comparison of extra names for optional distribution dependencies</li>
<li>PEP 688: Making the buffer protocol accessible in Python</li>
<li>PEP 689: Unstable C API tier</li>
<li>PEP 692: Using TypedDict for more precise **kwargs typing</li>
<li>PEP 695: Type Parameter Syntax</li>
<li>PEP 696: Type Defaults for Type Parameters</li>
<li>PEP 697: Limited C API for Extending Opaque Types</li>
<li>PEP 698: Override Decorator for Static Typing</li>
<li>PEP 700: Additional Fields for the Simple API for Package Indexes</li>
<li>PEP 702: Marking deprecations using the type system</li>
<li>PEP 705: TypedDict: Read-only items</li>
<li>PEP 706: Filter for tarfile.extractall</li>
<li>PEP 709: Inlined comprehensions</li>
<li>PEP 715: Disabling bdist_egg distribution uploads on PyPI</li>
<li>PEP 721: Using tarfile.data_filter for source distribution extraction</li>
<li>PEP 723: Inline script metadata</li>
<li>PEP 730: Adding iOS as a supported platform</li>
<li>PEP 734: Multiple Interpreters in the Stdlib</li>
<li>PEP 735: Dependency Groups in pyproject.toml</li>
<li>PEP 737: C API to format a type fully qualified name</li>
<li>PEP 738: Adding Android as a supported platform</li>
<li>PEP 740: Index support for digital attestations</li>
<li>PEP 741: Python Configuration C API</li>
<li>PEP 742: Narrowing types with TypeIs</li>
<li>PEP 750: Template Strings</li>
<li>PEP 751: A file format to record Python dependencies for installation reproducibility</li>
<li>PEP 757: C API to import-export Python integers</li>
<li>PEP 758: Allow except and except* expressions without parentheses</li>
<li>PEP 765: Disallow return/break/continue that exit a finally block</li>
<li>PEP 782: Add PyBytesWriter C API</li>
<li>PEP 784: Adding Zstandard to the standard library</li>
<li>PEP 792: Project status markers in the simple index</li>
<li>PEP 3101: Advanced String Formatting</li>
<li>PEP 3102: Keyword-Only Arguments</li>
<li>PEP 3104: Access to Names in Outer Scopes</li>
<li>PEP 3105: Make print a function</li>
<li>PEP 3106: Revamping dict.keys(), .values() and .items()</li>
<li>PEP 3107: Function Annotations</li>
<li>PEP 3108: Standard Library Reorganization</li>
<li>PEP 3109: Raising Exceptions in Python 3000</li>
<li>PEP 3110: Catching Exceptions in Python 3000</li>
<li>PEP 3111: Simple input built-in in Python 3000</li>
<li>PEP 3112: Bytes literals in Python 3000</li>
<li>PEP 3113: Removal of Tuple Parameter Unpacking</li>
<li>PEP 3114: Renaming iterator.next() to iterator.<strong>next</strong>()</li>
<li>PEP 3115: Metaclasses in Python 3000</li>
<li>PEP 3116: New I/O</li>
<li>PEP 3118: Revising the buffer protocol</li>
<li>PEP 3119: Introducing Abstract Base Classes</li>
<li>PEP 3120: Using UTF-8 as the default source encoding</li>
<li>PEP 3121: Extension Module Initialization and Finalization</li>
<li>PEP 3123: Making PyObject_HEAD conform to standard C</li>
<li>PEP 3127: Integer Literal Support and Syntax</li>
<li>PEP 3129: Class Decorators</li>
<li>PEP 3131: Supporting Non-ASCII Identifiers</li>
<li>PEP 3132: Extended Iterable Unpacking</li>
<li>PEP 3134: Exception Chaining and Embedded Tracebacks</li>
<li>PEP 3135: New Super</li>
<li>PEP 3137: Immutable Bytes and Mutable Buffer</li>
<li>PEP 3138: String representation in Python 3000</li>
<li>PEP 3141: A Type Hierarchy for Numbers</li>
<li>PEP 3144: IP Address Manipulation Library for the Python Standard Library</li>
<li>PEP 3147: PYC Repository Directories</li>
<li>PEP 3148: futures - execute computations asynchronously</li>
<li>PEP 3149: ABI version tagged .so files</li>
<li>PEP 3151: Reworking the OS and IO exception hierarchy</li>
<li>PEP 3154: Pickle protocol version 4</li>
<li>PEP 3155: Qualified name for classes and functions</li>
<li>PEP 3156: Asynchronous IO Support Rebooted: the “asyncio” Module</li>
</ul>
<h4>과거의 메타-PEPs 및 정보 제공 PEPs (Historical Meta-PEPs and Informational PEPs)</h4>
<p>과거에 활동했던 메타-PEPs 및 정보 제공 PEPs입니다.</p>
<ul>
<li>PEP 5: 언어 발전 지침 (Guidelines for Language Evolution)</li>
<li>PEP 200: Python 2.0 릴리스 일정 (Python 2.0 Release Schedule)</li>
</ul>
<h4>연기된 PEPs (Deferred PEPs)</h4>
<p>추가 연구 또는 업데이트를 위해 연기된 비활성 초안입니다.</p>
<ul>
<li>PEP 213: 속성 접근 핸들러 (Attribute Access Handlers)</li>
<li>PEP 312: 간단한 암묵적 람다 (Simple Implicit Lambda)</li>
<li>PEP 403: 일반 목적 데코레이터 절 (General purpose decorator clause)</li>
</ul>
<h4>거부, 대체, 철회된 PEPs (Rejected, Superseded, and Withdrawn PEPs)</h4>
<p>공식적으로 거부되거나, 다른 PEP로 대체되거나, 제안자 또는 작성자에 의해 철회된 PEPs입니다.</p>
<ul>
<li>PEP 3: 버그 보고서 처리 지침 (Guidelines for Handling Bug Reports)</li>
<li>PEP 42: 기능 요청 (Feature Requests)</li>
<li>PEP 204: 범위 리터럴 (Range Literals)</li>
</ul>
<h3>예약된 PEP 번호</h3>
<p>특정 목적으로 예약된 PEP 번호입니다.</p>
<ul>
<li>PEP 801: 예약됨 (Reserved)</li>
</ul>
<h3>PEP 유형 키 (PEP Types Key)</h3>
<p>PEP의 유형을 나타내는 키입니다.</p>
<ul>
<li><strong>I — Informational (정보 제공):</strong> Python 생태계에 대한 배경, 가이드라인 또는 기타 정보를 담고 있는 비규범적인 PEP입니다.</li>
<li><strong>P — Process (프로세스):</strong> Python 커뮤니티 프로세스, 워크플로우 또는 거버넌스 변경을 설명하거나 제안하는 규범적인 PEP입니다.</li>
<li><strong>S — Standards Track (표준 트랙):</strong> Python의 새로운 기능, CPython 구현 변경 또는 생태계 상호 운용성 표준에 대한 규범적인 PEP입니다.</li>
<li>자세한 내용은 <a href="https://peps.python.org/pep-0001/">PEP 1</a>을 참조하세요.</li>
</ul>
<h3>PEP 상태 키 (PEP Status Key)</h3>
<p>PEP의 현재 상태를 나타내는 키입니다.</p>
<ul>
<li><strong>A — Accepted (승인됨):</strong> 구현을 위해 승인된 규범적 제안입니다.</li>
<li><strong>A — Active (활성):</strong> 현재 유효한 정보 제공 지침이거나 사용 중인 프로세스입니다.</li>
<li><strong>D — Deferred (연기됨):</strong> 나중에 다시 논의될 수 있는 비활성 초안입니다.</li>
<li><strong>&#x3C;문자 없음> — Draft (초안):</strong> 현재 활발히 논의 및 수정 중인 제안입니다.</li>
<li><strong>F — Final (최종):</strong> 승인 및 구현이 완료되었거나 더 이상 활성화되지 않는 제안입니다.</li>
<li><strong>P — Provisional (임시):</strong> 잠정적으로 승인되었으나 추가 피드백이 필요한 제안입니다.</li>
<li><strong>R — Rejected (거부됨):</strong> 공식적으로 거부되어 수용되지 않을 제안입니다.</li>
<li><strong>S — Superseded (대체됨):</strong> 다른 후속 PEP로 대체된 제안입니다.</li>
<li><strong>W — Withdrawn (철회됨):</strong> 스폰서 또는 작성자에 의해 고려 대상에서 제거된 제안입니다.</li>
<li>자세한 내용은 <a href="https://peps.python.org/pep-0001/">PEP 1</a>을 참조하세요.</li>
</ul>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Active] PEP 0 - Index of Python Enhancement Proposals (PEPs)"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 21:19:02+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
