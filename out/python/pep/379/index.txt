3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/379","c"]
0:["qNOrJYeuqip9qCFPpDVpu",[[["",{"children":[["slug","python/pep/379","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"379\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/379","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T1deb,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0379/">PEP 379 - Adding an Assignment Expression</a></p>
<p><strong>상태:</strong> Withdrawn | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 14-Mar-2009</p>
</blockquote>
<p><strong>작성자:</strong> Jervis Whitley 
<strong>상태:</strong> 철회됨 (Withdrawn)
<strong>유형:</strong> 표준 트랙 (Standards Track)
<strong>생성일:</strong> 2009년 3월 14일
<strong>Python 버전:</strong> 2.7, 3.2
<strong>이력:</strong> (내용 없음)</p>
<hr>
<h3>개요 (Abstract)</h3>
<p>이 PEP는 Python 언어에 새로운 할당 표현식을 추가하여, 거의 모든 곳에서 표현식의 결과를 할당할 수 있도록 제안합니다. 이 새로운 표현식은 표현식의 결과를 처음 사용할 때(예: 비교문에서) 할당하는 것을 가능하게 합니다.</p>
<h3>동기 및 요약 (Motivation and Summary)</h3>
<p>"if something as x:"이라는 <code>Issue1714448</code>은 <code>if</code> 문에서 표현식의 결과를 이름에 할당하는 기능을 설명합니다. 이 기능은 <code>as</code> 문법을 차용할 수 있다고 가정했습니다. 그러나 많은 경우, 흥미로운 것은 표현식 자체보다는 표현식을 구성하는 항 중 하나입니다. 예를 들어, 다음 코드는 매우 제한적으로 보입니다.</p>
<pre><code class="language-python">if (f_result() == [1, 2, 3]) as res:
</code></pre>
<p>아마도 원하는 결과는 다음과 같을 것입니다.</p>
<pre><code class="language-python">if (f_result() as res) == [1, 2, 3]:
</code></pre>
<h3>사용 사례 (Use Cases)</h3>
<p>자세한 내용은 후반부의 "예시 (Examples)" 섹션을 참조하십시오.</p>
<h3>명세 (Specification)</h3>
<p>새로운 표현식은 다음과 같은 (명목상의) 문법으로 제안됩니다.</p>
<pre><code>EXPR -> VAR
</code></pre>
<p>이 단일 표현식은 다음을 수행합니다.</p>
<ol>
<li>임의의 표현식인 <code>EXPR</code>의 값을 평가합니다.</li>
<li>결과를 단일 할당 대상인 <code>VAR</code>에 할당합니다.</li>
<li><code>EXPR</code>의 결과를 스택의 최상단(Top of Stack, TOS)에 남겨둡니다.</li>
</ol>
<p>여기서 <code>-></code> 또는 <code>RARROW</code>는 <code>EXPR</code>의 결과가 <code>VAR</code>에 할당된다는 개념을 설명하는 데 사용되었습니다.</p>
<p>제안된 문법의 번역(컴파일 시 내부적으로 처리되는 방식)은 다음과 같습니다.</p>
<pre><code class="language-python">VAR = (EXPR)
(EXPR)
</code></pre>
<p>할당 대상은 어트리뷰트(attribute), 서브스크립트(subscript) 또는 이름(name)이 될 수 있습니다.</p>
<pre><code class="language-python">f() -> name[0] # 'name'은 이전에 존재해야 합니다.
f() -> name.attr # 마찬가지로 'name'은 이 표현식 이전에 존재해야 합니다.
f() -> name
</code></pre>
<p>이 표현식은 현재 표현식이 허용되는 모든 곳에서 사용 가능해야 합니다.</p>
<p>현재 유효하지 않은 할당 중에 발생하는 모든 예외는 할당 표현식을 사용할 때도 계속 발생합니다. 예를 들어, 위 예시 1과 2에서 <code>name</code>이 이전에 정의되지 않았다면 <code>NameError</code>가 발생하거나, 인덱스 0이 범위를 벗어났다면 <code>IndexError</code>가 발생할 것입니다.</p>
<h3>표준 라이브러리 예시 (Examples from the Standard Library)</h3>
<p>다음 두 예시는 표준 라이브러리를 간략히 탐색한 후 선택되었으며, 모두 검색 당시 열려 있던 <code>ast.py</code> 파일에서 가져왔습니다.</p>
<p><strong>원본:</strong></p>
<pre><code class="language-python">def walk(node):
    from collections import deque
    todo = deque([node])
    while todo:
        node = todo.popleft()
        todo.extend(iter_child_nodes(node))
        yield node
</code></pre>
<p><strong>할당 표현식 사용:</strong></p>
<pre><code class="language-python">def walk(node):
    from collections import deque
    todo = deque([node])
    while todo:
        todo.extend(iter_child_nodes(todo.popleft() -> node))
        yield node
</code></pre>
<p><strong>원본:</strong></p>
<pre><code class="language-python">def get_docstring(node, clean=True):
    if not isinstance(node, (FunctionDef, ClassDef, Module)):
        raise TypeError("%r can't have docstrings" % node.__class__.__name__)
    if node.body and isinstance(node.body[0], Expr) and \
       isinstance(node.body[0].value, Str):
        if clean:
            import inspect
            return inspect.cleandoc(node.body[0].value.s)
        return node.body[0].value.s
</code></pre>
<p><strong>할당 표현식 사용:</strong></p>
<pre><code class="language-python">def get_docstring(node, clean=True):
    if not isinstance(node, (FunctionDef, ClassDef, Module)):
        raise TypeError("%r can't have docstrings" % node.__class__.__name__)
    if node.body -> body and isinstance(body[0] -> elem, Expr) and \
       isinstance(elem.value -> value, Str):
        if clean:
            import inspect
            return inspect.cleandoc(value.s)
        return value.s
</code></pre>
<h3>예시 (Examples)</h3>
<p>아래 예시들은 할당 표현식의 몇 가지 바람직한 기능과 가능한 코너 케이스(corner cases)를 보여줍니다.</p>
<p><strong><code>if</code> 문 내에서 나중에 사용하기 위한 할당:</strong></p>
<pre><code class="language-python">def expensive():
    import time; time.sleep(1)
    return 'spam'

if expensive() -> res in ('spam', 'eggs'):
    dosomething(res)
</code></pre>
<p><strong><code>while</code> 루프 절(clause) 내에서의 할당:</strong></p>
<pre><code class="language-python">while len(expensive() -> res) == 4:
    dosomething(res)
</code></pre>
<p><strong><code>for</code> 루프에서 이터레이터(iterator) 객체 유지:</strong></p>
<pre><code class="language-python">for ch in expensive() -> res:
    sell_on_internet(res)
</code></pre>
<p><strong>코너 케이스 (Corner case):</strong></p>
<pre><code class="language-python">for ch -> please_dont in expensive():
    pass # 누가 이런 식으로 쓰고 싶어할까요? 저는 아닙니다.
</code></pre>
<h3>결론 (Impact on Python Usage)</h3>
<p>PEP 379는 표현식의 결과를 변수에 할당하는 동시에 해당 결과를 다른 표현식에서 즉시 사용할 수 있도록 하여 코드의 간결성과 가독성을 향상시키려는 시도였습니다. 특히, 함수 호출 결과를 여러 번 사용해야 하지만 한 번만 계산하고 싶을 때 유용할 수 있었습니다. 하지만 이 PEP는 "철회됨(Withdrawn)" 상태로, Python 언어에 공식적으로 추가되지 않았습니다.</p>
<p>이 제안과 유사한 개념은 나중에 Python 3.8에 도입된 Walrus Operator (할당 표현식 <code>:=</code>)를 통해 실현되었습니다. Walrus Operator는 PEP 379와 달리 <code>-></code> 대신 <code>:=</code>를 사용하여 표현식 내에서 이름에 값을 할당하고 그 값을 반환하는 기능을 제공합니다.</p>
<p>따라서 PEP 379는 직접적으로 Python 사용에 영향을 미치지는 않았지만, 코드 중복을 줄이고 특정 패턴의 코드를 더 간결하게 만들려는 Python 커뮤니티의 오랜 요구 사항을 보여주는 중요한 이정표였습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Withdrawn] PEP 379 - Adding an Assignment Expression"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 21:01:34+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
