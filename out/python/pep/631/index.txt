3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/631","c"]
0:["qNOrJYeuqip9qCFPpDVpu",[[["",{"children":[["slug","python/pep/631","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"631\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/631","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T1fa6,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0631/">PEP 631 - Dependency specification in pyproject.toml based on PEP 508</a></p>
<p><strong>상태:</strong> Superseded | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 20-Aug-2020</p>
</blockquote>
<h2>PEP 631: <code>pyproject.toml</code>을 통한 의존성 명세 (PEP 508 기반)</h2>
<p><strong>작성자:</strong> Ofek Lev
<strong>스폰서:</strong> Paul Ganssle
<strong>상태:</strong> Superseded (대체됨) - PEP 621에 병합됨
<strong>주제:</strong> 패키징
<strong>생성일:</strong> 2020년 8월 20일</p>
<h3>초록 (Abstract)</h3>
<p>이 PEP는 패키징 관련 도구들이 PEP 621에 정의된 필드를 사용하여 <code>pyproject.toml</code> 파일에 프로젝트의 의존성(dependencies)을 어떻게 작성할지 명세합니다.</p>
<p><strong>참고:</strong> 이 PEP는 승인되었으며 PEP 621에 병합되었습니다.</p>
<h3>엔트리 (Entries)</h3>
<p>모든 의존성 엔트리는 유효한 PEP 508 문자열이어야 합니다. 빌드 백엔드(Build backends)는 파싱(parsing) 오류 발생 시 로드 타임에 중단(abort)해야 합니다.</p>
<pre><code class="language-python">from packaging.requirements import InvalidRequirement, Requirement

# ...

try:
    Requirement(entry)
except InvalidRequirement:
    # exit
</code></pre>
<h3>명세 (Specification)</h3>
<h4><code>dependencies</code></h4>
<ul>
<li><strong>형식:</strong> 문자열 배열 (array of strings)</li>
<li><strong>관련 코어 메타데이터:</strong> <code>Requires-Dist</code></li>
<li>모든 요소는 엔트리(entry)여야 합니다.</li>
</ul>
<pre><code class="language-toml">[project]
dependencies = [
    'PyYAML ~= 5.0',
    'requests[security] &#x3C; 3',
    'subprocess32; python_version &#x3C; "3.2"',
]
</code></pre>
<h4><code>optional-dependencies</code></h4>
<ul>
<li><strong>형식:</strong> 테이블 (table)</li>
<li><strong>관련 코어 메타데이터:</strong> <code>Provides-Extra</code>, <code>Requires-Dist</code></li>
<li>각 키(key)는 제공되는 옵션의 이름이며, 각 값은 <code>dependencies</code> 필드와 동일한 타입(문자열 배열)입니다.</li>
</ul>
<pre><code class="language-toml">[project.optional-dependencies]
tests = [
    'coverage>=5.0.3',
    'pytest',
    'pytest-benchmark[histogram]>=3.2.1',
]
</code></pre>
<h3>예시 (Example)</h3>
<p>다음은 <code>docker-compose</code>의 실제 정의를 포팅(porting)한 예시입니다.</p>
<pre><code class="language-toml">[project]
dependencies = [
    'cached-property >= 1.2.0, &#x3C; 2',
    'distro >= 1.5.0, &#x3C; 2',
    'docker[ssh] >= 4.2.2, &#x3C; 5',
    'dockerpty >= 0.4.1, &#x3C; 1',
    'docopt >= 0.6.1, &#x3C; 1',
    'jsonschema >= 2.5.1, &#x3C; 4',
    'PyYAML >= 3.10, &#x3C; 6',
    'python-dotenv >= 0.13.0, &#x3C; 1',
    'requests >= 2.20.0, &#x3C; 3',
    'texttable >= 0.9.0, &#x3C; 2',
    'websocket-client >= 0.32.0, &#x3C; 1',
    # Conditional (조건부 의존성)
    'backports.shutil_get_terminal_size == 1.0.0; python_version &#x3C; "3.3"',
    'backports.ssl_match_hostname >= 3.5, &#x3C; 4; python_version &#x3C; "3.5"',
    'colorama >= 0.4, &#x3C; 1; sys_platform == "win32"',
    'enum34 >= 1.0.4, &#x3C; 2; python_version &#x3C; "3.4"',
    'ipaddress >= 1.0.16, &#x3C; 2; python_version &#x3C; "3.3"',
    'subprocess32 >= 3.5.4, &#x3C; 4; python_version &#x3C; "3.2"',
]

[project.optional-dependencies]
socks = [
    'PySocks >= 1.5.6, != 1.5.7, &#x3C; 2'
]
tests = [
    'ddt >= 1.2.2,  2 &#x3C;', # Note: This line has a typo in the original PEP. It should be '&#x3C; 2'
    'pytest &#x3C; 6',
    'mock >= 1.0.1, &#x3C; 4; python_version &#x3C; "3.4"',
]
</code></pre>
<h3>구현 (Implementation)</h3>
<h4>파싱 (Parsing)</h4>
<p>의존성(dependencies) 및 선택적 의존성(optional-dependencies) 필드를 파싱하는 예시 Python 코드는 다음과 같습니다. <code>packaging.requirements</code> 모듈을 사용하여 의존성 문자열의 유효성을 검사합니다.</p>
<pre><code class="language-python">from packaging.requirements import InvalidRequirement, Requirement

def parse_dependencies(config):
    dependencies = config.get('dependencies', [])
    if not isinstance(dependencies, list):
        raise TypeError('Field `project.dependencies` must be an array')
    for i, entry in enumerate(dependencies, 1):
        if not isinstance(entry, str):
            raise TypeError(f'Dependency #{i} of field `project.dependencies` must be a string')
        try:
            Requirement(entry)
        except InvalidRequirement as e:
            raise ValueError(f'Dependency #{i} of field `project.dependencies` is invalid: {e}')
    return dependencies

def parse_optional_dependencies(config):
    optional_dependencies = config.get('optional-dependencies', {})
    if not isinstance(optional_dependencies, dict):
        raise TypeError('Field `project.optional-dependencies` must be a table')
    optional_dependency_entries = {}
    for option, dependencies in optional_dependencies.items():
        if not isinstance(dependencies, list):
            raise TypeError(
                f'Dependencies for option `{option}` of field '
                '`project.optional-dependencies` must be an array'
            )
        entries = []
        for i, entry in enumerate(dependencies, 1):
            if not isinstance(entry, str):
                raise TypeError(
                    f'Dependency #{i} of option `{option}` of field '
                    '`project.optional-dependencies` must be a string'
                )
            try:
                Requirement(entry)
            except InvalidRequirement as e:
                raise ValueError(
                    f'Dependency #{i} of option `{option}` of field '
                    f'`project.optional-dependencies` is invalid: {e}'
                )
            else:
                entries.append(entry)
        optional_dependency_entries[option] = entries
    return optional_dependency_entries
</code></pre>
<h4>메타데이터 (Metadata)</h4>
<p>이 섹션은 <code>pyproject.toml</code>에 명시된 의존성 정보가 <code>.dist-info/METADATA</code> 파일의 코어 메타데이터(core metadata) 필드(예: <code>Requires-Dist</code>, <code>Provides-Extra</code>)로 어떻게 변환되는지를 보여줍니다.</p>
<pre><code class="language-python">def construct_metadata_file(metadata_object):
    """
    https://packaging.python.org/specifications/core-metadata/
    """
    metadata_file = 'Metadata-Version: 2.1\n'
    # ...
    if metadata_object.dependencies:
        # Sort dependencies to ensure reproducible builds
        for dependency in sorted(metadata_object.dependencies):
            metadata_file += f'Requires-Dist: {dependency}\n'

    if metadata_object.optional_dependencies:
        # Sort extras and dependencies to ensure reproducible builds
        for option, dependencies in sorted(metadata_object.optional_dependencies.items()):
            metadata_file += f'Provides-Extra: {option}\n'
            for dependency in sorted(dependencies):
                if ';' in dependency:
                    metadata_file += f'Requires-Dist: {dependency} and extra == "{option}"\n'
                else:
                    metadata_file += f'Requires-Dist: {dependency}; extra == "{option}"\n'
    # ...
    return metadata_file
</code></pre>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인(public domain)에 있거나 CC0-1.0-Universal 라이선스(두 라이선스 중 더 관대한 쪽) 하에 제공됩니다.```</p>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인(public domain)에 있거나 CC0-1.0-Universal 라이선스(두 라이선스 중 더 관대한 쪽) 하에 제공됩니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Superseded] PEP 631 - Dependency specification in pyproject.toml based on PEP 508"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 01:15:39+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
