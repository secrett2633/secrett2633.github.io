3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/565","c"]
0:["jf5MDuRUbMNVvRN9tv5rq",[[["",{"children":[["slug","python/pep/565","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"565\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/565","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T4095,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0565/">PEP 565 - Show DeprecationWarning in <strong>main</strong></a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 12-Nov-2017</p>
</blockquote>
<p>PEP 565: <code>__main__</code> 모듈에서 <code>DeprecationWarning</code> 표시 (Show DeprecationWarning in <code>__main__</code>)</p>
<h2>요약 (Abstract)</h2>
<p>Python 2.7 및 3.2부터 <code>DeprecationWarning</code>은 기본적으로 숨겨져 있었습니다. 이는 개발 도구나 애플리케이션 사용자들이 불필요한 경고를 보지 않도록 하기 위함이었습니다. 그러나 이로 인해 API 변경 사항을 사용자에게 미리 알리는 <code>DeprecationWarning</code>의 본래 목적이 약화되는 부작용이 발생했습니다. PEP 565는 이 문제를 개선하고자 기본 경고 필터에 한 가지 조정을 제안합니다: <code>__main__</code> 모듈에서 발생하는 <code>DeprecationWarning</code>을 기본적으로 표시하도록 변경하는 것입니다. 이 변경으로 인해 대화형 프롬프트나 단일 파일 스크립트에서 실행되는 코드는 다시 경고를 기본적으로 보고하게 되며, 패키지화된 코드는 계속해서 기본적으로 경고가 숨겨집니다. 또한, 이 PEP는 <code>warnings</code> 서브시스템을 새로운 Python 개발자들이 더 쉽게 접근할 수 있도록 참조 인터프리터 및 표준 라이브러리 문서에 몇 가지 작은 조정을 제안합니다.</p>
<h2>목표</h2>
<p>Python 개발자들이 이 PEP의 제안 내용, 도입 배경, 그리고 실제 Python 사용에 미치는 영향을 명확하게 이해할 수 있도록 돕는 것입니다.</p>
<h2>명세 (Specification)</h2>
<h3>새로운 기본 경고 필터 엔트리 (New default warnings filter entry)</h3>
<p>현재 기본 경고 필터는 <code>DeprecationWarning</code>, <code>PendingDeprecationWarning</code>, <code>ImportWarning</code>, <code>BytesWarning</code>, <code>ResourceWarning</code>을 모두 <code>ignore</code>합니다. <code>unittest</code> 테스트 러너는 테스트 케이스 실행 시 <code>warnings.catch_warnings()</code>와 <code>warnings.simplefilter('default')</code>를 사용하여 기본 필터를 재정의합니다.</p>
<p>PEP 565에서 제안하는 변경 사항은 기본 경고 필터 목록을 다음과 같이 업데이트하는 것입니다.</p>
<pre><code>default::DeprecationWarning:__main__
ignore::DeprecationWarning
ignore::PendingDeprecationWarning
ignore::ImportWarning
ignore::BytesWarning
ignore::ResourceWarning
</code></pre>
<p>이것은 <code>warnings.warn</code>의 <code>stacklevel</code> 매개변수에 의해 결정되는 경고의 명목상 위치가 <code>__main__</code> 모듈에 있을 경우, 각 <code>DeprecationWarning</code>의 첫 번째 발생이 다시 보고될 것임을 의미합니다.</p>
<p>이 변경으로 <code>DeprecationWarning</code>은 다음 경우에 기본적으로 표시됩니다.</p>
<ul>
<li>대화형 프롬프트에서 직접 실행되는 코드</li>
<li>단일 파일 스크립트의 일부로 직접 실행되는 코드</li>
</ul>
<p>반면, 다음 경우에는 기본적으로 계속 숨겨집니다.</p>
<ul>
<li>다른 모듈에서 import된 코드</li>
<li><code>zipapp</code> 아카이브의 <code>__main__.py</code> 파일 내 코드</li>
<li>실행 가능한 패키지의 <code>__main__</code> 서브모듈에서 import된 코드</li>
<li><code>console_scripts</code> 또는 <code>gui_scripts</code> 엔트리 포인트 정의를 기반으로 설치 시 생성된 실행 스크립트 래퍼에서 import된 코드</li>
</ul>
<p>이는 사용자를 위한 설치 가능하거나 실행 가능한 아티팩트(예: <code>zipapp</code> 아카이브)를 생성하는 도구 개발자에게는 현 상태와 변화가 없지만, 더 임시적이거나 로컬에서 배포되는 스크립트 사용자는 관련 <code>DeprecationWarning</code>을 다시 보게 될 가능성이 높습니다 (Python 2.6 및 이전 버전에서처럼).</p>
<h3><code>FutureWarning</code>의 추가 사용 사례 (Additional use case for FutureWarning)</h3>
<p>표준 라이브러리 문서는 애플리케이션 사용자에게 보이도록 의도된 하위 호환성 경고에 대해 <code>FutureWarning</code> ( <code>DeprecationWarning</code> 대신) 사용을 명시적으로 권장하도록 업데이트될 것입니다. (이것은 미래에도 유효한 코드이지만 의미론이 달라질 구성에 대해 경고하는 기존의 <code>FutureWarning</code> 사용에 추가됩니다.)</p>
<p>이로 인해 하위 호환성 경고는 세 가지 다른 대상에 대해 다음과 같은 세 가지 개별적인 범주를 갖게 됩니다.</p>
<ul>
<li><code>PendingDeprecationWarning</code>: 모든 코드에 대해 기본적으로 숨겨집니다. 대상은 소프트웨어의 미래 호환성을 보장하는 데 적극적인 관심을 갖는 Python 개발자입니다 (예: 특정 지원 의무가 있는 전문 Python 애플리케이션 개발자).</li>
<li><code>DeprecationWarning</code>: <code>__main__</code> 모듈에서 직접 실행되는 코드에 대해 기본적으로 보고되지만 (이러한 코드는 전용 테스트 스위트를 가질 가능성이 상대적으로 낮다고 간주되므로), 다른 모듈의 코드에 대해서는 기본적으로 숨겨집니다. 대상은 종속성 업그레이드 (Python 자체 업그레이드 포함)로 인해 소프트웨어가 손상될 위험이 있는 Python 개발자입니다 (예: 다른 사람이 종속성 업그레이드 시기를 제어하는 환경에서 Python을 사용하여 스크립트를 작성하는 개발자).</li>
<li><code>FutureWarning</code>: 모든 코드에 대해 기본적으로 보고됩니다. 대상은 다른 Python 개발자가 아닌 Python으로 작성된 애플리케이션 사용자입니다 (예: 구성 파일 형식의 deprecated 설정 사용에 대한 경고).</li>
</ul>
<p>API 호환성 경고가 사용자에게 더 안정적으로 보이도록 하려는 라이브러리 및 프레임워크 작성자의 경우, Python 3.7+에서는 <code>DeprecationWarning</code>에서 파생되고 이전 버전에서는 <code>FutureWarning</code>에서 파생되는 사용자 정의 경고 클래스를 사용하는 것이 좋습니다.</p>
<h3>테스트 러너를 위한 권장 필터 설정 (Recommended filter settings for test runners)</h3>
<p>테스트 러너 개발자는 기본 경고 필터를 결정할 때 다음과 유사한 로직을 구현하는 것이 좋습니다.</p>
<pre><code class="language-python">if not sys.warnoptions:
    warnings.simplefilter("default")
</code></pre>
<p>이는 <code>warnings.simplefilter("default")</code>를 통해 <code>sys.warnoptions</code>가 설정되지 않은 경우, 사실상 <code>-Wd</code> 명령줄 옵션이 전달된 것처럼 모든 경고를 기본적으로 활성화합니다.</p>
<h3>대화형 셸을 위한 권장 필터 설정 (Recommended filter settings for interactive shells)</h3>
<p>대화형 셸 개발자는 사용자 코드가 입력되고 실행되는 네임스페이스에 <code>DeprecationWarning</code>을 활성화하는 필터를 추가하는 것이 좋습니다. 해당 네임스페이스가 <code>__main__</code>이라면 (기본 CPython REPL의 경우처럼), 이 PEP의 변경 사항 외에는 추가 변경이 필요하지 않습니다. <code>__main__</code>이 아닌 다른 네임스페이스를 사용하는 대화형 셸 구현은 자체 필터를 추가해야 합니다. 예를 들어, IPython은 다음 명령을 사용하여 적절한 필터를 설정합니다.</p>
<pre><code class="language-python">warnings.filterwarnings("default", category=DeprecationWarning, module=self.user_ns.get("__name__"))
</code></pre>
<h3>기타 문서 업데이트 (Other documentation updates)</h3>
<p><code>warnings</code> 시스템에 대한 현재 참조 문서는 특정 최종 결과를 달성하는 <code>-W</code> 명령줄 옵션 또는 <code>PYTHONWARNINGS</code> 환경 변수의 가능한 설정에 대한 구체적인 예제가 상대적으로 부족합니다.</p>
<p>이 PEP 구현의 일환으로 다음 개선 사항이 제안됩니다.</p>
<ul>
<li><code>PYTHONWARNINGS</code> 환경 변수 설명 아래에 다음 엔트리를 명시적으로 나열합니다.
<ul>
<li><code>PYTHONWARNINGS=error</code> # 예외로 변환</li>
<li><code>PYTHONWARNINGS=always</code> # 매번 경고</li>
<li><code>PYTHONWARNINGS=default</code> # 호출 위치당 한 번 경고</li>
<li><code>PYTHONWARNINGS=module</code> # 호출 모듈당 한 번 경고</li>
<li><code>PYTHONWARNINGS=once</code> # Python 프로세스당 한 번 경고</li>
<li><code>PYTHONWARNINGS=ignore</code> # 절대 경고하지 않음</li>
</ul>
</li>
<li><code>-W</code> 명령줄 스위치 문서에 나열된 각 경고 동작에 해당하는 짧은 옵션 (<code>-We</code>, <code>-Wa</code>, <code>-Wd</code>, <code>-Wm</code>, <code>-Wo</code>, <code>-Wi</code>)을 명시적으로 나열합니다.</li>
<li><code>warnings</code> 모듈 문서에 <code>action::category</code> 및 <code>action::category:module</code> 표기법을 사용하여 기본 필터 세트를 명시적으로 나열합니다.</li>
<li><code>warnings.simplefilter</code> 문서에 다음 스니펫을 Python 애플리케이션에서 모든 경고를 기본적으로 끄면서 <code>PYTHONWARNINGS</code> 또는 <code>-W</code> 명령줄 스위치를 통해 다시 켤 수 있도록 하는 권장 접근 방식으로 명시적으로 나열합니다.
<pre><code class="language-python">if not sys.warnoptions:
    warnings.simplefilter("ignore")
</code></pre>
</li>
</ul>
<p>이러한 내용은 새로운 것이 아니지만 (이미 지원되는 모든 Python 버전에서 작동), 관련 문서의 현재 구조를 고려할 때 특별히 명확하지 않습니다.</p>
<h2>동기 (Motivation)</h2>
<p>Python 2.7 및 Python 3.2에서는 <code>DeprecationWarning</code>의 기본 처리 방식이 변경되어, 일반 코드 실행 중에는 경고가 기본적으로 숨겨지고 <code>unittest</code> 테스트 러너는 테스트 실행 시 이를 다시 활성화하도록 업데이트되었습니다.</p>
<p>이는 다음과 같은 툴링 출력을 피하기 위함이었습니다.</p>
<pre><code>$ devtool mycode/
/usr/lib/python3.6/site-packages/devtool/cli.py:1: DeprecationWarning: 'async' and 'await' will become reserved keywords in Python 3.7
async = True
... actual tool output ...
</code></pre>
<p><code>devtool</code>이 Python 프로그래머를 위한 도구이더라도, 최종 사용자가 취할 수 있는 주요 유용한 조치가 <code>devtool</code> 개발자에게 버그를 보고하는 것인데도 불구하고 호출할 때마다 표시되는 이러한 경고는 특별히 유용하지 않았습니다.</p>
<p>그러나 이 변경은 다음 대상에게 의도치 않은 결과를 초래했습니다.</p>
<ul>
<li><code>unittest</code>에 내장된 기본 테스트 러너 외의 다른 테스트 러너를 사용하는 사람 (타사 테스트 러너에게 기본 경고 필터를 변경하도록 명시적으로 요청한 적이 없으므로, 많은 러너가 배포된 애플리케이션에 적합하도록 설계된 인터프리터 기본값에 계속 의존했습니다.)</li>
<li><code>unittest</code> 기본 테스트 러너를 사용하여 서브프로세스에서 Python 코드를 테스트하는 사람 ( <code>unittest</code>조차 현재 프로세스에서만 경고 설정을 조정하기 때문입니다.)</li>
<li>대화형 프롬프트에서 Python 코드를 작성하거나 Python 수준 테스트 스위트가 전혀 없는 직접 실행되는 스크립트의 일부로 코드를 작성하는 사람.</li>
</ul>
<p>이러한 경우 <code>DeprecationWarning</code>은 거의 <code>PendingDeprecationWarning</code>과 완전히 동일하게 되어, 단순히 전혀 보이지 않게 되었습니다.</p>
<h2>PEP 범위의 제한 사항 (Limitations on PEP Scope)</h2>
<p>이 PEP는 3.7의 기본 경고 필터에 제안된 추가 사항과 Python 2.7 및 3.2에서 <code>DeprecationWarning</code> 처리 방식에 대한 원래 변경의 근거를 더 명확하게 설명하기 위해 존재합니다.</p>
<p>이 PEP는 현재 <code>deprecation warning</code> 처리 방식의 알려진 모든 문제를 해결하지는 않습니다. 가장 주목할 만한 점은 다음과 같습니다.</p>
<ul>
<li>기본 <code>unittest</code> 테스트 러너는 모듈 import 시점에 발생하는 <code>deprecation warning</code>을 현재 보고하지 않습니다. 경고 필터 재정의는 테스트 실행 중에만 적용되고 테스트 검색 및 로딩 중에는 적용되지 않기 때문입니다.</li>
<li>기본 <code>unittest</code> 테스트 러너는 서브프로세스에서 발생하는 <code>deprecation warning</code>을 현재 보고하지 않습니다. 경고 필터 재정의는 로드된 <code>warnings</code> 모듈에 직접 적용되며, <code>PYTHONWARNINGS</code> 환경 변수에는 적용되지 않기 때문입니다.</li>
<li>표준 라이브러리는 특정 종속성을 업그레이드하기 전에 해당 종속성에서 발생하는 모든 경고를 볼 수 있는 간단한 방법을 제공하지 않습니다. (타사 <code>warn</code> 모듈은 이를 제공하지만, 활성화하려면 표준 라이브러리의 <code>warnings</code> 모듈을 monkeypatching해야 합니다.)</li>
<li>소프트웨어가 지원 모듈로 분리되었지만, 해당 모듈에 자동화된 테스트 커버리지가 거의 또는 전혀 없는 경우, <code>__main__</code>에서 <code>deprecation warning</code>을 기본적으로 다시 활성화하는 것이 API 호환성 문제를 찾는 데 도움이 될 가능성은 낮습니다. 단기적으로 현재 사용 가능한 최선의 방법은 영향을 받는 애플리케이션을 <code>PYTHONWARNINGS=default::DeprecationWarning</code> 또는 <code>python -W default::DeprecationWarning</code>으로 실행하고 <code>stderr</code> 출력을 주의 깊게 확인하는 것입니다. 장기적으로 이것은 Python 코드의 정적 분석 작업을 하는 연구자들을 위한 질문입니다. 즉, deprecated API 사용법을 안정적으로 찾고, API를 제공하는 코드 또는 접근하는 코드를 실제로 실행하지 않고도 <code>warnings.warn</code> 호출을 기반으로 API 또는 매개변수가 deprecated되었는지 추론하는 방법입니다.</li>
</ul>
<p>이러한 문제는 현 상태의 실제 문제이지만, 단일 추가 엔트리보다 더 복잡한 해결책이 필요하고, 해결이 PEP 프로세스를 거치지 않아도 될 수 있으므로 이 PEP의 고려 대상에서 제외되었습니다.</p>
<p>이 문제에 대해 더 깊이 탐구하는 데 관심이 있는 사람들을 위해, 첫 두 가지는 <code>unittest</code> 모듈 개선 요청, 세 번째는 <code>warnings</code> 모듈 개선 요청이 될 것이며, 마지막은 내용에서 API deprecation을 추론하는 것이 다루기 힘든 코드 분석 문제로 간주되고 어노테이션에 명시적인 함수 및 매개변수 마커 구문이 대신 제안되는 경우에만 PEP가 필요할 것입니다.</p>
<p>CPython 참조 구현에는 3.7에서 다음과 같은 관련 변경 사항도 포함될 것입니다.</p>
<ul>
<li>여러 개발자 중심 설정 ( <code>-Wd</code> 포함)을 하나의 명령줄 플래그로 결합하는 새로운 <code>-X dev</code> 명령줄 옵션: <a href="https://github.com/python/cpython/issues/76224">https://github.com/python/cpython/issues/76224</a></li>
<li>디버그 빌드에서 일반 인터프리터 빌드에서 기본적으로 꺼져 있는 더 많은 경고를 표시하도록 동작 변경: <a href="https://github.com/python/cpython/issues/76269">https://github.com/python/cpython/issues/76269</a></li>
</ul>
<p>이 PEP에서 제안된 기본 필터 변경과 별도로, issue 32229는 애플리케이션 개발자가 일반 작동 중에 경고를 숨기면서 테스트 시 쉽게 볼 수 있도록 <code>warnings.hide_warnings</code> API를 추가하자는 제안입니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 565 - Show DeprecationWarning in __main__"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 23:49:30+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
