3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-1a135130af3e1cae.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/535","c"]
0:["8N6icDw00Cy0kKVlExSq2",[[["",{"children":[["slug","python/pep/535","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"535\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/535","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T1e72,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0535/">PEP 535 - Rich comparison chaining</a></p>
<p><strong>상태:</strong> Deferred | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 12-Nov-2016</p>
</blockquote>
<h2>PEP 535 – 풍부한 비교 체인 (Rich comparison chaining)</h2>
<h3>개요 (Abstract)</h3>
<p>PEP 535는 PEP 335에서 영감을 받고 PEP 532에 설명된 회로 차단(circuit breaking) 프로토콜을 기반으로, 체인 비교(chained comparisons)의 정의 변경을 제안합니다. 이 제안의 핵심은 좌측 비교(left hand comparison)가 회로 차단기(circuit breaker)를 반환할 경우, 기존의 논리합 연산자(<code>and</code>) 대신 좌측 결합 회로 차단 연산자(<code>else</code>)를 사용하여 비교 체인이 동작하도록 업데이트하는 것입니다.</p>
<p>이 변경은 NumPy와 같은 라이브러리에서 단일 값을 갖는 배열(single-valued arrays) 처리와 관련된 몇 가지 복잡성을 해결하며, 결과가 부울(boolean) 값의 매트릭스(matrix)인 행렬(matrices)에 대한 요소별 체인 비교(elementwise chained comparison) 연산을 허용하여 <code>ValueError</code>가 발생하거나 항등적으로 <code>True</code>를 반환하는 문제를 방지합니다.</p>
<h3>PEP 연기 (PEP Deferral)</h3>
<p>이 PEP에 대한 추가 논의는 적어도 Python 3.8 이후로 연기되었습니다.</p>
<h3>다른 PEP와의 관계 (Relationship with other PEPs)</h3>
<p>이 PEP는 PEP 532의 초기 반복(earlier iterations)에서 추출되었으며, 회로 차단 프로토콜 도입의 필수적인 부분이라기보다는 후속 사용 사례(follow-on use case)로 다뤄집니다.</p>
<p>요소별 비교 사용 사례를 처리하기 위해 비교 체인의 의미론적 정의를 변경하는 이 PEP의 구체적인 제안은 Guido van Rossum이 PEP 335를 거부한 내용에서 직접적으로 파생되었습니다.</p>
<h3>사양 (Specification)</h3>
<p><code>0 &#x3C; x &#x3C; 10</code>과 같은 체인 비교는 현재 대략 다음과 같이 의미론적으로 동일하게 확장됩니다:</p>
<pre><code class="language-python">_expr = EXPR
_lhs_result = LEFT_BOUND LEFT_OP _expr
_expr_result = _lhs_result and (_expr RIGHT_OP RIGHT_BOUND)
</code></pre>
<p>PEP 532에서 소개된 회로 차단 개념을 사용하여, 이 PEP는 비교 체인이 좌측 비교가 회로 차단기를 반환하는지 명시적으로 확인하고, 만약 그렇다면 <code>and</code> 대신 <code>else</code>를 사용하여 비교 체인을 구현하도록 변경할 것을 제안합니다:</p>
<pre><code class="language-python">_expr = EXPR
_lhs_result = LEFT_BOUND LEFT_OP _expr
if hasattr(type(_lhs_result), "__else__"):
    _expr_result = _lhs_result else (_expr RIGHT_OP RIGHT_BOUND)
else:
    _expr_result = _lhs_result and (_expr RIGHT_OP RIGHT_BOUND)
</code></pre>
<p>이러한 변경을 통해 NumPy 배열과 같은 타입이 비교 연산에서 적절하게 정의된 회로 차단기를 반환함으로써 체인 비교의 동작을 제어할 수 있게 됩니다. 임의의 수의 체인 비교 연산으로 이 논리를 확장하는 것은 기존의 <code>and</code> 확장을 따릅니다.</p>
<h3>배경 (Rationale)</h3>
<p>Guido van Rossum은 궁극적으로 PEP 335를 거부하면서 NumPy 개발자들이 체인 비교(예: <code>A &#x3C; B &#x3C; C</code>)를 가장 흔한 사용 사례로 언급했음을 지적했습니다.</p>
<p>NumPy 배열에서 비교가 어떻게 작동하는지 이해해야 합니다. NumPy 배열 비교는 기본적으로 요소별(element-wise)로 작동하여, 왼쪽 배열의 각 요소를 오른쪽 배열의 해당 요소와 비교하고 부울 결과의 매트릭스를 생성합니다.</p>
<pre><code class="language-python">>>> import numpy as np
>>> increasing = np.arange(5)
>>> increasing
array([0, 1, 2, 3, 4])
>>> decreasing = np.arange(4, -1, -1)
>>> decreasing
array([4, 3, 2, 1, 0])
>>> increasing &#x3C; decreasing
array([ True, True, False, False, False], dtype=bool)
</code></pre>
<p>비교의 어느 한쪽이 스칼라(scalar) 값인 경우, 해당 값은 배열 전체에 브로드캐스트(broadcast)되어 각 개별 요소와 비교됩니다.</p>
<pre><code class="language-python">>>> 0 &#x3C; increasing
array([False, True, True, True, True], dtype=bool)
>>> increasing &#x3C; 4
array([ True, True, True, True, False], dtype=bool)
</code></pre>
<p>그러나 체인 비교를 사용하려고 하면 이러한 브로드캐스팅(broadcasting) 방식이 작동하지 않습니다.</p>
<pre><code class="language-python">>>> 0 &#x3C; increasing &#x3C; 4
Traceback (most recent call last):
  File "&#x3C;stdin>", line 1, in &#x3C;module>
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
</code></pre>
<p>이 문제는 Python이 내부적으로 체인 비교를 <code>0 &#x3C; increasing and increasing &#x3C; 4</code> 형태로 암시적으로 확장하기 때문에 발생합니다. NumPy는 <code>a.any()</code>와 <code>a.all()</code>이 동일한 결과를 보장할 수 있는 단일 요소 배열에 대해서만 부울 값으로의 암시적 형 변환(implicit coercion)을 허용합니다.</p>
<p>이 PEP의 제안은 NumPy의 요소별 비교 연산 정의를 업데이트하여 이 상황을 변경하는 것을 목표로 합니다. 새로운 회로 차단 프로토콜을 구현하는 전용 서브클래스를 반환하고, 부울 컨텍스트(boolean context)에서 결과 배열의 해석을 항상 <code>False</code>로 반환하도록 변경하여 단락 평가(short-circuiting behaviour)가 절대 트리거되지 않도록 합니다.</p>
<p>예시 클래스:</p>
<pre><code class="language-python">class ComparisonResultArray(np.ndarray):
    def __bool__(self):
        # Element-wise comparison chaining never short-circuits
        return False
    def _raise_NotImplementedError(self):
        msg = ("Comparison array truth values are ambiguous outside "
               "chained comparisons. Use a.any() or a.all()")
        raise NotImplementedError(msg)
    def __not__(self):
        self._raise_NotImplementedError()
    def __then__(self, result):
        self._raise_NotImplementedError()
    def __else__(self, result):
        return np.logical_and(self, other.view(ComparisonResultArray))
</code></pre>
<p>이러한 변경으로 위에서 실패했던 체인 비교 예시는 다음과 같은 결과를 반환할 수 있습니다.</p>
<pre><code class="language-python">>>> 0 &#x3C; increasing &#x3C; 4
ComparisonResultArray([ False, True, True, True, False], dtype=bool)
</code></pre>
<h3>구현 (Implementation)</h3>
<p>실제 구현은 PEP 532에서 제안된 변경 사항에 대한 원칙적인 관심이 있을 때까지 연기되었습니다.</p>
<h3>결론</h3>
<p>PEP 535는 Python의 체인 비교가 NumPy와 같은 라이브러리에서 요소별 배열 비교를 더 효과적으로 처리할 수 있도록 하는 중요한 의미론적 변화를 제안합니다. 현재는 <code>ValueError</code>를 발생시키는 <code>0 &#x3C; array &#x3C; 4</code>와 같은 표현식이, 이 PEP가 구현되면 <code>ComparisonResultArray</code>와 같은 특수 객체를 반환하여 개발자가 예상하는 대로 동작할 수 있게 됩니다. 이는 특히 과학 컴퓨팅 분야에서 Python의 유용성을 크게 향상시킬 잠재력을 가지고 있습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1318,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Deferred] PEP 535 - Rich comparison chaining"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 23:26:10+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
