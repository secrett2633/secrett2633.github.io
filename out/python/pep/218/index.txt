3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/218","c"]
0:["SAPzS3zi9tsG5MkeKvxIA",[[["",{"children":[["slug","python/pep/218","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"218\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/218","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T294a,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0218/">PEP 218 - Adding a Built-In Set Object Type</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 31-Jul-2000</p>
</blockquote>
<p>이 문서는 Python Enhancement Proposal (PEP) 218의 내용을 한국어 Python 개발자들이 이해하기 쉽도록 번역하고 정리한 것입니다. 이 PEP는 Python에 내장 Set 객체 타입을 추가하는 것에 대한 제안을 다룹니다.</p>
<hr>
<h1>PEP 218 – 내장 Set 객체 타입 추가</h1>
<h2>개요</h2>
<p>이 PEP는 표준 Python 라이브러리에 <code>Set</code> 모듈을 추가하고, 이 모듈이 널리 사용될 경우 Set을 Python의 내장(built-in) 타입으로 만들 것을 제안합니다. 이 문서는 Set의 필요성과 함께, Set을 대신하여 딕셔너리를 사용하는 일반적인 방식이 왜 부적절한지 설명합니다. 또한, 내장 Set이 어떻게 작동할 것인지, 그리고 초기 <code>Set</code> 모듈이 어떻게 동작할 것인지에 대한 설명을 제공합니다. 마지막 섹션에서는 Set 및 Set 요소의 가변성(mutability)과 <code>Set</code> 모듈이 구현할 해결책에 대해 논의합니다.</p>
<h2>도입 배경 (Rationale)</h2>
<p>Set은 기본적인 수학적 구조이며, 알고리즘 사양에서 매우 흔하게 사용됩니다. 하지만 구현에서는 '올바른' 구조임에도 불구하고 사용 빈도가 낮습니다. 프로그래머들은 리스트의 순서 정보가 무관하고 값(by-value)을 통한 조회가 빈번할 때에도 리스트를 대신 사용하는 경우가 많습니다. (대부분의 중간 규모 C 프로그램은 특정 항목이 존재하는지 여부를 확인하기 위해 <code>malloc</code>으로 할당된 벡터를 처음부터 끝까지 검색하는 경우가 많습니다.)</p>
<p>프로그래머들은 종종 Set을 "don't care" 값을 가진 딕셔너리로 구현할 수 있다고 배웁니다. 이러한 "Set"에 항목을 추가하려면 "don't care" 값을 할당하고, 멤버십은 <code>dict.has_key</code>를 사용하여 테스트하며, 항목은 <code>del</code>을 사용하여 삭제할 수 있습니다. 그러나 Set의 다른 주요 연산(합집합, 교집합, 차집합)은 키/값 쌍을 포함하는 딕셔너리의 경우 의미가 모호해지기 때문에 이러한 표현으로는 직접 지원되지 않습니다.</p>
<h2>제안 (Proposal)</h2>
<p>이 PEP의 장기적인 목표는 Python에 내장 <code>set</code> 타입을 추가하는 것입니다. 이 타입은 딕셔너리가 키/값 쌍의 순서 없는(unordered) 컬렉션인 것처럼, 고유한(unique) 값들의 순서 없는 컬렉션이 될 것입니다.</p>
<p>반복(iteration)과 컴프리헨션(comprehension)은 다음과 같이 직관적인 방식으로 구현될 것입니다:</p>
<pre><code class="language-python">for x in S:
    # S의 요소들을 임의의 순서로 순회합니다.
``````python
set(x**2 for x in S)
# S의 모든 요소의 제곱을 포함하는 Set을 생성합니다.
</code></pre>
<p>멤버십 테스트는 <code>in</code> 및 <code>not in</code>을 사용하며, 기본적인 Set 연산은 오버로드된(overloaded) 연산자들의 조합으로 구현됩니다:</p>
<ul>
<li><code>|</code> : 합집합 (union)</li>
<li><code>&#x26;</code> : 교집합 (intersection)</li>
<li><code>^</code> : 대칭 차집합 (symmetric difference)</li>
<li><code>-</code> : 비대칭 차집합 (asymmetric difference)</li>
<li><code>==</code> <code>!=</code> : 동등성 및 부등식 테스트</li>
<li><code>&#x3C;</code> <code>&#x3C;=</code> <code>>=</code> <code>></code> : 부분집합 및 상위집합 테스트</li>
</ul>
<p>또한, 다음과 같은 메서드들이 제공됩니다:</p>
<ul>
<li><code>S.add(x)</code>: Set에 "x"를 추가합니다.</li>
<li><code>S.update(s)</code>: 시퀀스 "s"의 모든 요소를 Set에 추가합니다.</li>
<li><code>S.remove(x)</code>: Set에서 "x"를 제거합니다. "x"가 없으면 <code>LookupError</code> 예외가 발생합니다.</li>
<li><code>S.discard(x)</code>: Set에 "x"가 있으면 제거하고, 없으면 아무것도 하지 않습니다.</li>
<li><code>S.pop()</code>: 임의의 요소를 제거하고 반환합니다. 요소가 없으면 <code>LookupError</code>를 발생시킵니다.</li>
<li><code>S.clear()</code>: 이 Set에서 모든 요소를 제거합니다.</li>
<li><code>S.copy()</code>: 새로운 Set을 생성합니다.</li>
<li><code>s.issuperset()</code>: 상위집합 관계를 확인합니다.</li>
<li><code>s.issubset()</code>: 부분집합 관계를 확인합니다.</li>
</ul>
<p>그리고 두 가지 새로운 내장(built-in) 변환 함수가 있습니다:</p>
<ul>
<li><code>set(x)</code>: 컬렉션 "x"의 요소들을 포함하는 Set을 생성합니다.</li>
<li><code>frozenset(x)</code>: 컬렉션 "x"의 요소들을 포함하는 변경 불가능한(immutable) Set을 생성합니다.</li>
</ul>
<p><strong>참고:</strong>
합집합과 교집합에는 비트와이즈 연산자 <code>|</code> 및 <code>&#x26;</code>를 사용할 것을 제안했습니다. 합집합에 <code>+</code>가 직관적일 수 있지만, 교집합에 <code>*</code>는 그렇지 않습니다 (질문받은 사람들 중 <code>*</code>의 동작을 정확히 추측한 사람은 거의 없었습니다). 요소를 Set에 추가하는 데 <code>add</code> 대신 <code>+</code>를 사용하는 것도 고려했지만, Guido van Rossum은 <code>+</code>가 다른 내장 타입에서는 대칭적이라는 점을 지적했습니다 (반면 <code>*</code>는 아닙니다). <code>add</code>를 사용함으로써 이 연산과 Set 합집합 간의 혼동을 피할 수 있습니다.</p>
<h2>Set 표기법 (Set Notation)</h2>
<p>이 PEP는 원래 <code>{1,2,3}</code>을 Set 표기법으로, <code>{}</code>를 빈 Set으로 제안했습니다. 그러나 Python 2.3의 <code>sets.py</code>를 통해 얻은 경험은 이러한 표기법이 필수적이지 않다는 것을 보여주었습니다. 또한, 딕셔너리의 즉각적인 인식을 저해할 위험도 있었습니다.</p>
<p>중괄호 표기법이 Set 컴프리헨션을 지원할 것으로 예상되었지만, Python 2.4는 제너레이터 표현식(generator expressions)을 제공하여 이 필요를 더 일반적인 방식으로 완전히 충족시켰습니다. (제너레이터 표현식에 대한 자세한 내용은 PEP 289를 참조하세요.)</p>
<p>결론적으로, Guido는 Set 구문(syntax)을 도입하지 않기로 결정했습니다. 그러나 이 문제는 Python 3000에서 다시 논의될 수 있습니다 (PEP 3000 참조).</p>
<h2>역사 (History)</h2>
<p>Set 사용 경험을 얻기 위해 Python 2.3에 순수 Python 모듈이 도입되었습니다. 이 구현을 기반으로 Python 2.4에 <code>set</code> 및 <code>frozenset</code> 타입이 도입되었습니다. 개선 사항은 다음과 같습니다:</p>
<ul>
<li><code>frozenset</code>을 위한 더 나은 해시(hash) 알고리즘</li>
<li>더 압축된 pickle 형식 (값이 항상 <code>True</code>인 키:값 쌍 딕셔너리 대신 요소 목록만 저장)</li>
<li><code>__reduce__</code> 함수를 사용하여 딥 카피(deep copying) 자동화</li>
<li><code>BaseSet</code> 개념 제거</li>
<li><code>union_update()</code> 메서드가 <code>update()</code>로 변경</li>
<li>가변(mutable) 및 변경 불가능(immutable) Set 간의 자동 변환 제거</li>
<li><code>_repr</code> 메서드 제거 (새로운 내장 함수 <code>sorted()</code>로 대체)</li>
</ul>
<p>Tim Peters는 클래스의 생성자가 단일 시퀀스를 인수로 받아 해당 시퀀스의 요소들로 Set을 채워야 한다고 생각했습니다. 그의 주장은 대부분의 경우 프로그래머들이 기존 시퀀스로부터 Set을 생성할 것이므로, 이 경우가 일반적이어야 한다는 것이었습니다. 그러나 이 경우 사용자는 알려진 값으로 Set을 초기화할 때 추가 괄호를 기억해야 했습니다:</p>
<pre><code class="language-python">>>> Set((1, 2, 3, 4)) # case 1
</code></pre>
<p>반면, 소수의 초보 Python 사용자들(모두 다른 언어에 매우 숙련된)의 피드백에 따르면, 사람들이 "괄호 없는(parenthesis-free)" 구문을 더 자연스럽게 느낄 것이라고 합니다:</p>
<pre><code class="language-python">>>> Set(1, 2, 3, 4) # case 2
</code></pre>
<p>궁극적으로, 초기화 함수가 단일 iterable 인수를 받는 첫 번째 전략이 채택되었습니다.</p>
<h2>가변성 (Mutability)</h2>
<p>이 제안에서 해결하기 가장 어려웠던 질문은 Set이 변경 가능한(mutable) 요소를 포함할 수 있어야 하는지 여부였습니다. 딕셔너리의 키는 빠르고 신뢰할 수 있는 조회를 지원하기 위해 변경 불가능해야 합니다. Set 요소가 변경 불가능하도록 요구하는 것은 쉬운 일이지만, 이는 Set의 Set(그래프 알고리즘 및 기타 응용 프로그램에서 널리 사용됨)을 불가능하게 만들 것입니다.</p>
<p>PEP 218의 초기 초안에는 단일 Set 타입만 있었지만, Python 2.3의 <code>sets.py</code> 구현에는 <code>Set</code>과 <code>ImmutableSet</code>의 두 가지 타입이 있었습니다. Python 2.4에서는 새로운 내장 타입의 이름이 <code>set</code>과 <code>frozenset</code>으로 지정되었으며, 이는 약간 덜 번거롭습니다.</p>
<p><code>sets</code> 모듈에는 두 개의 클래스가 구현되어 있습니다. <code>Set</code> 클래스의 인스턴스는 요소의 추가 또는 제거를 통해 수정될 수 있으며, <code>ImmutableSet</code> 클래스는 "고정(frozen)"되어 변경 불가능한 요소 컬렉션을 가집니다. 따라서 <code>ImmutableSet</code>은 딕셔너리 키 또는 Set 요소로 사용될 수 있지만, 업데이트할 수는 없습니다. 두 가지 타입의 Set 모두 요소가 변경 불가능하고 해시 가능한(hashable) 객체여야 합니다. 이러한 내용은 <code>set</code> 및 <code>frozenset</code> 내장 타입에도 동일하게 적용됩니다.</p>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인으로 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 218 - Adding a Built-In Set Object Type"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 16:36:13+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
