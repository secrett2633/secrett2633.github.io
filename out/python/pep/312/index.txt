3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-aecaf5ac7a84facf.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-e3ea38185bb36cd2.js"],""]
4:["slug","python/pep/312","c"]
0:["x02Anhkwgp1He7ftuyAhh",[[["",{"children":[["slug","python/pep/312","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"312\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/312","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/da5e1dc2b9a7c5bb.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T22e4,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0312/">PEP 312 - Simple Implicit Lambda</a></p>
<p><strong>상태:</strong> Deferred | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 11-Feb-2003</p>
</blockquote>
<h2>PEP 312 – 간단한 암묵적 람다 (Simple Implicit Lambda) 번역 및 요약</h2>
<h3>개요</h3>
<p>이 문서는 Python Enhancement Proposal (PEP) 312의 내용을 한국어 사용자가 이해하기 쉽도록 번역하고 정리한 것입니다. PEP 312는 특정 상황에서 인자가 없는 <code>lambda</code> 키워드를 선택적으로 생략할 수 있도록 제안하며, 이를 통해 코드의 가독성을 높이고 <code>lambda</code> 사용에 대한 심리적 장벽을 낮추고자 했습니다.</p>
<hr>
<h3>PEP 312 – Simple Implicit Lambda</h3>
<ul>
<li><strong>저자:</strong> Roman Suzi, Alex Martelli</li>
<li><strong>상태:</strong> Deferred (보류됨)</li>
<li><strong>유형:</strong> Standards Track</li>
<li><strong>생성일:</strong> 2003년 2월 11일</li>
<li><strong>Python 버전:</strong> 2.4 (대상)</li>
<li><strong>게시 이력:</strong> 2005년 6월 17일 <code>python-dev</code> 메일링 리스트에서 논의됨</li>
</ul>
<hr>
<h3>Abstract (개요)</h3>
<p>이 PEP는 문법적으로 모호하지 않은 특정 경우에 인자가 없는 <code>lambda</code> 키워드를 선택적으로 생략할 것을 제안합니다.</p>
<h3>Deferral (보류 이유)</h3>
<p>BDFL(Benevolent Dictator For Life, 즉 Guido van Rossum)은 단항 콜론(unary colon) 구문을 싫어했습니다. 이 PEP는 "더 파이썬스러운" 구문(예: 대안적인 단항 연산자)을 찾기 위해 처음부터 다시 시작할 필요가 있다고 지적되었습니다. 2005년 6월 17일 <code>python-dev</code> 메일링 리스트에서 이에 대한 논의가 있었습니다.</p>
<p>또한, 가능성이 없는 대안적인 제안들을 제거하는 것이 좋다는 의견이 있었습니다. 예제 섹션은 가독성 개선점을 잘 보여주지만, 더 많은 예제와 추상적인 더미 호출 대신 실제 사용 사례를 포함하면 더 설득력이 있을 것이라는 의견도 있었습니다.</p>
<h3>Motivation (동기)</h3>
<p><code>lambda</code>는 콜백 함수나 (가짜) 지연 평가(lazy evaluation) 방식 등 익명 함수를 정의하는 데 유용합니다. 그러나 종종 <code>lambda</code> 키워드 자체가 코드를 복잡하게 보이게 한다는 이유로, 적절한 상황에서도 <code>lambda</code>가 사용되지 않는 경우가 있습니다. 일부 특별한 경우에 <code>lambda</code> 키워드를 생략하는 것은 문법에 작고 하위 호환성을 유지하는 변경을 통해 가능하며, 이러한 "람다 공포증(lambdaphobia)"에 대한 저렴한 해결책을 제공할 수 있습니다.</p>
<h3>Rationale (제안 배경)</h3>
<p>때로는 <code>lambda</code>라는 용어 뒤에 숨겨진 이론 때문에 사람들이 <code>lambda</code>를 사용하기를 꺼려 합니다. 이 제안은 <code>lambda</code> 키워드를 생략함으로써 인자가 없는 <code>lambda</code>를 더 쉽게 도입할 수 있도록 합니다. 구현은 문법을 간단히 변경하여 <code>lambda</code> 키워드가 몇 가지 잘 알려진 경우에 암묵적으로 사용될 수 있도록 하는 방식으로 이루어질 수 있습니다. 특히, 괄호로 감싸는 것은 nullary <code>lambda</code>를 어디에서나 지정할 수 있도록 합니다.</p>
<h3>Syntax (구문)</h3>
<p>인자가 없는 <code>lambda</code> 키워드는 다음 경우에 생략될 수 있습니다.</p>
<ul>
<li>이름 있는 매개변수 할당 또는 기본값 할당에서 <code>=</code> 직후</li>
<li>모든 표현식에서 <code>(</code> 직후</li>
<li>함수 인자 목록에서 <code>,</code> 직후</li>
<li>딕셔너리 리터럴에서 <code>:</code> 직후</li>
<li>(미구현) 할당문에서</li>
</ul>
<p>새로운 구문은 콜론(<code>:</code>)과 뒤따르는 표현식으로 구성됩니다. 예를 들어, <code>:A</code>는 <code>lambda: A</code>와 동일합니다.</p>
<h3>Examples of Use (사용 예시)</h3>
<h4>Inline if</h4>
<pre><code class="language-python">def ifelse(cond, true_part, false_part):
    if cond:
        return true_part()
    else:
        return false_part()

# 기존 구문:
# print(ifelse(a &#x3C; b, lambda: A, lambda: B))

# 새로운 구문:
print(ifelse(a &#x3C; b, :A, :B)) #

# A와 B 부분은 다음과 같이 광범위한 처리가 필요할 수 있습니다:
print(ifelse(a &#x3C; b, :ext_proc1(A), :ext_proc2(B))) #
</code></pre>
<p>여기서 <code>:A</code>와 <code>:B</code>는 각각 <code>lambda: A</code>와 <code>lambda: B</code>를 의미하며, 조건에 따라 <code>A</code> 또는 <code>B</code>가 지연 평가됩니다.</p>
<h4>Locking (락킹)</h4>
<pre><code class="language-python">def with_lock(alock, acallable):
    alock.acquire()
    try:
        acallable()
    finally:
        alock.release()

with_lock(mylock, :x(y(), 23, z(), 'foo')) #
</code></pre>
<p>여기서 <code>:x(y(), 23, z(), 'foo')</code>는 <code>lambda: x(y(), 23, z(), 'foo')</code>와 동일하게 작동하여, <code>mylock</code>이 획득된 후에만 해당 함수 호출이 실행되도록 합니다.</p>
<h3>Implementation (구현)</h3>
<p>구현을 위해서는 Python 소스의 <code>Grammar/Grammar</code> 파일을 수정하고, 문법적 및 실용적 변경을 위해 <code>Modules/parsermodule.c</code> 파일을 조정해야 합니다.</p>
<p>암묵적 <code>lambda</code>를 허용하기 위한 <code>Grammar</code> 파일의 변경 사항은 다음과 같습니다.</p>
<ul>
<li><code>imptest</code>: <code>test</code> 또는 <code>implambdef</code></li>
<li><code>implambdef</code>: <code>:</code> <code>test</code></li>
</ul>
<p>세 개의 새로운 비-터미널(non-terminal)이 필요합니다: 암묵적 <code>lambda</code>가 발생할 수 있는 <code>imptest</code>, 암묵적 <code>lambda</code> 정의 자체를 위한 <code>implambdef</code>, 그리고 <code>imptest</code>들이 발생할 수 있는 <code>imptestlist</code>.</p>
<p>이 구현은 불완전하며, <code>Parser</code> 모듈의 일부 파일 업데이트가 필요하고, <code>Syntax</code> 섹션에서 언급된 추가적인 위치들이 구현되지 않았습니다.</p>
<h3>Discussion (논의)</h3>
<p>이 기능은 <code>lambda</code> 키워드의 부재를 제외하고는 시각적으로 크게 드러나지 않는 특징입니다. 이 기능은 nullary <code>lambda</code>를 문법적으로 더 매력적으로 만들고, 일부 간단한 경우에 표현식의 지연 평가를 제공하는 것을 목표로 합니다. 이 제안은 <code>lambda</code>에 인자가 필요한 고급 사례를 목표로 하지 않습니다.</p>
<p><strong>대안 제안:</strong>
인자가 사용되지 않는 암묵적 <code>lambda</code>에 대한 대안적인 제안도 있었습니다. 이 경우, 그러한 <code>lambda</code>에 의해 정의된 함수는 어떤 매개변수도 받아들일 수 있으며, <code>lambda *args: expr</code>와 동일하게 작동합니다. 이 형태는 더 강력할 수 있으며, 표준 라이브러리에서 실제로 그러한 <code>lambda</code>가 사용되는 경우가 있음을 보여주었습니다.</p>
<p><strong>추가 확장 가능성:</strong>
암묵적 <code>lambda</code>에 의해 정의된 함수에 매개변수 목록을 전달하는 방법을 제공하는 또 다른 확장도 가능합니다. 그러나 이러한 매개변수들은 접근을 위해 특별한 이름이 필요하며 언어에 포함될 가능성은 낮다고 보았습니다. 가능한 지역 이름으로는 <code>_</code>, <code>__args__</code>, <code>__</code> 등이 제안되었으나, 이러한 형태는 그다지 보기 좋지 않으며, PEP 작성자의 의견으로는 그러한 경우에 <code>lambda</code> 키워드 제거를 정당화하지 못한다고 보았습니다.</p>
<h3>Credits (기여자)</h3>
<p><code>lambda</code>를 생략하는 아이디어는 2003년 2월 8일 comp.lang.python에서 Paul Rubin이 "For review: PEP 308 - If-then-else expression" 스레드를 논의하던 중 처음 제기했습니다.</p>
<h3>References (참고 자료)</h3>
<ul>
<li>Guido van Rossum, Recommend accepting PEP 312 – Simple Implicit Lambda, <code>python-dev</code> 메일링 리스트.</li>
<li>Guido van Rossum, For review: PEP 308 - If-then-else expression, <code>python-dev</code> 메일링 리스트.</li>
</ul>
<h3>Copyright (저작권)</h3>
<p>이 문서는 퍼블릭 도메인(public domain)에 있습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Deferred] PEP 312 - Simple Implicit Lambda"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 18:12:24+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
