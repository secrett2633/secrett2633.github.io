3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/677","c"]
0:["qNOrJYeuqip9qCFPpDVpu",[[["",{"children":[["slug","python/pep/677","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"677\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/677","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T336d,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0677/">PEP 677 - Callable Type Syntax</a></p>
<p><strong>상태:</strong> Rejected | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 13-Dec-2021</p>
</blockquote>
<h2>요약 (Abstract)</h2>
<p>이 PEP는 <code>typing.Callable</code>과 동일한 기능을 지원하면서도, 타입이 지정된 함수 시그니처에서 영감을 받은 화살표 문법으로 <code>Callable</code> 타입을 표현하는 간결하고 친숙한 문법을 도입합니다. 이를 통해 <code>Callable[[int, str], bool]</code>과 같은 타입은 <code>(int, str) -> bool</code>로 작성할 수 있습니다.</p>
<p>제안된 문법은 <code>typing.Callable</code> 및 <code>typing.Concatenate</code>가 제공하는 모든 기능을 지원하며, 기존 문법을 대체할 수 있도록 의도되었습니다.</p>
<h2>동기 (Motivation)</h2>
<p>코드의 안정성과 분석 용이성을 높이는 한 가지 방법은 함수와 클래스에 적절한 타입을 지정하는 것입니다. Python은 PEP 484에 정의된 타입 어노테이션(type annotation)을 통해 버그를 찾고 탭 완성, 정적 분석 도구, 코드 리뷰와 같은 편집기 도구를 돕는 타입 힌트를 제공합니다.</p>
<p>기존 <code>Callable</code> 사용에는 몇 가지 문제점이 있습니다.</p>
<ul>
<li><strong>장황함:</strong> 특히 복잡한 함수 시그니처의 경우 매우 장황합니다.</li>
<li><strong>중첩된 괄호:</strong> 다른 제네릭(generic) 타입과 달리 두 단계의 중첩된 대괄호(bracket)를 사용하며, 타입 파라미터(parameter) 자체가 제네릭 타입인 경우 읽기 어렵습니다.</li>
<li><strong>시각적 불일치:</strong> 함수 시그니처를 작성하는 방식과 시각적으로 유사하지 않습니다.</li>
<li><strong>명시적 임포트:</strong> <code>list</code>나 <code>dict</code>와 같은 다른 일반적인 타입과 달리 명시적인 임포트(<code>from typing import Callable</code>)가 필요합니다.</li>
</ul>
<p>이러한 문제점들로 인해 개발자들은 <code>Callable</code> 타입을 완전히 작성하지 못하는 경우가 많습니다. 예를 들어 <code>Callable[..., Any]</code>와 같이 작성하여 파라미터 타입이나 반환 타입을 제대로 검사하지 못하게 되어 정적 타이핑의 이점을 상쇄할 수 있습니다.</p>
<p>이 제안된 문법을 사용하면 <code>(int) -> list[int]</code>와 같이 더 간결하고, 함수 헤더의 반환 타입을 나타내는 화살표와 유사하며, 중첩된 괄호를 피하고, 임포트가 필요 없는 형태로 작성할 수 있습니다.</p>
<h2>근거 (Rationale)</h2>
<p><code>Callable</code> 타입은 널리 사용됩니다. 2021년 10월 기준으로 <code>Optional</code>, <code>Tuple</code>, <code>Union</code>, <code>List</code> 다음으로 typeshed에서 다섯 번째로 흔한 복합 타입이었습니다.</p>
<p>다른 타입들은 PEP 604나 PEP 585를 통해 문법이 개선되고 임포트 필요성이 제거되었습니다.</p>
<ul>
<li><code>typing.Optional[int]</code>는 <code>int | None</code>으로 작성됩니다.</li>
<li><code>typing.Union[int, str]</code>은 <code>int | str</code>로 작성됩니다.</li>
<li><code>typing.List[int]</code>는 <code>list[int]</code>로 작성됩니다.</li>
<li><code>typing.Tuple[int, str]</code>은 <code>tuple[int, str]</code>로 작성됩니다.</li>
</ul>
<p><code>typing.Callable</code> 타입은 이들 타입만큼 자주 사용되지만, 읽고 쓰기가 더 복잡하며 여전히 임포트와 괄호 기반 문법이 필요합니다.</p>
<p>이 제안은 새로운 기능을 추가하지 않고 <code>typing.Callable</code>의 모든 기존 의미론을 지원하도록 선택되었습니다. 기존의 타입 지정된(typed) 및 타입 지정되지 않은(untyped) 오픈 소스 코드에서 각 기능이 얼마나 자주 사용되는지 분석한 결과, 대다수의 사용 사례가 포함된다고 판단했습니다.</p>
<p>명명된(named), 선택적(optional), 가변(variadic) 인자에 대한 지원 추가도 고려되었지만, 분석 결과 이러한 기능은 거의 사용되지 않으므로 포함하지 않기로 결정했습니다. 이러한 기능이 정말 필요한 경우에는 콜백 프로토콜(callback protocol)을 사용하여 타입을 지정할 수 있습니다.</p>
<h3>Callable 타입에 대한 화살표 문법 (An Arrow Syntax for Callable Types)</h3>
<p>이 제안은 Python의 함수 헤더와 유사한 <code>typing.Callable</code>을 위한 간결하고 사용하기 쉬운 문법을 제안합니다. 이는 TypeScript, Kotlin, Scala와 같은 여러 인기 있는 언어에서 사용되는 문법과 매우 유사합니다.</p>
<p>목표는 다음과 같습니다.</p>
<ul>
<li>이 문법을 사용하는 <code>Callable</code> 타입이 배우고 사용하기 쉬울 것, 특히 다른 언어 경험이 있는 개발자에게.</li>
<li>라이브러리 작성자가 <code>Callable</code>에 대해 더 표현력이 풍부한 타입을 사용할 가능성이 높아져, 타입 체커(type checker)가 코드를 더 잘 이해하고 버그를 찾을 수 있도록 돕는 것.</li>
</ul>
<h3>ParamSpec을 위한 간결한 문법 (Compact Syntax for ParamSpec)</h3>
<p>라이브러리 작성자가 <code>Callable</code>에 대한 타입 정보를 생략하는 특히 흔한 경우는 데코레이터(decorator)를 정의할 때입니다. <code>ParamSpec</code>을 사용하면 데코레이터의 시그니처를 정확하게 타입 지정할 수 있습니다.</p>
<p>PEP 612를 통해 <code>ParamSpec</code>을 사용하여 데코레이터를 올바르게 타입 지정할 수 있지만, 제안된 문법을 사용하면 더욱 간결하고 시각적으로 명확하게 표현할 수 있습니다. 예를 들어, <code>f: Callable[P, R]</code>는 <code>f: (**P) -> R</code>로, <code>Callable[Concatenate[bool, P], R]</code>는 <code>(bool, **P) -> R</code>로 표현됩니다.</p>
<h3>다른 언어와의 비교 (Comparing to Other Languages)</h3>
<p>많은 인기 있는 프로그래밍 언어들이 제안된 것과 유사한 화살표 문법을 사용합니다.</p>
<ul>
<li><strong>TypeScript:</strong> <code>(x: int, y: str) => bool</code></li>
<li><strong>Kotlin:</strong> <code>(Int, String) -> Bool</code></li>
<li><strong>Scala:</strong> <code>(Int, String) => Bool</code></li>
<li><strong>ML 계열 언어 (F#, OCaml, Haskell 등):</strong> <code>Integer -> String -> Bool</code> (자동 커링(currying)으로 인해 여러 화살표 사용)</li>
</ul>
<p>Python은 함수 정의에서 <code>:</code>를 본문 시작에 사용하고 <code>-></code>를 반환 타입 어노테이션에 사용합니다. 이로 인해 <code>Callable</code> 타입을 포함하는 함수 정의를 읽을 때 혼란의 가능성이 있습니다. 제안된 PEP에서는 이러한 우려에 대한 피드백을 구했으며, <code>=></code>를 사용하여 구별하는 아이디어도 언급되었습니다.</p>
<h2>명세 (Specification)</h2>
<h3>타이핑 동작 (Typing Behavior)</h3>
<p>타입 체커는 새로운 문법을 <code>typing.Callable</code>과 정확히 동일한 의미론으로 처리해야 합니다.</p>
<p>예를 들어, 다음 쌍은 타입 체커에서 동일하게 처리되어야 합니다.</p>
<ul>
<li><code>f0: () -> bool</code>과 <code>f0: Callable[[], bool]</code></li>
<li><code>f1: (int, str) -> bool</code>과 <code>f1: Callable[[int, str], bool]</code></li>
<li><code>f3: async (str) -> str</code>과 <code>f3: Callable[[str], Awaitable[str]]</code></li>
<li><code>f4: (**P) -> bool</code>과 <code>f4: Callable[P, bool]</code></li>
<li><code>f5: (int, **P) -> bool</code>과 <code>f5: Callable[Concatenate[int, P], bool]</code></li>
<li><code>f6: (*Ts) -> bool</code>과 <code>f6: Callable[[*Ts], bool]</code> (PEP 646 지원 시)</li>
</ul>
<h3>문법 및 AST (Grammar and AST)</h3>
<p>제안된 새로운 문법은 Python의 문법(<code>Parser/Python.asdl</code>)에 AST(Abstract Syntax Tree) 변경을 통해 설명됩니다.</p>
<p>몇 가지 중요한 문법적 함의가 있습니다.</p>
<ul>
<li><code>-></code> 연산자는 다른 연산자보다 결합력이 약합니다.</li>
<li><code>-></code> 연산자는 오른쪽으로 결합합니다.</li>
<li><code>async</code> 키워드도 <code>Callable</code> 타입에서 사용할 수 있습니다.</li>
<li>함수 시그니처의 전례를 따라 빈 인자 목록에 쉼표를 넣는 것은 불법입니다.</li>
<li><code>...</code>를 인자 타입으로 사용하는 것은 의미가 없으며, 혼란을 야기할 수 있으므로 문법에서 허용하지 않습니다.</li>
<li><code>**P</code>의 사용은 <code>kwargs</code>에 타입을 지정하기 위한 <code>**&#x3C;some_type></code>와 같은 미래 제안을 배제합니다.</li>
<li><code>-></code> 기반의 람다 문법 (<code>(x, y) -> x + y</code>)과는 호환되지 않습니다. 람다에는 <code>=></code>를 사용하는 것이 더 적합하다고 제안합니다.</li>
</ul>
<h2>런타임 동작 (Runtime Behavior)</h2>
<p>새로운 AST 노드는 런타임 타입으로 평가되어야 하며, 다음 두 가지 목표를 가집니다.</p>
<ul>
<li>명명된 인자(named argument)나 가변 인자(variadic argument)와 같은 새로운 기능을 포함하도록 타입을 확장하는 데 호환될 수 있을 만큼 서술적이고 강력한 구조화된 API를 노출해야 합니다.</li>
<li><code>typing.Callable</code>과 하위 호환되는 API도 노출해야 합니다.</li>
</ul>
<p><code>types</code> 모듈에 새로운 빌트인 타입을 노출하여 새로운 AST 노드가 평가되도록 할 계획이었습니다.</p>
<h2>거부된 대안 (Rejected Alternatives)</h2>
<p>이 제안은 <code>typing.Callable</code>보다 더 표현력이 풍부한 많은 대안들을 고려했습니다. 예를 들어, 명명된, 선택적, 가변 인자를 포함하는 시그니처를 설명하는 지원을 추가하는 것 등이 있었습니다.</p>
<p>그러나 다음과 같은 이유로 현재의 단순한 제안을 선택했습니다.</p>
<ul>
<li>대다수의 콜백은 기존 <code>typing.Callable</code> 의미론으로 올바르게 설명될 수 있습니다. (위치 인자, <code>ParamSpec</code>, <code>Concatenate</code>, <code>TypeVarTuple</code> 등)</li>
<li>명명된, 선택적, 가변 인자를 지원하는 확장된 문법은 구현이 더 어려웠으며, 사용 통계에 따르면 추가된 기능의 3% 미만이 유용했습니다. 이 기능들은 콜백 프로토콜을 사용하여 이미 표현 가능했습니다.</li>
<li>함수 시그니처와 더 유사한 문법은 대다수 사용 사례에서 더 장황해질 수 있고, <code>ParamSpec</code>의 스코핑 규칙과 충돌할 수 있었습니다.</li>
<li>함수를 타입으로 사용하는 아이디어, 하이브리드 키워드-화살표 문법, 괄호 없는 문법, 외부 괄호 요구, <code>-></code>의 결합력을 <code>|</code>보다 강하게 만드는 것, 타입-문자열(type-strings) 도입, 기존 <code>Callable</code> 타입의 사용성 개선 등의 대안들도 고려되었으나, 각각의 단점으로 인해 거부되었습니다.</li>
</ul>
<h2>후방 호환성 (Backward Compatibility)</h2>
<p>이 PEP는 <code>typing.Callable</code>에 대한 주요 문법 개선을 제안하지만, 정적 의미론은 동일합니다. 따라서 후방 호환성을 위해서는 새로운 문법으로 지정된 타입이 <code>typing.Callable</code> 및 <code>typing.Concatenate</code> 값과 동일하게 동작하도록 보장하는 것뿐입니다.</p>
<h2>참고 구현 (Reference Implementation)</h2>
<p>제안된 문법이 원하는 동작을 갖는지 검증하는 AST 및 문법의 작동하는 구현이 있었습니다. 런타임 동작은 아직 구현되지 않았습니다.</p>
<h2>미해결 문제 (Open Issues)</h2>
<ul>
<li><strong>런타임 API 세부 사항:</strong> 런타임 API에 대한 완전한 동작 명세를 제공하려고 노력했지만, 전체 구현을 구축하기 전까지는 정의해야 할 더 많은 세부 사항이 있을 수 있습니다.</li>
<li><strong><code>SyntaxError</code> 메시지 최적화:</strong> 현재 참조 구현은 완벽하게 작동하는 파서(parser)를 가지고 있지만, 오류 메시지가 원하는 만큼 유용하지 않은 경우가 있습니다. 예를 들어 <code>(int, ...) -> bool</code>은 불법이지만 <code>(int, ...)</code>는 유효한 튜플이기 때문에, 실제 원인이 <code>...</code>를 인자 타입으로 사용한 것임에도 불구하고 <code>-></code>를 문제로 지적하는 구문 오류가 발생할 수 있습니다.</li>
</ul>
<hr>
<p><strong>PEP 677은 최종적으로 <code>Rejected</code>되었습니다.</strong></p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Rejected] PEP 677 - Callable Type Syntax"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 10:09:13+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
