3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/402","c"]
0:["qNOrJYeuqip9qCFPpDVpu",[[["",{"children":[["slug","python/pep/402","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"402\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/402","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T9037,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0402/">PEP 402 - Simplified Package Layout and Partitioning</a></p>
<p><strong>상태:</strong> Rejected | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 12-Jul-2011</p>
</blockquote>
<h1>PEP 402 – 패키지 레이아웃 및 분할 간소화</h1>
<p><strong>작성자:</strong> Phillip J. Eby
<strong>상태:</strong> Rejected (거부됨)
<strong>유형:</strong> Standards Track
<strong>주제:</strong> Packaging
<strong>작성일:</strong> 2011년 7월 12일
<strong>Python 버전:</strong> 3.3
<strong>대체하는 PEP:</strong> 382</p>
<h2>거부 고지 (Rejection Notice)</h2>
<p>이 PEP는 US PyCon 2012 스프린트에서 PEP 382와 함께 긴 논의 끝에 거부되었습니다. 하지만 PEP 402의 정신을 이어받는 새로운 PEP가 작성될 예정이었습니다. Martin von Löwis가 요약한 내용을 참고하십시오.</p>
<h2>개요 (Abstract)</h2>
<p>이 PEP는 Python의 패키지 임포트(import) 메커니즘을 다음과 같이 개선할 것을 제안합니다:</p>
<ul>
<li>다른 언어 사용자들에게 덜 혼란을 주도록 합니다.</li>
<li>모듈을 패키지로 전환하는 것을 더 쉽게 만듭니다.</li>
<li>패키지를 독립적으로 설치 가능한 컴포넌트(PEP 382에서 설명하는 "네임스페이스 패키지"와 유사)로 분할할 수 있도록 지원합니다.</li>
</ul>
<p>제안된 개선 사항은 현재 임포트 가능한 디렉토리 레이아웃의 의미를 변경하지 않지만, (현재는 임포트 불가능한) 간소화된 디렉토리 레이아웃을 패키지가 사용할 수 있도록 합니다.</p>
<p>이 변경 사항은 기존 모듈이나 패키지를 임포트하는 데 성능 오버헤드를 추가하지 않으며, 새로운 디렉토리 레이아웃의 성능은 이전의 "네임스페이스 패키지" 솔루션(<code>pkgutil.extend_path()</code> 등)과 거의 동일할 것입니다.</p>
<h2>문제점 (The Problem)</h2>
<p>Jim Fulton은 Python 2.3 출시 직전에 "대부분의 패키지는 모듈과 같습니다. 그 내용물은 서로 의존성이 높아 분리할 수 없습니다. [하지만] 일부 패키지는 별도의 네임스페이스를 제공하기 위해 존재합니다. ... 이러한 [네임스페이스 패키지]의 서브 패키지 또는 서브 모듈은 독립적으로 배포할 수 있어야 합니다."라고 언급했습니다.</p>
<p>새로운 사용자들이 다른 언어에서 Python으로 넘어올 때, Python의 패키지 임포트 의미론에 종종 혼란을 겪습니다. 예를 들어, Google에서 Guido는 패키지에 <code>__init__</code> 모듈이 포함되어야 한다는 요구사항이 "잘못된 기능"이며 삭제되어야 한다는 "성난 군중"으로부터 불만을 들었습니다.</p>
<p>또한, Java나 Perl과 같은 언어 사용자들은 Python의 임포트 경로 검색 방식의 차이로 인해 혼란을 겪기도 합니다. 대부분의 다른 언어에서는 Python의 <code>sys.path</code>와 유사한 경로 메커니즘을 가지고 있는데, 패키지는 단순히 모듈이나 클래스를 포함하는 네임스페이스이며, 따라서 언어의 경로에 있는 여러 디렉토리에 걸쳐 분산될 수 있습니다. 예를 들어, Perl에서는 <code>Foo::Bar</code> 모듈이 모듈 포함 경로를 따라 모든 <code>Foo/</code> 서브디렉토리에서 검색되며, 처음 발견된 서브디렉토리에서만 검색되지 않습니다.</p>
<p>더 나쁜 것은, 이것이 단지 새로운 사용자들만의 문제가 아니라는 것입니다. 이 문제 때문에 누구도 패키지를 쉽게 독립적으로 설치 가능한 컴포넌트로 분할할 수 없습니다. Perl 용어로 말하자면, CPAN의 모든 <code>Net::</code> 모듈이 하나의 tarball에 묶여 배포되어야 하는 것과 같을 것입니다.</p>
<p>이러한 후자의 제한 사항에 대한 다양한 해결책들이 "네임스페이스 패키지"라는 용어로 유통되었습니다. Python 표준 라이브러리는 Python 2.3부터 <code>pkgutil.extend_path()</code> 함수를 통해 하나의 해결책을 제공했으며, <code>setuptools</code> 패키지는 <code>pkg_resources.declare_namespace()</code>를 통해 또 다른 해결책을 제공합니다.</p>
<p>그러나 이러한 해결책 자체는 파일 시스템에 패키지를 배치하는 Python 방식의 세 번째 문제에 직면합니다. 패키지는 <code>__init__</code> 모듈을 포함해야 하므로, 해당 패키지에 대한 모듈을 배포하려는 모든 시도는 해당 모듈이 임포트 가능하려면 반드시 <code>__init__</code> 모듈을 포함해야 합니다.</p>
<p>하지만 패키지에 대한 각 모듈 배포판이 이 (중복된) <code>__init__</code> 모듈을 포함해야 한다는 사실은, 이러한 모듈 배포판을 패키징하는 OS 벤더들이 여러 모듈 배포판이 파일 시스템의 동일한 위치에 <code>__init__</code> 모듈을 설치함으로써 발생하는 충돌을 어떻게든 처리해야 함을 의미합니다.</p>
<p>이로 인해 PEP 382("네임스페이스 패키지")가 제안되었습니다. 이는 모듈 배포판마다 고유한 파일 이름을 사용하여 디렉토리가 임포트 가능하다는 것을 Python의 임포트 메커니즘에 알리는 방법이었습니다.</p>
<p>하지만 이 접근 방식에는 여러 단점이 있었습니다. 모든 임포트 작업의 성능에 영향을 미치고, 패키지를 지정하는 과정이 훨씬 더 복잡해졌습니다. 해결책을 설명하기 위해 새로운 용어를 발명해야 했습니다.</p>
<p>Import-SIG에서 용어 논의가 계속되면서, "네임스페이스 패키지"와 관련된 개념을 설명하기가 그토록 어려운 주된 이유가 다른 언어에 비해 Python의 현재 패키지 처리 방식이 다소 "부족"하기 때문이라는 것이 곧 명백해졌습니다. 즉, 패키지 시스템을 가진 다른 인기 있는 언어에서는 모든 패키지가 일반적으로 원하는 방식으로 작동하기 때문에 "네임스페이스 패키지"를 설명하는 특별한 용어가 필요하지 않습니다.</p>
<p>Python처럼 특별한 마커 모듈을 가진 고립된 단일 디렉토리가 아니라, 다른 언어의 패키지는 일반적으로 전체 임포트 또는 포함 경로를 가로지르는 적절한 이름의 디렉토리들의 합집합(union)입니다. 예를 들어, Perl에서는 모듈 <code>Foo</code>는 항상 <code>Foo.pm</code> 파일에서 발견되며, 모듈 <code>Foo::Bar</code>는 항상 <code>Foo/Bar.pm</code> 파일에서 발견됩니다. (즉, 특정 모듈의 위치를 찾는 한 가지 명확한 방법이 있습니다.)</p>
<p>이는 Perl이 모듈을 패키지와 다르다고 간주하기 때문입니다. 패키지는 순전히 다른 모듈이 위치할 수 있는 네임스페이스이며, 우연히 모듈의 이름이기도 합니다.</p>
<p>하지만 현재 버전의 Python에서는 모듈과 패키지가 더 밀접하게 연결되어 있습니다. <code>Foo</code>는 항상 모듈입니다. (<code>Foo.py</code>에서 발견되든 <code>Foo/__init__.py</code>에서 발견되든) 그리고 그 <code>__init__.py</code>가 발견된 정확히 동일한 디렉토리에 서브 모듈(있는 경우)이 위치해야 합니다.</p>
<p>긍정적인 측면에서는, 이러한 설계 선택은 패키지가 상당히 자급자족(self-contained)하며, 패키지의 루트 디렉토리에 대한 작업을 수행하기만 하면 단일 단위로 설치, 복사 등이 가능하다는 것을 의미합니다.</p>
<p>그러나 부정적인 측면에서는, 초보자에게 직관적이지 않으며, 모듈을 패키지로 전환하려면 더 복잡한 단계를 거쳐야 합니다. <code>Foo</code>가 <code>Foo.py</code>로 시작했다면, <code>Foo/__init__.py</code>로 이동하고 이름을 변경해야 합니다.</p>
<p>반대로, <code>Foo.Bar</code> 모듈을 처음부터 만들려고 하지만, <code>Foo</code> 자체에 넣을 특정 모듈 내용이 없다면, <code>Foo.Bar</code>를 임포트할 수 있도록 비어 있고 겉보기에 무관해 보이는 <code>Foo/__init__.py</code> 파일을 생성해야 합니다.</p>
<p>(그리고 이러한 문제들은 언어 초보자들만을 혼란스럽게 하는 것이 아닙니다. 많은 숙련된 개발자들도 이것에 짜증을 냅니다.)</p>
<p>그래서 Import-SIG에서 논의를 거쳐, 이 PEP는 PEP 382의 대안으로, "네임스페이스 패키지" 사용 사례뿐만 아니라 위의 모든 문제들을 해결하기 위한 시도로 만들어졌습니다.</p>
<p>그리고 즐거운 부수 효과로, 이 PEP에서 제안된 해결책은 일반 모듈이나 자급자족(즉, <code>__init__</code> 기반) 패키지의 임포트 성능에 영향을 미치지 않습니다.</p>
<h2>해결책 (The Solution)</h2>
<p>과거에는 패키지 디렉토리 레이아웃에 대한 보다 직관적인 접근 방식을 허용하기 위한 다양한 제안이 있었습니다. 그러나 대부분은 명백한 하위 호환성 문제로 인해 실패했습니다.</p>
<p>즉, <code>__init__</code> 모듈에 대한 요구사항이 단순히 삭제되면, 예를 들어 <code>sys.path</code>에 <code>string</code>이라는 디렉토리가 표준 라이브러리 <code>string</code> 모듈의 임포트를 차단할 가능성이 열릴 수 있었습니다.</p>
<p>그러나 역설적으로, 이 접근 방식의 실패는 <code>__init__</code> 요구사항의 제거에서 비롯된 것이 아닙니다! 오히려, 실패는 근본적인 접근 방식이 패키지를 두 가지가 아닌 단지 '하나'의 것으로 당연하게 여기기 때문에 발생합니다.</p>
<p>사실, 패키지는 두 개의 분리되어 있지만 관련된 엔티티로 구성됩니다:</p>
<ul>
<li>모듈 (자체적인, 선택적 내용을 가짐)</li>
<li>다른 모듈이나 패키지를 찾을 수 있는 네임스페이스</li>
</ul>
<p>그러나 현재 버전의 Python에서는 모듈 부분(<code>__init__</code>에서 발견됨)과 서브 모듈 임포트를 위한 네임스페이스(<code>__path__</code> 속성으로 표현됨)가 패키지가 처음 임포트될 때 동시에 초기화됩니다.</p>
<p>그리고 이 두 가지를 초기화하는 유일한 방법이라고 가정하면, 기존 디렉토리 레이아웃과의 하위 호환성을 유지하면서 <code>__init__</code> 모듈의 필요성을 없앨 방법이 없습니다.</p>
<p>결국, <code>sys.path</code>에서 원하는 이름과 일치하는 디렉토리를 발견하는 즉시, 패키지를 "찾았다"는 의미이며, 검색을 중단해야 합니다. 그렇죠? 음, 꼭 그렇지는 않습니다.</p>
<h3>사고 실험 (A Thought Experiment)</h3>
<p>잠시 타임머신을 타고 1990년대 초반, Python 패키지와 <code>__init__.py</code>가 발명되기 직전으로 돌아가 봅시다. 하지만 우리는 Perl과 유사한 패키지 임포트에 익숙하며 Python에서 유사한 시스템을 구현하고 싶다고 상상해 봅시다.</p>
<p>우리는 여전히 Python의 모듈 임포트에 기반을 두고 있으므로, <code>Foo.py</code>를 <code>Foo</code> 패키지의 부모 <code>Foo</code> 모듈로 가질 수 있다고 확실히 생각할 수 있습니다. 하지만 서브 모듈 및 서브 패키지 임포트를 어떻게 구현할까요?</p>
<p>글쎄요, 아직 <code>__path__</code> 속성 개념이 없었다면, 아마도 <code>sys.path</code>를 검색해서 <code>Foo/Bar.py</code>를 찾았을 것입니다. 하지만 그것은 누군가가 실제로 <code>Foo.Bar</code>를 임포트하려고 할 때만 그렇게 했을 것입니다. <code>Foo</code>를 임포트할 때가 아닙니다.</p>
<p>그리고 이것은 2011년 현재 우리가 <code>__init__</code> 요구사항을 삭제함으로써 발생하는 하위 호환성 문제를 해결할 수 있게 해줍니다. 어떻게 그럴 수 있을까요?</p>
<p>음, 우리가 <code>Foo</code>를 임포트할 때, <code>sys.path</code>에서 <code>Foo/</code> 디렉토리를 찾지도 않습니다. 왜냐하면 아직 신경 쓸 필요가 없기 때문입니다. 우리가 신경 쓰는 유일한 시점은 누군가가 실제로 <code>Foo</code>의 서브 모듈이나 서브 패키지를 임포트하려고 할 때입니다.</p>
<p>이는 만약 <code>Foo</code>가 표준 라이브러리 모듈이고 (예를 들어), <code>sys.path</code>에 <code>Foo</code> 디렉토리가 있다고 해도 (<code>__init__.py</code> 없이), 아무것도 깨지지 않는다는 의미입니다. <code>Foo</code> 모듈은 여전히 모듈일 뿐이며, 여전히 정상적으로 임포트됩니다.</p>
<h3>자급자족 패키지(Self-Contained) 대 "가상" 패키지 (Virtual Packages)</h3>
<p>물론, 오늘날의 Python에서는 <code>Foo</code>가 단순히 <code>Foo.py</code> 모듈(따라서 <code>__path__</code> 속성이 없음)이라면 <code>Foo.Bar</code>를 임포트하려는 시도는 실패할 것입니다.</p>
<p>그래서 이 PEP는 <code>__path__</code>가 없는 경우 동적으로 <code>__path__</code>를 생성할 것을 제안합니다. 즉, <code>Foo.Bar</code>를 임포트하려고 할 때, 임포트 메커니즘에 대한 제안된 변경 사항은 <code>Foo</code> 모듈에 <code>__path__</code>가 없다는 것을 알아차리고 진행하기 전에 <code>__path__</code>를 빌드하려고 시도할 것입니다.</p>
<p>그리고 이것은 <code>sys.path</code>에 나열된 디렉토리의 모든 기존 <code>Foo/</code> 서브디렉토리 목록을 만들어서 수행할 것입니다.</p>
<p>목록이 비어 있으면 오늘날과 마찬가지로 <code>ImportError</code>와 함께 임포트가 실패합니다. 그러나 목록이 비어 있지 않으면 새 <code>Foo.__path__</code> 속성에 저장되어 모듈을 "가상 패키지(virtual package)"로 만듭니다.</p>
<p>즉, 이제 유효한 <code>__path__</code>를 가지므로, 일반적인 방식으로 서브 모듈이나 서브 패키지를 임포트할 수 있습니다.</p>
<p>이 변경 사항이 <code>__init__</code> 모듈을 포함하는 "고전적인" 자급자족 패키지에는 영향을 미치지 않는다는 점에 유의하십시오. 이러한 패키지는 이미 (임포트 시점에 초기화된) <code>__path__</code> 속성을 가지고 있으므로 임포트 메커니즘은 나중에 다른 <code>__path__</code>를 생성하려고 시도하지 않을 것입니다.</p>
<p>이것은 (예를 들어) 표준 라이브러리 <code>email</code> 패키지가 <code>sys.path</code>에 <code>email</code>이라는 이름의 관련 없는 디렉토리들이 많이 있더라도 어떤 식으로든 영향을 받지 않는다는 것을 의미합니다. (심지어 <code>*.py</code> 파일을 포함하더라도 말입니다.)</p>
<p>하지만 이것은 <code>Foo</code> 모듈을 <code>Foo</code> 패키지로 바꾸고 싶다면, <code>sys.path</code>의 어딘가에 <code>Foo/</code> 디렉토리를 추가하고 그 안에 모듈을 추가하기 시작하기만 하면 된다는 것을 의미합니다.</p>
<p>하지만 "네임스페이스 패키지"만 원한다면 어떨까요? 즉, 다양한 독립적으로 배포되는 서브 모듈과 서브 패키지를 위한 네임스페이스일 뿐인 패키지는요?</p>
<p>예를 들어, Zope Corporation이 <code>zc.buildout</code>와 같은 수십 개의 개별 도구를 <code>zc</code> 네임스페이스 아래의 패키지로 배포하는 경우, 배포하는 모든 도구에 빈 <code>zc.py</code>를 만들고 포함할 필요가 없습니다. (그리고 Linux 또는 다른 OS 벤더라면, <code>zc.py</code> 사본 10개를 동일한 위치에 설치하려고 할 때 발생하는 패키지 설치 충돌을 처리하고 싶지 않을 것입니다!)</p>
<p>문제 없습니다. 임포트 프로세스에 한 가지 사소한 조정을 더하면 됩니다. "고전적인" 임포트 프로세스가 자급자족 모듈이나 패키지를 찾지 못하면 (예: <code>import zc</code>가 <code>zc.py</code> 또는 <code>zc/__init__.py</code>를 찾지 못하면), <code>sys.path</code>의 모든 <code>zc/</code> 디렉토리를 검색하여 <code>__path__</code>를 다시 빌드하고 목록에 넣습니다.</p>
<p>이 목록이 비어 있으면 <code>ImportError</code>를 발생시킵니다. 그러나 비어 있지 않으면 빈 <code>zc</code> 모듈을 만들고 목록을 <code>zc.__path__</code>에 넣습니다. 축하합니다. <code>zc</code>는 이제 네임스페이스 전용의 "순수 가상(pure virtual)" 패키지입니다! 모듈 내용은 없지만, <code>sys.path</code>의 어디에 있든 서브 모듈과 서브 패키지를 계속 임포트할 수 있습니다.</p>
<p>(덧붙여서, 임포트 프로토콜에 대한 이 두 가지 추가 사항(즉, 동적으로 추가되는 <code>__path__</code> 및 동적으로 생성되는 모듈)은 부모 패키지의 <code>__path__</code>를 <code>sys.path</code> 대신 사용하여 자식 <code>__path__</code>를 생성하는 기반으로 재귀적으로 자식 패키지에 적용됩니다. 이는 자급자족 및 가상 패키지가 제한 없이 서로를 포함할 수 있음을 의미합니다. 단, 가상 패키지를 자급자족 패키지 안에 넣으면 <code>__path__</code>가 매우 짧아질 수 있습니다!)</p>
<h3>하위 호환성 및 성능 (Backwards Compatibility and Performance)</h3>
<p>이 두 가지 변경 사항은 오늘날 <code>ImportError</code>를 발생시킬 임포트 작업에만 영향을 미친다는 점에 유의하십시오. 결과적으로, 가상 패키지와 관련되지 않은 임포트의 성능은 영향을 받지 않으며, 잠재적인 하위 호환성 문제는 매우 제한적입니다.</p>
<p>오늘날, <code>__path__</code>가 없는 모듈에서 서브 모듈이나 서브 패키지를 임포트하려고 하면 즉시 오류가 발생합니다. 그리고 물론, 오늘날 <code>sys.path</code>의 어딘가에 <code>zc.py</code>나 <code>zc/__init__.py</code>가 없다면, <code>import zc</code>도 마찬가지로 실패할 것입니다.</p>
<p>따라서 유일한 잠재적 하위 호환성 문제는 다음과 같습니다:</p>
<ul>
<li>패키지 디렉토리에 <code>__init__</code> 모듈이 있을 것으로 예상하거나, <code>__init__</code> 모듈이 없는 디렉토리는 임포트 불가능할 것으로 예상하거나, <code>__path__</code> 속성이 정적일 것으로 예상하는 도구는 가상 패키지를 패키지로 인식하지 못할 것입니다. (실제로 이는 도구가 가상 패키지를 지원하도록 업데이트되어야 함을 의미합니다. 예를 들어, 하드 코딩된 파일 시스템 검색 대신 <code>pkgutil.walk_modules()</code>를 사용해야 합니다.)</li>
<li>특정 임포트가 실패할 것으로 예상하는 코드는 이제 예상치 못한 동작을 할 수 있습니다. 대부분의 합리적인 비-테스트 코드는 존재하지 않을 것으로 예상되는 것을 임포트하지 않으므로, 실제로 이는 상당히 드물 것입니다!</li>
</ul>
<p>위에서 언급한 가장 큰 예외는 코드가 어떤 패키지가 설치되었는지 임포트하여 확인하려고 할 때 발생할 수 있습니다. 만약 이것이 최상위 모듈을 임포트하는 것만으로 이루어지고 (<code>__version__</code>이나 다른 속성을 확인하지 않고), <code>sys.path</code>의 어딘가에 찾으려는 패키지와 동일한 이름의 디렉토리가 존재하지만 패키지가 실제로 설치되지 않은 경우, 그러한 코드는 실제로는 설치되지 않은 패키지가 설치되었다고 착각할 수 있습니다.</p>
<p>예를 들어, 다음과 같은 코드를 포함하는 스크립트(<code>datagen.py</code>)를 작성했다고 가정해 봅시다:</p>
<pre><code class="language-python">try:
    import json
except ImportError:
    import simplejson as json
</code></pre>
<p>그리고 이를 다음과 같은 디렉토리 구조에서 실행합니다:</p>
<pre><code>datagen.py
json/
    foo.js
    bar.js
</code></pre>
<p>만약 <code>json/</code> 서브디렉토리의 존재만으로 <code>import json</code>이 성공했다면, 코드는 <code>json</code> 모듈을 사용할 수 있다고 잘못 믿고 오류와 함께 계속 진행될 것입니다.</p>
<p>그러나 지금까지 제시된 알고리즘에 작은 변경 사항을 하나만 추가하면 이러한 예외 상황이 발생하는 것을 막을 수 있습니다. "순수 가상" 패키지(예: <code>zc</code>)를 임포트할 수 있도록 허용하는 대신, 가상 패키지의 내용만 임포트할 수 있도록 허용합니다.</p>
<p>즉, <code>sys.path</code>에 <code>zc.py</code>나 <code>zc/__init__.py</code>가 없으면 <code>import zc</code>와 같은 문은 <code>ImportError</code>를 발생시켜야 합니다. 그러나 <code>sys.path</code>에 <code>zc/buildout.py</code> 또는 <code>zc/buildout/__init__.py</code>가 있는 한 <code>import zc.buildout</code>는 여전히 성공해야 합니다.</p>
<p>다른 말로 하면, 순수 가상 패키지는 직접 임포트할 수 없으며, 모듈과 자급자족 패키지만 허용됩니다. (이것은 허용 가능한 제한 사항입니다. 왜냐하면 그러한 패키지를 단독으로 임포트하는 것에는 기능적 가치가 없기 때문입니다. 결국, 하나 이상의 서브 패키지나 서브 모듈을 임포트할 때까지 모듈 객체는 내용이 없을 것입니다!)</p>
<p>그러나 <code>zc.buildout</code>가 성공적으로 임포트되면 <code>sys.modules</code>에 <code>zc</code> 모듈이 있을 것이고, 이를 임포트하려는 시도는 당연히 성공할 것입니다. 우리는 <code>sys.path</code>에 충돌하는 서브디렉토리가 있을 때 오탐(false-positive) 임포트 성공을 방지하기 위해 초기 임포트만 성공하지 못하도록 막고 있습니다.</p>
<p>따라서 이러한 작은 변경으로 위 <code>datagen.py</code> 예제는 올바르게 작동할 것입니다. <code>import json</code>을 할 때, <code>json/</code> 디렉토리의 단순한 존재는 <code>.py</code> 파일을 포함하더라도 임포트 프로세스에 전혀 영향을 미치지 않을 것입니다. <code>json/</code> 디렉토리는 <code>import json.converter</code>와 같은 임포트가 시도될 때만 검색될 것입니다.</p>
<p>한편, 디렉토리 트리를 탐색하여 패키지와 모듈을 찾는 도구는 기존 <code>pkgutil.walk_modules()</code> API를 사용하도록 업데이트될 수 있으며, 메모리 내 패키지를 검사해야 하는 도구는 아래 "표준 라이브러리 변경/추가" 섹션에 설명된 다른 API를 사용해야 합니다.</p>
<h2>명세 (Specification)</h2>
<p>최소한 하나 이상의 <code>.</code>을 포함하는 이름(즉, 부모 패키지를 가진 모듈)을 임포트할 때 기존 임포트 프로세스에 변경이 적용됩니다.</p>
<p>특히, 부모 패키지가 존재하지 않거나 존재하지만 <code>__path__</code> 속성이 없는 경우, 먼저 부모 패키지에 대한 "가상 경로(virtual path)"를 생성하려는 시도가 이루어집니다 (아래 가상 경로 섹션에 설명된 알고리즘을 따릅니다).</p>
<p>계산된 "가상 경로"가 비어 있으면 오늘날과 마찬가지로 <code>ImportError</code>가 발생합니다. 그러나 비어 있지 않은 가상 경로가 얻어지면, 해당 가상 경로를 사용하여 서브 모듈이나 서브 패키지를 찾아 정상적인 임포트가 진행됩니다. (부모 패키지가 존재하고 <code>__path__</code>를 가지고 있었다면 부모의 <code>__path__</code>를 사용했을 때와 같습니다.)</p>
<p>서브 모듈이나 서브 패키지가 발견되면 (아직 로드되지 않았더라도), 부모 패키지가 생성되어 <code>sys.modules</code>에 추가되고 (이전에 존재하지 않았다면), 그 <code>__path__</code>는 계산된 가상 경로로 설정됩니다 (이미 설정되지 않았다면).</p>
<p>이러한 방식으로 서브 모듈이나 서브 패키지의 실제 로드가 발생할 때, 부모 패키지가 존재하는 것을 보게 될 것이며 모든 상대 임포트가 올바르게 작동할 것입니다. 그러나 서브 모듈이나 서브 패키지가 존재하지 않으면 부모 패키지는 생성되지 않으며, 독립 실행형 모듈이 (불필요한 <code>__path__</code> 속성 추가로) 패키지로 변환되지도 않습니다.</p>
<p>덧붙여서, 이 변경 사항은 재귀적으로 적용되어야 합니다. 즉, <code>foo</code>와 <code>foo.bar</code>가 순수 가상 패키지인 경우, <code>import foo.bar.baz</code>는 <code>foo.bar.baz</code>가 발견될 때까지 기다렸다가 <code>foo</code>와 <code>foo.bar</code> 모두에 대한 모듈 객체를 생성하고, <code>foo</code> 모듈의 <code>.bar</code> 속성이 <code>foo.bar</code> 모듈을 가리키도록 올바르게 설정해야 합니다.</p>
<p>이러한 방식으로 순수 가상 패키지는 직접 임포트할 수 없습니다. <code>import foo</code> 또는 <code>import foo.bar</code> 자체는 실패하며, 해당 모듈은 성공적으로 임포트된 서브 모듈이나 자급자족 서브 패키지를 가리키는 데 필요할 때까지 <code>sys.modules</code>에 나타나지 않습니다.</p>
<h3>가상 경로 (Virtual Paths)</h3>
<p>가상 경로는 <code>sys.path</code> (최상위 모듈의 경우) 또는 부모 <code>__path__</code> (서브 모듈의 경우)에서 발견된 각 경로 항목에 대해 PEP 302 "임포터(importer)" 객체를 얻어서 생성됩니다.</p>
<p>(참고: <code>sys.meta_path</code> 임포터는 <code>sys.path</code> 또는 <code>__path__</code> 항목 문자열과 연결되지 않으므로, 이러한 임포터는 이 프로세스에 참여하지 않습니다.)</p>
<p>각 임포터는 <code>get_subpath()</code> 메서드가 있는지 확인하고, 존재하는 경우 경로가 구성되는 모듈/패키지의 전체 이름과 함께 메서드가 호출됩니다. 반환 값은 요청된 패키지에 대한 서브디렉토리를 나타내는 문자열이거나, 그러한 서브디렉토리가 없으면 <code>None</code>입니다.</p>
<p>임포터가 반환한 문자열은 발견된 순서대로 구축되는 경로 목록에 추가됩니다. (<code>None</code> 값과 <code>get_subpath()</code> 메서드가 없는 경우는 단순히 건너뛰어집니다.)</p>
<p>결과 목록(비어 있든 아니든)은 모듈 이름을 키로 하여 <code>sys.virtual_package_paths</code> 딕셔너리에 저장됩니다.</p>
<p>이 딕셔너리에는 두 가지 목적이 있습니다. 첫째, 가상 패키지의 서브 모듈을 임포트하려는 시도가 두 번 이상 있을 경우 캐시 역할을 합니다.</p>
<p>둘째, 더 중요하게는, 딕셔너리는 런타임에 <code>sys.path</code>를 확장하는 코드가 임포트된 패키지의 <code>__path__</code> 속성을 그에 따라 업데이트하는 데 사용될 수 있습니다. (자세한 내용은 아래 "표준 라이브러리 변경/추가"를 참조하십시오.)</p>
<p>Python 코드에서 가상 경로 구성 알고리즘은 다음과 같을 것입니다:</p>
<pre><code class="language-python">def get_virtual_path(modulename, parent_path=None):
    if modulename in sys.virtual_package_paths:
        return sys.virtual_package_paths[modulename]
    if parent_path is None:
        parent_path = sys.path
    path = []
    for entry in parent_path:
        # Obtain a PEP 302 importer object - see pkgutil module
        importer = pkgutil.get_importer(entry)
        if hasattr(importer, 'get_subpath'):
            subpath = importer.get_subpath(modulename)
            if subpath is not None:
                path.append(subpath)
    sys.virtual_package_paths[modulename] = path
    return path
</code></pre>
<p>그리고 이와 같은 함수는 표준 라이브러리에 예를 들어 <code>imp.get_virtual_path()</code>로 노출되어 <code>__import__</code> 대체물이나 <code>sys.meta_path</code> 훅을 생성하는 사람들이 재사용할 수 있도록 해야 합니다.</p>
<h3>표준 라이브러리 변경/추가 (Standard Library Changes/Additions)</h3>
<p><code>pkgutil</code> 모듈은 이 명세를 적절하게 처리하도록 업데이트되어야 하며, <code>extend_path()</code>, <code>iter_modules()</code> 등에 필요한 모든 변경 사항을 포함해야 합니다.</p>
<p>특히 <code>pkgutil</code>에 제안된 변경 및 추가 사항은 다음과 같습니다:</p>
<ul>
<li>새로운 <code>extend_virtual_paths(path_entry)</code> 함수: 새로운 <code>sys.path</code> 항목에서 발견된 모든 부분을 포함하도록 기존에 이미 임포트된 가상 패키지의 <code>__path__</code> 속성을 확장합니다. 이 함수는 런타임에 <code>sys.path</code>를 확장하는 애플리케이션(예: 플러그인 디렉토리나 egg를 경로에 추가할 때)에서 호출되어야 합니다.
<ul>
<li>이 함수의 구현은 <code>sys.virtual_package_paths</code>를 간단히 상향식(top-down)으로 순회하고, <code>path_entry</code>가 <code>sys.path</code>에 추가되었음을 감안하여 해당 패키지에 대한 가상 경로에 어떤 경로 항목을 추가해야 하는지 식별하기 위해 필요한 <code>get_subpath()</code> 호출을 수행합니다. (또는 서브 패키지의 경우, 부모 패키지의 가상 경로를 기반으로 파생된 서브 경로 항목을 추가합니다.)</li>
<li>(참고: 이 함수는 <code>sys.virtual_package_paths</code>의 경로 값과 <code>sys.modules</code>에 있는 해당 모듈의 <code>__path__</code> 속성 모두를 업데이트해야 합니다. 비록 일반적인 경우에는 둘 다 동일한 리스트 객체가 될 것이지만 말입니다.)</li>
</ul>
</li>
<li>새로운 <code>iter_virtual_packages(parent='')</code> 함수: <code>parent</code>의 자식 가상 패키지를 yield하여 <code>sys.virtual_package_paths</code>에서 가상 패키지를 상향식으로 순회할 수 있도록 합니다. 예를 들어, <code>iter_virtual_packages("zope")</code>를 호출하면 <code>zope.app</code> 및 <code>zope.products</code>가 yield될 수 있지만 (만약 <code>sys.virtual_package_paths</code>에 나열된 가상 패키지인 경우), <code>zope.foo.bar</code>는 yield되지 않습니다. (이 함수는 <code>extend_virtual_paths()</code>를 구현하는 데 필요하지만, 임포트된 가상 패키지를 검사해야 하는 다른 코드에도 잠재적으로 유용합니다.)</li>
<li><code>ImpImporter.iter_modules()</code>는 가상 패키지에서 발견된 모듈의 이름을 감지하고 yield하도록 변경되어야 합니다.</li>
<li>위의 변경 사항 외에도 <code>zipimport</code> 임포터의 <code>iter_modules()</code> 구현도 유사하게 변경되어야 합니다. (참고: 현재 버전의 Python은 <code>pkgutil</code>의 shim을 통해 이를 구현하므로, 기술적으로 이것은 <code>pkgutil</code>의 변경 사항이기도 합니다.)</li>
<li>마지막으로 <code>imp</code> 모듈 (또는 적절하다면 <code>importlib</code>)은 위 가상 경로 섹션에 설명된 알고리즘을 <code>get_virtual_path(modulename, parent_path=None)</code> 함수로 노출하여 <code>__import__</code> 대체물 생성자가 이를 사용할 수 있도록 해야 합니다.</li>
</ul>
<h2>구현 참고사항 (Implementation Notes)</h2>
<h3>가상 패키지 사용자, 개발자 및 배포자를 위한 참고사항</h3>
<ul>
<li>가상 패키지는 설정하고 사용하기 쉽지만, 자급자족 패키지를 사용해야 할 시기와 장소는 여전히 존재합니다. 엄밀히 필요하지는 않지만, 자급자족 패키지에 <code>__init__</code> 모듈을 추가하면 패키지 사용자(및 Python 자체)에게 패키지의 모든 코드가 해당 단일 서브디렉토리에서 발견될 것임을 알릴 수 있습니다. 또한, <code>__all__</code>을 정의하고, 공개 API를 노출하고, 패키지 수준 독스트링을 제공하며, 단순한 "네임스페이스" 패키지보다 자급자족 프로젝트에 더 의미 있는 다른 작업을 수행할 수 있습니다.</li>
<li><code>sys.virtual_package_paths</code>는 존재하지 않거나 아직 임포트되지 않은 패키지 이름에 대한 항목을 포함할 수 있습니다. 그 내용을 사용하는 코드는 이 딕셔너리의 모든 키가 <code>sys.modules</code>에도 존재하거나 이름을 임포트하는 것이 반드시 성공할 것이라고 가정해서는 안 됩니다.</li>
<li>현재 자급자족 패키지를 가상 패키지로 변경하는 경우, <code>__file__</code> 속성을 사용하여 패키지 디렉토리에 저장된 데이터 파일을 찾을 수 없다는 점에 유의해야 합니다. 대신, <code>__path__</code>를 검색하거나 원하는 파일 옆에 있는 서브 모듈의 <code>__file__</code> 또는 원하는 파일을 포함하는 자급자족 서브 패키지의 <code>__file__</code>을 사용해야 합니다.
<ul>
<li>(참고: 이 경고는 오늘날 "네임스페이스 패키지"의 기존 사용자에게도 이미 해당됩니다. 즉, 패키지를 분할할 수 있다는 것은 원하는 데이터 파일이 어떤 파티션에 있는지 알아야 한다는 내재된 결과입니다. 우리는 단순히 자급자족 패키지에서 가상 패키지로 전환하는 새로운 사용자들이 이를 인지하도록 여기에 언급합니다.)</li>
</ul>
</li>
<li>XXX "순수 가상" 패키지의 <code>__file__</code>은 무엇인가요? <code>None</code>? 임의의 문자열? 후행 구분 기호가 있는 첫 번째 디렉토리의 경로? 어떤 것을 넣든 일부 코드는 깨질 것이지만, 마지막 선택은 일부 코드가 우연히 작동하도록 허용할 수도 있습니다. 이것이 좋은가요, 나쁜가요?</li>
</ul>
<h3>PEP 302 임포터 객체를 구현하는 사람들을 위한 참고사항</h3>
<ul>
<li><code>iter_modules()</code> 메서드를 지원하고 (pkgutil이 임포트 가능한 모듈 및 패키지를 찾는 데 사용됨) 가상 패키지 지원을 추가하려는 임포터는 <code>iter_modules()</code> 메서드를 수정하여 표준 모듈 및 패키지뿐만 아니라 가상 패키지도 발견하고 나열하도록 해야 합니다. 이를 위해 임포터는 해당 관할권 내의 모든 직접적인 서브디렉토리 이름 중에서 유효한 Python 식별자를 나열하기만 하면 됩니다.
<ul>
<li>XXX 이것은 실제 패키지가 아닌 많은 것을 나열할 수 있습니다. 임포트 가능한 내용이 존재하도록 요구해야 할까요? 그렇다면 얼마나 깊이 검색해야 하며, 예를 들어 링크 루프나 다른 파일 시스템으로의 순회를 어떻게 방지할 수 있을까요? 끔찍합니다. 또한, 가상 패키지가 나열되더라도 여전히 임포트할 수 없다는 것은 <code>pkgutil.walk_modules()</code>가 현재 구현된 방식에 문제가 됩니다.</li>
</ul>
</li>
<li>"메타" 임포터(즉, <code>sys.meta_path</code>에 있는 임포터)는 <code>get_subpath()</code>를 구현할 필요가 없습니다. 왜냐하면 이 메서드는 <code>sys.path</code> 항목 및 <code>__path__</code> 항목에 해당하는 임포터에 대해서만 호출되기 때문입니다. 메타 임포터가 가상 패키지를 지원하려면 전적으로 자체 <code>find_module()</code> 구현 내에서 그렇게 해야 합니다.
<ul>
<li>불행히도, 그러한 구현이 다른 메타 임포터나 <code>sys.path</code> 임포터의 패키지 서브 경로와 병합할 수 있을 것 같지는 않으므로, 메타 임포터에 대한 "가상 패키지 지원"의 의미는 현재 정의되지 않았습니다!</li>
<li>(그러나 메타 임포터의 의도된 사용 사례는 특정 모듈 집합에 대해 Python의 일반 임포트 프로세스를 완전히 대체하는 것이며, 현재 구현된 그러한 임포터의 수는 매우 적기 때문에, 이것이 실제로는 큰 문제가 될 것 같지는 않습니다.)</li>
</ul>
</li>
</ul>
<h2>참고 자료 (References)</h2>
<p>"namespace" vs "module" packages (mailing list thread)
"Dropping <code>__init__.py</code> requirement for subpackages"
Namespace Packages resolution</p>
<hr>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Rejected] PEP 402 - Simplified Package Layout and Partitioning"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 21:26:40+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
