3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/324","c"]
0:["SAPzS3zi9tsG5MkeKvxIA",[[["",{"children":[["slug","python/pep/324","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"324\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/324","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T34e8,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0324/">PEP 324 - subprocess - New process module</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 19-Nov-2003</p>
</blockquote>
<h2>PEP 324 – <code>subprocess</code> 모듈: 새로운 프로세스 모듈</h2>
<h3>개요 (Abstract)</h3>
<p>이 PEP는 새로운 프로세스를 시작하고 통신하는 기능을 제공하는 <code>subprocess</code> 모듈에 대해 설명합니다.</p>
<h3>동기 (Motivation)</h3>
<p>새로운 프로세스를 시작하는 것은 프로그래밍 언어에서 흔한 작업이며, 특히 Python과 같은 고급 언어에서는 매우 일반적입니다. 이 작업을 잘 지원하는 것이 중요한 이유는 다음과 같습니다:</p>
<ul>
<li>프로세스 시작에 부적절한 함수를 사용하면 보안 위험이 발생할 수 있습니다. 예를 들어, 셸을 통해 프로그램을 시작하고 인수에 셸 메타 문자가 포함되면 심각한 문제가 발생할 수 있습니다.</li>
<li><code>subprocess</code> 모듈은 Python을 복잡한 셸 스크립트를 대체하는 더 나은 언어로 만듭니다.</li>
</ul>
<p>현재 Python에는 프로세스 생성에 사용되는 다양한 함수들이 존재하여 개발자들이 선택하기 어렵다는 문제가 있었습니다. <code>subprocess</code> 모듈은 기존 함수들에 비해 다음과 같은 향상된 기능을 제공합니다:</p>
<ul>
<li>모든 기능을 하나의 "통합된" 모듈로 제공합니다.</li>
<li>자식 프로세스에서 새 프로세스 실행 전 발생하는 예외가 부모 프로세스에 다시 발생(re-raise)되어 <code>exec()</code> 실패를 쉽게 처리할 수 있습니다.</li>
<li><code>fork</code>와 <code>exec</code> 사이에 사용자 정의 코드를 실행할 수 있는 후크(hook)를 제공합니다 (예: <code>uid</code> 변경).</li>
<li><code>/bin/sh</code>를 암묵적으로 호출하지 않아 위험한 셸 메타 문자를 이스케이프할 필요가 없습니다.</li>
<li>파일 디스크립터(file descriptor) 리디렉션의 모든 조합이 가능합니다.</li>
<li>새 프로그램 실행 전에 모든 열린 파일 디스크립터를 닫을지 제어할 수 있습니다.</li>
<li>여러 서브프로세스를 연결하는 기능(셸의 "파이프"와 유사)을 지원합니다.</li>
<li>유니버설 개행 문자(Universal newline)를 지원합니다.</li>
<li><code>communicate()</code> 메서드를 통해 교착 상태(deadlock) 위험 없이 <code>stdin</code>으로 데이터를 보내고 <code>stdout</code> 및 <code>stderr</code> 데이터를 쉽게 읽을 수 있습니다.</li>
</ul>
<h3>설계 근거 (Rationale)</h3>
<p><code>subprocess</code> 모듈의 설계는 주로 다음과 같은 점들을 요약합니다:</p>
<ul>
<li>기존의 검증된 <code>popen2</code> 모듈을 기반으로 하였습니다.</li>
<li><code>popen2</code>의 팩토리 함수(factory functions)는 제거되었으며, 단일 <code>Popen</code> 클래스 생성자를 사용하는 것이 더 직관적이라고 판단했습니다. <code>subprocess</code>는 12가지의 리디렉션 조합을 지원하므로, 각 조합에 대한 개별 클래스나 함수를 제공하는 것은 번거롭고 직관적이지 않습니다.</li>
<li><code>os.system()</code>을 대체하면서 사용하기 쉬운 유틸리티 함수 <code>subprocess.call()</code>이 제공됩니다. 이 함수는 <code>system()</code> 함수의 제한을 가지지 않고, 셸을 암묵적으로 호출하지 않으며, 인용(quoting)이 필요 없고, 반환 값 처리가 더 쉽습니다.</li>
<li><code>call()</code> 함수는 <code>Popen</code> 클래스 생성자와 동일하게 <code>args</code> 인수를 받으며, 명령이 완료될 때까지 기다린 후 <code>returncode</code> 속성을 반환합니다.</li>
</ul>
<h3>명세 (Specification)</h3>
<p><code>subprocess</code> 모듈은 주로 하나의 클래스인 <code>Popen</code>을 정의합니다.</p>
<pre><code class="language-python">class Popen(args, bufsize=0, executable=None, stdin=None, stdout=None, stderr=None,
             preexec_fn=None, close_fds=False, shell=False, cwd=None, env=None,
             universal_newlines=False, startupinfo=None, creationflags=0):
</code></pre>
<p>주요 인수는 다음과 같습니다:</p>
<ul>
<li><code>args</code>: 실행할 프로그램 인수(문자열 또는 시퀀스).</li>
<li><code>bufsize</code>: 버퍼 크기. <code>0</code>은 버퍼링 없음, <code>1</code>은 라인 버퍼링, 음수는 시스템 기본값.</li>
<li><code>stdin</code>, <code>stdout</code>, <code>stderr</code>: 자식 프로세스의 표준 입출력 및 에러 핸들 지정. <code>PIPE</code>, 기존 파일 디스크립터, 기존 파일 객체, 또는 <code>None</code>이 될 수 있습니다. <code>stderr</code>는 <code>STDOUT</code>으로 설정하여 <code>stdout</code>과 동일한 핸들로 캡처할 수도 있습니다.</li>
<li><code>preexec_fn</code>: 자식 프로세스가 실행되기 직전에 호출될 콜러블(callable) 객체.</li>
<li><code>close_fds</code>: <code>True</code>인 경우, 자식 프로세스 실행 전에 0, 1, 2를 제외한 모든 파일 디스크립터를 닫습니다.</li>
<li><code>shell</code>: <code>True</code>인 경우, 지정된 명령이 셸을 통해 실행됩니다.</li>
<li><code>cwd</code>: 자식 프로세스 실행 전에 현재 디렉터리를 변경합니다.</li>
<li><code>env</code>: 새 프로세스의 환경 변수를 정의합니다.</li>
<li><code>universal_newlines</code>: <code>True</code>인 경우 <code>stdout</code> 및 <code>stderr</code> 파일 객체를 텍스트 파일로 열며, 모든 종류의 개행 문자(<code>\n</code>, <code>\r</code>, <code>\r\n</code>)를 <code>\n</code>으로 처리합니다.</li>
<li><code>startupinfo</code>, <code>creationflags</code>: Windows 전용으로 <code>CreateProcess()</code> 함수에 전달됩니다.</li>
</ul>
<p>또한, <code>subprocess.call(*args, **kwargs)</code> 함수는 명령을 실행하고 완료될 때까지 기다린 후 <code>returncode</code> 속성을 반환하는 편리한 단축 기능을 제공합니다.</p>
<h3>예외 (Exceptions)</h3>
<p>새 프로그램이 실행되기 전에 자식 프로세스에서 발생한 예외는 부모 프로세스에 다시 발생됩니다. 이 예외 객체에는 자식 프로세스 관점의 traceback 정보를 담은 <code>child_traceback</code> 속성이 추가됩니다.</p>
<ul>
<li>가장 흔한 예외는 <code>OSError</code>이며, 존재하지 않는 파일을 실행하려 할 때 발생합니다.</li>
<li>유효하지 않은 인수로 <code>Popen</code>을 호출하면 <code>ValueError</code>가 발생합니다.</li>
</ul>
<h3>보안 (Security)</h3>
<p><code>subprocess</code> 모듈은 다른 <code>popen</code> 함수와 달리 <code>/bin/sh</code>를 암묵적으로 호출하지 않습니다. 이는 셸 메타 문자를 포함한 모든 문자를 자식 프로세스에 안전하게 전달할 수 있음을 의미합니다.</p>
<h3><code>Popen</code> 객체</h3>
<p><code>Popen</code> 클래스의 인스턴스는 다음과 같은 메서드와 속성을 가집니다:</p>
<ul>
<li><strong>메서드:</strong>
<ul>
<li><code>poll()</code>: 자식 프로세스 종료 여부를 확인하고 <code>returncode</code>를 반환합니다.</li>
<li><code>wait()</code>: 자식 프로세스가 종료될 때까지 기다리고 <code>returncode</code>를 반환합니다.</li>
<li><code>communicate(input=None)</code>: 프로세스와 상호작용합니다. <code>stdin</code>으로 데이터를 보내고 <code>stdout</code> 및 <code>stderr</code>에서 데이터를 읽으며, 프로세스가 종료될 때까지 기다립니다. <code>(stdout, stderr)</code> 튜플을 반환합니다. (주의: 데이터가 메모리에 버퍼링되므로 대량의 데이터에는 적합하지 않습니다)</li>
</ul>
</li>
<li><strong>속성:</strong>
<ul>
<li><code>stdin</code>, <code>stdout</code>, <code>stderr</code>: <code>PIPE</code>로 지정된 경우 해당 파일 객체.</li>
<li><code>pid</code>: 자식 프로세스의 프로세스 ID.</li>
<li><code>returncode</code>: 자식 프로세스의 반환 코드. <code>None</code>은 아직 종료되지 않음을 의미하며, 음수 값 <code>-N</code>은 시그널 <code>N</code>에 의해 종료되었음을 의미합니다 (UNIX 한정).</li>
</ul>
</li>
</ul>
<h3>이전 함수들을 <code>subprocess</code> 모듈로 대체하기</h3>
<p>이 섹션에서는 기존 함수들이 <code>subprocess</code> 모듈의 기능으로 어떻게 대체될 수 있는지 설명합니다. 이전 함수들은 실행할 프로그램을 찾을 수 없는 경우 조용히 실패했지만, <code>subprocess</code> 모듈은 <code>OSError</code> 예외를 발생시킵니다.</p>
<ul>
<li><code>/bin/sh</code> 셸 역따옴표(backquote) 대체:
<code>output=</code>mycmd myarg`` ==> <code>output = Popen(["mycmd", "myarg"], stdout=PIPE).communicate()[0]</code></li>
<li>셸 파이프라인(pipe line) 대체:
<code>output=</code>dmesg | grep hda`` ==>
<pre><code class="language-python">p1 = Popen(["dmesg"], stdout=PIPE)
p2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]
</code></pre>
</li>
<li><code>os.system()</code> 대체:
<code>sts = os.system("mycmd" + " myarg")</code> ==>
<pre><code class="language-python">p = Popen("mycmd" + " myarg", shell=True)
sts = os.waitpid(p.pid, 0)
</code></pre>
더 나은 예제:
<pre><code class="language-python">try:
    retcode = call("mycmd" + " myarg", shell=True)
    if retcode &#x3C; 0:
        print(f"Child was terminated by signal {-retcode}", file=sys.stderr)
    else:
        print(f"Child returned {retcode}", file=sys.stderr)
except OSError as e:
    print(f"Execution failed: {e}", file=sys.stderr)
</code></pre>
</li>
<li><code>os.spawn*</code> 함수 대체:
<code>os.spawnlp(os.P_NOWAIT, "/bin/mycmd", "mycmd", "myarg")</code> ==> <code>Popen(["/bin/mycmd", "myarg"]).pid</code>
<code>os.spawnlp(os.P_WAIT, "/bin/mycmd", "mycmd", "myarg")</code> ==> <code>call(["/bin/mycmd", "myarg"])</code>
환경 변수 사용 예제:
<code>os.spawnlpe(os.P_NOWAIT, "/bin/mycmd", "mycmd", "myarg", env)</code> ==> <code>Popen(["/bin/mycmd", "myarg"], env={"PATH": "/usr/bin"})</code></li>
<li><code>os.popen*</code> 함수 대체:
<code>pipe = os.popen(cmd, mode='r', bufsize)</code> ==> <code>pipe = Popen(cmd, shell=True, bufsize=bufsize, stdout=PIPE).stdout</code>
<code>pipe = os.popen(cmd, mode='w', bufsize)</code> ==> <code>pipe = Popen(cmd, shell=True, bufsize=bufsize, stdin=PIPE).stdin</code>
<code>os.popen2</code>, <code>os.popen3</code>, <code>os.popen4</code> 또한 <code>Popen</code>과 <code>PIPE</code>, <code>STDOUT</code> 인수를 조합하여 대체 가능합니다.</li>
<li><code>popen2.*</code> 함수 대체:
<code>popen2.popen2("somestring", bufsize, mode)</code> ==>
<pre><code class="language-python">p = Popen(["somestring"], shell=True, bufsize=bufsize, stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdout, child_stdin) = (p.stdout, p.stdin)
</code></pre>
<code>subprocess.Popen</code>은 실행 실패 시 예외를 발생시키고, <code>capturestderr</code> 인수가 <code>stderr</code> 인수로 대체되었으며, <code>stdin=PIPE</code> 및 <code>stdout=PIPE</code>를 명시해야 합니다. 또한, <code>popen2</code>는 기본적으로 모든 파일 디스크립터를 닫지만, <code>subprocess.Popen</code>에서는 <code>close_fds=True</code>를 명시해야 합니다.</li>
</ul>
<h3>해결되지 않은 문제 (Open Issues)</h3>
<p>다음과 같은 기능들이 요청되었으나 아직 구현되지 않았습니다:</p>
<ul>
<li>여러 서브프로세스 관리 지원</li>
<li>"데몬" 프로세스 관리 지원</li>
<li>서브프로세스를 종료(killing)하는 내장 메서드</li>
</ul>
<p>이러한 기능들은 유용하지만, 나중에 문제없이 추가될 수 있을 것으로 예상됩니다.</p>
<p><code>pty</code> 지원을 포함한 <code>expect</code>와 유사한 기능도 요청되었으나, <code>pty</code> 지원은 플랫폼 종속성이 높아 문제가 있으며, 이미 이러한 기능을 제공하는 다른 모듈들이 존재합니다.</p>
<h3>하위 호환성 (Backwards Compatibility)</h3>
<p><code>subprocess</code>는 새로운 모듈이므로 주요 하위 호환성 문제는 예상되지 않습니다. 모듈 이름 "subprocess"는 이전에 다른 모듈과 충돌할 수 있지만, 현재까지는 가장 적절한 이름으로 간주됩니다.</p>
<p>이 새로운 모듈이 대체하려는 <code>os.system</code>, <code>os.spawn*</code>, <code>os.popen*</code>, <code>popen2.*</code>, <code>commands.*</code>와 같은 함수 및 모듈은 하위 호환성 유지를 위해 향후 Python 버전에서도 오랫동안 사용 가능할 것으로 예상됩니다.</p>
<h3>참조 구현 (Reference Implementation)</h3>
<p>참조 구현은 <code>http://www.lysator.liu.se/~astrand/popen5/</code>에서 확인할 수 있습니다.</p>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인(Public Domain)에 있습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 324 - subprocess - New process module"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 18:31:27+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
