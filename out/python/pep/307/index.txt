3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/307","c"]
0:["jf5MDuRUbMNVvRN9tv5rq",[[["",{"children":[["slug","python/pep/307","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"307\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/307","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T4f2d,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0307/">PEP 307 - Extensions to the pickle protocol</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 31-Jan-2003</p>
</blockquote>
<h1>PEP 307 – pickle 프로토콜 확장</h1>
<h2>개요</h2>
<p>이 PEP는 Python 2.3에서 도입된 새로운 pickle 프로토콜을 설명하며, 기존 <code>new-style</code> 객체들의 <code>pickle</code> 처리 문제를 해결하고 <code>pickle</code> 크기를 최적화합니다. 주로 API 변경 사항에 중점을 두지만, 일부 바이트 스트림 형식 세부 사항도 다룹니다. <code>pickle</code> 바이트 스트림 형식은 <code>pickletools.py</code> 모듈에 공식적으로 문서화되어 있습니다.</p>
<h2>동기</h2>
<p>Python 2.2에서 <code>new-style</code> 객체를 <code>pickle</code>하는 것은 비효율적이었고, <code>classic</code> 클래스 인스턴스에 비해 <code>pickle</code> 크기가 과도하게 커지는 문제가 있었습니다. 예를 들어, 간단한 <code>new-style</code> 객체의 <code>pickle</code> 크기는 <code>classic</code> 객체보다 훨씬 컸습니다 (33바이트 vs 86바이트). 이러한 비대화는 <code>new-style</code> 객체가 <code>pickle</code> 가능하려면 <code>__reduce__</code>를 사용해야 했기 때문입니다. 새로운 프로토콜(프로토콜 2)을 도입함으로써, 이 문제는 해결되어 <code>pickle</code> 크기가 크게 줄어듭니다 (위 예시에서 35바이트).</p>
<h2>프로토콜 버전</h2>
<p>기존 <code>pickle</code> 프로토콜은 텍스트 모드와 바이너리 모드로 구분되었습니다. 이제 텍스트 모드는 프로토콜 0, 바이너리 모드는 프로토콜 1로 명명됩니다. 이 PEP에서 새로 소개하는 프로토콜은 프로토콜 2입니다. <code>pickle</code> 프로토콜의 전통에 따라 프로토콜 2는 프로토콜 1의 상위 집합입니다.</p>
<ul>
<li><strong>프로토콜 식별</strong>: 프로토콜 2 <code>pickle</code>은 시작 부분에 해당 프로토콜 버전을 나타내는 새로운 <code>opcode</code>를 포함합니다. 이는 이전 Python 버전에서 프로토콜 2 <code>pickle</code>을 <code>unpickle</code>하려고 할 경우 즉시 "알 수 없는 <code>opcode</code>" 예외를 발생시킵니다.</li>
<li><strong><code>protocol</code> 인자</strong>: <code>pickle</code> 관련 함수, 메서드, 생성자에서 바이너리 모드를 나타내던 <code>bin</code> 인자는 <code>protocol</code>로 이름이 변경되었고, 이제 프로토콜 번호를 받습니다 (기본값은 0).</li>
<li><strong>최고 프로토콜 버전</strong>: <code>-1</code>을 <code>protocol</code> 인자로 전달하면 해당 구현이 지원하는 가장 높은 프로토콜 버전을 선택할 수 있습니다. <code>pickle</code> 및 <code>cPickle</code> 모듈은 <code>HIGHEST_PROTOCOL</code> 상수를 제공하여 모듈이 읽을 수 있는 가장 높은 프로토콜 번호를 확인할 수 있습니다.</li>
<li><strong><code>bin</code> 키워드 인자 경고</strong>: <code>bin</code>을 키워드 인자로 전달하는 방식은 <code>PendingDeprecationWarning</code>이 발생하며 Python 2.4에서는 <code>DeprecationWarning</code>으로 격상될 예정입니다.</li>
</ul>
<h2>보안 문제</h2>
<p>이전 Python 버전에서는 <code>unpickle</code> 시 <code>__safe_for_unpickling__</code> 속성이 1로 설정되었거나 <code>copy_reg.safe_constructors</code>에 등록된 함수만 호출하도록 하는 "안전 검사" 기능이 있었습니다. 그러나 이 기능은 잘못된 보안 의식을 줄 수 있으며, 실제로 Python 2.2 <code>pickle.py</code> 모듈의 버그로 인해 우회될 수 있었습니다.</p>
<p>Python 2.3부터는 이러한 모든 안전 검사가 공식적으로 제거되었고, 다음과 같은 경고로 대체됩니다.</p>
<p><strong>경고</strong>: 신뢰할 수 없거나 인증되지 않은 소스에서 받은 데이터를 <code>unpickle</code>하지 마십시오.</p>
<p>이 경고는 안전 검사가 존재하는 이전 Python 버전에도 동일하게 적용됩니다.</p>
<h2>확장된 <code>__reduce__</code> API</h2>
<p>클래스가 <code>pickle</code>을 제어하기 위해 사용할 수 있는 여러 API가 있습니다. 가장 널리 사용되는 것은 <code>__getstate__</code>와 <code>__setstate__</code>이지만, 가장 강력한 것은 <code>__reduce__</code>입니다.</p>
<p><code>__reduce__</code> 기능은 클래스에서 <code>__reduce__</code> 메서드나 <code>__reduce_ex__</code> 메서드를 구현하거나, <code>copy_reg</code>에 <code>reduce</code> 함수를 선언하여 제공할 수 있습니다. 반환 값은 동일하게 해석됩니다.</p>
<p><strong>중요</strong>: <code>classic</code> 클래스 인스턴스의 <code>pickle</code>은 <code>__reduce__</code> 또는 <code>__reduce_ex__</code> 메서드를 찾지 않으므로, <code>classic</code> 클래스는 <code>__getinitargs__</code> 및/또는 <code>__getstate__</code>를 사용하여 <code>pickle</code>을 사용자 정의해야 합니다.</p>
<p><code>__reduce__</code>는 문자열 또는 튜플을 반환해야 합니다.</p>
<ul>
<li><strong>문자열 반환</strong>: 객체의 상태를 <code>pickle</code>하지 않고, 이름으로 참조되는 동등한 객체의 참조를 반환합니다. 반환되는 문자열은 객체의 로컬 이름이어야 합니다.</li>
<li><strong>튜플 반환</strong>: 길이가 2에서 5까지의 가변 크기 튜플입니다. 처음 두 항목(함수 및 인자)은 필수이며, 나머지 항목은 선택 사항입니다 (새로운 두 항목 포함).
<ol>
<li><strong><code>function</code> (필수)</strong>: 객체의 초기 버전을 생성하기 위해 호출되는 <code>callable</code> 객체입니다. 나중에 <code>state</code>를 추가하여 <code>pickle</code>된 상태를 완전히 재구성할 수 있습니다. 이 함수는 그 자체로 <code>pickle</code> 가능해야 합니다.</li>
<li><strong><code>arguments</code> (필수)</strong>: <code>function</code>에 대한 인자 목록을 제공하는 튜플입니다. <code>None</code>일 수도 있습니다 (Zope 2의 <code>ExtensionClass</code>를 위해 설계되었으나 <code>deprecated</code>).</li>
<li><strong><code>state</code> (선택 사항, <code>new in this PEP</code>)</strong>: 추가 상태입니다. <code>None</code>이 아니면 <code>state</code>가 <code>pickle</code>되고, <code>unpickle</code> 시 <code>obj.__setstate__(state)</code>가 호출됩니다. <code>__setstate__</code>가 정의되지 않으면 기본 구현은 <code>state</code>가 인스턴스 변수 이름을 값에 매핑하는 사전이라고 가정합니다.</li>
<li><strong><code>listitems</code> (선택 사항, <code>new in this PEP</code>)</strong>: <code>None</code>이 아니면 연속적인 리스트 항목을 생성하는 <code>iterator</code>여야 합니다. 이 항목들은 <code>pickle</code>되고 <code>obj.append(item)</code> 또는 <code>obj.extend(list_of_items)</code>를 사용하여 객체에 추가됩니다. 주로 리스트 서브클래스에 사용됩니다.</li>
<li><strong><code>dictitems</code> (선택 사항, <code>new in this PEP</code>)</strong>: <code>None</code>이 아니면 <code>(key, value)</code> 형태의 튜플로 구성된 연속적인 사전 항목을 생성하는 <code>iterator</code>여야 합니다. 이 항목들은 <code>pickle</code>되고 <code>obj[key] = value</code>를 사용하여 객체에 저장됩니다. 주로 딕셔너리 서브클래스에 사용됩니다.</li>
</ol>
</li>
</ul>
<p><strong>참고</strong>: Python 2.3부터 <code>__reduce__</code>가 <code>None</code> 값을 가진 <code>state</code>를 반환할 때 <code>unpickle</code> 시 <code>__setstate__</code>는 호출되지 않습니다.</p>
<p><code>__reduce__</code> 구현이 Python 2.2와 2.3 모두에서 작동해야 하는 경우, <code>pickle.format_version</code> 변수를 확인하여 <code>listitems</code> 및 <code>dictitems</code> 기능 지원 여부를 결정할 수 있습니다. 이 값이 <code>>= "2.0"</code>이면 지원됩니다.</p>
<h2><code>__reduce_ex__</code> API</h2>
<p><code>__reduce__</code>를 구현할 때 프로토콜 버전을 아는 것이 유용할 때가 있습니다. 이를 위해 <code>__reduce__</code> 대신 <code>__reduce_ex__</code> 메서드를 구현할 수 있습니다. <code>__reduce_ex__</code>는 존재할 경우 <code>__reduce__</code>보다 우선적으로 호출되며, 단일 정수 인자로 프로토콜 버전을 받습니다.</p>
<p><code>object</code> 클래스는 <code>__reduce__</code>와 <code>__reduce_ex__</code>를 모두 구현합니다. 하지만 서브클래스가 <code>__reduce__</code>만 오버라이드하고 <code>__reduce_ex__</code>는 오버라이드하지 않으면, <code>__reduce_ex__</code> 구현이 이를 감지하고 <code>__reduce__</code>를 호출합니다.</p>
<h2><code>__reduce__</code> 구현이 없는 경우 <code>pickle</code> 사용자 정의</h2>
<p>특정 클래스에 <code>__reduce__</code> 구현이 없는 경우, 세 가지 경우가 다르게 처리됩니다.</p>
<ol>
<li>
<p><strong><code>classic</code> 클래스 인스턴스, 모든 프로토콜</strong>:</p>
<ul>
<li><code>__reduce__</code>는 사용되지 않습니다. 대신 <code>__getstate__</code>, <code>__setstate__</code>, <code>__getinitargs__</code> 메서드를 통해 <code>pickle</code>을 사용자 정의할 수 있습니다.</li>
<li><strong><code>__getstate__</code></strong>: 객체 자체를 참조하지 않고 객체의 상태를 나타내는 <code>pickle</code> 가능한 값을 반환해야 합니다. 기본 구현은 <code>self.__dict__</code>를 반환합니다.</li>
<li><strong><code>__setstate__</code></strong>: <code>__getstate__</code> (또는 기본 구현)에 의해 반환된 값으로 호출됩니다. 기본 구현은 <code>state</code>가 인스턴스 변수 이름을 값에 매핑하는 사전이라고 가정합니다.</li>
<li><strong><code>__getinitargs__</code></strong>: <code>__setstate__</code>를 호출하기 전에 새 객체를 생성해야 합니다. <code>__getinitargs__</code> 메서드가 있을 경우, 이 메서드가 반환하는 튜플을 인자 목록으로 사용하여 클래스 생성자를 호출하여 인스턴스가 생성됩니다.</li>
</ul>
</li>
<li>
<p><strong><code>new-style</code> 클래스 인스턴스, 프로토콜 0 및 1</strong>:</p>
<ul>
<li>Python 2.2와 동일하게 변경되지 않았습니다.</li>
<li><code>object</code>에서 상속받은 기본 <code>__reduce__</code> 구현이 사용됩니다. 이 기본 <code>__reduce__</code>는 <code>copy_reg._reconstructor</code>를 <code>callable</code>로, <code>(D, B, basestate)</code>를 인자로 사용합니다.</li>
<li><code>__getstate__</code> 및/또는 <code>__setstate__</code> 메서드를 정의하여 사용자 정의할 수 있습니다. <code>__getstate__</code>가 <code>None</code>과 같이 <code>false</code>로 간주되는 값을 반환하면 <code>state</code>는 <code>pickle</code>되지 않고 <code>__setstate__</code>는 호출되지 않습니다.</li>
<li><code>slots</code>가 있는 <code>new-style</code> 클래스 인스턴스는 <code>__getstate__</code> 메서드가 없으면 프로토콜 0 및 1로 <code>pickle</code>될 수 없습니다.</li>
<li><code>__getinitargs__</code>는 무시됩니다.</li>
</ul>
</li>
<li>
<p><strong><code>new-style</code> 클래스 인스턴스, 프로토콜 2</strong>:</p>
<ul>
<li><code>object</code>에서 상속받은 기본 <code>__reduce__</code> 구현은 무시됩니다. 대신 다른 기본 구현이 사용되어 프로토콜 0 또는 1보다 <code>new-style</code> 클래스 인스턴스를 더 효율적으로 <code>pickle</code>할 수 있습니다.</li>
<li><code>__getstate__</code>, <code>__setstate__</code>, <code>__getnewargs__</code> 세 가지 특수 메서드를 사용하여 사용자 정의합니다. (<code>__getinitargs__</code>는 다시 무시됩니다.)</li>
<li><strong><code>__getstate__</code></strong>: <code>classic</code> 클래스와는 미묘한 차이가 있습니다. <code>new-style</code> 클래스의 <code>__getstate__</code>가 <code>None</code>을 반환하면 <code>unpickle</code> 시 <code>__setstate__</code>가 전혀 호출되지 않습니다.</li>
<li><strong><code>__setstate__</code></strong>: <code>__getstate__</code>가 반환하는 값 또는 위에서 설명한 기본 <code>state</code>로 호출됩니다.</li>
<li><strong><code>__getnewargs__</code></strong>: <code>__setstate__</code>를 호출하기 전에 새 객체를 생성해야 합니다. 프로토콜 2에서는 <code>C.__new__(C, *args)</code>와 같이 새 객체가 생성되도록 하는 새로운 <code>pickle</code> <code>opcode</code>가 사용됩니다. <code>args</code>는 <code>__getnewargs__</code> 메서드가 정의된 경우 반환되는 튜플입니다.</li>
</ul>
</li>
</ol>
<h2><code>__newobj__</code> <code>unpickling</code> 함수</h2>
<p><code>__reduce__</code>가 반환하는 <code>unpickling</code> 함수(튜플의 첫 번째 항목)의 이름이 <code>__newobj__</code>인 경우, <code>pickle</code> 프로토콜 2에서는 특별한 처리가 이루어집니다. <code>__newobj__</code>라는 이름의 <code>unpickling</code> 함수는 <code>cls.__new__(cls, *args)</code>와 같은 의미를 갖는다고 가정합니다.</p>
<p><code>pickle</code> 프로토콜 2는 이 이름의 <code>unpickling</code> 함수를 특별히 처리하여, <code>__newobj__</code>에 대한 참조를 <code>pickle</code>하지 않고 <code>cls.__new__(cls, *args)</code>를 반환하는 <code>pickle</code> <code>opcode</code>를 발행합니다. 이것이 프로토콜 2 <code>pickle</code>이 <code>classic</code> <code>pickle</code>보다 훨씬 작은 주된 이유입니다.</p>
<h2>확장 레지스트리 (Extension Registry)</h2>
<p>프로토콜 2는 <code>pickle</code> 크기를 줄이기 위한 새로운 메커니즘을 지원합니다. 클래스 인스턴스가 <code>pickle</code>될 때, 클래스의 전체 이름(모듈 이름, 패키지 이름, 클래스 이름 포함)이 <code>pickle</code>에 포함됩니다. 특히 많은 작은 <code>pickle</code>을 생성하는 애플리케이션의 경우, 이는 각 <code>pickle</code>에서 반복되어야 하는 많은 오버헤드를 유발합니다.</p>
<p>확장 레지스트리는 가장 자주 사용되는 이름을 작은 정수로 나타낼 수 있게 하여 매우 효율적으로 <code>pickle</code>됩니다. 1-255 범위의 확장 코드는 <code>opcode</code>를 포함하여 2바이트만 필요하며, 256-65535 범위는 <code>opcode</code>를 포함하여 3바이트만 필요합니다.</p>
<p>확장 레지스트리는 확장 코드와 이름 간의 매핑으로 정의됩니다. <code>unpickle</code>될 때 확장 코드는 객체를 생성하지만, 이 객체는 모듈 이름과 클래스(또는 함수) 이름으로 이름을 해석하여 얻습니다.</p>
<p>확장 코드 범위는 다음과 같이 제안됩니다.</p>
<ul>
<li><code>0</code>: 예약됨 (사용되지 않음)</li>
<li><code>1</code> - <code>127</code>: Python 표준 라이브러리용</li>
<li><code>128</code> - <code>191</code>: Zope용</li>
<li><code>192</code> - <code>239</code>: 서드파티용</li>
<li><code>240</code> - <code>255</code>: 사적 사용 (할당되지 않음)</li>
<li><code>256</code> - <code>MAX</code> (2^31 - 1): 향후 할당용</li>
</ul>
<h3>확장 레지스트리 API</h3>
<p>확장 레지스트리는 <code>copy_reg</code> 모듈의 private 전역 변수로 관리됩니다. 레지스트리를 조작하기 위해 다음 세 가지 함수가 정의됩니다.</p>
<ul>
<li><strong><code>add_extension(module, name, code)</code></strong>: 확장 코드를 등록합니다. <code>module</code>과 <code>name</code>은 문자열이어야 하며, <code>code</code>는 <code>1</code>부터 <code>MAX</code>까지의 정수여야 합니다.</li>
<li><strong><code>remove_extension(module, name, code)</code></strong>: 이전에 등록된 <code>(module, name)</code>과 <code>code</code> 간의 매핑을 제거합니다.</li>
<li><strong><code>clear_extension_cache()</code></strong>: 확장 코드 구현이 자주 명명되는 객체를 로드하는 속도를 높이기 위해 캐시를 사용할 수 있습니다. 이 메서드를 호출하여 캐시를 비울 수 있습니다.</li>
</ul>
<h2><code>copy</code> 모듈</h2>
<p>전통적으로 <code>copy</code> 모듈은 <code>copy()</code> 및 <code>deepcopy()</code> 작업을 사용자 정의하기 위한 <code>pickle</code> API의 확장된 서브셋을 지원했습니다. Python 2.3에서는 <code>copy</code> 모듈에 여러 변경 사항이 적용됩니다.</p>
<ul>
<li><code>__reduce_ex__</code>가 지원됩니다 (항상 프로토콜 버전 2로 호출됨).</li>
<li><code>__reduce__</code>의 4개 및 5개 인자 반환 값이 지원됩니다.</li>
<li><code>__reduce__</code> 메서드를 찾기 전에 <code>pickle</code>과 마찬가지로 <code>copy_reg.dispatch_table</code>을 참조합니다.</li>
<li><code>object</code>에서 <code>__reduce__</code> 메서드를 상속받은 경우, <code>pickle</code> 프로토콜 2와 동일한 API(<code>__getnewargs__</code>, <code>__getstate__</code>, <code>__setstate__</code>)를 사용하여 더 나은 구현으로 (무조건) 대체됩니다.</li>
</ul>
<p>이러한 변경으로 인해 Python 2.2에서 <code>copy</code> 가능했던 일부 <code>new-style</code> 클래스가 Python 2.3에서는 <code>copy</code> 불가능할 수 있습니다. 이는 <code>__new__</code>가 오버라이드되고 클래스 인자 외에 하나 이상의 필수 인자를 가질 때 발생합니다. 이를 해결하려면 적절한 인자 튜플을 반환하는 <code>__getnewargs__</code> 메서드를 추가해야 합니다.</p>
<h2>Python <code>long</code>s <code>pickle</code>링</h2>
<p>프로토콜 0과 1에서는 Python <code>long</code>s(<code>정수</code>)를 <code>pickle</code> 및 <code>unpickle</code>하는 데 자릿수에 따라 2차 시간 복잡도가 소요되었습니다. 프로토콜 2에서는 새로운 <code>opcode</code>가 선형 시간 복잡도로 <code>long</code>s를 <code>pickle</code> 및 <code>unpickle</code>할 수 있도록 지원합니다.</p>
<h2><code>bool</code>s <code>pickle</code>링</h2>
<p>프로토콜 2는 <code>True</code>와 <code>False</code>를 직접 <code>pickle</code>하기 위한 새로운 <code>opcode</code>를 도입합니다. 프로토콜 0과 1에서는 <code>bool</code>이 정수로 <code>pickle</code>되었고, 이는 <code>bool</code>당 4바이트를 소비했습니다. 새로운 <code>bool</code> <code>opcode</code>는 <code>bool</code>당 1바이트를 소비합니다.</p>
<h2>작은 튜플 <code>pickle</code>링</h2>
<p>프로토콜 2는 길이가 1, 2, 3인 튜플을 더 간결하게 <code>pickle</code>하기 위한 새로운 <code>opcode</code>를 도입합니다. 프로토콜 1에서는 빈 튜플을 더 간결하게 <code>pickle</code>하기 위한 <code>opcode</code>가 이전에 도입되었습니다.</p>
<h2>대규모 리스트 및 딕셔너리 <code>pickle</code>링</h2>
<p>프로토콜 1은 대규모 리스트와 딕셔너리를 "한 덩어리"로 <code>pickle</code>하여 <code>pickle</code> 크기를 최소화하지만, <code>unpickle</code> 시 <code>unpickle</code>되는 객체만큼 큰 임시 객체를 생성해야 했습니다. 프로토콜 2의 변경 사항 중 일부는 대규모 리스트와 딕셔너리를 최대 1000개의 요소로 구성된 조각으로 분할하여 <code>unpickle</code> 시 1000개의 요소를 담는 데 필요한 것보다 큰 임시 객체를 생성할 필요가 없도록 합니다.</p>
<hr>
<p>This concludes the translation and summary of PEP 307.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 307 - Extensions to the pickle protocol"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 18:10:28+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
