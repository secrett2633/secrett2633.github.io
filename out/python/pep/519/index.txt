3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/519","c"]
0:["jf5MDuRUbMNVvRN9tv5rq",[[["",{"children":[["slug","python/pep/519","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"519\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/519","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2f5f,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0519/">PEP 519 - Adding a file system path protocol</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 11-May-2016</p>
</blockquote>
<p>다음은 Python Enhancement Proposal (PEP) 519, "Adding a file system path protocol"의 내용 요약 및 번역입니다. 이 PEP는 파일 시스템 경로를 나타내는 객체들이 <code>str</code> 또는 <code>bytes</code> 표현을 제공할 수 있는 프로토콜을 제안하며, 기존 <code>str</code> 및 <code>bytes</code> 경로만 허용하던 Python 표준 라이브러리 API들이 이러한 경로 객체를 활용할 수 있도록 업데이트하는 것을 목표로 합니다.</p>
<hr>
<h1>PEP 519 – 파일 시스템 경로 프로토콜 추가</h1>
<h2>요약 (Abstract)</h2>
<p>이 PEP는 파일 시스템 경로를 나타내는 클래스들이 <code>str</code> 또는 <code>bytes</code> 표현을 제공할 수 있는 프로토콜을 제안합니다. 또한, 기존에는 <code>str</code> 및/또는 <code>bytes</code> 파일 시스템 경로만 허용했던 Python 표준 라이브러리의 변경 사항들을 제안하여, 경로 객체(path objects)의 사용을 용이하게 합니다. 목표는 사용자들이 풍부한 경로 객체로 전환하도록 돕는 동시에, <code>str</code> 또는 <code>bytes</code>를 기대하는 코드와 쉽게 작업할 수 있는 방법을 제공하는 것입니다.</p>
<h2>도입 배경 (Rationale)</h2>
<p>과거 Python에서 파일 시스템 경로는 주로 문자열(strings) 또는 바이트(bytes)로 표현되었습니다. 이는 C 언어에서 파일 시스템 경로를 <code>const char *</code>로 표현하는 방식에서 비롯된 것입니다. 이러한 방식은 사용할 수 있지만, 모든 <code>str</code> 또는 <code>bytes</code>가 유효한 파일 시스템 경로를 나타내는 것은 아니라는 문제가 있습니다. 예를 들어, 아무 문자열이나 경로처럼 동작하게 만들 수 있어 혼란을 야기할 수 있습니다.</p>
<p>Python 3.4에서는 PEP 428을 통해 <code>pathlib</code> 모듈이 도입되어 파일 시스템 경로를 더 풍부한 객체 표현으로 격상시키려 했습니다. 그러나 <code>pathlib</code>는 표준 라이브러리 내에서의 지원 부족으로 인해 채택률이 낮았습니다. <code>pathlib</code> 사용자는 경로 객체를 <code>str(path)</code>와 같이 수동으로 문자열로 변환해야 했으며, 이는 오류 발생 가능성이 높다고 여겨졌습니다.</p>
<p><code>str()</code> 함수를 통한 변환의 문제는 거의 모든 Python 객체가 문자열 표현을 가지고 있어, 실제 경로가 아닌 객체도 <code>str()</code>을 통해 문자열로 변환될 수 있다는 점입니다(예: <code>str(None)</code>이 <code>builtins.open()</code>에 사용될 수 있음). 또한, <code>os.DirEntry</code> 객체는 <code>path</code> 속성을 통해 경로를 노출하는 반면, <code>pathlib</code> 객체는 직접적인 공통 인터페이스가 없어 불편함이 있었습니다. 이러한 문제들을 해결하기 위해, 모든 경로 표현 객체가 자신이 경로임을 명시하고, 낮은 수준의 표현(low-level representation)을 추출할 수 있는 공통 인터페이스, 즉 새로운 프로토콜이 필요하게 되었습니다.</p>
<h2>제안 (Proposal)</h2>
<p>이 PEP의 제안은 두 가지 부분으로 나뉩니다. 첫째는 객체가 파일 시스템 경로 표현을 선언하고 제공하기 위한 프로토콜 제안이고, 둘째는 이 새로운 프로토콜을 지원하기 위한 Python 표준 라이브러리의 변경 사항입니다. 이 변경 사항들은 <code>pathlib</code> 모듈의 임시(provisional) 상태를 해제하는 결과로 이어질 것입니다.</p>
<h3>프로토콜 (Protocol)</h3>
<p>파일 시스템 경로 객체로 간주될 객체는 다음 추상 기본 클래스(<code>abc.ABC</code>)로 정의된 프로토콜을 구현해야 합니다.</p>
<pre><code class="language-python">import abc
import typing as t

class PathLike(abc.ABC):
    """파일 시스템 경로 프로토콜을 구현하기 위한 추상 기본 클래스."""
    @abc.abstractmethod
    def __fspath__(self) -> t.Union[str, bytes]:
        """객체의 파일 시스템 경로 표현을 반환합니다."""
        raise NotImplementedError
</code></pre>
<p><code>__fspath__()</code> 메서드는 경로의 <code>str</code> 또는 <code>bytes</code> 표현을 반환해야 합니다. <code>str</code> 표현은 인간이 읽기 쉽고 역사적으로 경로를 표현하는 방식이었기 때문에 선호되는 낮은 수준의 경로 표현입니다.</p>
<h3>표준 라이브러리 변경 (Standard library changes)</h3>
<p>Python 표준 라이브러리에서 파일 시스템 경로를 허용하는 대부분의 API는 경로 객체를 수용하도록 업데이트될 예정입니다.</p>
<ul>
<li>
<p><strong><code>builtins</code></strong>:</p>
<ul>
<li><code>open()</code> 함수는 경로 객체를 허용하도록 업데이트됩니다.</li>
</ul>
</li>
<li>
<p><strong><code>os</code></strong>:</p>
<ul>
<li><code>os.fspath()</code> 함수가 추가됩니다. 이 함수는 <code>PathLike</code> 객체, <code>str</code>, <code>bytes</code>를 인자로 받아 <code>str</code> 또는 <code>bytes</code> 표현을 반환합니다. <code>str</code> 또는 <code>bytes</code>가 인자로 들어오면 그대로 반환하고, <code>__fspath__()</code>가 <code>str</code> 또는 <code>bytes</code>가 아닌 다른 것을 반환하면 <code>TypeError</code>를 발생시킵니다.</li>
</ul>
<pre><code class="language-python">import typing as t
def fspath(path: t.Union[PathLike, str, bytes]) -> t.Union[str, bytes]:
    # ... 구현 세부 사항 ...
    pass
</code></pre>
<ul>
<li><code>os.fsencode()</code> 및 <code>os.fsdecode()</code> 함수는 경로 객체를 허용하도록 업데이트됩니다. 이 함수들은 <code>__fspath__()</code>를 호출하여 경로 객체를 <code>str</code> 또는 <code>bytes</code>로 변환한 다음, 기존의 인코딩/디코딩 작업을 수행합니다.</li>
<li><code>os.DirEntry</code> 객체는 <code>__fspath__()</code> 메서드를 가지게 되며, 이는 현재 <code>path</code> 속성과 동일한 값을 반환합니다.</li>
<li><code>PathLike</code> 추상 기본 클래스는 <code>os.PathLike</code>라는 이름으로 <code>os</code> 모듈에 추가됩니다.</li>
</ul>
</li>
<li>
<p><strong><code>os.path</code></strong>:</p>
<ul>
<li><code>os.path</code>의 다양한 경로 조작 함수들은 경로 객체를 허용하도록 업데이트됩니다. 다형적인 함수(bytes와 strings를 모두 허용하는)의 경우, 단순히 <code>os.fspath()</code>를 사용하도록 업데이트됩니다.</li>
</ul>
</li>
<li>
<p><strong><code>pathlib</code></strong>:</p>
<ul>
<li><code>pathlib.PurePath</code> 및 <code>pathlib.Path</code>의 생성자는 <code>PathLike</code> 객체를 허용하도록 업데이트됩니다. <code>bytes</code> 경로 표현은 계속해서 허용하지 않으므로, <code>__fspath__()</code>가 <code>bytes</code>를 반환하면 예외가 발생합니다.</li>
<li><code>path</code> 속성은 이 PEP에 의해 중복되므로 제거됩니다. (이 속성은 어떤 출시된 Python 버전에도 포함되지 않았으므로 하위 호환성 문제는 없습니다.)</li>
</ul>
</li>
</ul>
<h3>C API</h3>
<p>C API는 <code>os.fspath()</code>와 동등한 <code>PyOS_FSPath()</code> 함수를 얻게 됩니다.</p>
<h2>하위 호환성 (Backwards compatibility)</h2>
<p>명시적인 하위 호환성 문제는 없습니다. 객체가 우연히 <code>__fspath__()</code> 메서드를 이미 정의하고 있지 않는 한, 기존 코드가 중단되거나 의미가 암묵적으로 변경될 것으로 예상할 이유가 없습니다.</p>
<p>Python 3.6 이전 버전에서 경로 객체를 지원하려는 라이브러리는 <code>if hasattr(path, "__fspath__") else path</code>와 같은 관용구를 사용하여 <code>path.__fspath__()</code>를 호출할 수 있습니다.</p>
<h2>구현 (Implementation)</h2>
<p>이 PEP에서 Python 3.6에 제안된 주요 변경 사항들은 다음과 같습니다 (대부분 완료됨):</p>
<ul>
<li><code>pathlib</code>에서 <code>path</code> 속성 제거</li>
<li><code>pathlib</code>의 임시 상태 제거</li>
<li><code>os.PathLike</code> 추가</li>
<li><code>PyOS_FSPath()</code> 추가</li>
<li><code>os.fspath()</code> 추가</li>
<li><code>os.fsencode()</code> 및 <code>os.fsdecode()</code> 업데이트</li>
<li><code>pathlib.PurePath</code> 및 <code>pathlib.Path</code> 업데이트 (<code>__fspath__()</code> 추가 및 생성자에 <code>os.PathLike</code> 지원 추가)</li>
<li><code>DirEntry</code>에 <code>__fspath__()</code> 추가</li>
<li><code>builtins.open()</code> 업데이트</li>
<li><code>os.path</code> 업데이트</li>
<li>"path-like"에 대한 용어집 항목 추가</li>
<li>"What's New" 문서 업데이트</li>
</ul>
<h2>거부된 아이디어 (Rejected Ideas)</h2>
<ul>
<li><strong>프로토콜 메서드의 다른 이름:</strong> <code>__path__</code>, <code>__pathname__</code>, <code>__fspathname__</code> 등이 제안되었으나, <code>__fspath__</code>가 불필요하게 길지 않으면서 모호하지 않다는 이유로 선택되었습니다.</li>
<li><strong>별도의 <code>str</code>/<code>bytes</code> 메서드:</strong> <code>__fspath__()</code>가 <code>str</code>만 반환하고 <code>bytes</code>를 반환하는 <code>__fspathb__()</code>를 별도로 두자는 제안도 있었으나, <code>bytes</code> 반환이 드물고 <code>os</code> 모듈의 함수들이 더 나은 추상화를 제공한다고 판단되어 거부되었습니다.</li>
<li><strong><code>__fspath__()</code>가 <code>str</code>만 반환:</strong> <code>bytes</code>가 인코딩 정보가 부족하여 다루기 어렵다는 점과 PEP 383의 <code>surrogateescape</code>를 통해 모든 파일 시스템 경로를 <code>str</code>로 표현할 수 있다는 이유로 <code>str</code>만 반환하도록 하자는 논의가 있었습니다. 그러나 <code>bytes</code>를 통한 경로 표현이 완전히 사라지지 않을 것이며, <code>pathlib</code>와 같은 경로 객체를 사용하는 방향으로 유도하는 것이 더 바람직하다고 결론 내려졌습니다.</li>
<li><strong><code>__fspath__</code>가 속성(attribute)으로:</strong> 메서드가 아닌 속성으로 구현하자는 아이디어는 프로토콜이 주로 "매직 메서드"로 구현되어 왔고, 경로 객체의 낮은 수준 표현이 항상 미리 계산되어 있을 것이라는 보장이 없어 사용자에게 오해를 줄 수 있다는 이유로 거부되었습니다.</li>
<li><strong><code>os.fspathb()</code> 제공:</strong> <code>os.getcwd()</code> / <code>os.getcwdb()</code>와 같은 구조를 따르기 위해 <code>os.fspath()</code>가 <code>str</code>만 반환하고 <code>bytes</code>만 반환하는 <code>os.fspathb()</code>를 도입하자는 제안도 있었으나, 이 PEP가 파일 시스템의 데이터와 직접적으로 작업하지 않는다는 점을 고려하여 불필요하다고 판단되었습니다. <code>os.fsencode()</code>가 유사한 기능을 제공할 것입니다.</li>
</ul>
<hr>
<p>이 PEP는 Python이 파일 시스템 경로를 다루는 방식에 있어 중요한 전환점을 마련했습니다. <code>pathlib</code>와 같은 풍부한 경로 객체의 사용을 장려하고, 기존 <code>str</code>/<code>bytes</code> 기반 API와의 상호 운용성을 강화하여 Python 개발자들이 더욱 견고하고 유연한 파일 시스템 관련 코드를 작성할 수 있도록 돕습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 519 - Adding a file system path protocol"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 23:13:13+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
