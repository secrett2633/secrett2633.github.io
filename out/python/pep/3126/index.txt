3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/3126","c"]
0:["qNOrJYeuqip9qCFPpDVpu",[[["",{"children":[["slug","python/pep/3126","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3126\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3126","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2f51,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3126/">PEP 3126 - Remove Implicit String Concatenation</a></p>
<p><strong>상태:</strong> Rejected | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 29-Apr-2007</p>
</blockquote>
<p>PEP 3126 – 암시적 문자열 연결 제거 (Remove Implicit String Concatenation)</p>
<h2>개요</h2>
<p>이 문서는 Python 3000(Python 3의 초기 개발 단계 명칭)의 목표 중 하나인 불필요한 기능을 제거하여 언어를 단순화하는 데 기여하기 위해 작성되었습니다. Python은 C 언어에서 많은 파싱 규칙을 물려받았지만, 그 중 일부는 Python에 덜 유용하며 제거되어야 한다고 제안되었습니다.</p>
<p>PEP 3126은 리터럴(literal)의 인접성(adjacency)에만 기반한 암시적 문자열 연결(implicit string concatenation)을 제거할 것을 제안합니다.</p>
<p><strong>현재 (제안 전):</strong></p>
<pre><code class="language-python">"abc" "def" == "abcdef"
</code></pre>
<p><strong>제안된 변경 후:</strong>
개발자들은 문자열을 명시적으로 연결해야 합니다.</p>
<pre><code class="language-python">"abc" + "def" == "abcdef"
</code></pre>
<p>또는 <code>join</code> 메서드를 사용할 수 있습니다.</p>
<pre><code class="language-python">"".join(["abc", "def"]) == "abcdef"
</code></pre>
<h2>상태: 거부됨 (Rejected)</h2>
<p>이 PEP는 충분한 지지를 얻지 못했고, 제거하려는 기능이 그렇게 해롭지 않으며, 일부 사용 사례에서는 오히려 어려워질 수 있다는 이유로 거부되었습니다.</p>
<h2>동기 (Motivation)</h2>
<p>Python 3000의 목표 중 하나는 불필요한 기능을 제거하여 언어를 단순화하는 것입니다. 암시적 문자열 연결은 기존의 다른 기술들(<code>+</code> 연산자나 <code>"".join()</code>)을 사용하는 방향으로 제거되어야 합니다. 이는 문법(grammar)을 단순화하고 사용자가 Python에 대해 가지는 '머릿속 그림(mental picture)'을 단순화할 것입니다. 많은 현 Python 사용자들은 암시적 연결에 대해 알지 못하며, 아는 사용자 중 상당수는 이를 사용하지 않거나 의도적으로 피합니다. 이 기능을 알고 사용하는 사람들조차 암시적 연산자의 우선순위나 컴파일 시점/실행 시점 계산 조건에 대해 확신 있게 설명하기 어렵습니다.</p>
<h2>문제점 (Problem)</h2>
<p>암시적 문자열 연결은 겉보기보다 짧은 튜플(tuple)이나 리스트(list)를 초래하여 혼란스럽거나 심지어 조용한(silent) 오류를 유발할 수 있습니다.</p>
<p><strong>예시 1: <code>TypeError</code> 발생</strong></p>
<pre><code class="language-python">def f(fmt, *args):
    print fmt % args

# 유효해 보이지만, 실제로는 "Bob"과 "Time for dinner"가 암시적으로 연결됩니다.
# f("User %s got a message %s", "Bob" "Time for dinner")
# Traceback (most recent call last):
#   ...
# TypeError: not enough arguments for format string
</code></pre>
<p>위 예시에서 <code>"Bob" "Time for dinner"</code>는 하나의 문자열 <code>"BobTime for dinner"</code>로 연결되어 <code>args</code> 튜플에 하나의 요소만 포함하게 됩니다. 따라서 포맷 문자열에 필요한 두 개의 인수가 제공되지 않아 <code>TypeError</code>가 발생합니다.</p>
<p><strong>예시 2: 조용한 오류 (Silent Error)</strong></p>
<pre><code class="language-python">def g(arg1, arg2=None):
    pass # 실제로는 "arg1 on this linearg2 on this line", None으로 변환됨
g("arg1 on this line" "arg2 on this line")
</code></pre>
<p>이 경우, 두 문자열 리터럴이 암시적으로 연결되어 <code>g</code> 함수는 예상과 다른 단일 문자열 인수를 받게 됩니다. 이는 디버깅하기 어려운 조용한 오류를 야기할 수 있습니다.</p>
<p><strong>Jason Orendorff의 인용:</strong>
Scons와 같은 빌드 시스템에서 파일명 리스트를 정의할 때 쉼표를 빼먹는 흔한 실수가 있습니다.</p>
<pre><code class="language-python">sourceFiles = [
    'foo.c'
    'bar.c', # 쉼표 누락
    'q1000x.c'
]
</code></pre>
<p>이 경우 <code>'foo.cbar.c'</code> 파일을 찾을 수 없다는 오류가 발생하여 혼란을 줄 수 있습니다.</p>
<h2>해결책 (Solution)</h2>
<p>Python에서 문자열은 객체이며 <code>__add__</code> 연산자를 지원하므로, <code>+</code> 연산자를 사용하여 명시적으로 문자열을 연결할 수 있습니다.</p>
<pre><code class="language-python">"abc" + "def"
</code></pre>
<p>리터럴의 경우, 이 덧셈 연산은 컴파일러에 의해 최적화될 수 있으며, CPython 컴파일러는 이미 그렇게 하고 있습니다.</p>
<p>다른 기존 대안으로는 여러 줄 문자열(triple-quoted strings)과 <code>join</code> 메서드가 있습니다.</p>
<pre><code class="language-python">"""이 문자열은 여러 줄에 걸쳐 있습니다. 선행 공백을 제거하거나 재포맷하려면 Textwrap.dedent와 같은 것을 사용할 수 있습니다."""

>>> "".join(["empty", "string", "joiner"]) == "emptystringjoiner"
True
>>> " ".join(["space", "string", "joiner"]) == "space string joiner"
True
>>> "\n".join(["multiple", "lines"]) == "multiple\nlines" == ( """multiple
lines""") # 예시 오류: 원문 그대로 번역했지만, 실제로 """multiple\nlines"""와 일치하지 않습니다.
True
</code></pre>
<h2>우려 사항 (Concerns)</h2>
<h3>연산자 우선순위 (Operator Precedence)</h3>
<p>Guido van Rossum은 이 변경이 <code>%</code>와 같은 다른 문자열 연산자와의 몇 가지 엣지 케이스 때문에 PEP로 다루어져야 한다고 언급했습니다. (참고: <code>str %</code>는 PEP 3101 – Advanced String Formatting에 의해 제거될 수 있습니다.)</p>
<p>해결책은 괄호를 사용하여 우선순위를 명시하는 것입니다. 이는 현재도 사용 가능한 방법입니다.</p>
<pre><code class="language-python"># 가장 명확하며, 현재 작동하고 계속 작동하며, 이미 최적화가 가능합니다.
("abc %s def" + "ghi") % var

# 현재 이미 작동합니다. 우선순위 때문에 최적화를 인식하기는 더 어렵지만, 의미는 변하지 않습니다.
"abc" + "def %s ghi" % var
</code></pre>
<p><strong>과거와 미래의 변경:</strong></p>
<pre><code class="language-python"># 모듈러스(%)가 덧셈(+)보다 우선순위가 높기 때문에 이미 실패합니다.
# ("abc %s def" + "ghi" % var)

# 인접성(adjacency)이 모듈러스보다 우선순위가 높기 때문에 현재만 작동합니다.
# 이 기능은 더 이상 사용할 수 없게 될 것입니다.
# "abc %s" "def" % var

# 따라서 2 to 3 변환기는 이를 (이미 유효한):
# ("abc %s" + "def") % var
# 로 자동으로 대체할 수 있습니다.
</code></pre>
<h3>긴 명령 (Long Commands)</h3>
<p>SQL 쿼리와 같이 긴 명령을 가독성 있게 작성하는 데 암시적 연결이 사용되곤 했습니다.</p>
<pre><code class="language-python">rows = self.executesql("select cities.city, state, country"
                       " from cities, venues, events, addresses"
                       " where cities.city like %s"
                       " and events.active = 1"
                       " and venues.address = addresses.id"
                       " and addresses.city = cities.id"
                       " and events.venue = venues.id", (city,))
</code></pre>
<p>대안으로는 여러 줄 문자열(triple-quoted strings), <code>+</code> 연산자, 그리고 <code>.join</code> 메서드가 있습니다.</p>
<pre><code class="language-python">query="""select cities.city, state, country from cities, venues, events, addresses where cities.city like %s and events.active = 1" and venues.address = addresses.id and addresses.city = cities.id and events.venue = venues.id"""

query=( "select cities.city, state, country"
      + " from cities, venues, events, addresses"
      + " where cities.city like %s"
      + " and events.active = 1"
      + " and venues.address = addresses.id"
      + " and addresses.city = cities.id"
      + " and events.venue = venues.id"
      )

query="\n".join(["select cities.city, state, country",
                 " from cities, venues, events, addresses",
                 " where cities.city like %s",
                 " and events.active = 1",
                 " and venues.address = addresses.id",
                 " and addresses.city = cities.id",
                 " and events.venue = venues.id"])

# 위의 어떤 쿼리 문자열도 원래 방식과 동일하게 인라인(inline)으로 사용할 수 있습니다.
rows = self.executesql(query, (city,))
</code></pre>
<h3>정규 표현식 (Regular Expressions)</h3>
<p>복잡한 정규 표현식은 각 구성 요소가 다른 줄에 있고 주석이 뒤따르는 여러 암시적으로 연결된 문자열로 작성되기도 했습니다. <code>+</code> 연산자를 삽입할 수 있지만, 이는 정규 표현식의 가독성을 저해할 수 있습니다. 대안으로는 <code>re.VERBOSE</code> 옵션을 사용하거나 <code>+=</code>를 사용하여 정규 표현식을 구성하는 방법이 있습니다.</p>
<pre><code class="language-python"># 암시적 연결에 의존하는 기존 관용구
r = ('a{20}' # Twenty A's
     'b{5}'  # Followed by Five B's
    )

# 기계적 대체 (이미 작동함)
r = ('a{20}' + # Twenty A's
     'b{5}'  # Followed by Five B's
    )

# re.VERBOSE 플래그와 함께 컴파일되는 여러 줄 문자열 (이미 작동함)
r = '''a{20} # Twenty A's
b{5} # Followed by Five B's
'''

# +=를 사용하여 구성 (이미 작동함)
r = 'a{20}' # Twenty A's
r += 'b{5}' # Followed by Five B's
</code></pre>
<h3>국제화 (Internationalization)</h3>
<p><code>xgettext</code>와 같은 일부 국제화 도구는 암시적 연결에 대해 특별히 처리되어 왔지만, Python의 명시적 연결에 대해서는 그렇지 않습니다.
이러한 도구들은 (이미 유효한) <code>_("some string" + " and more of it")</code>와 같은 형태의 문자열을 추출하지 못하지만, <code>_("some string" " and more of it")</code>와 같은 형태에 대해서는 특별한 처리 기능이 있는 경우가 많습니다.</p>
<p>매우 긴 줄을 사용하거나 여러 줄 문자열을 사용하는 방법도 있지만, 이러한 해결책은 코드의 가독성을 일부 희생합니다.</p>
<pre><code class="language-python"># 특정 길이 이상의 줄은 불편합니다.
_("some string and more of it")

# 공백 변경은 이상적이지 않습니다.
_("""Some string and more of it""")
_("""Some string
and more of it""")
_("Some string \
and more of it")
</code></pre>
<p>이 문제에 대한 좋은 단기적인 해결책은 없다고 언급되었습니다.</p>
<h2>전환 (Transition)</h2>
<p>제안된 새로운 구성(명시적 <code>+</code> 연산이나 <code>join</code> 메서드 사용)은 현재 Python에서도 유효하며 즉시 사용할 수 있습니다.
2 to 3 변환기(translator)는 <code>("str1" "str2")</code>와 같은 형태를 <code>("str1" + "str2")</code>로, <code>("line1" #comment "line2")</code>와 같은 형태를 <code>("line1" + #comments "line2")</code>로 기계적으로 변경하도록 만들 수 있습니다. 사용자가 다른 관용구를 사용하려면 Python 2에서도 이미 유효하므로, 변환기를 패치하는 대신 원본 소스에서 직접 편집할 수 있습니다.</p>
<h2>열린 문제 (Open Issues)</h2>
<p>외부 텍스트 추출 도구, 특히 <code>xgettext</code>를 더 잘 지원할 수 있는 방법이 있는가?</p>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인(public domain)에 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Rejected] PEP 3126 - Remove Implicit String Concatenation"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:30:11+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
