3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-ce60b0a6591d04ed.js"],""]
4:["slug","python/pep/364","c"]
0:["e6YNzZ2BVZ8NBZ6boXfWj",[[["",{"children":[["slug","python/pep/364","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"364\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/364","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T374e,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0364/">PEP 364 - Transitioning to the Py3K Standard Library</a></p>
<p><strong>상태:</strong> Withdrawn | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 01-Mar-2007</p>
</blockquote>
<h1>PEP 364 – Py3K 표준 라이브러리로의 전환 (Transitioning to the Py3K Standard Library)</h1>
<ul>
<li><strong>작성자:</strong> Barry Warsaw </li>
<li><strong>상태:</strong> 철회됨 (Withdrawn)</li>
<li><strong>유형:</strong> Standards Track</li>
<li><strong>생성일:</strong> 2007년 3월 1일</li>
<li><strong>Python 버전:</strong> 2.6</li>
</ul>
<h2>개요 (Abstract)</h2>
<p>PEP 3108은 Python 3.0 릴리스를 위한 Python 표준 라이브러리(Standard Library)의 재구성(reorganization)을 설명합니다. 이 PEP는 Python 2.x 표준 라이브러리에서 Python 3.0 표준 라이브러리로 전환하기 위한 메커니즘을 기술합니다. 이 전환을 통해 Python 개발자들은 Python 2.6부터 새로운 Python 3.0 라이브러리 이름을 사용하도록 장려받으면서도, 하위 호환성(backward compatibility)을 위해 이전 이름도 유지할 수 있게 됩니다. 이러한 방식으로 Python 개발자들은 기존 Python 프로그램과의 상호 운용성(interoperability)을 희생하지 않고도 미래 호환(forward compatible) 가능한 코드를 작성할 수 있습니다.</p>
<h2>배경 (Rationale)</h2>
<p>PEP 3108은 Python 표준 라이브러리(stdlib) 재구성에 대한 배경을 제시합니다. 독자들은 라이브러리가 왜 그리고 어떻게 재구성될지에 대한 자세한 내용을 위해 해당 PEP를 참조하는 것이 좋습니다. PEP 3108이 부분적으로 또는 전체적으로 수용된다면, Python 개발자들이 Python 2.x에서 새로운 stdlib 모듈 이름으로의 전환을 시작할 수 있도록 허용하는 것이 유리하며, 이를 통해 Python 2.6부터 미래 호환 가능한 코드를 작성할 수 있습니다.</p>
<p>PEP 3108은 더 이상 유용하지 않거나 필요 없는 일부 "오래된 불필요한 것들" (silly old stuff), 즉 모듈들을 제거할 것을 제안합니다. 이 PEP는 제거될 모듈에 대해서는 미래 호환성 문제가 없으므로 다루지 않습니다.</p>
<p>이 PEP는 오직 이전 stdlib 이름에서 새로운 stdlib 이름으로의 매핑(mapping)을 유지하는 메커니즘에만 관련됩니다. 모든 특정 모듈 이름 변경 제안에 대해서는 PEP 3108을 참조하십시오. 특히 이전 이름에서 새 이름으로의 매핑에 대한 지침은 "Modules to Rename" 섹션을 참조하십시오. 이 PEP에 있는 몇 가지 예시는 설명 목적으로만 제공되며, 특정 이름 변경 권장 사항으로 사용해서는 안 됩니다.</p>
<h2>지원되는 이름 변경 (Supported Renamings)</h2>
<p>이 PEP에서 명시적으로 지원하는 사용 사례는 최소 4가지입니다:</p>
<ul>
<li><code>StringIO</code>를 <code>stringio</code>와 같이 단순한 최상위 패키지 이름 변경.</li>
<li><code>email.MIMEText</code>를 <code>email.mime.text</code>와 같이 패키지 이름이 변경될 수도 있고 그렇지 않을 수도 있는 서브패키지(Sub-package) 이름 변경.</li>
<li><code>cStringIO</code>를 <code>cstringio</code>와 같이 확장 모듈(Extension module) 이름 변경.</li>
<li>위의 어떤 경우든 서드파티(Third-party) 모듈의 이름 변경.</li>
</ul>
<p>이 PEP에서 지원하는 두 가지 사용 사례는 <code>StringIO</code>와 같은 단순한 최상위 모듈 이름 변경과 <code>email.MIMEText</code>와 같은 패키지 내 모듈 이름 변경을 포함합니다.</p>
<p>전자의 경우, PEP 3108은 현재 PEP 8 권장 사항에 따라 <code>StringIO</code>를 <code>stringio</code>로 변경할 것을 권장합니다.</p>
<p>후자의 경우, Python 2.5와 함께 배포된 <code>email</code> 4.0 패키지는 이미 <code>email.MIMEText</code>를 <code>email.mime.text</code>로 변경했지만, 이는 <code>email</code> 패키지 내에서 일회성으로 "해킹"과 같은 방식으로 이루어졌습니다. 이 PEP에서 설명하는 메커니즘은 모든 모듈 이름 변경을 처리할 수 있을 만큼 일반적이므로, Python 2.5의 "해킹" (이전 Python 버전과의 하위 호환성을 제외하고)의 필요성을 없앱니다.</p>
<p>추가적인 사용 사례는 C 확장 모듈(C extension modules)의 이름 변경을 지원하는 것입니다. C 모듈의 새 이름이 임포트(import) 가능하다면, 새 이름으로 재매핑(remapping)될 수 있습니다. 예를 들어, <code>cStringIO</code>가 <code>cstringio</code>로 이름 변경됩니다.</p>
<p>서드파티 패키지(Third-party package) 이름 변경도 지원되며, 이는 모든 Python 모듈에서 접근 가능한 여러 공개 인터페이스를 통해 이루어집니다.</p>
<p>재매핑은 재귀적으로(recursively) 수행되지 않습니다.</p>
<h2><code>.mv</code> 파일 ( .mv files)</h2>
<p>재매핑 파일은 <code>.mv</code> 파일이라고 불립니다. 이 접미사는 Unix의 <code>mv(1)</code> 명령어를 연상시키도록 선택되었습니다. <code>.mv</code> 파일은 단순한 줄 단위(line-oriented) 텍스트 파일입니다. 모든 빈 줄과 <code>#</code>으로 시작하는 줄은 무시됩니다. 다른 모든 줄은 두 개의 공백으로 구분된 필드를 포함해야 합니다. 첫 번째 필드는 이전 모듈 이름이고, 두 번째 필드는 새 모듈 이름입니다. 두 모듈 이름 모두 전체 점으로 구분된 경로 이름(full dotted-path names)을 사용하여 지정되어야 합니다. 다음은 Python 2.6의 <code>.mv</code> 파일 예시입니다:</p>
<pre><code># Map the various string i/o libraries to their new names
StringIO stringio
cStringIO cstringio
</code></pre>
<p><code>.mv</code> 파일은 파일 시스템 어디에든 나타날 수 있으며, 이를 파싱(parse)하고 그 안에 있는 재매핑을 등록하기 위한 프로그래밍 인터페이스(programmatic interface)가 제공됩니다. 기본적으로 Python이 시작될 때, <code>oldlib</code> 패키지 내의 모든 <code>.mv</code> 파일이 읽히고, 해당 재매핑이 자동으로 등록됩니다. 이곳이 최상위 Python 2.x 표준 라이브러리 모듈에 대한 모든 모듈 재매핑이 지정되어야 하는 곳입니다.</p>
<h2>구현 명세 (Implementation Specification)</h2>
<p>이 섹션에서는 Python 2.x에서 모듈 이름 변경이 어떻게 구현되는지에 대한 완전한 명세를 제공합니다. 핵심 메커니즘은 PEP 302에 설명된 다양한 임포트 훅(import hooks)에 의존합니다. 특히 <code>sys.path_importer_cache</code>, <code>sys.path</code>, 그리고 <code>sys.meta_path</code>가 모두 필요한 기능을 제공하는 데 사용됩니다.</p>
<p>Python의 임포트 메커니즘이 초기화될 때, <code>oldlib</code> 패키지가 임포트됩니다. <code>oldlib</code> 내부에는 <code>OldStdlibLoader</code>라는 클래스가 있습니다. 이 클래스는 PEP 302 인터페이스를 구현하며, 인자 없이 자동으로 인스턴스화됩니다. 생성자(constructor)는 <code>oldlib</code> 패키지 디렉토리에서 모든 <code>.mv</code> 파일을 읽고, 해당 <code>.mv</code> 파일에서 찾은 모든 재매핑을 자동으로 등록합니다. 이것이 Python 2.x 표준 라이브러리가 재매핑되는 방식입니다.</p>
<p><code>OldStdlibLoader</code> 클래스는 다른 Python 모듈에 의해 인스턴스화되어서는 안 됩니다. 대신, <code>sys.stdlib_remapper</code> 인스턴스를 통해 전역 <code>OldStdlibLoader</code> 인스턴스에 접근할 수 있습니다. 재매핑 메커니즘에 프로그래밍 방식으로 접근하려면 이 인스턴스를 사용하십시오.</p>
<p>중요한 구현 세부 사항 하나: PEP 302 API에서 필요하듯이, 우리의 재매핑 로더(remapping loader)를 연결하기 위해 마법 문자열(magic string)이 <code>sys.path</code>와 모듈의 <code>__path__</code> 속성에 추가됩니다. 이 마법 문자열은 현재 <code>&#x3C;oldlib></code>이며, <code>&#x3C;</code>으로 시작하는 모든 <code>sys.path</code> 항목을 특별하게 처리하기 위해 Python의 <code>site.py</code> 파일에 일부 변경 사항이 필요했습니다. 특히, 이들을 절대 파일 이름(absolute file names)으로 만들려는 시도는 하지 않습니다 (왜냐하면 이들은 전혀 파일 이름이 아니기 때문입니다).</p>
<p>재매핑 임포트 훅이 작동하려면 모듈 또는 패키지가 물리적으로 새 이름 아래에 위치해야 합니다. 이는 임포트 훅이 아직 임포트되지 않았고 Python의 내장 임포트 규칙에 의해 임포트될 수 없는 모듈만 가로채기(catch) 때문입니다. 따라서, 예를 들어 <code>Lib/StringIO.py</code>에서 <code>Lib/stringio.py</code>로 모듈이 이동되었고, 이전의 <code>.pyc</code> 파일이 제거되었다면, 재매퍼(remapper) 없이는 다음 코드가 실패할 것입니다:</p>
<pre><code class="language-python">import StringIO
</code></pre>
<p>대신, 재매퍼를 사용하면 이 실패한 임포트가 가로채지고(caught), 등록된 재매핑에서 이전 이름이 찾아지며, 이 경우 새 이름인 <code>stringio</code>가 발견됩니다. 그런 다음 재매퍼는 새 이름을 임포트하려고 시도하고, 성공하면 결과 모듈을 <code>sys.modules</code>에 이전 이름과 새 이름 모두로 바인딩합니다. 따라서 위 임포트는 <code>sys.modules</code>에 <code>'StringIO'</code>와 <code>'stringio'</code> 항목을 생성하며, 둘 다 정확히 동일한 모듈 객체를 가리키게 됩니다.</p>
<p><code>.mv</code> 파일을 모두 옮기거나 사용자 정의 시작 코드(custom start up code)에서 프로그래밍 방식으로 제거하는 것 외에는 재매핑 메커니즘을 비활성화하는 방법은 제안되지 않았습니다. Python 3.0에서는 재매핑이 제거되고 "새로운" 이름만 남게 됩니다.</p>
<h2>프로그래밍 인터페이스 (Programmatic Interface)</h2>
<p><code>sys.stdlib_remapper</code> 객체에 여러 메서드가 추가되었으며, 서드파티 패키지는 이를 사용하여 자체 재매핑을 등록할 수 있습니다. 그러나 모든 경우에 이전 이름에서 새 이름으로의 매핑은 오직 하나만 존재한다는 점에 유의하십시오. 두 개의 <code>.mv</code> 파일이 이전 이름에 대해 다른 매핑을 포함하거나, 이미 재매핑된 이전 이름으로 프로그래밍 호출이 이루어지면 이전 매핑은 손실됩니다. 이는 이미 임포트된 모듈에는 영향을 미치지 않습니다.</p>
<p><code>sys.stdlib_remapper</code> 객체에서 다음 메서드를 사용할 수 있습니다:</p>
<ul>
<li><code>read_mv_file(filename)</code> – 주어진 파일을 읽고 파일에서 찾은 모든 재매핑을 등록합니다.</li>
<li><code>read_directory_mv_files(dirname, suffix='.mv')</code> – 주어진 디렉토리를 나열하고, 해당 디렉토리에서 일치하는 접미사 (<code>.mv</code>가 기본값)를 가진 모든 파일을 읽습니다. 파싱된 각 파일에 대해 파일에서 찾은 모든 재매핑을 등록합니다.</li>
<li><code>set_mapping(oldname, newname)</code> – 이전 모듈 이름에서 새 모듈 이름으로의 새 매핑을 등록합니다. 둘 다 모듈에 대한 전체 점으로 구분된 경로 이름이어야 합니다. <code>newname</code>은 <code>None</code>일 수 있으며, 이 경우 <code>oldname</code>에 대한 기존 매핑은 제거됩니다 (기존 매핑이 없더라도 오류는 아닙니다).</li>
<li><code>get_mapping(oldname, default=None)</code> – 주어진 <code>oldname</code>에 대해 등록된 <code>newname</code>을 반환합니다. 등록된 재매핑이 없으면 <code>default</code>가 반환됩니다.</li>
</ul>
<h2>미해결 문제 (Open Issues)</h2>
<ul>
<li>
<p>모든 재매핑을 비활성화하는 명령줄 스위치 및/또는 환경 변수가 있어야 할까요?</p>
</li>
<li>
<p>재매핑이 재귀적으로 발생해야 할까요?</p>
</li>
<li>
<p>패키지의 <code>__init__.py</code>가 로드될 때 해당 패키지 디렉토리에서 <code>.mv</code> 파일을 자동으로 파싱해야 할까요? 이는 패키지가 자체 재매핑을 위한 <code>.mv</code> 파일을 쉽게 포함할 수 있도록 할 것입니다. <code>email</code> 패키지의 <code>.mv</code> 파일을 <code>oldlib</code> 패키지 대신 <code>email</code> 패키지에 배치할 경우 현재 <code>email</code> 패키지가 해야 하는 것과 비교해봅시다:</p>
<pre><code class="language-python"># Expose old names
import os, sys
sys.stdlib_remapper.read_directory_mv_files(os.path.dirname(__file__))
</code></pre>
<p>패키지에 포함될 수 있는 <code>.mv</code> 파일을 해당 패키지의 디렉토리에서 자동으로 읽어야 한다고 생각합니다.</p>
</li>
</ul>
<h2>참조 구현 (Reference Implementation)</h2>
<p>현재 (이 문서 작성 시점) Python 2.6 SVN 트렁크에 대한 패치 형태의 참조 구현이 SourceForge 패치 #1675334로 제공됩니다. 이 패치는 <code>cStringIO</code>를 <code>cstringio</code>로 변경하는 내용을 포함하지만, 이는 주로 설명 및 단위 테스트 목적입니다. 패치가 수용된다면, 이 변경 사항을 다른 PEP 3108 변경 사항과 분리하는 것을 고려할 수 있습니다.</p>
<h2>참고 자료 (References)</h2>
<ul>
<li>참조 구현 (http://bugs.python.org/issue1675334)</li>
</ul>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인(public domain)에 공개되었습니다.</p>
<hr>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Withdrawn] PEP 364 - Transitioning to the Py3K Standard Library"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 19:08:59+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
