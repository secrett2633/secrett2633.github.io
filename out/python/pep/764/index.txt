3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-aecaf5ac7a84facf.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-e3ea38185bb36cd2.js"],""]
4:["slug","python/pep/764","c"]
0:["x02Anhkwgp1He7ftuyAhh",[[["",{"children":[["slug","python/pep/764","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"764\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/764","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/da5e1dc2b9a7c5bb.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T35b4,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0764/">PEP 764 - Inline typed dictionaries</a></p>
<p><strong>상태:</strong> Draft | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 25-Oct-2024</p>
</blockquote>
<h2>PEP 764 – 인라인 TypedDict 제안 (Inline typed dictionaries)</h2>
<h3>개요 (Abstract)</h3>
<p><a href="https://peps.python.org/pep-0589/">PEP 589</a>는 <code>TypedDict</code>를 생성하기 위한 클래스 기반 및 함수형(functional) 문법을 정의합니다. 그러나 이 두 방식 모두 클래스를 정의하거나 값에 할당하는 과정을 필요로 합니다. 특정 상황, 특히 <code>TypedDict</code>가 한 번만 사용되는 경우, 이는 불필요한 보일러플레이트(boilerplate) 코드를 추가할 수 있습니다.</p>
<p>이 PEP는 <code>TypedDict</code> 타입을 서브스크립트(subscripting)하는 새로운 인라인(inline) 문법을 추가할 것을 제안합니다.</p>
<p>예시:</p>
<pre><code class="language-python">from typing import TypedDict

def get_movie() -> TypedDict[{'name': str, 'year': int}]:
    return {
        'name': 'Blade Runner',
        'year': 1982,
    }
</code></pre>
<h3>동기 (Motivation)</h3>
<p>Python 딕셔너리(dictionaries)는 언어의 필수적인 데이터 구조이며, 함수에서 구조화된 데이터를 반환하거나 받는 데 자주 사용됩니다. 그러나 <code>TypedDict</code> 클래스를 정의하는 과정은 다음과 같은 이유로 번거로울 수 있습니다:</p>
<ul>
<li><code>TypedDict</code>는 이름을 요구하지만, 그 이름이 항상 중요하지 않을 수 있습니다.</li>
<li>중첩된 딕셔너리는 두 개 이상의 클래스 정의를 필요로 합니다.</li>
</ul>
<p>중첩된 구조화된 데이터를 반환하는 간단한 함수를 예로 들어보겠습니다:</p>
<pre><code class="language-python">from typing import TypedDict

class ProductionCompany(TypedDict):
    name: str
    location: str

class Movie(TypedDict):
    name: str
    year: int
    production: ProductionCompany

def get_movie() -> Movie:
    return {
        'name': 'Blade Runner',
        'year': 1982,
        'production': {
            'name': 'Warner Bros.',
            'location': 'California',
        }
    }
</code></pre>
<h3>이론적 근거 (Rationale)</h3>
<p>새로운 인라인 문법은 이러한 문제들을 해결하는 데 사용될 수 있습니다.</p>
<pre><code class="language-python">def get_movie() -> TypedDict[{'name': str, 'year': int, 'production': TypedDict[{'name': str, 'location': str}]}]:
    ...
</code></pre>
<p>인라인 <code>TypedDict</code>는 함수형 또는 클래스 기반 문법만큼 유용하지는 않지만, 별칭(alias)으로 변수에 할당할 수 있습니다.</p>
<pre><code class="language-python">InlineTD = TypedDict[{'name': str}]
def get_movie() -> InlineTD:
    ...
</code></pre>
<h3>상세 사양 (Specification)</h3>
<p><code>TypedDict</code> 스페셜 폼(special form)은 서브스크립트가 가능해지며, 함수형 문법과 동일한 의미론(semantics)을 따르는 단일 타입 인자(type argument)로 <code>dict</code>를 허용합니다 (딕셔너리 키는 필드 이름을 나타내는 문자열이며, 값은 유효한 Annotation 표현식입니다). 중괄호 생성자(<code>{k: &#x3C;type>}</code>) 내의 쉼표로 구분된 <code>key: value</code> 쌍 목록만 허용되며, 타입 인자로 직접 지정되어야 합니다 (즉, 이전에 <code>dict</code> 인스턴스가 할당된 변수를 사용하는 것은 허용되지 않습니다).</p>
<p>인라인 <code>TypedDict</code>는 익명(anonymous)으로 참조될 수 있는데, 이는 특정 이름이 없음을 의미합니다 (런타임 동작 섹션 참조).</p>
<p>중첩된 인라인 딕셔너리를 정의하는 것이 가능합니다.</p>
<pre><code class="language-python">Movie = TypedDict[{'name': str, 'production': TypedDict[{'location': str}]}]
# 참고: 다음은 업데이트된 `type_expression` 문법에 따라 유효하지 않습니다:
# Movie = TypedDict[{'name': str, 'production': {'location': str}}]
</code></pre>
<p><code>total</code>과 같은 클래스 인자를 지정하는 것은 불가능하지만, 개별 필드에 대해서는 어떤 타입 한정자(qualifier)도 사용할 수 있습니다.</p>
<pre><code class="language-python">Movie = TypedDict[{'name': NotRequired[str], 'year': ReadOnly[int]}]
</code></pre>
<p>인라인 <code>TypedDict</code>는 암묵적으로 <code>total</code>이며, 모든 키가 존재해야 합니다. 따라서 <code>Required</code> 타입 한정자를 사용하는 것은 중복입니다.</p>
<p>타입 변수(Type variables)는 외부 스코프(scope)에 바인딩되어 있다면 인라인 <code>TypedDict</code>에서 허용됩니다.</p>
<pre><code class="language-python">class C[T]:
    inline_td: TypedDict[{'name': T}] # OK, `T`는 클래스 `C`의 스코프에 있습니다.
reveal_type(C[int]().inline_td['name']) # Revealed type is 'int'

def fn[T](arg: T) -> TypedDict[{'name': T}]: ... # OK: `T`는 함수 `fn`의 스코프에 있습니다.
reveal_type(fn('a')['name']) # Revealed type is 'str'

type InlineTD[T] = TypedDict[{'name': T}] # OK, `T`는 타입 별칭의 스코프에 있습니다.

T = TypeVar('T')
InlineTD = TypedDict[{'name': T}] # OK, 이전 타입 별칭과 동일하지만 구식 문법을 사용합니다.

def func():
    InlineTD = TypedDict[{'name': T}] # Not OK: `T`는 `func`의 스코프에 바인딩되지 않은 타입 변수를 참조합니다.
</code></pre>
<p>인라인 <code>TypedDict</code>는 확장될 수 있습니다.</p>
<pre><code class="language-python">InlineTD = TypedDict[{'a': int}]
class SubTD(InlineTD):
    pass
</code></pre>
<h4>타이핑 사양 변경 (Typing specification changes)</h4>
<p>인라인 <code>TypedDict</code>는 새로운 종류의 타입 표현식(type expression)을 추가합니다. 이에 따라 <code>type_expression</code> 프로덕션은 인라인 문법을 포함하도록 업데이트될 것입니다.</p>
<p><code>new-type_expression ::= type_expression | &#x3C;TypedDict> '[' '{' (string: ':' annotation_expression ',')* '}' ']'</code>
(여기서 <code>string</code>은 모든 문자열 리터럴입니다.)</p>
<h4>런타임 동작 (Runtime behavior)</h4>
<p>인라인 <code>TypedDict</code>를 생성하면 새로운 클래스가 생성됩니다. 따라서 <code>T1</code>과 <code>T2</code>는 동일한 타입입니다.</p>
<pre><code class="language-python">from typing import TypedDict
T1 = TypedDict('T1', {'a': int})
T2 = TypedDict[{'a': int}]
</code></pre>
<p>인라인 <code>TypedDict</code>는 익명으로 의도되었으므로, 해당 <code>__name__</code> 속성은 <code>&#x3C;inline TypedDict></code> 문자열 리터럴로 설정됩니다. 향후에는 명명된 클래스와 구별할 수 있도록 명시적인 클래스 속성이 추가될 수 있습니다.</p>
<p><code>TypedDict</code>는 클래스로 문서화되어 있지만, 정의 방식은 구현 세부 사항(implementation detail)입니다. <code>TypedDict</code>가 서브스크립트 가능하도록 구현이 조정되어야 합니다.</p>
<h3>하위 호환성 (Backwards Compatibility)</h3>
<p>이 PEP는 하위 호환성을 깨뜨리는 변경 사항을 포함하지 않습니다.</p>
<h3>보안 영향 (Security Implications)</h3>
<p>이 PEP로 인해 발생하는 알려진 보안 문제는 없습니다.</p>
<h3>교육 방법 (How to Teach This)</h3>
<p>새로운 인라인 문법은 <code>typing</code> 모듈 문서와 타이핑 사양 모두에 문서화될 것입니다.</p>
<p>복잡한 딕셔너리 구조가 사용될 때, 모든 것을 한 줄에 정의하면 가독성을 해칠 수 있습니다. 코드 포맷터(Code formatters)는 인라인 타입 딕셔너리를 여러 줄에 걸쳐 포맷팅하여 도움을 줄 수 있습니다.</p>
<pre><code class="language-python">def edit_movie(
    movie: TypedDict[{
        'name': str,
        'year': int,
        'production': TypedDict[{
            'location': str,
        }],
    }],
) -> None:
    ...
</code></pre>
<h3>참조 구현 (Reference Implementation)</h3>
<p>Mypy는 실험적인 기능으로 유사한 문법을 지원합니다.</p>
<pre><code class="language-python">def test_values() -> {"int": int, "str": str}:
    return {"int": 42, "str": "test"}
</code></pre>
<p>이 PEP에 대한 지원은 이 풀 리퀘스트에서 추가됩니다.
Pyright는 버전 1.1.387에서 새로운 문법에 대한 지원을 추가했습니다.</p>
<h4>런타임 구현 (Runtime implementation)</h4>
<p>필요한 변경 사항은 이 풀 리퀘스트의 <code>typing_extensions</code>에 처음 구현되었습니다.</p>
<h3>거부된 아이디어 (Rejected Ideas)</h3>
<h4>어노테이션에서 함수형 문법 사용 (Using the functional syntax in annotations)</h4>
<p>대안적인 함수형 문법을 어노테이션으로 직접 사용할 수 있었습니다.</p>
<pre><code class="language-python">def get_movie() -> TypedDict('Movie', {'title': str}):
    ...
</code></pre>
<p>그러나 호출 표현식(call expressions)은 현재 이러한 컨텍스트에서 여러 가지 이유(처리 비용이 많이 들고, 평가가 표준화되어 있지 않음)로 지원되지 않습니다. 또한, 때로는 중요하지 않은 이름이 필요할 것입니다.</p>
<h4>단일 타입 인자와 함께 <code>dict</code> 또는 <code>typing.Dict</code> 사용 (Using dict or typing.Dict with a single type argument)</h4>
<p>동일한 개념을 표현하기 위해 단일 타입 인자와 함께 <code>dict</code> 또는 <code>typing.Dict</code>를 재사용할 수 있었습니다.</p>
<pre><code class="language-python">def get_movie() -> dict[{'title': str}]:
    ...
</code></pre>
<p>이것은 <code>typing</code>에서 <code>TypedDict</code>를 import할 필요를 없애주지만, 이 해결책에는 몇 가지 단점이 있습니다.</p>
<ul>
<li>타입 체커(type checkers)의 경우, <code>dict</code>는 두 개의 타입 변수를 가진 일반 클래스입니다. <code>dict</code>가 단일 타입 인자로 파라미터화(parametrized)되도록 허용하려면 타입 체커의 특별한 케이스 처리가 필요합니다. 이는 파라미터화 오버로드(overloads)를 표현할 방법이 없기 때문입니다. 반면에 <code>TypedDict</code>는 이미 스페셜 폼입니다.</li>
<li>향후 작업이 인라인 <code>TypedDict</code>가 할 수 있는 기능을 확장하더라도, <code>dict</code>와 기호(symbol)를 공유하는 것의 영향에 대해 걱정할 필요가 없습니다.</li>
<li><code>typing.Dict</code>는 <a href="https://peps.python.org/pe585/">PEP 585</a>에 의해 더 이상 사용되지 않습니다 (제거 계획은 없지만). 새로운 타이핑 기능에 이를 사용하면 사용자에게 혼란을 줄 것입니다 (그리고 코드 린터(linters)의 변경이 필요할 것입니다).</li>
</ul>
<h4>단순 딕셔너리 사용 (Using a simple dictionary)</h4>
<p><code>TypedDict</code> 클래스를 서브스크립트하는 대신, 일반 딕셔너리를 어노테이션으로 사용할 수 있었습니다.</p>
<pre><code class="language-python">def get_movie() -> {'title': str}:
    ...
</code></pre>
<p>그러나 <a href="https://peps.python.org/pep-0584/">PEP 584</a>는 딕셔너리에 대한 union 연산자를 추가했고, <a href="https://peps.python.org/pep-0604/">PEP 604</a>는 union 타입을 도입했습니다. 두 기능 모두 비트와이즈 OR(<code>|</code>) 연산자를 사용하므로, 특히 런타임 인트로스펙션(introspection)의 경우 다음과 같은 사용 사례가 호환되지 않습니다.</p>
<pre><code class="language-python"># 딕셔너리가 병합됩니다:
def fn() -> {'a': int} | {'b': str}: ...

# 런타임에 타입 에러를 발생시킵니다:
def fn() -> {'a': int} | int: ...
</code></pre>
<h4>다른 TypedDict 확장 (Extending other typed dictionaries)</h4>
<p>다른 <code>TypedDict</code>를 확장하는 기능을 갖기 위해 여러 문법이 사용될 수 있었습니다.</p>
<pre><code class="language-python">InlineBase = TypedDict[{'a': int}]
Inline = TypedDict[InlineBase, {'b': int}]
# 또는, 슬라이스를 제공하여:
# Inline = TypedDict[{'b': int} : (InlineBase,)]
</code></pre>
<p>인라인 <code>TypedDict</code>는 기존 문법의 하위 집합만 지원하도록 의도되었으므로, 추가되는 복잡성을 고려할 때 이 확장 메커니즘을 지원하는 것은 충분히 설득력이 없습니다.
만약 인터섹션(intersections)이 타입 시스템에 추가된다면, 이 사용 사례를 다룰 수 있을 것입니다.</p>
<h3>미해결 문제 (Open Issues)</h3>
<h4>인라인 TypedDict와 추가 항목 (Inline typed dictionaries and extra items)</h4>
<p><a href="https://peps.python.org/pep-0728/">PEP 728</a>은 닫힌(closed) <code>TypedDict</code>의 개념을 도입합니다. 이 PEP가 승인된다면, 인라인 <code>TypedDict</code>는 기본적으로 닫힌 상태가 될 것입니다. 이는 이 PEP가 그에 따라 업데이트될 수 있도록 PEP 728이 먼저 처리되어야 함을 의미합니다.</p>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인(public domain) 또는 CC0-1.0-Universal 라이선스(둘 중 더 관대한 라이선스)로 배포됩니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Draft] PEP 764 - Inline typed dictionaries"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 13:45:41+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
