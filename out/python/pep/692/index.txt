3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/692","c"]
0:["SAPzS3zi9tsG5MkeKvxIA",[[["",{"children":[["slug","python/pep/692","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"692\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/692","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T47c3,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0692/">PEP 692 - Using TypedDict for more precise **kwargs typing</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 29-May-2022</p>
</blockquote>
<h1>PEP 692 – 보다 정밀한 <code>**kwargs</code> 타입 지정을 위한 <code>TypedDict</code> 활용</h1>
<h2>개요</h2>
<p>이 PEP는 <code>**kwargs</code>에 포함된 키워드 인자들의 타입이 서로 다를 때, <code>TypedDict</code>를 사용하여 보다 정밀하게 <code>**kwargs</code>의 타입을 지정할 수 있는 새로운 방법을 제안합니다. 현재 <code>**kwargs</code>는 모든 키워드 인자가 동일한 타입이어야만 타입 힌트가 가능하여 활용도가 제한적이었습니다. 이 새로운 접근 방식은 <code>TypedDict</code>를 통해 여러 타입을 포함하는 <code>**kwargs</code>를 타입 지정할 수 있도록 합니다.</p>
<h2>동기 (Motivation)</h2>
<p>기존에는 <code>**kwargs</code>를 특정 타입 <code>T</code>로 어노테이션하면, 이는 <code>dict[str, T]</code>를 의미했습니다. 예를 들어 <code>def foo(**kwargs: str) -> None:</code>는 <code>foo</code> 함수의 모든 키워드 인자가 문자열임을 뜻했습니다. 이러한 방식은 모든 키워드 인자의 타입이 동일한 경우에만 <code>**kwargs</code> 타입 어노테이션을 가능하게 하여, 키워드 이름에 따라 타입이 달라지는 경우에는 <code>**kwargs</code> 타입 지정이 불가능했습니다. 이는 특히 기존 코드베이스에서 적절한 타입 어노테이션을 도입하기 위한 리팩토링 노력이 비효율적이라고 간주될 수 있는 경우에 문제가 되었습니다.</p>
<p><code>**kwargs</code>는 또한 공개 API의 최상위 함수가 여러 헬퍼 함수를 호출하고, 이 헬퍼 함수들이 동일한 키워드 인자들을 기대할 때 코드 중복을 줄이는 데 유용합니다. 그러나 이 경우에도 키워드 인자들이 다른 타입을 가질 때 <code>**kwargs</code>를 사용하는 헬퍼 함수의 타입 힌트는 어려웠습니다. 심지어 같은 타입이라 할지라도, 함수가 실제로 예상하는 키워드 이름으로 호출되는지 확인할 방법이 없었습니다.</p>
<p><code>**kwargs</code>는 기본값이 없는 선택적 키워드 전용 인자를 수용해야 할 때도 편리하게 사용될 수 있습니다. <code>None</code>과 같이 사용자 입력이 없음을 나타내는 기본값이 사용자에게 전달되어 유효하지만 기본값이 아닌 동작을 유발할 수 있는 경우에 이러한 패턴이 필요할 수 있습니다.</p>
<h2>근거 (Rationale)</h2>
<p>PEP 589에서 도입된 <code>TypedDict</code>는 문자열 키와 잠재적으로 다른 타입의 값을 포함하는 딕셔너리 타입을 지원합니다. <code>**kwargs</code>와 같은 이중 별표로 시작하는 형식 매개변수로 표현되는 함수의 키워드 인자는 딕셔너리 형태로 받게 됩니다. 또한, 이러한 함수들은 키워드 인자를 제공하기 위해 언팩된(unpacked) 딕셔너리를 사용하여 호출되는 경우가 많습니다. 이 때문에 <code>TypedDict</code>는 보다 정밀한 <code>**kwargs</code> 타입 지정을 위한 완벽한 후보입니다. <code>TypedDict</code>를 사용하면 정적 타입 분석 중에 키워드 이름을 고려할 수 있습니다.</p>
<p>기존 <code>**kwargs</code> 동작을 유지하면서 <code>TypedDict</code>를 <code>kwargs</code> 타입으로 지원하기 위해 PEP 646에서 처음 도입된 <code>Unpack</code>을 재사용하는 것을 제안합니다. <code>Unpack</code>은 제공된 <code>TypedDict</code>에서 키워드 인자를 "언팩"하려는 의도에 적합하고 직관적인 이름을 가지고 있습니다. 또한, <code>*args</code>의 현재 타입 지정 방식이 <code>**kwargs</code>로 확장되어 유사하게 동작하며, 새로운 특별한 형식을 도입할 필요가 없습니다. 이 PEP에서 설명된 목적을 위한 <code>Unpack</code> 사용은 PEP 646에서 설명된 사용 사례와 충돌하지 않습니다.</p>
<h2>명세 (Specification)</h2>
<p><code>Unpack</code>을 사용하여 <code>**kwargs</code>를 어노테이션하는 새로운 방법을 소개합니다. 예를 들어:</p>
<pre><code class="language-python">class Movie(TypedDict):
    name: str
    year: int

def foo(**kwargs: Unpack[Movie]) -> None:
    ...
</code></pre>
<p>위 코드는 <code>**kwargs</code>가 <code>Movie</code>에 의해 지정된 두 개의 키워드 인자(즉, <code>str</code> 타입의 <code>name</code> 키워드와 <code>int</code> 타입의 <code>year</code> 키워드)를 포함함을 의미합니다. 이 함수는 다음과 같이 호출될 수 있습니다:</p>
<pre><code class="language-python">kwargs: Movie = {"name": "Life of Brian", "year": 1979}
foo(**kwargs) # OK!
foo(name="The Meaning of Life", year=1983) # OK!
</code></pre>
<p><code>Unpack</code>이 사용될 때, 타입 체커는 함수 본문 내의 <code>kwargs</code>를 <code>TypedDict</code>로 취급합니다.</p>
<pre><code class="language-python">def foo(**kwargs: Unpack[Movie]) -> None:
    assert_type(kwargs, Movie) # OK!
</code></pre>
<p>새로운 어노테이션은 런타임에 아무런 영향을 미치지 않으며, 오직 타입 체커에 의해서만 고려됩니다.</p>
<h3>표준 딕셔너리를 사용한 함수 호출</h3>
<p><code>dict[str, object]</code> 타입의 딕셔너리를 <code>Unpack</code>으로 어노테이션된 <code>**kwargs</code> 인자로 전달하면 타입 체커 오류가 발생해야 합니다.</p>
<pre><code class="language-python">def foo(**kwargs: Unpack[Movie]) -> None: ...
movie: dict[str, object] = {"name": "Life of Brian", "year": 1979}
foo(**movie) # WRONG! Movie는 dict[str, object] 타입입니다.

typed_movie: Movie = {"name": "The Meaning of Life", "year": 1983}
foo(**typed_movie) # OK!

another_movie = {"name": "Life of Brian", "year": 1979}
foo(**another_movie) # 타입 체커에 따라 다릅니다.
</code></pre>
<h3>키워드 충돌</h3>
<p><code>**kwargs</code> 타입 지정을 위해 사용되는 <code>TypedDict</code>가 함수의 시그니처에 이미 정의된 키를 포함할 수 있습니다. 중복된 이름이 표준 매개변수라면 타입 체커에서 오류를 보고해야 합니다. 중복된 이름이 위치 전용(positional-only) 매개변수라면 오류를 생성해서는 안 됩니다.</p>
<pre><code class="language-python">def foo(name, **kwargs: Unpack[Movie]) -> None: ... # WRONG! "name"은 항상 첫 번째 매개변수에 바인딩됩니다.
def foo(name, /, **kwargs: Unpack[Movie]) -> None: ... # OK! "name"은 위치 전용 매개변수이므로 **kwargs에 "name" 키워드를 포함할 수 있습니다.
</code></pre>
<h3>필수 및 비필수 키 (Required and non-required keys)</h3>
<p>기본적으로 <code>TypedDict</code>의 모든 키는 필수(required)입니다. <code>total</code> 매개변수를 <code>False</code>로 설정하여 이 동작을 재정의할 수 있습니다. 또한, PEP 655는 특정 키가 필수인지 여부를 지정할 수 있는 <code>typing.Required</code> 및 <code>typing.NotRequired</code>와 같은 새로운 타입 한정자를 도입했습니다.</p>
<p><code>TypedDict</code>를 사용하여 <code>**kwargs</code>를 타입 지정할 때, 모든 필수 및 비필수 키는 필수 및 비필수 함수 키워드 매개변수에 해당해야 합니다. 따라서, 호출자가 필수 키를 제공하지 않으면 타입 체커에서 오류를 보고해야 합니다.</p>
<pre><code class="language-python">class Movie(TypedDict):
    title: str
    year: NotRequired[int] # year는 필수가 아닙니다.
</code></pre>
<h3>할당 (Assignment)</h3>
<p><code>**kwargs: Unpack[Movie]</code>로 타입 지정된 함수와 다른 호출 가능한 타입의 할당은 호환되는 경우에만 타입 검사를 통과해야 합니다.</p>
<h4>소스와 대상 모두 <code>**kwargs</code>를 포함하는 경우</h4>
<p>대상 함수와 소스 함수 모두 <code>**kwargs: Unpack[TypedDict]</code> 매개변수를 가지고 있고, 대상 함수의 <code>TypedDict</code>가 소스 함수의 <code>TypedDict</code>에 할당 가능하며 나머지 매개변수가 호환될 때 할당이 가능합니다.</p>
<pre><code class="language-python">class Animal(TypedDict):
    name: str
class Dog(Animal): # Dog는 Animal의 서브타입입니다.
    breed: str

def accept_animal(**kwargs: Unpack[Animal]): ...
def accept_dog(**kwargs: Unpack[Dog]): ...

accept_dog = accept_animal # OK! Dog 타입의 표현식이 Animal 타입의 변수에 할당될 수 있습니다. (공변성)
accept_animal = accept_dog # WRONG! Animal 타입의 표현식이 Dog 타입의 변수에 할당될 수 없습니다. (반공변성)
</code></pre>
<h4>소스는 <code>**kwargs</code>를 포함하고 대상은 포함하지 않는 경우</h4>
<p>대상 호출 가능(callable)이 <code>**kwargs</code>를 포함하지 않고, 소스 호출 가능이 <code>**kwargs: Unpack[TypedDict]</code>를 포함하며, 대상 함수의 키워드 인자가 소스 함수의 <code>TypedDict</code>의 해당 키에 할당 가능할 때 할당이 가능합니다. 또한, <code>NotRequired</code> 키는 선택적 함수 인자에, <code>Required</code> 키는 필수 함수 인자에 해당해야 합니다.</p>
<pre><code class="language-python">class Example(TypedDict):
    animal: Animal
    string: str
    number: NotRequired[int]

def src(**kwargs: Unpack[Example]): ...
def dest(*, animal: Dog, string: str, number: int = ...): ...

dest = src # OK!
</code></pre>
<p>이 경우, 대상 함수의 매개변수는 키워드 전용이어야 합니다.</p>
<h4>소스가 언타입된 <code>**kwargs</code>를 포함하는 경우</h4>
<p>대상 호출 가능이 <code>**kwargs: Unpack[TypedDict]</code>를 포함하고, 소스 호출 가능이 언타입된 <code>**kwargs</code>를 포함하는 경우:</p>
<pre><code class="language-python">def src(**kwargs): ...
def dest(**kwargs: Unpack[Movie]): ...
dest = src # OK!
</code></pre>
<h4>소스가 전통적으로 타입 지정된 <code>**kwargs: T</code>를 포함하는 경우</h4>
<p>대상 호출 가능이 <code>**kwargs: Unpack[TypedDict]</code>를 포함하고, 소스 호출 가능이 전통적으로 타입 지정된 <code>**kwargs: T</code>를 포함하며, 대상 함수 <code>TypedDict</code>의 각 필드가 타입 <code>T</code>의 변수에 할당 가능할 때 할당이 가능합니다.</p>
<pre><code class="language-python">class Vehicle: ...
class Car(Vehicle): ...
class Motorcycle(Vehicle): ...

class Vehicles(TypedDict):
    car: Car
    moto: Motorcycle

def dest(**kwargs: Unpack[Vehicles]): ...
def src(**kwargs: Vehicle): ...
dest = src # OK!
</code></pre>
<p>반대로, 대상 호출 가능이 언타입되거나 전통적으로 타입 지정된 <code>**kwargs: T</code>를 포함하고, 소스 호출 가능이 <code>**kwargs: Unpack[TypedDict]</code>를 사용하여 타입 지정된 경우 오류가 발생해야 합니다. 이는 전통적으로 타입 지정된 <code>**kwargs</code>가 키워드 이름을 확인하지 않기 때문입니다.</p>
<p>요약하자면, 함수 매개변수는 반공변(contravariantly)적으로 동작해야 하고, 함수 반환 타입은 공변(covariantly)적으로 동작해야 합니다.</p>
<h3>함수 내에서 <code>kwargs</code>를 다른 함수로 전달</h3>
<p>언팩된 <code>TypedDict</code>로 힌트된 <code>kwargs</code>는, 언팩된 <code>kwargs</code>가 전달되는 함수 또한 시그니처에 <code>**kwargs</code>를 가지고 있는 경우에만 다른 함수로 전달될 수 있습니다. 그렇지 않으면 타입 체커는 오류를 생성해야 합니다. 예를 들어, 다음 코드는 <code>takes_name</code> 함수가 예상치 못한 키워드 인자를 받으므로 런타임에 실패할 것입니다.</p>
<pre><code class="language-python">class Animal(TypedDict):
    name: str
class Dog(Animal):
    breed: str

def takes_name(name: str): ...

dog: Dog = {"name": "Daisy", "breed": "Labrador"}
animal: Animal = dog # Dog 인스턴스가 Animal 타입 변수에 할당됨

def bar(**kwargs: Unpack[Animal]):
    takes_name(**kwargs) # WRONG! 'breed' 키워드가 takes_name으로 전달되어 런타임에 실패합니다.

bar(**animal)
</code></pre>
<p>이러한 문제의 해결책으로, 필요한 필드를 명시적으로 참조하여 인자로 사용하는 방법이 있습니다.</p>
<pre><code class="language-python">def bar(**kwargs: Unpack[Animal]):
    name = kwargs["name"]
    takes_name(name)
</code></pre>
<h3><code>TypedDict</code> 이외의 타입과 <code>Unpack</code> 사용</h3>
<p><code>**kwargs</code> 타입 지정의 맥락에서, <code>TypedDict</code> 이외의 타입과 <code>Unpack</code>을 사용하는 것은 허용되지 않아야 하며, 이러한 경우 타입 체커는 오류를 생성해야 합니다.</p>
<h3><code>Unpack</code>의 변경 사항</h3>
<p><code>Unpack</code>의 <code>repr</code> (표현)은 새로운 사용 사례와의 호환성을 위해 단순히 <code>Unpack[T]</code>로 변경되어야 합니다.</p>
<h2>의도된 사용법 (Intended Usage)</h2>
<p>이 제안의 의도된 사용 사례는 동기(Motivation) 섹션에서 설명되었습니다. 요약하자면, 보다 정밀한 <code>**kwargs</code> 타입 지정은 처음에는 <code>**kwargs</code>를 사용하기로 결정했지만, 이제는 타입 힌트를 통해 더 엄격한 계약을 사용할 만큼 성숙한 기존 코드베이스에 이점을 가져올 수 있습니다. 또한, <code>**kwargs</code> 사용은 동일한 키워드 인자 집합을 요구하는 여러 함수가 있을 때 코드 중복 및 복사-붙여넣기 양을 줄이는 데 도움이 될 수 있습니다. 마지막으로, 명확한 기본값이 없는 선택적 키워드 인자를 함수가 지원해야 할 때 <code>**kwargs</code>가 유용합니다.</p>
<p>그러나 이 PEP에서 제안된 것처럼 <code>TypedDict</code>를 사용하여 <code>**kwargs</code>를 타입 지정하는 것보다 더 나은 도구가 있는 경우도 있습니다. 예를 들어, 모든 키워드 인자가 필수이거나 기본값을 가질 때 새로운 코드를 작성한다면, <code>**kwargs</code>와 <code>TypedDict</code>를 사용하는 것보다 모든 것을 명시적으로 작성하는 것이 더 좋습니다.</p>
<pre><code class="language-python">def foo(name: str, year: int): ... # 권장되는 방식.
def foo(**kwargs: Unpack[Movie]): ...
</code></pre>
<p>유사하게, 스텁(stub) 파일을 통해 서드파티 라이브러리를 타입 힌트할 때는 함수 시그니처를 명시적으로 선언하는 것이 더 좋습니다. 이는 기본 인자가 있는 함수를 타입 지정하는 유일한 방법입니다.</p>
<p>IDE 및 문서 페이지의 이점을 위해, 공개 API의 일부인 함수는 가능할 때마다 명시적인 키워드 매개변수를 선호해야 합니다.</p>
<h2>참고 구현 (Reference Implementation)</h2>
<p><code>mypy</code> 타입 체커는 이미 <code>Unpack</code>을 사용한 보다 정밀한 <code>**kwargs</code> 타입 지정을 지원합니다. <code>Pyright</code> 타입 체커 또한 이 기능에 대한 잠정적인 지원을 제공합니다.</p>
<h2>거부된 아이디어 (Rejected Ideas)</h2>
<h3><code>TypedDict</code> 유니온 (TypedDict unions)</h3>
<p><code>TypedDict</code> 유니온으로 <code>**kwargs</code>를 타입 지정하는 것을 지원하는 것은 이 PEP 구현의 복잡성을 크게 증가시키며, 이를 정당화할 만한 설득력 있는 사용 사례가 없어 거부되었습니다. 대신, <code>TypedDict</code> 유니온을 기대하는 함수는 <code>overload</code>를 사용하여 구현할 수 있습니다.</p>
<pre><code class="language-python">class Book(TypedDict):
    genre: str
    pages: int
TypedDictUnion = Movie | Book

def foo(**kwargs: Unpack[TypedDictUnion]) -> None: ... # WRONG! TypedDict 유니온을 **kwargs 타입 지정에 사용하는 것은 지원되지 않습니다.

# 대신 다음과 같이 overload를 사용합니다.
from typing import overload

@overload
def foo(**kwargs: Unpack[Movie]): ...
@overload
def foo(**kwargs: Unpack[Book]): ...
</code></pre>
<h3><code>**kwargs</code> 어노테이션의 의미 변경</h3>
<p><code>**kwargs</code> 어노테이션의 의미를 변경하여 어노테이션이 개별 요소가 아닌 전체 <code>**kwargs</code> 딕셔너리에 적용되도록 하는 아이디어가 논의되었으나, 마이그레이션 경로가 불분명하고 기존 생태계에 잘 확립된 의미를 변경하는 비용이 크다고 판단되어 거부되었습니다.</p>
<h3>새로운 구문 도입</h3>
<p>이전 버전의 PEP에서는 <code>**Movie</code>와 같은 이중 별표 구문을 도입하여 보다 정밀한 <code>**kwargs</code> 타입 지정을 지원하는 아이디어가 있었습니다. 이는 문법 변경 및 새로운 dunder 추가를 필요로 하여 PEP의 범위를 크게 확장시켰으며, 새로운 구문 도입의 정당성이 충분히 강하지 않아 PEP의 진행을 막는 요인이 되었습니다. 따라서 이 아이디어는 폐기되었습니다.</p>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인 또는 CC0-1.0-Universal 라이선스 중 더 관대한 조건으로 배포됩니다.</p>
<hr>
<p><strong>중요</strong>: 이 PEP는 역사적인 문서입니다. 최신 사양 및 문서는 <a href="https://docs.python.org/3/library/typing.html#typing.Unpack">Unpack for keyword arguments</a>를 참조하십시오. 정식 타입 지정 사양은 <a href="https://peps.python.org/types/index.html">typing specs site</a>에서 유지 관리됩니다. 런타임 타입 동작은 CPython 문서에 설명되어 있습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 692 - Using TypedDict for more precise **kwargs typing"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 10:21:57+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
