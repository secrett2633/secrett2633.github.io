3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-1a135130af3e1cae.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/3112","c"]
0:["8N6icDw00Cy0kKVlExSq2",[[["",{"children":[["slug","python/pep/3112","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3112\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3112","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T17b3,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3112/">PEP 3112 - Bytes literals in Python 3000</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 23-Feb-2007</p>
</blockquote>
<h2>PEP 3112 – Python 3000의 바이트 리터럴 (Bytes literals in Python 3000)</h2>
<h3>초록 (Abstract)</h3>
<p>이 PEP는 PEP 358에서 도입된 <code>bytes</code> 객체를 위한 리터럴 구문을 제안합니다. 이 제안의 목적은 ASCII 문자열 및 임의의 이진 데이터를 표현하는 편리한 방법을 제공하는 것입니다.</p>
<h3>동기 (Motivation)</h3>
<p>Python 3000에서 ASCII 문자열을 표현하는 기존 방법은 다음과 같습니다.</p>
<pre><code class="language-python">bytes('Hello world', 'ascii')
'Hello world'.encode('ascii')
</code></pre>
<p>제안된 구문은 다음과 같습니다.</p>
<pre><code class="language-python">b'Hello world'
</code></pre>
<p>Python 3000에서 8비트 이진 시퀀스를 표현하는 기존 방법은 다음과 같습니다.</p>
<pre><code class="language-python">bytes([0x7f, 0x45, 0x4c, 0x46, 0x01, 0x01, 0x01, 0x00])
bytes('\x7fELF\x01\x01\x01\0', 'latin-1')
'7f454c4601010100'.decode('hex')
</code></pre>
<p>제안된 구문은 다음과 같습니다.</p>
<pre><code class="language-python">b'\x7f\x45\x4c\x46\x01\x01\x01\x00'
b'\x7fELF\x01\x01\x01\0'
</code></pre>
<p>두 경우 모두 새로운 구문의 장점은 간결성(brevity), 약간의 효율성 향상, 그리고 런타임이 아닌 컴파일 타임에 인코딩 오류를 감지할 수 있다는 점입니다. <code>bytes</code> 객체의 문자열과 유사한 메서드를 사용할 때 간결성의 이점은 특히 두드러집니다.</p>
<pre><code class="language-python">lines = bdata.split(bytes('\n', 'ascii')) # 기존 구문
lines = bdata.split(b'\n') # 제안된 구문
</code></pre>
<p>Python 2.x 코드를 Python 3000으로 변환할 때도 유용합니다.</p>
<pre><code class="language-python">sok.send('EXIT\r\n') # Python 2.x
sok.send('EXIT\r\n'.encode('ascii')) # Python 3000 기존 구문
sok.send(b'EXIT\r\n') # 제안된 구문
</code></pre>
<h3>문법 변경 (Grammar Changes)</h3>
<p>제안된 구문은 기존 문자열 문법의 확장입니다.</p>
<p>새로운 <code>bytes</code> 리터럴을 포함한 문자열의 새로운 문법은 다음과 같습니다.</p>
<pre><code>stringliteral: [stringprefix] (shortstring | longstring)
stringprefix: "b" | "r" | "br" | "B" | "R" | "BR" | "Br" | "bR"
shortstring: "'" shortstringitem* "'" | '"' shortstringitem* '"'
longstring: "'''" longstringitem* "'''" | '"""' longstringitem* '"""'
shortstringitem: shortstringchar | escapeseq
longstringitem: longstringchar | escapeseq
shortstringchar: &#x3C;any source character except "\" or newline or the quote>
longstringchar: &#x3C;any source character except "\">
escapeseq: "\" NL | "\\" | "\'" | '\"' | "\a" | "\b" | "\f" | "\n" | "\r" | "\t" | "\v" | "\ooo" | "\xhh" | "\uxxxx" | "\Uxxxxxxxx" | "\N{name}"
</code></pre>
<p>다음 추가 제약 조건은 <code>bytes</code> 리터럴 (<code>stringprefix</code>에 <code>b</code> 또는 <code>B</code>가 있는 <code>stringliteral</code> 토큰)에만 적용됩니다.</p>
<ul>
<li>각 <code>shortstringchar</code> 또는 <code>longstringchar</code>는 소스 파일의 인코딩 선언과 관계없이 1에서 127 사이의 문자여야 합니다.</li>
<li>유니코드 관련 이스케이프 시퀀스 (<code>\uxxxx</code>, <code>\Uxxxxxxxx</code>, <code>\N{name}</code>)는 Python 2.x에서는 인식되지 않으며, Python 3000에서는 금지됩니다.</li>
</ul>
<p>인접한 <code>bytes</code> 리터럴은 인접한 문자열 리터럴과 동일한 연결 규칙을 따릅니다. <code>bytes</code> 리터럴이 문자열 리터럴에 인접하면 오류가 발생합니다.</p>
<h3>의미론 (Semantics)</h3>
<p><code>bytes</code> 리터럴이 평가될 때마다 새로운 <code>bytes</code> 객체가 생성됩니다. 새 객체의 바이트는 리터럴의 <code>shortstringitem</code> 또는 <code>longstringitem</code> 부분이 나타내는 바이트와 동일한 순서로 구성됩니다.</p>
<h3>이론적 근거 (Rationale)</h3>
<p>제안된 구문은 8비트 문자열과 관련된 대부분의 코드에 대해 Python 2.x에서 Python 3000으로의 더 깔끔한 마이그레이션 경로를 제공합니다. 문자열 리터럴의 이전 8비트 의미를 유지하는 것은 일반적으로 <code>b</code> 접두사를 추가하는 것만큼 간단합니다. 유일한 예외는 127보다 큰 바이트를 포함하는 Python 2.x 문자열로, 이는 이스케이프 시퀀스를 사용하여 다시 작성해야 합니다.</p>
<p>소스 파일을 한 인코딩에서 다른 인코딩으로 트랜스코딩하고, 인코딩 선언을 수정하면 프로그램의 의미가 유지되어야 합니다. Python 2.x의 비-유니코드 문자열은 이 원칙을 위반하지만, Python 3000의 <code>bytes</code> 리터럴은 그렇지 않아야 합니다.</p>
<p>접두사에 <code>b</code>가 있는 문자열 리터럴은 Python 2.5에서는 항상 구문 오류이므로, 이 구문은 <code>bytes</code> 타입과 함께 Python 2.6에서 도입될 수 있습니다.</p>
<p><code>bytes</code> 리터럴은 리스트 표현식처럼 평가될 때마다 새로운 객체를 생성하며, 문자열 리터럴과는 다릅니다. 이는 <code>bytes</code> 리터럴이 리스트와 마찬가지로 가변(mutable)이기 때문에 필요합니다.</p>
<h3>참조 구현 (Reference Implementation)</h3>
<p>Thomas Wouters는 Py3K 브랜치, r53872에 구현을 체크인했습니다.</p>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인에 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1318,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 3112 - Bytes literals in Python 3000"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:21:44+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
