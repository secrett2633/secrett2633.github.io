3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-19cfc001fdac3337.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-51594f997fc19690.js"],""]
4:["slug","python/pep/3113","c"]
0:["FeyCvJug7In7AgUZlfHUx",[[["",{"children":[["slug","python/pep/3113","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3113\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3113","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2bcc,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3113/">PEP 3113 - Removal of Tuple Parameter Unpacking</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 02-Mar-2007</p>
</blockquote>
<p>PEP 3113 – 튜플 매개변수 언패킹 제거</p>
<h2>개요</h2>
<p>이 문서는 Python 3.0에서 튜플 매개변수 언패킹(Tuple Parameter Unpacking) 기능을 제거할 것을 제안합니다. 튜플 매개변수 언패킹은 함수 시그니처(function signature)에서 튜플을 매개변수로 사용하여 시퀀스(sequence) 인자가 자동으로 언패킹되도록 하는 기능입니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">def fxn(a, (b, c), d):
    pass
</code></pre>
<p>위 예시에서 <code>(b, c)</code>를 시그니처에 사용하는 것은 함수의 두 번째 인자가 길이가 2인 시퀀스(예: <code>[42, -13]</code>)여야 함을 의미합니다. 이러한 시퀀스가 전달되면 마치 <code>b, c = [42, -13]</code> 문이 매개변수 내부에서 실행된 것처럼 값이 언패킹되어 각 매개변수에 할당됩니다.</p>
<p>이 기능은 특정 상황에서 편리할 수 있지만, 발생하는 문제점이 이점보다 크다고 판단되어 Python 3.0에서 제거될 것을 제안합니다.</p>
<h2>제거되어야 하는 이유</h2>
<h3>인트로스펙션(Introspection) 문제</h3>
<p>Python은 강력한 인트로스펙션 기능을 제공하며, 이는 함수 시그니처에도 적용됩니다. 그러나 튜플 매개변수에서는 인트로스펙션에 상당한 어려움이 있습니다.</p>
<ul>
<li><strong>내부적인 이름 처리:</strong> 튜플 매개변수는 함수의 코드 객체(code object)에 있는 <code>co_varnames</code> 속성에서 <code>.1</code>과 같은 숫자와 점(.)으로 구성된 이름으로 표시됩니다. 이는 바이트코드(bytecode)만이 인식하는 이름에 튜플 인자를 바인딩(bind)합니다.</li>
<li><strong>형식 정보 부족:</strong> 이 방식은 튜플의 길이, 중첩 튜플 여부 등 튜플의 자세한 형식을 지정하지 않습니다.</li>
<li><strong>바이트코드 분석 필수:</strong> 튜플의 모든 세부 정보를 얻으려면 함수의 바이트코드를 분석해야 합니다. 이는 <code>inspect.getargspec</code> 함수가 튜플 매개변수에 대한 정보를 제공하는 방식이기도 합니다.</li>
<li><strong>구현 부담:</strong> 바이트코드 분석은 쉽지 않으며, 다른 유형의 매개변수는 바이트코드 지식을 요구하지 않는 반면, 튜플 매개변수는 인트로스펙션 도구에 불필요한 부담을 줍니다.</li>
<li><strong>타 구현체(Other Implementations)와의 호환성 문제:</strong> IronPython과 같이 Python의 바이트코드를 사용하지 않고 .NET 프레임워크 기반으로 MSIL을 <code>func_code.co_code</code> 속성에 저장하는 구현체에서는 <code>inspect.getargspec</code> 함수가 작동하지 않습니다.</li>
</ul>
<h3>기능 손실 없음</h3>
<p>튜플 매개변수를 처리하기 위해 함수의 바이트코드는 인자를 적절한 매개변수 이름으로 언패킹하는 데 필요한 바이트코드로 시작합니다. 이는 튜플 매개변수를 구현하기 위해 특별한 지원이 필요하지 않다는 것을 의미하며, 따라서 이 기능을 제거해도 어떠한 기능적 손실도 발생하지 않습니다. 단지 편의성 측면에서의 손실만 있을 뿐입니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">def fxn(a, (b, c), d):
    pass
</code></pre>
<p>위 함수는 다음과 같이 쉽게 재작성할 수 있으며, 기능적으로 아무런 손실이 없습니다.</p>
<pre><code class="language-python">def fxn(a, b_c, d):
    b, c = b_c
    pass
</code></pre>
<h3>규칙의 예외 (Exception To The Rule)</h3>
<p>Python 함수의 다양한 매개변수 유형을 살펴보면, 튜플 매개변수는 규칙이라기보다는 예외적인 경향이 있습니다.</p>
<ul>
<li><strong>PEP 3102 (키워드 전용 인자) 및 PEP 3107 (함수 어노테이션):</strong> 두 PEP 모두 함수의 시그니처 내에 새로운 기능을 도입했지만, 이 새로운 기능은 튜플 매개변수 전체에 적용될 수 없습니다.
<ul>
<li>PEP 3102는 튜플 매개변수를 전혀 지원하지 않습니다 (이름으로 튜플 매개변수를 참조할 방법이 없으므로 당연합니다).</li>
<li>PEP 3107은 튜플 내 각 항목에 대한 어노테이션(예: <code>(x:int, y:int)</code>)은 허용하지만, 튜플 전체에 대한 어노테이션(예: <code>(x, y):int</code>)은 허용하지 않습니다.</li>
</ul>
</li>
<li><strong>시퀀스와 매핑 객체 간의 불균형:</strong> 튜플 매개변수의 존재는 함수 시그니처에서 시퀀스 객체를 매핑 객체(예: <code>dict</code>)와 분리된 위치에 두게 합니다. 매핑 객체를 매개변수로 전달하여 시퀀스가 튜플 매개변수로 언패킹되는 방식과 동일하게 언패킹할 방법이 없습니다.</li>
</ul>
<h3>비정보적인 오류 메시지 (Uninformative Error Messages)</h3>
<p>튜플 매개변수를 사용할 때 발생하는 오류 메시지는 명확하지 않을 수 있습니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">def fxn((a, b), (c, d)):
    pass

fxn(1, (2, 3))
</code></pre>
<p>위 코드를 실행하면 <code>TypeError: unpack non-sequence</code> 오류 메시지가 발생합니다. 이 메시지는 어떤 튜플이 제대로 언패킹되지 않았는지 전혀 알려주지 않으며, 이것이 인자(arguments)로 인해 발생한 결과라는 표시도 없습니다. 다른 인자 관련 오류 메시지(예: <code>TypeError: fxn() takes exactly 2 arguments (0 given)</code>)는 시그니처와의 관계를 명시적으로 언급하는 것과 대조적입니다.</p>
<h3>낮은 사용률 (Little Usage)</h3>
<p>비공식적인 설문조사 결과, 대부분의 Python 개발자가 이 기능을 알지 못하거나 사용하지 않는 것으로 나타났습니다. Python 코드 저장소의 <code>Lib/</code> 디렉토리에서 함수 및 메서드 정의를 검사한 결과, <code>def</code> 문 중 약 0.18%만이 튜플 매개변수를 사용하는 것으로 나타났습니다. 이는 이 기능이 널리 사용되지 않음을 뒷받침합니다.</p>
<h2>유지되어야 한다는 주장 (제거되어서는 안 되는 이유)</h2>
<h3>실용적인 사용 (Practical Use)</h3>
<p>어떤 경우에는 튜플 매개변수가 유용할 수 있습니다. 예를 들어, 데카르트 좌표계를 나타내는 두 항목 튜플을 인자로 받는 코드에서 <code>x</code> 및 <code>y</code> 좌표를 자동으로 언패킹하는 것이 편리하다는 주장이 있습니다. 그러나 이러한 실용적인 이점은 튜플 매개변수와 관련된 다른 문제점들에 비해 훨씬 적다고 판단됩니다. 또한, 기능 손실이 없다는 점(No Loss Of Abilities If Removed)에서 보았듯이, 이 기능은 순전히 실용적인 편의를 제공할 뿐이며 다른 방법으로 쉽게 처리할 수 없는 고유한 능력을 제공하지 않습니다.</p>
<h3>매개변수의 자기 문서화 (Self-Documentation For Parameters)</h3>
<p>튜플 매개변수가 특정 시퀀스 형식으로 예상되는 매개변수에 대한 자기 문서화(self-documentation) 방법을 제공한다는 주장이 있습니다. 위의 데카르트 좌표 예시에서 <code>(x, y)</code>를 매개변수로 보는 것은 길이가 2인 튜플이 인자로 예상된다는 것을 명확하게 알려줍니다.</p>
<p>그러나 Python은 매개변수의 용도를 문서화하는 다른 여러 방법을 제공합니다.</p>
<ul>
<li><strong>문서화 문자열 (Docstrings):</strong> 문서화 문자열은 예상되는 인자에 대한 충분한 정보를 제공하기 위해 존재합니다. 튜플 매개변수는 시퀀스 인자의 예상 길이를 알려줄 수 있지만, 데이터가 무엇에 사용될지는 알려주지 않습니다. 모든 매개변수가 튜플 매개변수가 아니라면 다른 인자에 대한 정보를 알기 위해 Docstring을 읽어야 합니다.</li>
<li><strong>함수 어노테이션 (Function Annotations):</strong> (튜플 매개변수와는 작동하지 않지만) 함수 어노테이션도 문서화를 제공할 수 있습니다. 어노테이션은 어떤 형태도 될 수 있으므로, 이전의 튜플 매개변수는 <code>tuple</code>, <code>tuple(2)</code>, <code>Cartesian point</code>, <code>(x, y)</code> 등과 같은 어노테이션을 가진 단일 인자 매개변수가 될 수 있습니다. 어노테이션은 특정 길이의 시퀀스를 포함하여 매개변수에 대한 인자가 무엇인지 문서화하는 데 큰 유연성을 제공합니다.</li>
</ul>
<h2>전환 계획 (Transition Plan)</h2>
<p>튜플 매개변수가 제거되는 Python 3.x로 Python 2.x 코드를 전환하기 위해 두 가지 단계가 제안됩니다.</p>
<ol>
<li>
<p><strong>경고 발생:</strong> Python 2.6에서 Python 컴파일러가 튜플 매개변수를 발견하면 적절한 경고(warning)를 발생시킵니다. 이는 Python 2.6과 Python 3.0 사이에 발생하는 다른 모든 문법적 변경 사항과 동일하게 처리됩니다.</p>
</li>
<li>
<p><strong><code>2to3</code> 리팩토링 도구 지원:</strong> <code>2to3</code> 리팩토링 도구는 튜플 매개변수를 함수 내 첫 번째 문에서 언패킹되는 단일 매개변수로 변환하는 <code>fixer</code>를 추가할 예정입니다. 새 매개변수의 이름이 변경되고, 이 새 매개변수는 원래 튜플 매개변수에서 사용된 이름으로 언패킹됩니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">def fxn((a, (b, c))):
    pass
</code></pre>
<p>다음과 같이 번역됩니다.</p>
<pre><code class="language-python">def fxn(a_b_c):
    (a, (b, c)) = a_b_c
    pass
</code></pre>
<p>람다(lambda)에서는 단일 표현식(single expression) 제한 때문에 튜플 매개변수가 사용되므로, 람다 또한 지원되어야 합니다. 이는 예상되는 시퀀스 인자를 단일 매개변수에 바인딩한 다음 해당 매개변수에 인덱싱(indexing)하는 방식으로 처리됩니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">lambda (x, y): x + y
</code></pre>
<p>다음과 같이 번역됩니다.</p>
<pre><code class="language-python">lambda x_y: x_y[0] + x_y[1]
</code></pre>
</li>
</ol>
<h2>참고 자료 (References)</h2>
<ul>
<li>2to3 리팩토링 도구</li>
<li>2to3 fixer</li>
<li>IronPython</li>
<li>Microsoft Intermediate Language</li>
</ul>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인(public domain)에 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1098,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 3113 - Removal of Tuple Parameter Unpacking"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:22:03+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
