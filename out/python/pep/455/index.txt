3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/455","c"]
0:["qNOrJYeuqip9qCFPpDVpu",[[["",{"children":[["slug","python/pep/455","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"455\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/455","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2771,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0455/">PEP 455 - Adding a key-transforming dictionary to collections</a></p>
<p><strong>상태:</strong> Rejected | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 13-Sep-2013</p>
</blockquote>
<h1>PEP 455 – <code>collections</code> 모듈에 키 변환 딕셔너리 추가</h1>
<h2>개요 (Abstract)</h2>
<p>이 PEP는 <code>collections</code> 모듈을 위한 새로운 데이터 구조인 "TransformDict"를 제안합니다. TransformDict는 조회를 수행할 때 주어진 함수를 사용하여 키를 변환하지만, 값을 읽을 때는 원래 키를 유지하는 가변 매핑(Mutable Mapping)입니다.</p>
<h2>제안 거부 (Rejection)</h2>
<p>이 제안은 최종적으로 거부되었습니다. 거부 사유에 대한 자세한 내용은 Python 개발자 메일링 리스트 아카이브에서 확인할 수 있습니다.</p>
<h2>배경 (Rationale)</h2>
<p>이러한 패턴의 수많은 특수화된 버전이 이미 존재합니다. 가장 흔한 예시는 대소문자를 구분하지 않으면서도 원래 대소문자를 보존하는 딕셔너리(case-insensitive case-preserving dict)입니다. 즉, 키를 대소문자 구분 없이 일치시키지만 원래의 대소문자 표기법을 유지하는 딕셔너리 형태의 컨테이너를 말합니다. 이는 네트워크 프로그래밍에서 매우 흔하게 요구되는 기능인데, 많은 프로토콜 메시지에서 키/값 속성 배열을 사용하며, 이 키들은 수신 시 대소문자를 무시하도록 지정되어 있지만, 재전송 시에는 규격이나 관례에 따라 보존되거나 비자명하게 정규화(canonicalized)되어야 하기 때문입니다.</p>
<p>또 다른 일반적인 요청은 <code>id()</code> 함수에 따라 키를 일치시키는 identity dict입니다.</p>
<p>이 두 가지 모두, 키를 조회할 때 주어진 변환 함수를 적용하는 더 일반적인 패턴의 인스턴스입니다. 전자의 예시에서는 <code>str.lower</code> 또는 <code>str.casefold</code> 함수가, 후자의 예시에서는 내장 <code>id</code> 함수가 사용됩니다.</p>
<p>(이러한 패턴은 사용자에게 보이는 키 집합을 내부 조회 집합으로 투영(projects)한다고 볼 수 있습니다.)</p>
<h2>TransformDict의 의미 (Semantics)</h2>
<p>TransformDict는 <code>MutableMapping</code> 구현체입니다. 즉, <code>dict</code> 자체와 표준 라이브러리의 다른 딕셔너리 유사 클래스처럼 잘 알려진 가변 매핑 API를 충실히 구현합니다. 따라서 이 PEP에서는 대부분의 TransformDict 메서드 의미론을 다시 설명하지 않습니다.</p>
<p>변환 함수는 전단사(bijective)일 필요는 없으며, 대소문자 구분 없는 예시처럼 엄격히 전사(surjective)일 수 있습니다 (즉, 다른 키들이 동일한 값을 조회할 수 있습니다):</p>
<pre><code class="language-python">>>> d = TransformDict(str.casefold)
>>> d['SomeKey'] = 5
>>> d['somekey']
5
>>> d['SOMEKEY']
5
</code></pre>
<p>TransformDict는 항목을 생성할 때 사용된 첫 번째 키를 유지합니다:</p>
<pre><code class="language-python">>>> d = TransformDict(str.casefold)
>>> d['SomeKey'] = 1
>>> d['somekey'] = 2
>>> list(d.items())
[('SomeKey', 2)]
</code></pre>
<p>변환 함수가 해시 가능한(hashable) 값을 반환하는 한, 원래 키는 해시 가능할 필요가 없습니다:</p>
<pre><code class="language-python">>>> d = TransformDict(id)
>>> l = [None]
>>> d[l] = 5
>>> l in d
True
</code></pre>
<h3>생성자 (Constructor)</h3>
<p>위 예시에서 볼 수 있듯이, TransformDict를 생성하려면 키 변환 함수를 첫 번째 인자로 전달해야 합니다 (마치 <code>defaultdict</code>를 생성할 때 팩토리 함수를 첫 번째 인자로 전달하는 것과 유사합니다).</p>
<p>생성자는 또한 특정 키-값 쌍으로 TransformDict를 초기화하는 데 사용할 수 있는 다른 선택적 인자들을 받습니다. 이 선택적 인자들은 <code>dict</code> 및 <code>defaultdict</code> 생성자와 동일합니다:</p>
<pre><code class="language-python">>>> d = TransformDict(str.casefold, [('Foo', 1)], Bar=2)
>>> sorted(d.items())
[('Bar', 2), ('Foo', 1)]
</code></pre>
<h3>원본 키 가져오기 (Getting the original key)</h3>
<p>TransformDict는 저장된 키와 해당 값을 함께 반환하는 조회 메서드를 제공합니다:</p>
<pre><code class="language-python">>>> d = TransformDict(str.casefold, {'Foo': 1})
>>> d.getitem('FOO')
('Foo', 1)
>>> d.getitem('bar')
Traceback (most recent call last):
  File "&#x3C;stdin>", line 1, in &#x3C;module>
KeyError: 'bar'
</code></pre>
<p>메서드 이름 <code>getitem()</code>은 가변 매핑의 표준 <code>popitem()</code> 메서드를 따릅니다.</p>
<h3>변환 함수 가져오기 (Getting the transformation function)</h3>
<p>TransformDict는 변환 함수를 반환하는 간단한 읽기 전용 속성 <code>transform_func</code>를 가집니다.</p>
<h2>대안 제안 및 질문 (Alternative proposals and questions)</h2>
<h3>마지막 원본 키 유지 (Retaining the last original key)</h3>
<p>대부분의 python-dev 응답자들은 마지막으로 제공된 키를 유지하는 것보다 첫 번째로 제공된 키를 유지하는 것이 더 직관적이라고 생각했습니다. 또한, 이는 다른 키이지만 동일한 값을 가질 때 <code>dict</code> 객체 자체의 동작과 일치합니다:</p>
<pre><code class="language-python">>>> d = {}
>>> d[1] = 'hello'
>>> d[1.0] = 'world'
>>> d
{1: 'world'}
</code></pre>
<p>더 나아가, 첫 번째 키를 유지하는 체계에서 명시적으로 마지막 키를 유지하는 것은 다음 접근 방식을 사용하여 여전히 가능합니다:</p>
<pre><code class="language-python">d.pop(key, None)
d[key] = value
</code></pre>
<p>반대로, 마지막 키를 유지하는 체계에서 첫 번째 키를 유지하는 것은 컨테이너 코드의 일부를 다시 작성하지 않고는 불가능해 보입니다.</p>
<h3>인코더 / 디코더 쌍 사용 (Using an encoder / decoder pair)</h3>
<p>컨테이너가 원래 키를 유지하므로 함수 쌍을 사용할 필요가 없습니다. 또한, 인코더/디코더 쌍은 변환이 전단사적(bijective)이어야 하므로, 대소문자 구분 없는 매칭과 같은 중요한 사용 사례를 방해합니다.</p>
<h3>값에 대한 변환 함수 제공 (Providing a transformation function for values)</h3>
<p>딕셔너리 값은 조회에 사용되지 않으며, 그 의미론은 컨테이너의 동작과 전혀 관련이 없습니다. 따라서 "원본" 값과 "변환된" 값 모두를 가질 이유가 없습니다. 변환된 값은 어떤 용도로도 사용되지 않을 것입니다.</p>
<h3>일반적이지 않은 특수화된 컨테이너 제공 (Providing a specialized container, not generic)</h3>
<p>왜 특수화된 대소문자 구분 없는 <code>dict</code> 변형 대신 일반적인 TransformDict 구조를 제공하는지에 대한 질문이 있었습니다. 답은 일반적인 구조를 제공하는 것이 (코드 및 성능 면에서) 거의 비용이 적게 들고, 더 많은 사용 사례를 충족시킬 수 있기 때문입니다.</p>
<p>심지어 대소문자 구분 없는 딕셔너리조차도 실제로 다른 변환 함수를 유발할 수 있습니다: <code>str.lower</code>, <code>str.casefold</code> 또는 ASCII 호환 인코딩으로 인코딩된 텍스트로 작업할 때는 <code>bytes.lower</code>를 사용합니다.</p>
<h3>다른 생성자 패턴 (Other constructor patterns)</h3>
<p>Serhiy Storchaka에 의해 두 가지 다른 생성자 패턴이 제안되었습니다:</p>
<p><strong>타입 팩토리(type factory) 방식:</strong></p>
<pre><code class="language-python">d = TransformDict(str.casefold)(Foo=1)
</code></pre>
<p><strong>서브클래싱(subclassing) 방식:</strong></p>
<pre><code class="language-python">class CaseInsensitiveDict(TransformDict):
    __transform__ = str.casefold

d = CaseInsensitiveDict(Foo=1)
</code></pre>
<p>두 접근 방식 모두 옹호될 수 있지만, 표준 라이브러리의 확립된 관행을 따르지 않으므로 거부되었습니다.</p>
<h2>구현 (Implementation)</h2>
<p><code>collections</code> 모듈용 패치는 버그 트래커(http://bugs.python.org/issue18986)에서 추적되었습니다.</p>
<h2>기존 작업 (Existing work)</h2>
<p>대소문자 구분 없는 딕셔너리는 인기 있는 요청이었습니다.</p>
<ul>
<li><a href="http://twistedmatrix.com/documents/current/api/twisted.python.util.InsensitiveDict.html">twistedmatrix.com의 <code>twisted.python.util.InsensitiveDict</code></a></li>
<li>Python-list 및 Stack Overflow 등 다양한 논의와 구현 사례들이 존재합니다.</li>
</ul>
<p>Identity dict 또한 요청된 바 있습니다.</p>
<ul>
<li><code>pickle</code>, <code>json</code>, <code>copy</code>, <code>cProfile</code>, <code>doctest</code>, <code>_threading_local</code>과 같은 표준 라이브러리의 여러 모듈은 객체 메모이제이션(object memoization)을 위해 identity lookups를 사용합니다.</li>
</ul>
<h2>다른 언어 (Other languages)</h2>
<ul>
<li><strong>C# / .Net:</strong> <code>IEqualityComparer</code>를 사용자 정의할 수 있는 일반 <code>Dictionary</code> 클래스를 제공합니다.</li>
<li><strong>Java:</strong> 특수화된 <code>CaseInsensitiveMap</code>과 <code>IdentityHashMap</code>을 제공합니다.</li>
<li><strong>C++:</strong> C++ Standard Template Library는 사용자 정의 해시 및 동등 함수를 가진 <code>unordered_map</code>을 특징으로 합니다.</li>
</ul>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인에 공개되었습니다.</p>
<hr>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Rejected] PEP 455 - Adding a key-transforming dictionary to collections"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 22:05:06+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
