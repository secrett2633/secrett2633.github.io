3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-19cfc001fdac3337.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-51594f997fc19690.js"],""]
4:["slug","python/pep/3107","c"]
0:["FeyCvJug7In7AgUZlfHUx",[[["",{"children":[["slug","python/pep/3107","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3107\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3107","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2f6b,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3107/">PEP 3107 - Function Annotations</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 02-Dec-2006</p>
</blockquote>
<h1>PEP 3107 – 함수 Annotation (Function Annotations) 번역 및 설명</h1>
<p>이 문서는 Python Enhancement Proposal (PEP) 3107의 내용을 한국어 사용자가 이해하기 쉽도록 번역하고 설명합니다. 이 PEP는 Python 함수에 임의의 메타데이터 Annotation을 추가하는 문법을 소개합니다.</p>
<h2>개요 (Abstract)</h2>
<p>이 PEP는 Python 함수에 임의의 메타데이터 Annotation을 추가하기 위한 문법을 도입합니다.</p>
<h2>도입 배경 (Rationale)</h2>
<p>Python 2.x 버전에서는 함수의 매개변수와 반환 값에 Annotation을 추가하는 표준적인 방법이 없었기 때문에, 이 공백을 메우기 위한 다양한 도구와 라이브러리가 등장했습니다. 일부는 PEP 318에서 소개된 데코레이터를 활용했고, 다른 일부는 함수의 docstring을 파싱하여 Annotation을 찾았습니다.</p>
<p>이 PEP는 이러한 정보를 지정하는 단일하고 표준적인 방법을 제공하여, 지금까지 존재했던 메커니즘과 문법의 광범위한 변화로 인해 발생했던 혼란을 줄이는 것을 목표로 합니다.</p>
<h2>함수 Annotation의 기본 원리 (Fundamentals of Function Annotations)</h2>
<p>Python 3.0의 함수 Annotation에 대한 세부 사항을 논의하기 전에, Annotation이 무엇이고 무엇이 아닌지에 대해 폭넓게 이야기해 봅시다.</p>
<ol>
<li>
<p><strong>완전한 선택 사항 (Completely Optional)</strong>: 매개변수와 반환 값 모두에 대한 함수 Annotation은 전적으로 선택 사항입니다.</p>
</li>
<li>
<p><strong>임의의 Python 표현식 (Arbitrary Python Expressions)</strong>: 함수 Annotation은 컴파일 시점에 함수의 다양한 부분에 임의의 Python 표현식을 연결하는 방법일 뿐입니다.</p>
</li>
<li>
<p><strong>Python 자체의 의미 없음 (No Intrinsic Meaning to Python)</strong>: Python 자체는 Annotation에 특별한 의미나 중요성을 부여하지 않습니다. Python은 단순히 아래 "함수 Annotation 접근하기 (Accessing Function Annotations)" 섹션에서 설명하는 대로 이러한 표현식을 사용할 수 있도록 제공할 뿐입니다.</p>
</li>
<li>
<p><strong>타사 라이브러리에 의해 해석 (Interpreted by Third-Party Libraries)</strong>: Annotation이 의미를 가지는 유일한 방법은 타사 라이브러리에 의해 해석될 때입니다. 이 Annotation을 사용하는 라이브러리는 함수의 Annotation으로 원하는 모든 작업을 수행할 수 있습니다.</p>
<ul>
<li><strong>예시 1: 도움말 메시지 제공</strong>
예를 들어, 한 라이브러리는 문자열 기반 Annotation을 사용하여 다음과 같이 개선된 도움말 메시지를 제공할 수 있습니다.
<pre><code class="language-python">def compile(source: "something compilable", filename: "where the compilable thing comes from", mode: "is this a single statement or a suite?"):
    ...
</code></pre>
</li>
<li><strong>예시 2: 타입 검사 (Type Checking)</strong>
다른 라이브러리는 Python 함수 및 메서드에 대한 타입 검사를 제공하는 데 사용될 수 있습니다. 이 라이브러리는 Annotation을 사용하여 함수의 예상 입력 및 반환 타입을 나타낼 수 있으며, 다음과 같을 수 있습니다.
<pre><code class="language-python">def haul(item: Haulable, *vargs: PackAnimal) -> Distance:
    ...
</code></pre>
그러나 첫 번째 예시의 문자열이나 두 번째 예시의 타입 정보는 그 자체로는 아무런 <em>의미가 없습니다</em>. 의미는 오직 타사의 Annotation 처리 라이브러리에서만 나옵니다.</li>
</ul>
</li>
<li>
<p><strong>표준 의미론 없음 (No Standard Semantics)</strong>: 2번 항목에 따라, 이 PEP는 내장 타입에 대해서도 어떤 종류의 표준 의미론도 도입하려고 시도하지 않습니다. 이 작업은 타사 라이브러리에 맡겨질 것입니다.</p>
</li>
</ol>
<h2>문법 (Syntax)</h2>
<h3>매개변수 (Parameters)</h3>
<p>매개변수에 대한 Annotation은 매개변수 이름 뒤에 오는 선택적 표현식의 형태를 취합니다.</p>
<pre><code class="language-python">def foo(a: expression, b: expression = 5):
    ...
</code></pre>
<p>의사 문법(pseudo-grammar)에서 매개변수는 이제 <code>identifier [: expression] [= expression]</code> 형태를 가집니다. 즉, Annotation은 항상 매개변수의 기본값보다 먼저 오며, Annotation과 기본값은 모두 선택 사항입니다. 기본값을 나타내는 데 등호(<code>=</code>)가 사용되는 것과 마찬가지로, 콜론(<code>:</code>)은 Annotation을 표시하는 데 사용됩니다. 모든 Annotation 표현식은 기본값과 마찬가지로 함수 정의가 실행될 때 평가됩니다.</p>
<p>가변 매개변수 (즉, <code>*args</code> 및 <code>**kwargs</code>)에 대한 Annotation도 유사하게 표시됩니다.</p>
<pre><code class="language-python">def foo(*args: expression, **kwargs: expression):
    ...
</code></pre>
<p>중첩된 매개변수(Nested parameters)의 Annotation은 항상 마지막 괄호가 아니라 매개변수 이름 뒤에 옵니다. 중첩된 매개변수의 모든 매개변수에 Annotation을 다는 것은 필수가 아닙니다.</p>
<pre><code class="language-python">def foo((x1, y1: expression), (x2: expression, y2: expression)=(None, None)):
    ...
</code></pre>
<h3>반환 값 (Return Values)</h3>
<p>지금까지의 예시에서는 함수의 반환 값 타입을 Annotation하는 방법을 생략했습니다. 이는 다음과 같이 수행됩니다.</p>
<pre><code class="language-python">def sum() -> expression:
    ...
</code></pre>
<p>즉, 매개변수 목록 뒤에 리터럴 <code>-></code>와 Python 표현식이 올 수 있습니다. 매개변수 Annotation과 마찬가지로, 이 표현식은 함수 정의가 실행될 때 평가됩니다.</p>
<p>함수 정의를 위한 문법은 이제 다음과 같습니다:</p>
<pre><code>decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE
decorators: decorator+
funcdef: [decorators] 'def' NAME parameters ['->' test] ':' suite
parameters: '(' [typedargslist] ')'
typedargslist: ((tfpdef ['=' test] ',')* ('*' [tname] (',' tname ['=' test])* [',' '**' tname] | '**' tname) | tfpdef ['=' test] (',' tfpdef ['=' test])* [','])
tname: NAME [':' test]
tfpdef: tname | '(' tfplist ')'
tfplist: tfpdef (',' tfpdef)* [',']
</code></pre>
<h3>Lambda 함수 (Lambda)</h3>
<p><code>lambda</code> 함수의 문법은 Annotation을 지원하지 않습니다. 매개변수 목록을 괄호로 묶도록 요구함으로써 <code>lambda</code>의 문법을 변경하여 Annotation을 지원할 수 있었지만, 다음과 같은 이유로 이러한 변경을 하지 않기로 결정되었습니다:</p>
<ul>
<li>호환되지 않는 변경이 될 것입니다.</li>
<li><code>lambda</code>는 어차피 "중성화(neutered)"되어 있습니다. (기능이 제한적이라는 의미)</li>
<li><code>lambda</code>는 항상 일반 함수로 변경할 수 있습니다.</li>
</ul>
<h2>함수 Annotation 접근하기 (Accessing Function Annotations)</h2>
<p>컴파일되면 함수의 Annotation은 함수의 <code>__annotations__</code> 속성을 통해 사용할 수 있습니다. 이 속성은 매개변수 이름을 평가된 Annotation 표현식을 나타내는 객체에 매핑하는 변경 가능한(mutable) 딕셔너리입니다.</p>
<p><code>__annotations__</code> 매핑에는 <code>"return"</code>이라는 특별한 키가 있습니다. 이 키는 함수의 반환 값에 대한 Annotation이 제공된 경우에만 존재합니다.</p>
<p>예를 들어, 다음 Annotation은:</p>
<pre><code class="language-python">def foo(a: 'x', b: 5 + 6, c: list) -> max(2, 9):
    ...
</code></pre>
<p>다음과 같은 <code>__annotations__</code> 매핑을 생성합니다:</p>
<pre><code class="language-python">{'a': 'x', 'b': 11, 'c': list, 'return': 9}
</code></pre>
<p><code>"return"</code> 키는 매개변수 이름과 충돌할 수 없기 때문에 선택되었습니다. <code>return</code>을 매개변수 이름으로 사용하려고 하면 <code>SyntaxError</code>가 발생합니다.</p>
<p>함수에 Annotation이 없거나 <code>lambda</code> 표현식으로 함수가 생성된 경우 <code>__annotations__</code>는 비어 있는 변경 가능한 딕셔너리입니다.</p>
<h2>사용 사례 (Use Cases)</h2>
<p>Annotation을 논의하는 과정에서 여러 사용 사례가 제시되었습니다. 이들 중 일부는 전달하는 정보의 종류에 따라 그룹화되어 여기에 제시됩니다. Annotation을 활용할 수 있는 기존 제품 및 패키지의 예시도 포함되어 있습니다.</p>
<h3>타입 정보 제공 (Providing typing information)</h3>
<ul>
<li>타입 검사 ()</li>
<li>IDE가 함수가 예상하는 타입과 반환하는 타입을 표시하도록 함 ()</li>
<li>함수 오버로딩 (Function overloading) / 제네릭 함수 (Generic functions) ()</li>
<li>외국어 브리지 (Foreign-language bridges) ()</li>
<li>어댑테이션 (Adaptation) ()</li>
<li>술어 논리 함수 (Predicate logic functions)</li>
<li>데이터베이스 쿼리 매핑 (Database query mapping)</li>
<li>RPC 매개변수 마샬링 (RPC parameter marshaling) ()</li>
</ul>
<h3>기타 정보 (Other information)</h3>
<ul>
<li>매개변수 및 반환 값에 대한 문서화 ()</li>
</ul>
<h2>표준 라이브러리 (Standard Library)</h2>
<h3><code>pydoc</code> 및 <code>inspect</code></h3>
<p><code>pydoc</code> 모듈은 함수의 도움말을 표시할 때 함수 Annotation을 보여주어야 합니다. <code>inspect</code> 모듈은 Annotation을 지원하도록 변경되어야 합니다.</p>
<h2>다른 PEP와의 관계 (Relation to Other PEPs)</h2>
<h3>함수 시그니처 객체 (PEP 362) (Function Signature Objects (PEP 362))</h3>
<p>함수 시그니처 객체는 함수의 Annotation을 노출해야 합니다. <code>Parameter</code> 객체가 변경되거나 다른 변경이 필요할 수 있습니다.</p>
<h2>구현 (Implementation)</h2>
<p>참조 구현은 리비전 53170으로 py3k (이전에는 "p3yk") 브랜치에 체크인되었습니다.</p>
<h2>거부된 제안 (Rejected Proposals)</h2>
<p>BDFL(Benevolent Dictator For Life, 자비로운 종신 독재자 - 당시 귀도 반 로섬)은 제너레이터에 Annotation을 추가하기 위한 특별한 문법에 대한 저자의 아이디어를 "너무 추하다"고 하여 거부했습니다. 초기에 논의되었음에도 불구하고 (), 제너레이터 함수 및 고차 함수를 Annotation하기 위한 특별한 객체를 표준 라이브러리에 포함하는 것은 궁극적으로 타사 라이브러리에 더 적합하다고 판단되어 거부되었습니다. 이를 표준 라이브러리에 포함하는 것은 너무 많은 까다로운 문제를 야기했습니다. 표준 타입 매개변수화 문법에 대한 상당한 논의에도 불구하고, 이 또한 타사 라이브러리에 맡겨야 한다고 결정되었습니다 (). 더 많은 논의에도 불구하고, Annotation 상호 운용성을 위한 메커니즘을 표준화하지 않기로 결정되었습니다. 이 시점에서 상호 운용성 규칙을 표준화하는 것은 시기상조였습니다. 우리는 모든 사용자를 어떤 인위적인 계획에 강요하기보다는, 실제 사용과 필요에 따라 이러한 규칙이 자연스럽게 발전하도록 두는 것을 선호했습니다 ().</p>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인에 공개되었습니다.</p>
<pre><code>
> ⚠️ **알림:** 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.
</code></pre>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1098,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 3107 - Function Annotations"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:19:43+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
