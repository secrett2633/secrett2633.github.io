3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/697","c"]
0:["qNOrJYeuqip9qCFPpDVpu",[[["",{"children":[["slug","python/pep/697","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"697\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/697","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T4ccd,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0697/">PEP 697 - Limited C API for Extending Opaque Types</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 23-Aug-2022</p>
</blockquote>
<h2>PEP 697 – 불투명 타입 확장을 위한 Limited C API</h2>
<p>이 문서는 Python Enhancement Proposal (PEP) 697의 내용을 한국어 사용자가 이해하기 쉽게 번역하고 정리한 것입니다. 이 PEP는 C API를 사용하여 불투명(opaque) 타입을 확장하는 새로운 방법을 제안하며, 특히 CPython의 안정적인 ABI(Application Binary Interface)를 유지하면서 확장 모듈을 개발하는 데 중요한 개선 사항을 제공합니다.</p>
<h3>초록 (Abstract)</h3>
<p>PEP 697은 특정 (하위) 클래스에 특화된 데이터만 다룰 수 있도록 허용함으로써, 불투명 데이터를 가진 일부 타입을 확장하기 위한 Limited C API 지원을 추가합니다. 이 메커니즘은 <code>PyHeapTypeObject</code>와 함께 사용 가능해야 합니다. 이 PEP는 <code>tuple</code>이나 <code>int</code>와 같이 동적으로 크기가 조정되지 않는 가변 크기 객체(non-dynamically sized variable sized objects)를 확장하는 것을 제안하지는 않지만, 향후 필요할 경우 동일한 메커니즘을 통해 확장할 수 있는 여지를 남겨둡니다.</p>
<h3>동기 (Motivation)</h3>
<p>이 PEP가 해결하려는 핵심 문제는 사용자 정의 타입(custom types), 즉 메타클래스(<code>type</code>의 서브클래스)에 C 레벨 상태를 첨부하는 것입니다. 이는 종종 C++, Java, Rust와 같은 다른 타입 시스템을 Python 클래스로 노출하는 "래퍼(wrappers)"에서 필요합니다. 이러한 래퍼는 일반적으로 "래핑된(wrapped)" 비-Python 클래스에 대한 정보를 Python 타입 객체에 첨부해야 합니다.</p>
<p>이러한 작업은 Limited API에서 가능해야 하며, 이를 통해 언어 래퍼 또는 코드 생성기를 사용하여 안정적인 ABI 확장(Stable ABI extensions)을 만들 수 있습니다. (안정적인 ABI를 제공하는 이점은 PEP 652를 참조하세요.)</p>
<p><code>type</code>을 확장하는 것은 상위 클래스가 사용하는 메모리 레이아웃에 의존하지 않으면서(느슨한 결합을 유지하면서) 클래스를 확장하는 더 일반적인 문제의 한 예시입니다.</p>
<h3>근거 (Rationale)</h3>
<h4>불투명 타입 확장 (Extending opaque types)</h4>
<p>Limited API에서는 대부분의 <code>struct</code>가 불투명합니다. 즉, 그 크기와 메모리 레이아웃이 노출되지 않으므로 CPython의 새 버전(또는 C API의 대체 구현)에서 변경될 수 있습니다. 이는 일반적인 서브클래싱 패턴(기본 타입 인스턴스에 사용되는 <code>struct</code>를 파생 타입 인스턴스에 사용되는 <code>struct</code>의 첫 번째 요소로 만드는 것)이 작동하지 않음을 의미합니다. 예를 들어, <code>PyListObject</code>(<code>list</code>)를 확장하기 위한 기존 튜토리얼 예시는 다음과 같은 <code>struct</code>를 사용합니다.</p>
<pre><code class="language-c">typedef struct {
    PyListObject list;
    int state;
} SubListObject;
</code></pre>
<p><code>PyListObject</code>는 불투명하므로 Limited API에서는 위 코드가 컴파일되지 않습니다.</p>
<p>대신, 이 PEP는 서브클래스에서 필요한 상태만 포함하는 <code>struct</code>를 사용할 것을 제안합니다.</p>
<pre><code class="language-c">typedef struct {
    int state;
} SubListState;
// (이 경우 `typedef int SubListState;` 로도 가능)
</code></pre>
<p>이제 서브클래스는 상위 클래스의 메모리 레이아웃(및 크기)과 완전히 분리될 수 있습니다.</p>
<p>현재도 <code>PyListObject->tp_basicsize + sizeof(SubListState)</code>를 <code>PyType_Spec.basicsize</code>로 사용하고, <code>PyListObject->tp_basicsize</code>를 인스턴스(<code>PyObject*</code>) 내부 오프셋으로 사용하여 데이터에 접근하는 방식으로 이러한 <code>struct</code>를 사용할 수 있습니다. 그러나 이 방법은 다음과 같은 단점이 있습니다.</p>
<ul>
<li>기본 타입의 <code>basicsize</code>가 제대로 정렬되지 않아 일부 아키텍처에서 문제가 발생할 수 있습니다.</li>
<li><code>PyTypeObject.tp_basicsize</code>가 Limited API에 노출되지 않아 <code>__basicsize__</code> 속성을 통해 접근해야 하므로 번거롭고 안전하지 않습니다.</li>
<li>가변 크기 객체(variable-size objects)가 처리되지 않습니다.</li>
</ul>
<p>이러한 단점을 해결하고 느슨한 결합을 선호하는 프로젝트에서 쉽게 사용할 수 있도록, 이 PEP는 다음을 위한 API를 제안합니다.</p>
<ul>
<li>클래스 생성 시 <code>list</code>에 대한 추가 정보 없이 <code>SubListState</code>를 <code>PyListObject</code>에 "추가"하도록 지정합니다. 이는 음수 <code>PyType_Spec.basicsize</code>(<code>-sizeof(SubListState)</code>)로 지정됩니다.</li>
<li>주어진 인스턴스와 서브클래스 <code>PyTypeObject*</code>로부터 <code>SubListState</code>에 대한 포인터를 가져옵니다. 이를 위해 새로운 함수 <code>PyObject_GetTypeData</code>가 추가됩니다.</li>
</ul>
<p>기반 클래스는 <code>PyListObject</code>에만 국한되지 않고, 인스턴스 <code>struct</code>가 불투명하거나, 릴리스 간에 불안정하거나, 전혀 노출되지 않은 모든 기반 클래스를 확장하는 데 사용될 수 있습니다. 여기에는 <code>type</code> (<code>PyHeapTypeObject</code>) 또는 타사 확장(예: NumPy 배열)이 포함됩니다. 추가 상태가 필요하지 않은 경우 <code>basicsize</code>를 0으로 허용하며, 이 경우 기본 타입의 <code>tp_basicsize</code>가 상속됩니다.</p>
<h4>가변 크기 객체 확장 (Extending variable-size objects)</h4>
<p>가변 크기 객체를 서브클래싱하면서 느슨한 결합을 유지하려면 추가적인 고려 사항이 필요합니다. 가변 크기 데이터가 서브클래스 데이터(위 예시의 <code>SubListState</code>)와 충돌할 수 있기 때문입니다. 현재 CPython은 이러한 충돌을 방지하는 방법을 제공하지 않습니다.</p>
<p>이 PEP는 동기를 부여하는 타입인 <code>PyHeapTypeObject</code>가 가변 크기이므로, 이를 안전하게 서브클래싱할 수 있는 방법을 제시합니다.</p>
<p><strong>가변 크기 레이아웃 (Variable-size layouts)</strong></p>
<p>가변 크기 객체에는 두 가지 주요 메모리 레이아웃이 있습니다.</p>
<ol>
<li><code>int</code> 또는 <code>tuple</code>과 같은 타입: 가변 데이터가 고정 오프셋에 저장됩니다. 서브클래스가 추가 공간을 필요로 하는 경우, 가변 크기 데이터 뒤에 추가되어야 합니다.
<pre><code>PyTupleObject: ┌───────────────────┬───┬───┬╌╌╌╌┐
               │ PyObject_VAR_HEAD │var. data │
               └───────────────────┴───┴───┴╌╌╌╌┘
tuple subclass: ┌───────────────────┬───┬───┬╌╌╌╌┬─────────────┐
                │ PyObject_VAR_HEAD │var. data │subclass data│
                └───────────────────┴───┴───┴╌╌╌╌┴─────────────┘
</code></pre>
</li>
<li><code>PyHeapTypeObject</code>와 같은 타입: 가변 크기 데이터가 항상 인스턴스 메모리 영역의 끝에 위치합니다.
<pre><code>heap type: ┌───────────────────┬──────────────┬───┬───┬╌╌╌╌┐
           │ PyObject_VAR_HEAD │Heap type data│var. data │
           └───────────────────┴──────────────┴───┴───┴╌╌╌╌┘
type subclass: ┌───────────────────┬──────────────┬─────────────┬───┬───┬╌╌╌╌┐
               │ PyObject_VAR_HEAD │Heap type data│subclass data│var. data │
               └───────────────────┴──────────────┴─────────────┴───┴───┴╌╌╌╌┘
</code></pre>
</li>
</ol>
<p>이 PEP는 <code>PyHeapTypeObject</code>에 초점을 맞추므로 두 번째 레이아웃에 대한 서브클래싱을 허용하는 API를 제안합니다.</p>
<p><strong><code>PyHeapTypeObject</code>와 유사한 레이아웃을 가진 클래스 확장 (Extending classes with the PyHeapTypeObject-like layout)</strong></p>
<p>이 PEP는 <code>PyHeapTypeObject</code>와 유사한 레이아웃을 나타내는 타입 플래그인 <code>Py_TPFLAGS_ITEMS_AT_END</code>를 제안합니다. 이 플래그는 상위 클래스에서 설정하거나, 새 서브클래스에서 설정하여 상위 클래스가 적합함을 명시할 수 있습니다. 이 플래그는 음수 <code>basicsize</code>를 사용하여 가변 크기 타입을 확장하는 데 필요합니다.</p>
<p>또한, 이 PEP는 <code>Py_TPFLAGS_ITEMS_AT_END</code> 플래그를 사용하는 주어진 인스턴스의 가변 크기 데이터를 가져오는 헬퍼 함수 <code>PyObject_GetItemData</code>를 제안합니다. 이 함수는 필요한 포인터 연산을 숨기며, 향후 다른 레이아웃에도 적용될 수 있도록 API를 추상화합니다.</p>
<h4>큰 그림 (Big picture)</h4>
<p>이 섹션에서는 <code>PyType_Spec.basicsize</code>의 값에 따른 타입 생성의 결정 트리를 설명합니다.</p>
<ul>
<li><strong><code>spec->basicsize > 0</code></strong>: 기존과 동일하며, 기본 클래스 레이아웃을 알고 있을 때 사용합니다.</li>
<li><strong><code>spec->basicsize == 0</code></strong>: <code>basicsize</code>를 상속합니다. <code>base->tp_itemsize</code>에 따라 <code>itemsize</code>를 상속하거나 설정합니다.</li>
<li><strong><code>spec->basicsize &#x3C; 0</code></strong>: <code>basicsize</code>를 확장합니다.
<ul>
<li><code>base->tp_itemsize == 0</code> (고정 크기 클래스 확장): <code>spec->itemsize == 0</code>이면 <code>itemsize</code>는 0으로 설정됩니다. <code>spec->itemsize > 0</code>이면 실패합니다.</li>
<li><code>base->tp_itemsize > 0</code> (가변 크기 클래스 확장):
<ul>
<li><code>spec->itemsize == 0</code> (itemsize 상속): <code>Py_TPFLAGS_ITEMS_AT_END</code> 플래그가 사용된 경우 <code>itemsize</code>가 상속됩니다. 사용되지 않은 경우 (잠재적 충돌로 인해) 실패합니다.</li>
<li><code>spec->itemsize > 0</code>이면 (itemsize 변경/확장) 안전하게 수행할 수 없으므로 실패합니다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><code>spec->itemsize &#x3C; 0</code>는 항상 오류입니다. 이 PEP는 <code>tp->itemsize</code>를 단순히 상속하는 대신 확장하는 메커니즘을 제안하지 않습니다.</p>
<h4>상대 멤버 오프셋 (Relative member offsets)</h4>
<p><code>PyMemberDef.offset</code>에 대한 추가적인 변경 사항도 포함됩니다. 서브클래스별 <code>struct</code> (<code>SubListState</code>와 같은)를 사용하는 확장 모듈은 <code>PyObject</code> <code>struct</code>를 기준으로 하는 "절대" 오프셋 대신 이 <code>struct</code>를 기준으로 하는 "상대" 오프셋을 지정할 수 있는 방법을 얻게 됩니다.</p>
<p>이 PEP는 "상대" 오프셋을 위한 새로운 플래그인 <code>Py_RELATIVE_OFFSET</code>을 제안합니다. 이 플래그는 새로운 API와 함께 사용될 때 반드시 존재해야 하며, 다른 경우에는 사용해서는 안 됩니다. 초기 구현에서는 이 플래그가 오용을 방지하고 코드 리뷰어를 위한 힌트로만 사용됩니다.</p>
<h3>명세 (Specification)</h3>
<h4>상대 basicsize (Relative basicsize)</h4>
<p><code>PyType_Spec</code>의 <code>basicsize</code> 멤버는 0 또는 음수일 수 있습니다. 이 경우, 그 절댓값은 기본 클래스의 <code>basicsize</code>에 추가하여 새 클래스의 인스턴스가 요구하는 추가 저장 공간의 크기를 지정합니다. 결과 클래스의 <code>basicsize</code>는 다음과 같습니다.</p>
<pre><code class="language-c">type->tp_basicsize = _align(base->tp_basicsize) + _align(-spec->basicsize);
</code></pre>
<p>여기서 <code>_align</code>은 <code>alignof(max_align_t)</code>의 배수로 올림합니다. <code>spec->basicsize</code>가 0일 경우, <code>basicsize</code>는 <code>base->tp_basicsize</code>로 직접 상속됩니다.</p>
<p>인스턴스에서 서브클래스에 특화된 메모리 영역(기본 클래스 외에 서브클래스가 예약하는 "추가 공간")은 새로운 함수 <code>PyObject_GetTypeData</code>를 통해 사용할 수 있습니다.</p>
<pre><code class="language-c">void * PyObject_GetTypeData(PyObject *obj, PyTypeObject *cls) {
    return (char *)obj + _align(cls->tp_base->tp_basicsize);
}
</code></pre>
<p>이 메모리 영역의 크기를 검색하기 위한 또 다른 함수 <code>PyType_GetTypeDataSize</code>도 추가됩니다.</p>
<pre><code class="language-c">Py_ssize_t PyType_GetTypeDataSize(PyTypeObject *cls) {
    return cls->tp_basicsize - _align(cls->tp_base->tp_basicsize);
}
</code></pre>
<p>이 새로운 <code>Get</code> 함수들은 <code>PyType_Spec.basicsize</code>를 음수로 사용하여 생성된 클래스에만 사용해야 합니다. 다른 클래스의 경우 동작이 정의되지 않습니다.</p>
<h4>itemsize 상속 (Inheriting itemsize)</h4>
<p><code>spec->itemsize</code>가 0일 경우, <code>tp_itemsize</code>는 기본 클래스에서 상속됩니다. 새로운 타입 플래그 <code>Py_TPFLAGS_ITEMS_AT_END</code>가 추가되며, 이는 인스턴스의 가변 크기 부분이 인스턴스 메모리의 끝에 저장됨을 나타냅니다. 기본 메타타입(<code>PyType_Type</code>)은 이 플래그를 설정합니다.</p>
<p>이 새로운 플래그가 있는 타입의 가변 크기 콘텐츠를 위해 예약된 메모리에 접근하기 위한 새로운 함수 <code>PyObject_GetItemData</code>가 추가됩니다. 이 함수는 초기에는 Limited API에 추가되지 않습니다.</p>
<p>양수 <code>base->itemsize</code>를 가진 클래스를 음수 <code>spec->basicsize</code>를 사용하여 확장하는 것은 <code>Py_TPFLAGS_ITEMS_AT_END</code>가 기본 타입 또는 <code>spec->flags</code>에 설정되지 않으면 실패합니다. 양수 <code>spec->itemsize</code>를 가진 클래스를 음수 <code>spec->basicsize</code>를 사용하여 확장하는 것은 실패합니다.</p>
<h4>상대 멤버 오프셋 (Relative member offsets)</h4>
<p>음수 <code>PyType_Spec.basicsize</code>를 사용하여 정의된 타입에서 <code>Py_tp_members</code>를 통해 정의된 멤버의 오프셋은 전체 <code>PyObject</code> <code>struct</code> 대신 추가 서브클래스 데이터를 기준으로 해야 합니다. 이는 <code>PyMemberDef.flags</code>의 새로운 플래그인 <code>Py_RELATIVE_OFFSET</code>으로 표시됩니다.</p>
<p>초기 구현에서 이 새로운 플래그는 중복되지만, 오프셋의 변경된 의미를 명확히 하고 실수를 방지하는 데 도움이 됩니다. 음수 <code>basicsize</code>와 함께 <code>Py_RELATIVE_OFFSET</code>을 사용하지 않거나, 다른 컨텍스트에서 사용하는 것은 오류입니다. CPython은 타입을 초기화할 때 오프셋을 조정하고 <code>Py_RELATIVE_OFFSET</code> 플래그를 지웁니다.</p>
<h3>새로운 API 목록 (List of new API)</h3>
<p>다음의 새로운 함수/값들이 제안됩니다.</p>
<p><strong>Limited API/Stable ABI에 추가될 것:</strong></p>
<ul>
<li><code>void * PyObject_GetTypeData(PyObject *obj, PyTypeObject *cls)</code></li>
<li><code>Py_ssize_t PyType_GetTypeDataSize(PyTypeObject *cls)</code></li>
<li><code>PyTypeObject.tp_flags</code>를 위한 <code>Py_TPFLAGS_ITEMS_AT_END</code> 플래그</li>
<li><code>PyMemberDef.flags</code>를 위한 <code>Py_RELATIVE_OFFSET</code> 플래그</li>
</ul>
<p><strong>Public C API에만 추가될 것:</strong></p>
<ul>
<li><code>void *PyObject_GetItemData(PyObject *obj)</code></li>
</ul>
<h3>하위 호환성 (Backwards Compatibility)</h3>
<p>알려진 하위 호환성 문제는 없습니다.</p>
<h3>가정 (Assumptions)</h3>
<p>구현은 <code>type->tp_base->tp_basicsize</code>와 <code>type->tp_basicsize</code> 오프셋 사이의 인스턴스 메모리가 해당 타입에 "속한다"고 가정합니다 (가변 길이 타입 제외). 이는 명시적으로 문서화되지 않았지만, CPython 3.11까지 서브클래스에 <code>__dict__</code>를 추가할 때 이 가정에 의존했으므로 안전합니다.</p>
<h3>보안 영향 (Security Implications)</h3>
<p>알려진 보안 영향은 없습니다.</p>
<h3>승인 (Endorsements)</h3>
<p><code>pybind11</code>의 저자가 이 문제 해결을 요청했으며, HPy 프로젝트에서도 API가 일반적으로 좋다는 의견을 제시했습니다.</p>
<h3>교육 방법 (How to Teach This)</h3>
<p>초기 구현에는 참조 문서와 "새로운 기능(What's New)" 항목이 포함될 것이며, 이는 C 확장 라이브러리 개발자라는 대상 독자층에게 충분할 것입니다.</p>
<h3>참조 구현 (Reference Implementation)</h3>
<p>참조 구현은 <code>encukou/cpython</code> GitHub 리포지토리의 <code>extend-opaque</code> 브랜치에 있습니다.</p>
<h3>가능한 향후 개선 사항 (Possible Future Enhancements)</h3>
<ul>
<li><strong>정렬 및 성능 (Alignment &#x26; Performance):</strong> 현재 구현은 안전성과 사용 편의성에 중점을 두어 공간과 시간을 다소 희생할 수 있습니다. 필요하다면 API를 변경하지 않고 구현을 조정하여 성능을 개선할 수 있습니다. 예를 들어, 타입별 버퍼의 오프셋을 저장하거나 <code>PyType_Slot</code>을 통해 원하는 정렬을 지정할 수 있습니다.</li>
<li><strong>가변 크기 타입의 다른 레이아웃 (Other layouts for variable-size types):</strong> <code>Py_TPFLAGS_ITEMS_AT_END</code>와 유사한 플래그를 "튜플과 유사한" 레이아웃을 나타내기 위해 추가하고, 이 PEP에서 제안하는 모든 메커니즘을 적용하여 지원할 수 있습니다. 하지만 실제적인 이점은 거의 없을 것으로 보입니다.</li>
</ul>
<h3>거부된 아이디어 (Rejected Ideas)</h3>
<p>음수 <code>spec->basicsize</code> 대신 새로운 <code>PyType_Spec</code> 플래그를 추가하는 아이디어가 있었으나, 필드 값의 의미가 변경되는 상황에서 기존 코드에 미치는 영향은 동일할 것이므로 거부되었습니다.</p>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인 또는 CC0-1.0-Universal 라이선스에 따라 제공됩니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 697 - Limited C API for Extending Opaque Types"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 13:04:45+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
