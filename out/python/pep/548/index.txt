3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/548","c"]
0:["jf5MDuRUbMNVvRN9tv5rq",[[["",{"children":[["slug","python/pep/548","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"548\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/548","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T3b9a,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0548/">PEP 548 - More Flexible Loop Control</a></p>
<p><strong>상태:</strong> Rejected | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 05-Sep-2017</p>
</blockquote>
<p><strong>Title:</strong> PEP 548 – 더욱 유연한 반복문 제어 (More Flexible Loop Control)</p>
<p><strong>서론 (Introduction)</strong></p>
<ul>
<li>PEP 548이 무엇을 제안했는지 간략하게 설명.</li>
<li>작성자, 상태(Rejected), 유형(Standards Track), 생성일, Python 버전(3.7) 명시.</li>
</ul>
<p><strong>거절 사유 (Rejection Note)</strong></p>
<ul>
<li>Guido van Rossum에 의해 거절되었음을 명확히 언급하고, 관련 메일링 리스트 링크 제공.</li>
</ul>
<p><strong>요약 (Abstract)</strong></p>
<ul>
<li><code>break</code> 및 <code>continue</code> 문에 선택적 불리언(boolean) 표현식을 추가하여 실행 여부를 제어하고, 반복문의 흐름을 더욱 명확하고 간결하게 표현할 수 있도록 한다는 제안 요약.</li>
</ul>
<p><strong>동기 (Motivation)</strong></p>
<ul>
<li>이전 PEP 315의 거절 사유를 인용하며, <code>while</code> 루프 조건 평가 전에 코드를 실행해야 하는 경우가 많고, 이 코드가 루프 외부에 중복되는 문제를 언급.</li>
<li>기존의 <code>while True: &#x3C;setup code> if not &#x3C;condition>: break &#x3C;loop body></code> 형태보다 더 우수한 형태를 제안하여, <code>for</code> 루프에도 적용 가능하며, 반복문의 제어 흐름을 더 명시적으로 만들고 Python의 들여쓰기 미학을 보존한다고 설명.</li>
</ul>
<p><strong>문법 (Syntax)</strong></p>
<ul>
<li>제안된 <code>break</code> 및 <code>continue</code> 문의 확장된 문법 설명:
<ul>
<li><code>break_stmt : "break" ["if" expression]</code></li>
<li><code>continue_stmt : "continue" ["if" expression]</code></li>
</ul>
</li>
<li><code>while</code> 문의 수정된 문법 설명:
<ul>
<li><code>while_stmt : while1_stmt|while2_stmt</code></li>
<li><code>while1_stmt : "while" expression ":" suite ["else" ":" suite]</code> (기존과 동일)</li>
<li><code>while2_stmt : "while" ":" suite</code> (새로운 형태)</li>
</ul>
</li>
</ul>
<p><strong>의미론 (Semantics)</strong></p>
<ul>
<li><code>break if</code> 또는 <code>continue if</code>는 <code>expression</code>이 참(true)으로 평가될 때만 실행된다고 설명.</li>
<li><code>expression</code>이 없는 <code>while</code> 문은 <code>while True</code> 문처럼 <code>break</code> 또는 <code>return</code>이 실행될 때까지(또는 에러가 발생할 때까지) 반복된다고 설명.</li>
<li><code>expression</code>이 없는 <code>while</code> 문에서는 <code>else</code> 스위트가 허용되지 않으며, 실용적이라면 <code>expression</code> 없는 <code>while</code> 문 본문에 최소한 하나의 <code>break</code> 또는 <code>return</code> 문이 없으면 에러로 처리되어야 한다고 언급.</li>
</ul>
<p><strong>정당성 및 예시 (Justification and Examples)</strong></p>
<ul>
<li>기존의 <code>while True: ... if not &#x3C;condition>: break ...</code> 형태와 제안된 <code>while: ... break if not &#x3C;condition> ...</code> 형태를 비교.</li>
<li>새로운 문법이 제어 흐름 키워드를 코드 라인의 맨 앞에 두어 가독성을 높인다고 설명.</li>
<li><code>tarfile</code> 모듈의 예시를 통해 <code>break if</code>의 명확성을 보여줌.</li>
<li><code>sre_parse</code> 모듈의 복잡한 예시를 통해 <code>break if</code>가 오류 처리를 루프 본문 밖으로 이동시켜 루프 로직을 훨씬 이해하기 쉽게 만든다고 설명.</li>
<li>다른 언어의 <code>repeat ... until &#x3C;expression></code> 구문을 Python스럽게 표현하는 방법으로 <code>while: ... break if &#x3C;expression></code>을 제안.</li>
<li><code>continue if</code>의 경우, 일관성을 위해 필요하다고 언급. <code>zipfile</code> 모듈의 예시를 통해 <code>True</code> 토큰 생략 외에는 큰 개선점이 없음을 보여줌.</li>
<li><code>uuid.py</code> 모듈의 예시를 통해 <code>continue if</code> 역시 루프 코드의 가독성을 향상시키는 중요한 사용 사례가 있음을 제시.</li>
<li>예시들이 표준 라이브러리에서 <code>while True</code>와 <code>continue</code>를 검색하여 찾았고, 처음 검사한 4개 모듈에서 관련 예시를 발견했다고 언급.</li>
</ul>
<p><strong>저작권 (Copyright)</strong></p>
<ul>
<li>문서가 공개 도메인에 있음을 명시.</li>
</ul>
<hr>
<h1>PEP 548 – 더욱 유연한 반복문 제어 (More Flexible Loop Control)</h1>
<h2>서론</h2>
<p>이 문서는 Python의 <code>break</code> 및 <code>continue</code> 문에 선택적 불리언(boolean) 표현식을 추가하고, <code>while</code> 문의 구문을 수정하여 반복문의 제어 흐름을 더욱 명확하고 간결하게 표현할 수 있도록 제안했습니다. 하지만 이 제안은 최종적으로 거절되었습니다.</p>
<ul>
<li><strong>작성자:</strong> R David Murray</li>
<li><strong>상태:</strong> 거절됨 (Rejected)</li>
<li><strong>유형:</strong> 표준 트랙 (Standards Track)</li>
<li><strong>생성일:</strong> 2017년 9월 5일</li>
<li><strong>Python 버전:</strong> 3.7</li>
<li><strong>게시 이력:</strong> 2017년 8월 5일</li>
</ul>
<h2>거절 사유 (Rejection Note)</h2>
<p>이 PEP는 Guido van Rossum에 의해 거절되었습니다. 관련 논의는 다음 링크에서 확인할 수 있습니다: <a href="https://mail.python.org/pipermail/python-dev/2017-September/149232.html">https://mail.python.org/pipermail/python-dev/2017-September/149232.html</a></p>
<h2>요약 (Abstract)</h2>
<p>이 PEP는 <code>break</code> 및 <code>continue</code> 문에 실행 여부를 제어하는 선택적 불리언 표현식을 추가하는 것을 제안합니다. 이를 통해 반복문 내의 제어 흐름을 더 명확하고 간결하게 표현할 수 있습니다.</p>
<h2>동기 (Motivation)</h2>
<p>이전에 거절된 PEP 315에서 인용한 바와 같이, <code>while</code> 루프의 조건이 평가되기 전에 특정 코드가 실행되어야 하는 경우가 많습니다. 이러한 코드는 루프 진입 전에 한 번 실행되는 설정(setup) 코드로서 루프 외부에 중복되는 경우가 잦았습니다.</p>
<p>기존의 방식은 다음과 같습니다:</p>
<pre><code class="language-python">&#x3C;setup code>
while &#x3C;condition>:
    &#x3C;loop body>
    &#x3C;setup code>
</code></pre>
<p>PEP 315는 <code>while True: &#x3C;setup code> if not &#x3C;condition>: break &#x3C;loop body></code> 형태보다 우수한 문법을 찾지 못해 거절되었습니다.</p>
<p>이 PEP는 <code>for</code> 루프에도 적용 가능한 더 우수한 형태를 제안합니다. 이는 반복문의 제어 흐름을 더 명시적으로 만들면서 Python의 들여쓰기 미학을 보존하기 때문에 기존 방식보다 우수합니다.</p>
<h2>문법 (Syntax)</h2>
<p><code>break</code> 및 <code>continue</code> 문의 문법은 다음과 같이 확장됩니다:</p>
<ul>
<li><code>break_stmt : "break" ["if" expression]</code></li>
<li><code>continue_stmt : "continue" ["if" expression]</code></li>
</ul>
<p>또한, <code>while</code> 문의 문법은 다음과 같이 수정됩니다:</p>
<ul>
<li><code>while_stmt : while1_stmt|while2_stmt</code></li>
<li><code>while1_stmt : "while" expression ":" suite ["else" ":" suite]</code> (기존 <code>while</code> 문과 동일)</li>
<li><code>while2_stmt : "while" ":" suite</code> (새로운 형태)</li>
</ul>
<h2>의미론 (Semantics)</h2>
<ul>
<li><code>break if</code> 또는 <code>continue if</code>는 <code>expression</code>이 <code>True</code>로 평가될 때만 실행됩니다.</li>
<li><code>expression</code>이 없는 <code>while</code> 문은 <code>while True</code> 문과 마찬가지로 <code>break</code> 또는 <code>return</code>이 실행되거나 에러가 발생할 때까지 반복됩니다.</li>
<li><code>expression</code>이 없는 <code>while</code> 문에서는 <code>else</code> 스위트가 허용되지 않습니다. 또한, 가능하다면 <code>expression</code>이 없는 <code>while</code> 문 본문에 최소한 하나의 <code>break</code> 또는 <code>return</code> 문이 포함되어 있지 않으면 에러로 처리되어야 합니다.</li>
</ul>
<h2>정당성 및 예시 (Justification and Examples)</h2>
<p>이전의 "가장 좋은" 형태는 다음과 같습니다:</p>
<pre><code class="language-python">while True:
    &#x3C;setup code>
    if not &#x3C;condition>:
        break
    &#x3C;loop body>
</code></pre>
<p>이 PEP가 제안하는 형태는 다음과 같습니다:</p>
<pre><code class="language-python">while:
    &#x3C;setup code>
    break if not &#x3C;condition>
    &#x3C;loop body>
</code></pre>
<p>여기서 중요한 차이점은 루프의 제어 흐름 키워드(<code>break</code>)가 코드 라인의 맨 앞에 나타난다는 것입니다. 이는 특히 색상이 적용된 코드를 읽을 때 루프의 제어 흐름을 한눈에 파악하기 쉽게 만듭니다.</p>
<p>예를 들어, <code>tarfile</code> 모듈에서 흔히 볼 수 있는 코드 패턴입니다:</p>
<pre><code class="language-python">while True:
    buf = self._read(self.bufsize)
    if not buf:
        break
    t.append(buf)
</code></pre>
<p>이 코드를 읽을 때, <code>break</code>가 <code>if</code> 아래에 들여쓰기 되어 있으므로 <code>break</code>가 어느 <code>while</code>에 적용되는지 추적해야 할 수도 있고, 조건을 읽고 나서야 이 조건이 루프의 흐름을 변경한다는 것을 알게 될 수 있습니다.</p>
<p>새로운 문법을 사용하면 다음과 같이 됩니다:</p>
<pre><code class="language-python">while:
    buf = self._read(self.bufsize)
    break if not buf
    t.append(buf)
</code></pre>
<p>이 코드를 읽으면 <code>break</code>가 루프 본문과 같은 들여쓰기 수준에 있으므로 <code>while</code>에 적용된다는 것을 먼저 파악하고, 그 다음에 제어 흐름을 변경하는 조건을 읽게 됩니다.</p>
<p>또한, <code>sre_parse</code>의 더 복잡한 예시를 고려해봅시다:</p>
<pre><code class="language-python">while True:
    c = self.next
    self.__next()
    if c is None:
        if not result:
            raise self.error("missing group name")
        raise self.error("missing %s, unterminated name" % terminator, len(result))
    if c == terminator:
        if not result:
            raise self.error("missing group name", 1)
        break
    result += c
return result
</code></pre>
<p>현재 Python 루프 제어 문법으로는 위와 같이 코드를 작성하는 것이 자연스럽습니다. 그러나 <code>break if</code>를 사용하면 다음과 같이 작성하는 것이 더 자연스러울 것입니다:</p>
<pre><code class="language-python">while:
    c = self.next
    self.__next()
    break if c is None or c == terminator
    result += c
    if not result:
        raise self.error("missing group name")
    elif c is None:
        raise self.error("missing %s, unterminated name" % terminator, len(result))
return result
</code></pre>
<p>이 형태는 오류 처리를 루프 본문 밖으로 이동시켜 루프 로직을 훨씬 이해하기 쉽게 만듭니다. 현재 문법으로도 이와 같이 코드를 작성할 수 있지만, 제안된 문법은 더 명확한 형태로 작성하는 것을 더 자연스럽게 만듭니다.</p>
<p>제안된 문법은 다른 언어에서 볼 수 있는 고전적인 <code>repeat ... until &#x3C;expression></code> 구문을 Python스럽게 표현할 수 있는 방법을 제공합니다. Python에서는 이전에 좋은 문법이 없었습니다.</p>
<pre><code class="language-python">while:
    ...
    break if &#x3C;expression>
</code></pre>
<p>예를 들어, <code>tarfile</code> 모듈에는 다음과 같은 "read until" 루프가 몇 군데 있습니다:</p>
<pre><code class="language-python">while True:
    s = self.__read(1)
    if not s or s == NUL:
        break
</code></pre>
<p>새로운 문법을 사용하면 다음과 같이 더 명확하게 읽힙니다:</p>
<pre><code class="language-python">while:
    s = self.__read(1)
    break if not s or s == NUL
</code></pre>
<p><code>continue</code>에 이 문법을 확장하는 것은 <code>break</code>만큼 강력한 필요성은 없지만, 일관성 측면에서 가치가 있습니다.</p>
<p><code>continue</code> 문은 여러 줄 <code>if</code> 스위트의 끝에 오는 경우가 더 흔합니다. <code>zipfile</code>의 예시입니다:</p>
<pre><code class="language-python">while True:
    try:
        self.fp = io.open(file, filemode)
    except OSError:
        if filemode in modeDict:
            filemode = modeDict[filemode]
            continue
        raise
    break
</code></pre>
<p>이 루프에서 새로운 문법이 제공할 수 있는 유일한 개선점은 <code>True</code> 토큰의 생략입니다.</p>
<p>반면에 <code>uuid.py</code>의 다음 예시를 고려해봅시다:</p>
<pre><code class="language-python">for i in range(adapters.length):
    ncb.Reset()
    ncb.Command = netbios.NCBRESET
    ncb.Lana_num = ord(adapters.lana[i])
    if win32wnet.Netbios(ncb) != 0:
        continue
    ncb.Reset()
    ncb.Command = netbios.NCBASTAT
    ncb.Lana_num = ord(adapters.lana[i])
    ncb.Callname = '*'.ljust(16)
    ncb.Buffer = status = netbios.ADAPTER_STATUS()
    if win32wnet.Netbios(ncb) != 0:
        continue
    status._unpack()
    bytes = status.adapter_address[:6]
    if len(bytes) != 6:
        continue
    return int.from_bytes(bytes, 'big')
</code></pre>
<p>이 코드는 다음과 같이 변경될 수 있습니다:</p>
<pre><code class="language-python">for i in range(adapters.length):
    ncb.Reset()
    ncb.Command = netbios.NCBRESET
    ncb.Lana_num = ord(adapters.lana[i])
    continue if win32wnet.Netbios(ncb) != 0
    ncb.Reset()
    ncb.Command = netbios.NCBASTAT
    ncb.Lana_num = ord(adapters.lana[i])
    ncb.Callname = '*'.ljust(16)
    ncb.Buffer = status = netbios.ADAPTER_STATUS()
    continue if win32wnet.Netbios(ncb) != 0
    status._unpack()
    bytes = status.adapter_address[:6]
    continue if len(bytes) != 6
    return int.from_bytes(bytes, 'big')
</code></pre>
<p>이 예시는 <code>continue if</code> 역시 루프 코드의 가독성을 향상시키는 중요한 사용 사례가 있음을 보여줍니다.</p>
<p>이 PEP를 위해 선택된 모든 예시들이 표준 라이브러리에서 <code>while True</code>와 <code>continue</code>를 검색하여 찾았고, 관련 예시들이 처음 검사한 네 개의 모듈에서 발견되었다는 점은 주목할 만합니다.</p>
<hr>
<p><strong>저작권 (Copyright)</strong>
이 문서는 공개 도메인에 있습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Rejected] PEP 548 - More Flexible Loop Control"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 23:35:01+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
