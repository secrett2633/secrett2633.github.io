3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-1a135130af3e1cae.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/3122","c"]
0:["8N6icDw00Cy0kKVlExSq2",[[["",{"children":[["slug","python/pep/3122","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3122\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3122","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T32a3,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3122/">PEP 3122 - Delineation of the main module</a></p>
<p><strong>상태:</strong> Rejected | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 27-Apr-2007</p>
</blockquote>
<p>PEP 3122 – 메인 모듈의 경계 설정 (Delineation of the main module)</p>
<p><strong>작성자:</strong> Brett Cannon
<strong>상태:</strong> Rejected (거부됨)
<strong>유형:</strong> Standards Track
<strong>생성일:</strong> 2007년 4월 27일</p>
<hr>
<h2>주의 사항</h2>
<p>이 PEP는 거부되었습니다. Guido van Rossum은 패키지 내에서 스크립트를 실행하는 것을 안티패턴으로 간주합니다.</p>
<hr>
<h2>요약 (Abstract)</h2>
<p>PEP 328이 구현된 환경에서 상대 임포트(relative import)의 이름 해석(name resolution) 방식 때문에 패키지 내 모듈 실행이 불가능해지는 문제가 발생합니다. 이 문제는 "메인" 모듈로 실행되는 모듈이 <code>__name__</code> 속성을 해당 모듈의 절대 이름 대신 <code>__main__</code>으로 대체하기 때문에 발생하며, 이는 메인 모듈에서 상대 임포트를 절대 이름으로 해석하는 기능을 방해합니다.</p>
<p>이 문제를 해결하기 위해, 이 PEP는 메인 모듈이 구분되는 방식을 변경할 것을 제안합니다. 모듈의 <code>__name__</code> 속성은 그대로 유지하고, <code>sys.main</code>을 메인 모듈의 이름으로 설정함으로써 상대 임포트를 사용하는 패키지 내 모듈을 실행할 수 있는 일부 사례를 허용할 것입니다.</p>
<p>이 PEP는 PEP 299에서 제안하는 것처럼 모듈 수준의 함수를 자동으로 실행하는 아이디어는 다루지 않습니다.</p>
<h2>문제점 (The Problem)</h2>
<p>PEP 328의 도입으로 인해 상대 임포트는 임포트를 수행하는 모듈의 <code>__name__</code> 속성에 의존하게 되었습니다. 이는 상대 임포트에서 사용되는 점(dots)이 호출하는 모듈 이름의 일부를 제거하여 임포트가 패키지 계층 구조의 어느 위치에 속해야 하는지 계산하는 데 사용되기 때문입니다 (PEP 328 이전에는 상대 임포트가 실패하면 절대 임포트로 폴백(fallback)하여 성공할 가능성이 있었습니다).</p>
<p>예를 들어, <code>bacon.ham.beans</code> 모듈(<code>bacon.ham.beans</code>는 패키지 자체가 아님, 즉 <code>__path__</code>를 정의하지 않음)에서 <code>from .. import spam</code> 임포트를 고려해 봅시다. 상대 임포트의 이름 해석은 호출자의 이름(<code>bacon.ham.beans</code>)을 가져와 점을 기준으로 분할한 다음, 수준(여기서는 2)에 따라 마지막 <code>n</code> 부분을 잘라냅니다. 이 예에서는 <code>ham</code>과 <code>beans</code>가 제거되고 남은 부분(<code>bacon</code>)과 <code>spam</code>이 결합됩니다. 이는 <code>bacon.spam</code> 모듈의 올바른 임포트로 이어집니다.</p>
<p>상대 임포트를 처리할 때 모듈의 <code>__name__</code> 속성에 대한 이러한 의존성은 패키지 내에서 스크립트를 실행할 때 문제가 됩니다. 실행되는 스크립트의 이름이 <code>__main__</code>으로 설정되기 때문에 임포트 메커니즘은 상대 임포트를 해석할 수 없어 <code>ImportError</code>를 발생시킵니다.</p>
<p>예를 들어, <code>from . import spam</code>을 포함하는 <code>__init__.py</code> 파일이 있는 <code>bacon</code>이라는 패키지가 있다고 가정해 봅시다. 또한 <code>bacon</code> 패키지 내에 <code>spam</code>이라는 모듈을 생성합니다 (빈 파일일 수 있음). 이제 <code>python bacon/__init__.py</code> 또는 <code>python -m bacon</code>을 통해 <code>bacon</code> 패키지를 실행하려고 하면, 패키지가 아닌 곳에서 상대 임포트를 시도하는 것에 대한 <code>ImportError</code>가 발생합니다. 명백히 임포트는 유효하지만, <code>__name__</code>이 <code>__main__</code>으로 설정되기 때문에 임포트 메커니즘은 <code>__name__</code>에 점이 없으므로 <code>bacon/__init__.py</code>가 패키지 안에 없다고 생각합니다. 알고리즘이 어떻게 작동하는지 더 자세히 보려면 샌드박스의 <code>importlib.Import._resolve_name()</code>을 참조하세요.</p>
<p>현재 해결책은 실행되는 모듈의 모든 상대 임포트를 제거하고 절대 임포트로 변경하는 것입니다. 그러나 이는 패키지 내 모듈을 실행 가능하게 만들기 위해 특정 유형의 리소스를 사용해야 한다는 점에서 바람직하지 않습니다.</p>
<h2>해결책 (The Solution)</h2>
<p>이 문제에 대한 해결책은 모듈에서 <code>__name__</code>의 값을 변경하지 않는 것입니다. 그러나 실행 중인 코드가 스크립트로 실행되고 있음을 알리는 방법은 여전히 필요합니다. 이는 <code>sys</code> 모듈의 <code>main</code>이라는 새 속성으로 처리됩니다.</p>
<p>모듈이 스크립트로 실행될 때, <code>sys.main</code>은 모듈의 이름으로 설정됩니다. 이는 현재의 관용구인 <code>if __name__ == '__main__': ...</code>를 다음과 같이 변경합니다.</p>
<pre><code class="language-python">import sys
if __name__ == sys.main:
    # ...
</code></pre>
<p>새로 제안된 해결책은 모듈 임포트라는 한 줄의 상용구(boilerplate)를 추가합니다. 그러나 이 해결책은 새로운 내장(built-in)이나 모듈 속성을 도입하지 않으므로 (거부된 아이디어에서 논의됨) 추가 한 줄의 가치가 있다고 판단되었습니다.</p>
<p>제안된 해결책의 또 다른 문제점(거부된 모든 아이디어에도 적용됨)은 파일의 이름을 찾는 문제를 직접적으로 해결하지 못한다는 것입니다. <code>python bacon/spam.py</code>를 고려해 봅시다. 파일 이름만으로는 <code>bacon</code>이 패키지인지 명확하지 않습니다. 이를 올바르게 확인하려면 현재 디렉터리가 <code>sys.path</code>에 존재해야 하고 <code>bacon/__init__.py</code>도 존재해야 합니다.</p>
<p>그러나 이것은 간단한 예시입니다. <code>python ../spam.py</code>를 고려해 봅시다. 파일 이름만으로는 <code>spam.py</code>가 패키지 안에 있는지 아닌지 전혀 명확하지 않습니다. 한 가지 가능한 해결책은 <code>..</code>의 절대 이름을 찾아 <code>__init__.py</code>라는 파일이 존재하는지 확인한 다음, 해당 디렉터리가 <code>sys.path</code>에 있는지 확인하는 것입니다. 만약 그렇지 않다면, 더 이상 <code>__init__.py</code> 파일이 없거나 디렉터리가 <code>sys.path</code>에 발견될 때까지 디렉터리를 계속 위로 올라갑니다.</p>
<p>이 과정은 잠재적으로 비용이 많이 들 수 있습니다. 패키지 깊이가 깊다면, 패키지가 <code>sys.path</code>에 어디에 고정되어 있는지 (아예 고정되어 있지 않을 수도 있음) 찾기 위해 많은 디스크 액세스가 필요할 수 있습니다. 실행되는 스크립트가 NFS와 같은 파일 시스템에 있다면 <code>stat</code> 호출만으로도 비용이 많이 들 수 있습니다.</p>
<p>이러한 문제 때문에, PEP 338에 의해 도입된 <code>-m</code> 명령줄 인자가 사용될 때만 <code>__name__</code>이 설정될 것입니다. 그렇지 않으면 <code>__name__</code>을 <code>__main__</code>으로 설정하는 폴백(fallback) 시맨틱이 발생할 것입니다. <code>sys.main</code>은 <code>__name__</code>이 무엇으로 설정되든 상관없이 올바른 값으로 설정될 것입니다.</p>
<h2>구현 (Implementation)</h2>
<p><code>-m</code> 옵션이 사용되면, <code>sys.main</code>은 전달된 인수로 설정됩니다. <code>sys.argv</code>는 현재와 같이 조정됩니다. 그런 다음 <code>__import__(self.main)</code>와 동등한 작업이 발생합니다. 이는 <code>runpy</code> 모듈이 <code>__name__</code> 및 기타 속성을 명시적으로 설정하기 위해 모듈 이름으로 지정된 파일에 대한 코드 객체를 가져오는 현재 시맨틱과 다릅니다. 임포트 메커니즘이 이 상황에서 정상적인 작업을 수행할 수 있으므로 더 이상 필요하지 않습니다.</p>
<p>파일 이름이 지정되면 <code>sys.main</code>은 <code>__main__</code>으로 설정됩니다. 지정된 파일은 읽혀지고 코드 객체가 생성된 다음 <code>__name__</code>이 <code>__main__</code>으로 설정된 채로 실행됩니다. 이는 현재 시맨틱을 반영합니다.</p>
<h2>전환 계획 (Transition Plan)</h2>
<p>Python 2.6이 현재 시맨틱과 제안된 시맨틱을 모두 지원할 수 있도록 <code>sys.main</code>은 항상 <code>__main__</code>으로 설정됩니다. 그렇지 않으면 Python 2.6에서는 변경 사항이 없습니다. 이는 유감스럽게도 Python 2.6에서는 이 변경으로 인한 이점이 없지만, 2.6과 3.0에서 최대한 작동해야 하는 코드의 호환성을 극대화합니다.</p>
<p>새로운 관용구로의 전환을 돕기 위해, 2to3 도구는 현재의 <code>if __name__ == '__main__': ...</code> 관용구를 새로운 것으로 변환하는 규칙을 얻게 될 것입니다. 그러나 이는 관용구 외부에서 <code>__name__</code>을 확인하는 코드에는 도움이 되지 않습니다.</p>
<h2>거부된 아이디어 (Rejected Ideas)</h2>
<h3><code>__main__</code> 내장 (built-in)</h3>
<p><code>__main__</code>이라는 내장을 도입하자는 역제안이 있었습니다. 내장의 값은 실행되는 모듈의 이름이 될 것입니다 (제안된 <code>sys.main</code>과 동일). 이는 다음과 같은 새로운 관용구로 이어질 것입니다.</p>
<pre><code class="language-python">if __name__ == __main__:
    # ...
</code></pre>
<p>한 가지 단점은 문법적 차이가 미묘하다는 것입니다. 즉, <code>__main__</code> 주변의 따옴표가 제거됩니다. 일부는 기존 Python 프로그래머들이 실수로 따옴표를 넣어서 버그가 발생할 것이라고 생각합니다. 그러나 매우 얕은 버그이기 때문에 테스트를 통해 빠르게 발견될 것이라고 주장할 수도 있습니다.</p>
<p>내장의 이름이 분명히 다를 수 있지만 (예: <code>main</code>), 다른 단점은 새로운 내장을 도입한다는 것입니다. Python에 또 다른 내장을 추가하지 않고도 <code>sys.main</code>과 같은 간단한 해결책이 가능했기 때문에 이 제안은 거부되었습니다.</p>
<h3><code>__main__</code> 모듈 속성</h3>
<p>또 다른 제안은 모든 모듈에 <code>__main__</code> 속성을 추가하는 것이었습니다. 메인 모듈로 실행되는 모듈의 경우, 이 속성은 참 값을 가질 것이고 다른 모든 모듈은 거짓 값을 가질 것입니다. 이는 메인 모듈 관용구를 <code>if __main__: ...</code>으로 단순화하는 좋은 결과를 가져옵니다.</p>
<p>단점은 새로운 모듈 속성을 도입한다는 것이었습니다. 또한 제안된 해결책보다 임포트 메커니즘과의 더 많은 통합이 필요했습니다.</p>
<h3><code>__name__</code> 대신 <code>__file__</code> 사용</h3>
<p>현재 시맨틱을 포함하여 어떤 제안이든 모듈의 <code>__name__</code> 속성 대신 <code>__file__</code> 속성을 사용하도록 변경될 수 있었습니다. 이 문제점은 제안된 해결책에서 모듈에 <code>__file__</code> 속성이 정의되지 않았거나 다른 모듈과 동일한 값을 가질 수 있다는 문제가 발생한다는 것입니다.</p>
<p>현재 시맨틱에서 발생하는 문제는 임포트가 작동하려면 여전히 파일 경로를 모듈 이름으로 해결하려고 시도해야 한다는 것입니다.</p>
<h3><code>__eq__</code>를 오버라이드하는 <code>__name__</code>을 위한 특별한 문자열 서브클래스</h3>
<p>한 가지 제안은 <code>__eq__</code> 메서드를 오버라이드하여 <code>__main__</code>과 모듈의 실제 이름 모두와 같다고 비교되도록 <code>str</code>의 서브클래스를 정의하는 것이었습니다. 다른 모든 면에서 서브클래스는 <code>str</code>과 동일할 것입니다.</p>
<p>이것은 너무 해킹처럼 보였기 때문에 거부되었습니다.</p>
<h2>참조 (References)</h2>
<p>2to3 도구
importlib
Python-Dev 이메일: "PEP to change how the main module is delineated"</p>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 공개 도메인에 있습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1318,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Rejected] PEP 3122 - Delineation of the main module"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:28:16+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
