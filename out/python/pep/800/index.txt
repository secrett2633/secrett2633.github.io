3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-ce60b0a6591d04ed.js"],""]
4:["slug","python/pep/800","c"]
0:["e6YNzZ2BVZ8NBZ6boXfWj",[[["",{"children":[["slug","python/pep/800","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"800\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/800","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T281c,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0800/">PEP 800 - Disjoint bases in the type system</a></p>
<p><strong>상태:</strong> Draft | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 21-Jul-2025</p>
</blockquote>
<h2>PEP 800: 타입 시스템 내의 <code>Disjoint Base</code> (분리된 기본 클래스)</h2>
<h3>개요 (Abstract)</h3>
<p>정확한 Python 프로그램 분석을 위해, 타입 체커(type checker)는 두 클래스가 공통 자식 클래스를 가질 수 있는지 여부를 알아야 합니다. 하지만 현재 타입 시스템에는 이를 판단하는 데 필요한 정보가 부족합니다. 이 PEP는 클래스가 "disjoint base"임을 나타내는 새로운 데코레이터인 <code>@typing.disjoint_base</code>를 추가합니다. 서로 관련 없는 <code>disjoint base</code>를 가진 두 클래스는 공통 자식 클래스를 가질 수 없습니다.</p>
<h3>도입 배경 (Motivation)</h3>
<p>Python 타입 체킹에서 중요한 개념 중 하나는 '도달 가능성(reachability)'입니다. 일반적으로 타입 체커는 코드의 특정 분기가 결코 도달할 수 없을 때 이를 감지하고 사용자에게 경고합니다. 이는 불필요한 코드가 프로그램을 복잡하게 만들고 버그의 징후일 수 있기 때문에 유용합니다.</p>
<p>예를 들어, <code>int</code>와 <code>str</code>와 같은 내장 타입의 경우, CPython 런타임은 한 클래스가 <code>int</code>와 <code>str</code> 모두로부터 상속받는 것을 허용하지 않습니다. 따라서 <code>def f(x: int): if isinstance(x, str): ...</code> 와 같은 코드에서 <code>if</code> 블록은 도달할 수 없습니다. 현재 mypy와 같은 타입 체커는 휴리스틱(heuristic)을 사용하여 이러한 불가능성을 감지하지만, 이는 일반적이지 않고 부정확할 수 있습니다.</p>
<p>다중 상속(multiple inheritance)으로 인해 도달 가능성 판단은 더욱 복잡해집니다. 사용자 정의 클래스 <code>A</code>와 <code>B</code>의 경우 <code>class C(A, B): pass</code>와 같이 두 클래스 모두로부터 상속받는 클래스가 존재할 수 있으므로 타입 체커는 경고를 발생시키지 않습니다. 그러나 <code>int</code>와 <code>str</code>와 같은 특정 내장 타입의 경우, CPython은 두 타입 모두로부터 상속받는 클래스 생성을 허용하지 않습니다. 현재 타입 시스템에는 이러한 기본 클래스(base class)의 비호환성을 판단하는 데 필요한 정보가 명시적으로 포함되어 있지 않습니다.</p>
<p>PEP 800은 런타임에 다중 상속이 허용되지 않는 경우를 표현할 수 있도록 타입 시스템을 확장하는 <code>@disjoint_base</code> 데코레이터를 제안합니다. 이는 타입 체커가 도달 가능성을 더욱 정확하게 이해하고, 다음과 같은 여러 구체적인 영역에서 도움이 됩니다.</p>
<ul>
<li><strong>잘못된 클래스 정의 (Invalid class definitions):</strong> <code>class C(int, str): pass</code>와 같이 런타임에 오류를 발생시키는 클래스 정의를 타입 체커가 미리 감지할 수 있게 합니다.</li>
<li><strong>도달 가능성 (Reachability):</strong> <code>isinstance()</code> 검사나 <code>match</code> 문과 같은 타입 좁히기(type narrowing) 구문에서 도달할 수 없는 코드를 정확하게 식별합니다.</li>
<li><strong>오버로드 (Overloads):</strong> 매개변수 타입이 겹치지만 반환 타입이 다른 <code>@overload</code> 함수에서 발생할 수 있는 잠재적 불안정성(unsafety)을 타입 체커가 감지하도록 돕습니다.</li>
<li><strong>교차 타입 (Intersection types):</strong> 명시적 교차 타입(explicit intersection types) 지원이 미래에 추가될 경우, 특정 교차 타입이 '점유 가능한(inhabited)' 즉, 해당 교차 타입의 멤버가 될 수 있는 값이 존재하는지 여부를 판단하는 데 중요합니다.</li>
</ul>
<p><code>Disjoint base</code>는 현재 타입 시스템이 허용하는 것보다 타입 체커가 더 정확하게 이해할 수 있도록 합니다. 따라서 <code>disjoint base</code>는 Python 타입 시스템을 개선하기 위한 견고한 기반을 제공합니다.</p>
<h3>제안 (Specification)</h3>
<p><code>@typing.disjoint_base</code> 데코레이터가 타입 시스템에 추가됩니다. 이 데코레이터는 <code>NamedTuple</code> 정의를 포함한 명목 클래스(nominal class)에만 사용할 수 있습니다. 함수, <code>TypedDict</code> 정의 또는 <code>Protocol</code> 정의에 사용하면 타입 체커 오류가 발생합니다.</p>
<p>클래스에는 두 가지 속성이 정의됩니다: 클래스가 <code>disjoint base</code>일 수도 있고 아닐 수도 있으며, 모든 클래스는 유효한 <code>disjoint base</code>를 가져야 합니다.</p>
<ul>
<li><code>@typing.disjoint_base</code>로 데코레이터가 적용되었거나, 비어 있지 않은 <code>__slots__</code> 정의를 포함하는 경우 클래스는 <code>disjoint base</code>가 됩니다. 범용 기본 클래스인 <code>object</code>도 <code>disjoint base</code>입니다.</li>
</ul>
<p>클래스의 <code>disjoint base</code>를 결정하기 위해, 해당 클래스의 모든 기본 클래스(base class)를 검사하여 후보 <code>disjoint base</code> 집합을 구성합니다. 후보 집합에 단일 <code>disjoint base</code>가 있는 경우, 그것이 클래스의 <code>disjoint base</code>입니다. 여러 후보가 있지만 그 중 하나가 다른 모든 후보의 서브클래스(subclass)인 경우, 해당 클래스가 <code>disjoint base</code>가 됩니다. 그러한 후보가 없으면 클래스는 유효한 <code>disjoint base</code>를 가지지 않으므로 존재할 수 없습니다.</p>
<p>타입 체커는 클래스 정의를 검사할 때 유효한 <code>disjoint base</code>를 확인해야 하며, 유효한 <code>disjoint base</code>가 없는 클래스 정의를 발견하면 진단 메시지를 발행해야 합니다. 타입 체커는 또한 <code>isinstance()</code>와 같은 타입 좁히기 구문이 도달할 수 없는 분기를 초래하는지 여부를 확인할 때 <code>disjoint base</code> 메커니즘을 사용하여 타입이 <code>disjoint</code>한지 여부를 결정할 수 있습니다.</p>
<p><strong>예시:</strong></p>
<pre><code class="language-python">from typing import disjoint_base, assert_never

@disjoint_base
class Disjoint1:
    pass

@disjoint_base
class Disjoint2:
    pass

@disjoint_base
class DisjointChild(Disjoint1):
    pass

class C1:
    # disjoint base는 `object`입니다
    pass

# OK: 후보 disjoint bases는 `Disjoint1`과 `object`이며, `Disjoint1`은 `object`의 서브클래스입니다.
class C2(Disjoint1, C1):
    # disjoint base는 `Disjoint1`
    pass

# OK: 후보 disjoint bases는 `DisjointChild`와 `Disjoint1`이며, `DisjointChild`는 `Disjoint1`의 서브클래스입니다.
class C3(DisjointChild, Disjoint1):
    # disjoint base는 `DisjointChild`
    pass

# error: 후보 disjoint bases는 `Disjoint1`과 `Disjoint2`이지만, 어느 것도 다른 것의 서브클래스가 아닙니다.
class C4(Disjoint1, Disjoint2):
    pass

def narrower(obj: Disjoint1) -> None:
    if isinstance(obj, Disjoint2):
        assert_never(obj) # OK: `Disjoint1`과 `Disjoint2`의 자식 클래스는 존재할 수 없습니다.
    if isinstance(obj, C1):
        reveal_type(obj) # 비어 있지 않은 타입(예: `Disjoint1 &#x26; C1`)을 보여줍니다.
</code></pre>
<h3>런타임 구현 (Runtime implementation)</h3>
<p>새로운 데코레이터 <code>@disjoint_base</code>는 <code>typing</code> 모듈에 추가될 것입니다. 이 데코레이터는 데코레이트된 객체에 <code>.__disjoint_base__ = True</code> 속성을 설정한 다음 인수를 반환하는 런타임 동작을 가집니다. 이 <code>__disjoint_base__</code> 속성은 런타임 인트로스펙션(introspection)에 사용될 수 있지만, 사용자 정의 클래스에는 이 데코레이터의 런타임 강제는 없습니다.</p>
<h3>하위 호환성 (Backward compatibility)</h3>
<p>이전 버전의 Python과의 호환성을 위해 <code>@disjoint_base</code> 데코레이터는 <code>typing_extensions</code> 백포트(backport) 패키지에 추가될 것입니다. 런타임에는 새로운 데코레이터가 호환성 문제를 일으키지 않습니다. 스텁(stub) 파일에서는 모든 타입 체커가 이 데코레이터를 이해하지 못하더라도 <code>disjoint base</code> 클래스에 이 데코레이터를 추가할 수 있으며, 이러한 타입 체커는 단순히 데코레이터를 no-op으로 처리해야 합니다.</p>
<p>타입 체커가 이 PEP를 지원하게 되면, 사용자는 도달 가능성 및 교차 타입과 관련된 타입 체킹 동작에 일부 변화를 볼 수 있습니다. 이러한 변화는 런타임 동작을 더 잘 반영하므로 긍정적일 것이며, 사용자에게 보이는 변화의 규모는 타입 체커 버전 간의 일반적인 변화량과 유사하게 제한적일 것입니다.</p>
<h3>교육 방법 (How to Teach This)</h3>
<p>대부분의 사용자는 <code>@disjoint_base</code> 데코레이터를 직접 사용하거나 이해할 필요가 없습니다. 이는 주로 저수준 라이브러리의 스텁 파일에서 사용될 것으로 예상되기 때문입니다. Python 교육자는 특정 경우에 다중 상속이 허용되지 않는 이유를 설명하기 위해 "<code>disjoint base</code>" 개념을 소개할 수 있습니다. Python 타입 힌팅 교육자는 <code>isinstance()</code>와 같은 타입 좁히기 구문을 가르칠 때 이 데코레이터를 도입하여 타입 체커가 특정 분기를 도달할 수 없는 것으로 처리하는 이유를 사용자에게 설명할 수 있습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Draft] PEP 800 - Disjoint bases in the type system"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:09:06+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
