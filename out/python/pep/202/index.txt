3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/202","c"]
0:["qNOrJYeuqip9qCFPpDVpu",[[["",{"children":[["slug","python/pep/202","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"202\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/202","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T21bb,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0202/">PEP 202 - List Comprehensions</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 13-Jul-2000</p>
</blockquote>
<h1>PEP 202 – List Comprehensions (리스트 컴프리헨션)</h1>
<h2>서론 (Introduction)</h2>
<p>이 PEP는 Python에 제안된 문법적 확장인 List Comprehensions (리스트 컴프리헨션)에 대해 설명합니다.</p>
<h2>제안된 해결책 (The Proposed Solution)</h2>
<p><code>for</code> 및 <code>if</code> 절을 사용하여 리스트 리터럴(list literals)을 조건부로 구성할 수 있도록 허용하는 것이 제안됩니다. 이는 현재 <code>for</code> 루프와 <code>if</code> 문이 중첩되는 방식과 동일하게 중첩될 것입니다.</p>
<h2>배경 (Rationale)</h2>
<p>List Comprehensions은 현재 <code>map()</code>과 <code>filter()</code> 그리고/또는 중첩된 루프가 사용되는 상황에서 리스트를 생성하는 더 간결한 방법을 제공합니다.</p>
<h2>예시 (Examples)</h2>
<p>다음은 List Comprehensions의 사용 예시입니다.</p>
<pre><code class="language-python">>>> print([i for i in range(10)])
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

>>> print([i for i in range(20) if i%2 == 0])
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]

>>> nums = [1, 2, 3, 4]
>>> fruit = ["Apples", "Peaches", "Pears", "Bananas"]

>>> print([(i, f) for i in nums for f in fruit])
[(1, 'Apples'), (1, 'Peaches'), (1, 'Pears'), (1, 'Bananas'), (2, 'Apples'), (2, 'Peaches'), (2, 'Pears'), (2, 'Bananas'), (3, 'Apples'), (3, 'Peaches'), (3, 'Pears'), (3, 'Bananas'), (4, 'Apples'), (4, 'Peaches'), (4, 'Pears'), (4, 'Bananas')]

>>> print([(i, f) for i in nums for f in fruit if f[0] == "P"])
[(1, 'Peaches'), (1, 'Pears'), (2, 'Peaches'), (2, 'Pears'), (3, 'Peaches'), (3, 'Pears'), (4, 'Peaches'), (4, 'Pears')]

>>> print([(i, f) for i in nums for f in fruit if f[0] == "P" if i%2 == 1])
[(1, 'Peaches'), (1, 'Pears'), (3, 'Peaches'), (3, 'Pears')]

>>> print([i for i in zip(nums, fruit) if i[0]%2==0])
[(2, 'Peaches'), (4, 'Bananas')]
</code></pre>
<h2>참조 구현 (Reference Implementation)</h2>
<p>List Comprehensions는 Python 2.0 릴리스와 함께 Python 언어의 일부가 되었으며,에 문서화되어 있습니다.</p>
<h2>BDFL의 지시 (BDFL Pronouncements)</h2>
<p>제안된 문법이 올바른 방식입니다. <code>[x, y for ...]</code> 형태는 허용되지 않으며, <code>[(x, y) for ...]</code>와 같이 작성해야 합니다. <code>[... for x... for y...]</code> 형태는 중첩되며, 중첩된 <code>for</code> 루프처럼 가장 마지막 인덱스가 가장 빠르게 변합니다.</p>
<h2>참고 자료 (References)</h2>
<p><a href="http://docs.python.org/reference/expressions.html#list-displays">http://docs.python.org/reference/expressions.html#list-displays</a></p>
<pre><code class="language-python"># PEP 202 – List Comprehensions (리스트 컴프리헨션)

## 서론 (Introduction)
이 PEP는 Python에 제안된 문법적 확장인 List Comprehensions (리스트 컴프리헨션)에 대해 설명합니다.

## 제안된 해결책 (The Proposed Solution)
`for` 및 `if` 절을 사용하여 리스트 리터럴(list literals)을 조건부로 구성할 수 있도록 허용하는 것이 제안됩니다. 이는 현재 `for` 루프와 `if` 문이 중첩되는 방식과 동일하게 중첩될 것입니다.

## 배경 (Rationale)
List Comprehensions은 현재 `map()`과 `filter()` 그리고/또는 중첩된 루프가 사용되는 상황에서 리스트를 생성하는 더 간결한 방법을 제공합니다.

## 예시 (Examples)

다음은 List Comprehensions의 사용 예시입니다.

```python
>>> print([i for i in range(10)])


>>> print([i for i in range(20) if i%2 == 0])


>>> nums =
>>> fruit = ["Apples", "Peaches", "Pears", "Bananas"]

>>> print([(i, f) for i in nums for f in fruit])
[(1, 'Apples'), (1, 'Peaches'), (1, 'Pears'), (1, 'Bananas'), (2, 'Apples'), (2, 'Peaches'), (2, 'Pears'), (2, 'Bananas'), (3, 'Apples'), (3, 'Peaches'), (3, 'Pears'), (3, 'Bananas'), (4, 'Apples'), (4, 'Peaches'), (4, 'Pears'), (4, 'Bananas')]

>>> print([(i, f) for i in nums for f in fruit if f == "P"])
[(1, 'Peaches'), (1, 'Pears'), (2, 'Peaches'), (2, 'Pears'), (3, 'Peaches'), (3, 'Pears'), (4, 'Peaches'), (4, 'Pears')]

>>> print([(i, f) for i in nums for f in fruit if f == "P" if i%2 == 1])
[(1, 'Peaches'), (1, 'Pears'), (3, 'Peaches'), (3, 'Pears')]

>>> print([i for i in zip(nums, fruit) if i%2==0])
[(2, 'Peaches'), (4, 'Bananas')]
</code></pre>
<h2>참조 구현 (Reference Implementation)</h2>
<p>List Comprehensions는 Python 2.0 릴리스와 함께 Python 언어의 일부가 되었으며, [1]에 문서화되어 있습니다.</p>
<h2>BDFL의 지시 (BDFL Pronouncements)</h2>
<p>제안된 문법이 올바른 방식입니다. <code>[x, y for ...]</code> 형태는 허용되지 않으며, <code>[(x, y) for ...]</code>와 같이 작성해야 합니다. <code>[... for x... for y...]</code> 형태는 중첩되며, 중첩된 <code>for</code> 루프처럼 가장 마지막 인덱스가 가장 빠르게 변합니다.</p>
<h2>참고 자료 (References)</h2>
<p>[1] <a href="http://docs.python.org/reference/expressions.html#list-displays">http://docs.python.org/reference/expressions.html#list-displays</a></p>
<pre><code class="language-PEP">
## 서론 (Introduction)
이 PEP는 Python에 제안된 문법적 확장인 List Comprehensions (리스트 컴프리헨션)에 대해 설명합니다. 이 기능은 Python 2.0에서 도입되었습니다.

## 제안된 해결책 (The Proposed Solution)
`for` 및 `if` 절을 사용하여 리스트 리터럴(list literals)을 조건부로 구성할 수 있도록 허용하는 것이 제안됩니다. 이러한 구조는 기존의 `for` 루프와 `if` 문이 중첩되는 방식과 동일하게 작동하며 중첩될 수 있습니다.

## 배경 (Rationale)
List Comprehensions은 `map()` 함수와 `filter()` 함수, 또는 중첩된 루프를 사용하여 리스트를 생성하던 기존 방식보다 더 간결하고 가독성 높은 코드를 작성할 수 있는 방법을 제공합니다.

## 예시 (Examples)

다음은 List Comprehensions의 다양한 활용 예시입니다:
```python
>>> print([i for i in range(10)])
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

>>> print([i for i in range(20) if i%2 == 0]) # 짝수만 필터링
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]

>>> nums = [1, 2, 3, 4]
>>> fruit = ["Apples", "Peaches", "Pears", "Bananas"]

>>> print([(i, f) for i in nums for f in fruit]) # 두 리스트의 모든 조합 생성
[(1, 'Apples'), (1, 'Peaches'), (1, 'Pears'), (1, 'Bananas'), (2, 'Apples'), (2, 'Peaches'), (2, 'Pears'), (2, 'Bananas'), (3, 'Apples'), (3, 'Peaches'), (3, 'Pears'), (3, 'Bananas'), (4, 'Apples'), (4, 'Peaches'), (4, 'Pears'), (4, 'Bananas')]

>>> print([(i, f) for i in nums for f in fruit if f[0] == "P"]) # 조건부 조합
[(1, 'Peaches'), (1, 'Pears'), (2, 'Peaches'), (2, 'Pears'), (3, 'Peaches'), (3, 'Pears'), (4, 'Peaches'), (4, 'Pears')]

>>> print([(i, f) for i in nums for f in fruit if f[0] == "P" if i%2 == 1]) # 여러 조건 적용
[(1, 'Peaches'), (1, 'Pears'), (3, 'Peaches'), (3, 'Pears')]

>>> print([i for i in zip(nums, fruit) if i[0]%2==0]) # zip과 함께 사용
[(2, 'Peaches'), (4, 'Bananas')]
</code></pre>
<h2>참조 구현 (Reference Implementation)</h2>
<p>List Comprehensions는 Python 2.0 릴리스에 포함되어 Python 언어의 공식적인 부분이 되었으며, 자세한 내용은에서 확인할 수 있습니다.</p>
<h2>BDFL의 지시 (BDFL Pronouncements)</h2>
<p>Guido van Rossum (Python의 '자비로운 종신 독재자')은 제안된 문법이 올바른 방식임을 명확히 했습니다. 특히, <code>[x, y for ...]</code> 형태는 허용되지 않으며, 튜플을 생성할 때는 반드시 <code>[(x, y) for ...]</code>와 같이 명시적으로 괄호를 사용해야 합니다. 또한, <code>[... for x... for y...]</code> 형태는 중첩된 <code>for</code> 루프와 마찬가지로, 가장 안쪽의 (마지막) 인덱스가 가장 빠르게 변하는 방식으로 작동합니다.</p>
<h2>참고 자료 (References)</h2>
<p><a href="http://docs.python.org/reference/expressions.html#list-displays">http://docs.python.org/reference/expressions.html#list-displays</a></p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 202 - List Comprehensions"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 16:12:08+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
