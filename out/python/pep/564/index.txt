3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-aecaf5ac7a84facf.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-e3ea38185bb36cd2.js"],""]
4:["slug","python/pep/564","c"]
0:["x02Anhkwgp1He7ftuyAhh",[[["",{"children":[["slug","python/pep/564","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"564\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/564","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/da5e1dc2b9a7c5bb.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2a01,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0564/">PEP 564 - Add new time functions with nanosecond resolution</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 16-Oct-2017</p>
</blockquote>
<p>Here's the translated and summarized content of PEP 564, adhering to the specified guidelines.</p>
<hr>
<h1>PEP 564: 나노초 해상도를 지원하는 새로운 시간 함수 추가</h1>
<h2>개요</h2>
<p>PEP 564는 Python의 <code>time</code> 모듈에 나노초(nanosecond) 해상도를 제공하는 여섯 가지 새로운 함수를 추가할 것을 제안합니다. 이 함수들은 기존 함수들에 <code>_ns</code> 접미사를 붙인 형태(예: <code>time.time_ns()</code>, <code>time.monotonic_ns()</code>)로, 결과를 Python <code>int</code> 타입의 나노초 단위로 반환합니다. 이로써 기존 <code>float</code> 타입이 가질 수 있는 정밀도 손실 문제를 해결하고, 현대 시스템의 향상된 클록 해상도를 활용할 수 있게 됩니다.</p>
<h2>도입 배경 (Rationale)</h2>
<h3>float 타입의 104일 한계</h3>
<p>데스크톱 및 노트북 컴퓨터의 클록 해상도는 나노초 수준에 가까워지고 있습니다. 하지만 Python의 <code>time.time()</code> 함수는 시간을 IEEE 754 64비트 부동 소수점(float) 숫자로 반환하며, 이 <code>float</code> 타입은 약 104일이 지나면 나노초 단위의 정밀도를 잃기 시작합니다. 이는 UNIX Epoch(1970년 1월 1일) 이후 104일이 지나면 <code>time.time()</code>이 나노초 정밀도를 잃는다는 의미입니다.</p>
<p><strong>정밀도 손실 예시:</strong></p>
<ul>
<li>서버가 104일 이상 장기 실행될 경우, 성능 측정 시 <code>float</code> 타입의 한계로 인해 미묘한 시간 차이가 손실될 수 있습니다.</li>
<li>나노초 해상도로 기록된 타임스탬프를 더 낮은 해상도(예: 초 단위)의 시스템 클록과 비교할 때, 시간이 미래로 인식되는 등의 문제가 발생할 수 있습니다.</li>
<li>현대 데이터베이스와 파일 시스템은 나노초 해상도 시간 저장을 지원하고 있으며, Python 또한 이에 대한 지원이 필요합니다.</li>
</ul>
<h3>이전 PEP (PEP 410)의 기각</h3>
<p>5년 전, PEP 410은 <code>decimal.Decimal</code> 타입을 사용하여 나노초 해상도를 지원하도록 모든 시간 반환 함수를 변경하는 것을 제안했지만 기각되었습니다. 주된 이유는 다음과 같습니다.</p>
<ul>
<li>결과 타입을 변경하는 선택적 매개변수 추가 방식이 Python에서 일반적이지 않고 좋지 않은 프로그래밍 방식이라고 판단되었습니다.</li>
<li>하드웨어 클록이 정말로 1 나노초 해상도를 가졌는지, 또는 Python 레벨에서 그 의미가 명확하지 않았습니다.</li>
<li><code>decimal.Decimal</code> 타입은 Python에서 흔하지 않아 코드 적응이 필요했습니다.</li>
</ul>
<h3>CPython의 최근 5년간 개선 사항 및 기존 나노초 API</h3>
<p>PEP 410이 기각된 이후, CPython은 나노초 단위 시간 처리를 위한 개선이 있었습니다.</p>
<ul>
<li><code>os.stat_result</code> 구조체에 <code>st_atime_ns</code>, <code>st_ctime_ns</code>, <code>st_mtime_ns</code> 필드가 나노초(<code>int</code>)로 추가되었습니다.</li>
<li>PEP 418이 수락되어 Python 3.3에 <code>time.monotonic()</code>, <code>time.perf_counter()</code>, <code>time.process_time()</code> 같은 새로운 클록이 추가되었습니다.</li>
<li>CPython의 내부 <code>pytime</code> C API는 64비트 정수(<code>_PyTime_t</code>)를 사용하여 1 나노초 단위로 시간을 처리합니다.</li>
</ul>
<p>이러한 기존 API들은 이미 나노초 단위의 <code>int</code>를 사용하고 있으므로, 새로운 함수들도 <code>int</code> 타입을 사용하는 것이 일관성이 있습니다.</p>
<h2>변경 사항 (Changes)</h2>
<h3>새로운 함수 (New functions)</h3>
<p><code>time</code> 모듈에 다음과 같은 6가지 새로운 함수가 추가됩니다.</p>
<ul>
<li><code>time.clock_gettime_ns(clock_id)</code></li>
<li><code>time.clock_settime_ns(clock_id, time: int)</code></li>
<li><code>time.monotonic_ns()</code></li>
<li><code>time.perf_counter_ns()</code></li>
<li><code>time.process_time_ns()</code></li>
<li><code>time.time_ns()</code></li>
</ul>
<p>이 함수들은 기존 <code>_ns</code> 접미사가 없는 버전과 유사하지만, 나노초 단위의 <code>int</code> 값을 반환합니다. 예를 들어, <code>time.monotonic_ns()</code>는 <code>int(time.monotonic() * 1e9)</code>와 유사한 값을 반환합니다. 이 함수들은 <code>time.time()</code>처럼 UNIX epoch를 기준으로 하는 "큰" 타임스탬프를 반환할 수 있으므로, <code>float</code> 반환 시 발생할 수 있는 나노초 정밀도 손실을 방지합니다.</p>
<h3>변경되지 않는 함수 (Unchanged functions)</h3>
<p>Python 3.3에서 <code>time.clock()</code> 함수가 Deprecated(사용 중단)되었으므로 <code>time.clock_ns()</code>는 추가되지 않습니다.
다른 시간 반환 함수들은 내부 해상도가 1 마이크로초(us) 이상이거나 최대값이 <code>float</code> 정밀도 손실을 일으키지 않을 만큼 작기 때문에 나노초 변형이 제안되지 않았습니다 (예: <code>os</code> 모듈의 <code>sched_rr_get_interval()</code>, <code>time.clock_getres()</code> 등).</p>
<h2>대안 및 논의 (Alternatives and discussion)</h2>
<h3>서브-나노초(Sub-nanosecond) 해상도</h3>
<p><code>time.time_ns()</code> API는 이론적으로 미래에 더 미세한 클록 해상도가 필요해질 경우 완전하게 "미래 지향적"이지 않을 수 있습니다. 그러나 현재 대부분의 운영 체제 함수가 반환하는 모든 구조체에서 1 나노초 해상도로 충분합니다. CPU TSC 클록과 같이 1 나노초보다 더 나은 해상도(예: 0.3 ns)를 가진 하드웨어 클록이 존재하지만, 이러한 희귀한 사용 사례를 위해 Python 표준 라이브러리를 서브-나노초 해상도까지 지원하도록 설계하는 것은 정당화되지 않습니다. CPython 구현에서는 <code>int64_t</code> 타입을 사용하여 나노초 정밀도 타임스탬프를 저장하는 것이 편리하며, 이는 약 -292년에서 +292년까지의 시간 범위를 지원합니다.</p>
<h3><code>time.time()</code> 결과 타입 변경</h3>
<p><code>time.time()</code> 함수가 더 나은 정밀도를 가진 다른 숫자 타입을 반환하도록 변경하는 아이디어가 있었으나, PEP 410에서 <code>decimal.Decimal</code> 제안이 기각되었습니다. 기존 함수를 새로운 타입으로 변경하는 것은 하위 호환성을 깨뜨릴 위험이 있습니다.</p>
<h3>다른 타입</h3>
<p><code>int</code> 타입을 재사용하는 것보다 새로운 타입을 추가하는 것은 표준 라이브러리, 서드파티 코드 및 애플리케이션의 더 많은 수정 노력을 요구합니다. Python의 <code>int</code> 타입은 잘 알려져 있고, 잘 지원되며, 조작하기 쉽고, <code>dt = t2 - t1</code>과 같은 모든 산술 연산을 지원합니다.</p>
<h3>다른 API 방식</h3>
<p><code>time.time(ns=False)</code>와 같이 매개변수에 따라 결과 타입을 변경하는 API 방식은 Python에서 일반적이지 않으며 좋지 않은 프로그래밍 방식으로 간주되었습니다.</p>
<h3>새로운 모듈</h3>
<p><code>time_ns</code>와 같은 새로운 모듈을 추가하는 아이디어도 있었으나, 두 가지 버전의 <code>time</code> 모듈을 유지 관리하는 어려움과, <code>os</code> 모듈 등 다른 모듈에도 나노초 변형이 필요할 경우 <code>os_ns</code>와 같은 새로운 모듈을 계속 추가해야 하는 문제 때문에 기각되었습니다. <code>time.ns</code>와 같은 하위 모듈 제안도 비슷한 문제를 안고 있습니다.</p>
<h2>부록: Python의 클록 해상도 (Annex: Clocks Resolution in Python)</h2>
<p>PEP는 Python에서 측정된 클록 해상도에 대한 상세 분석을 포함합니다.</p>
<h3>Linux</h3>
<p>Fedora 26 (kernel 4.12)에서 측정된 클록 해상도는 다음과 같습니다.</p>
<ul>
<li><code>time.time()</code>: 239 ns</li>
<li><code>time.time_ns()</code>: 84 ns (약 2.8배 개선)</li>
<li><code>time.monotonic()</code>: 81 ns</li>
<li><code>time.monotonic_ns()</code>: 84 ns</li>
<li><code>time.perf_counter()</code>: 82 ns</li>
<li><code>time.perf_counter_ns()</code>: 84 ns</li>
<li><code>time.process_time()</code>: 2 ns</li>
<li><code>time.process_time_ns()</code>: 1 ns</li>
</ul>
<h3>Windows</h3>
<p>Windows 8.1에서 측정된 클록 해상도는 다음과 같습니다.</p>
<ul>
<li><code>time.time()</code>: 894.1 us</li>
<li><code>time.time_ns()</code>: 318 us (약 2.8배 개선)</li>
<li><code>time.monotonic()</code>: 15 ms</li>
<li><code>time.monotonic_ns()</code>: 15 ms</li>
<li><code>time.perf_counter()</code>: 100 ns</li>
<li><code>time.perf_counter_ns()</code>: 100 ns</li>
<li><code>time.process_time()</code>: 15.6 ms</li>
<li><code>time.process_time_ns()</code>: 15.6 ms</li>
</ul>
<h3>분석</h3>
<p><code>time.time_ns()</code>의 해상도는 <code>time.time()</code>보다 훨씬 우수합니다 (Linux에서 84 ns 대 239 ns, Windows에서 318 us 대 894 us). <code>time.time()</code>의 해상도는 시간이 지남에 따라 점차 악화될 수 있는데, 이는 매일 시스템 클록에 많은 나노초가 추가되어 정밀도 손실이 증가하기 때문입니다.
<code>time.perf_counter()</code>, <code>time.monotonic()</code>, <code>time.process_time()</code>와 그 나노초 변형 간의 큰 차이는 단기 실행 스크립트에서는 눈에 띄지 않을 수 있지만, 시스템 업타임이 104일 이상이 되면 유의미한 차이가 나타날 수 있습니다.</p>
<hr>
<p><strong>결론적으로, PEP 564는 Python 개발자들이 현대 하드웨어의 정밀한 시간 측정 기능을 <code>float</code> 정밀도 손실 없이 활용할 수 있도록 <code>time</code> 모듈에 나노초 해상도를 가진 새로운 함수들을 <code>int</code> 타입으로 추가하는 것을 목표로 합니다. 이는 시스템의 미세한 성능 측정, 이벤트 동기화, 그리고 고정밀 타임스탬프 처리에 필수적인 개선입니다.</strong></p>
<hr>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 564 - Add new time functions with nanosecond resolution"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 23:48:58+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
