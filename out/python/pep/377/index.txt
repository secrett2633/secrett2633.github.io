3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-19cfc001fdac3337.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-51594f997fc19690.js"],""]
4:["slug","python/pep/377","c"]
0:["FeyCvJug7In7AgUZlfHUx",[[["",{"children":[["slug","python/pep/377","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"377\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/377","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2dfa,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0377/">PEP 377 - Allow <strong>enter</strong>() methods to skip the statement body</a></p>
<p><strong>상태:</strong> Rejected | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 08-Mar-2009</p>
</blockquote>
<h2>PEP 377 – <code>__enter__()</code> 메서드가 <code>with</code> 문 본문 건너뛰기 허용</h2>
<p><strong>저자:</strong> Alyssa Coghlan
<strong>상태:</strong> Rejected (반려됨)
<strong>유형:</strong> Standards Track
<strong>생성일:</strong> 2009년 3월 8일
<strong>Python 버전:</strong> 2.7, 3.1
<strong>Post-History:</strong> 2009년 3월 8일</p>
<hr>
<h3>요약</h3>
<p>이 PEP는 <code>__enter__()</code> 메서드가 관련 <code>with</code> 문(statement)의 본문(body) 실행을 건너뛸 수 있도록 하는 하위 호환 가능한(backwards compatible) 메커니즘을 제안합니다. 현재 이러한 기능이 없기 때문에 <code>contextlib.contextmanager</code> 데코레이터는 임의의 코드를 적절한 위치에 <code>yield</code>가 있는 제너레이터(generator) 함수로 이동시켜 컨텍스트 관리자(context manager)로 변환할 수 있다는 사양을 충족할 수 없습니다. 이 문제의 한 증상은 <code>contextlib.nested</code>가 해당 중첩된 <code>with</code> 문을 직접 작성했을 때는 발생하지 않을 <code>RuntimeError</code>를 발생시킨다는 것입니다.</p>
<p>제안된 변경 사항은 새로운 흐름 제어 예외인 <code>SkipStatement</code>를 도입하고, <code>__enter__()</code>가 이 예외를 발생시키면 <code>with</code> 문의 본문 실행을 건너뛰는 것입니다.</p>
<h3>PEP 반려</h3>
<p>이 PEP는 표현력(expressiveness)과 정확성(correctness)의 비례적인 증가 없이 복잡성을 너무 크게 증가시킨다는 이유로 Guido에 의해 반려되었습니다. 이 PEP가 제안하는 더 복잡한 의미론(semantics)을 필요로 하는 설득력 있는 사용 사례가 없으므로, 기존 동작은 허용 가능한 것으로 간주됩니다.</p>
<h3>제안된 변경 사항</h3>
<p><code>with</code> 문의 의미론은 <code>__enter__()</code> 호출 주변에 새로운 <code>try / except / else</code> 블록을 포함하도록 변경될 예정이었습니다. <code>__enter__()</code> 메서드가 <code>SkipStatement</code>를 발생시키면, <code>with</code> 문의 주요 부분(이제 <code>else</code> 절에 위치)은 실행되지 않습니다. 이 경우 <code>as</code> 절에 있는 이름들이 바인딩되지 않은 채로 남겨지는 것을 방지하기 위해, 기존의 <code>NotImplemented</code> 싱글톤과 유사한 새로운 <code>StatementSkipped</code> 싱글톤이 <code>as</code> 절에 나타나는 모든 이름에 할당될 것입니다.</p>
<p><code>with</code> 문의 구성 요소는 PEP 343에 설명된 대로 유지됩니다:</p>
<pre><code class="language-python">with EXPR as VAR:
    BLOCK
</code></pre>
<p>변경 후 <code>with</code> 문의 의미론은 다음과 같습니다:</p>
<pre><code class="language-python">mgr = (EXPR)
exit = mgr.__exit__ # 아직 호출하지 않음
try:
    value = mgr.__enter__()
except SkipStatement:
    VAR = StatementSkipped # "as VAR"이 있고 VAR이 단일 이름인 경우에만
                           # VAR이 이름들의 튜플인 경우, StatementSkipped는 튜플의 각 이름에 할당됩니다.
else:
    exc = True
    try:
        try:
            VAR = value # "as VAR"이 있는 경우에만
            BLOCK
        except:
            # 예외적인 경우는 여기서 처리됩니다.
            exc = False
            if not exit(*sys.exc_info()):
                raise # exit()가 True를 반환하면 예외가 무시됩니다.
        finally:
            # 정상 및 비지역-goto(non-local-goto) 경우는 여기서 처리됩니다.
            if exc:
                exit(None, None, None)
</code></pre>
<p>위의 <code>with</code> 문 의미론 변경이 적용되면, <code>contextlib.contextmanager()</code>는 기본 제너레이터가 <code>yield</code>하지 않을 때 <code>RuntimeError</code> 대신 <code>SkipStatement</code>를 발생시키도록 수정될 것입니다.</p>
<h3>변경 제안 배경</h3>
<p>현재 일부 겉보기에 무해한 컨텍스트 관리자는 실행 시 <code>RuntimeError</code>를 발생시킬 수 있습니다. 이는 컨텍스트 관리자의 <code>__enter__()</code> 메서드가 <code>with</code> 문의 본문에 해당하는 코드가 건너뛰어야 할 상황을 만났을 때 발생합니다. <code>__enter__()</code> 메서드는 이를 인터프리터에 알릴 수 있는 메커니즘이 없으므로, <code>with</code> 문 본문을 건너뛸 뿐만 아니라 가장 가까운 예외 핸들러까지 모든 코드를 건너뛰는 예외를 발생시킬 수밖에 없습니다. 이는 <code>with</code> 문의 설계 목표 중 하나인, 임의의 공통 예외 처리 코드를 제너레이터 함수에 넣고 코드의 가변 부분을 <code>yield</code> 문으로 대체함으로써 단일 컨텍스트 관리자로 분리할 수 있도록 하는 것과 상충됩니다.</p>
<p>구체적으로, <code>cmB().__enter__()</code>가 <code>cmA().__exit__()</code>가 처리하고 억제하는 예외를 발생시키는 경우 다음 예제들은 다르게 동작합니다:</p>
<pre><code class="language-python">with cmA():
    with cmB():
        do_stuff() # "do_stuff()"를 실행하지 않고 여기서 재개됩니다.

@contextlib.contextmanager
def combined():
    with cmA():
        with cmB():
            yield

with combined():
    do_stuff() # 컨텍스트 관리자의 기본 제너레이터가 yield하지 않았다고 불평하는
               # RuntimeError를 발생시킬 것입니다.

with contextlib.nested(cmA(), cmB()):
    do_stuff() # contextmanager() 예제와 동일한 RuntimeError를 발생시킬 것입니다
               # (nested() 구현이 contextmanager()를 사용한다는 점을 고려하면 놀랍지 않습니다).

# 다음 클래스 기반 버전은 이 문제가 contextlib.contextmanager()에만 국한된 것이 아님을 보여줍니다
# (또한 컨텍스트 관리자를 클래스 대신 제너레이터로 작성하는 것이 얼마나 간단한지도 보여줍니다!)
class CM(object):
    def __init__(self):
        self.cmA = None
        self.cmB = None
    def __enter__(self):
        if self.cmA is not None:
            raise RuntimeError("Can't re-use this CM")
        self.cmA = cmA()
        self.cmA.__enter__()
        try:
            self.cmB = cmB()
            self.cmB.__enter__()
        except:
            self.cmA.__exit__(*sys.exc_info()) # __enter__()에서는 억제할 수 없으므로, 다시 발생시켜야 합니다.
            raise
    def __exit__(self, *args):
        suppress = False
        try:
            if self.cmB is not None:
                suppress = self.cmB.__exit__(*args)
        except:
            suppress = self.cmA.__exit__(*sys.exc_info()):
            if not suppress:
                # 예외가 변경되었으므로 명시적으로 다시 발생시킵니다.
                raise
            else:
                if suppress:
                    # cmB가 이미 예외를 억제했으므로, cmA에 전달하지 않습니다.
                    suppress = self.cmA.__exit__(None, None, None):
                else:
                    suppress = self.cmA.__exit__(*args):
        return suppress
</code></pre>
<p>제안된 의미론적 변경이 적용되면 위의 <code>contextlib</code> 기반 예제들은 "그냥 작동"할 것이지만, 클래스 기반 버전은 새로운 의미론을 활용하기 위해 약간의 조정이 필요했을 것입니다:</p>
<pre><code class="language-python">class CM(object):
    def __init__(self):
        self.cmA = None
        self.cmB = None
    def __enter__(self):
        if self.cmA is not None:
            raise RuntimeError("Can't re-use this CM")
        self.cmA = cmA()
        self.cmA.__enter__()
        try:
            self.cmB = cmB()
            self.cmB.__enter__()
        except:
            if self.cmA.__exit__(*sys.exc_info()):
                # 예외를 억제하지만, with 문 본문도 실행하지 않습니다.
                raise SkipStatement
            raise
    def __exit__(self, *args):
        suppress = False
        try:
            if self.cmB is not None:
                suppress = self.cmB.__exit__(*args)
        except:
            suppress = self.cmA.__exit__(*sys.exc_info()):
            if not suppress:
                # 예외가 변경되었으므로 명시적으로 다시 발생시킵니다.
                raise
            else:
                if suppress:
                    # cmB가 이미 예외를 억제했으므로, cmA에 전달하지 않습니다.
                    suppress = self.cmA.__exit__(None, None, None):
                else:
                    suppress = self.cmA.__exit__(*args):
        return suppress
</code></pre>
<p>현재 <code>contextlib.nested</code>를 사용하지 않고도 단일 <code>with</code> 문에 여러 컨텍스트 관리자를 포함할 수 있도록 <code>with</code> 문에 import 스타일 구문을 추가하자는 잠정적인 제안이 있습니다. 이 경우 컴파일러는 AST(추상 구문 트리) 수준에서 단순히 여러 <code>with</code> 문을 내보낼 옵션을 가지며, 따라서 실제 중첩된 <code>with</code> 문의 의미론을 정확하게 재현할 수 있습니다. 그러나 이러한 변경은 이 PEP가 다루고자 하는 문제를 완화하기보다는 오히려 부각시킬 것입니다. 즉, <code>contextlib.contextmanager</code>를 사용하여 이러한 <code>with</code> 문들을 안정적으로 분리하는 것이 불가능할 것입니다. 왜냐하면 위의 예제에서 <code>combined()</code> 컨텍스트 관리자와 동일한 의미론적 차이를 보일 것이기 때문입니다.</p>
<h3>성능 영향</h3>
<p>새로운 의미론을 구현하려면 <code>__enter__</code> 및 <code>__exit__</code> 메서드에 대한 참조를 스택(stack) 대신 임시 변수에 저장해야 합니다. 이는 Python 2.6/3.1에 비해 <code>with</code> 문 속도에 약간의 회귀(regression)를 초래합니다. 그러나 사용자 정의 <code>SETUP_WITH</code> opcode를 구현하면 두 접근 방식 간의 차이를 상쇄할 수 있습니다(또한 수십 번의 불필요한 eval 루프(loop) 왕복을 제거하여 속도를 극적으로 향상시킵니다).</p>
<h3>참조 구현</h3>
<p>이슈 5251에 패치가 첨부되어 있습니다. 이 패치는 기존 opcode만 사용합니다(즉, <code>SETUP_WITH</code> 없음).</p>
<h3>감사의 글</h3>
<p>James William Pye는 이 문제 제기 및 이 PEP에 설명된 해결책의 기본 개요를 제안했습니다.</p>
<h3>참고 자료</h3>
<p>이슈 5251: contextlib.nested inconsistent with nested with statements (http://bugs.python.org/issue5251)
Import-style syntax to reduce indentation of nested with statements (https://mail.python.org/pipermail/python-ideas/2009-March/003188.html)
Guido's rejection of the PEP (https://mail.python.org/pipermail/python-dev/2009-March/087263.html)</p>
<h3>저작권</h3>
<p>이 문서는 공개 도메인에 있습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1098,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Rejected] PEP 377 - Allow __enter__() methods to skip the statement body"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 21:00:13+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
