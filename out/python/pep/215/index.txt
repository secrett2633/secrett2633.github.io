3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/215","c"]
0:["jf5MDuRUbMNVvRN9tv5rq",[[["",{"children":[["slug","python/pep/215","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"215\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/215","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T1773,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0215/">PEP 215 - String Interpolation</a></p>
<p><strong>상태:</strong> Superseded | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 24-Jul-2000</p>
</blockquote>
<h2>PEP 215 – 문자열 보간 (String Interpolation)</h2>
<h3>개요</h3>
<p>이 문서는 Python 2.1에서 더 쉬운 문자열 포매팅을 가능하게 하는 문자열 보간(String Interpolation) 기능을 제안합니다. 제안된 구문 변경은 <code>$ </code> 접두사의 도입입니다. 이 접두사는 유닉스 셸(Unix shells), <code>awk</code>, Perl, 또는 Tcl에서 찾아볼 수 있는 변수 보간(variable interpolation) 방식과 유사하게 문자열 내의 <code>$</code> 문자에 대한 특별한 해석을 트리거합니다.</p>
<p><strong>중요:</strong> 이 PEP는 PEP 292에 의해 대체(Superseded)되었습니다.</p>
<h3>저작권</h3>
<p>이 문서는 퍼블릭 도메인에 속합니다.</p>
<h3>사양 (Specification)</h3>
<p>문자열 앞에 리딩 싱글 또는 더블 따옴표(또는 삼중 따옴표)와 다른 문자열 접두사('r' 또는 'u') 앞에 오는 <code>$</code> 접두사가 붙을 수 있습니다. 이러한 문자열은 내용의 백슬래시 이스케이프(backslash-escapes)에 대한 일반적인 해석 후에 보간을 위해 처리됩니다. 이 처리는 문자열이 값 스택(value stack)에 푸시되기 직전에, 문자열이 푸시될 때마다 발생합니다. 요약하자면, Python은 <code>$</code>가 문자열에 적용되는 단항 연산자(unary operator)인 것처럼 정확하게 동작합니다. 수행되는 연산은 다음과 같습니다:</p>
<p>문자열은 <code>$</code> 문자(<code>\x24</code> (8비트 문자열) 또는 <code>\u0024</code> (유니코드 문자열))를 찾기 위해 처음부터 끝까지 스캔됩니다. <code>$</code> 문자가 없으면 문자열은 변경되지 않고 반환됩니다.</p>
<p>문자열에서 발견된 모든 <code>$</code>는 아래에 설명된 두 가지 종류의 표현식 중 하나가 뒤따라올 경우, 현재 네임스페이스(namespaces)에서 평가된 표현식의 값으로 대체됩니다. 이 값은 포함하는 문자열이 8비트 문자열인 경우 <code>str()</code>로, 유니코드 문자열인 경우 <code>unicode()</code>로 변환됩니다.</p>
<ul>
<li>선택적으로 여러 개의 트레일러(trailer)가 뒤따르는 Python 식별자. 여기서 트레일러는 다음으로 구성됩니다:
<ul>
<li>점(<code>.</code>)과 식별자.</li>
<li>대괄호(<code>[]</code>)로 묶인 표현식.</li>
<li>괄호(<code>()</code>)로 묶인 인자 목록. (이는 <code>Grammar/Grammar</code>의 정의를 사용하여 Python 문법에서 “<code>NAME trailer*</code>”로 표현된 패턴과 정확히 일치합니다.)</li>
</ul>
</li>
<li>중괄호(<code>{}</code>)로 묶인 완전한 Python 표현식.</li>
</ul>
<p>두 개의 달러 기호(<code>$$</code>)는 하나의 <code>$</code>로 대체됩니다.</p>
<h3>예시 (Examples)</h3>
<p>다음은 이 기능의 예상되는 동작을 보여주는 대화형 세션 예시입니다.</p>
<pre><code class="language-python">>>> a, b = 5, 6
>>> print $'a = $a, b = $b'
a = 5, b = 6
>>> $u'uni${a}ode'
u'uni5ode'
>>> print $'\$a'
5
>>> print $r'\$a'
\5
>>> print $'$$$a.$b'
$5.6
>>> print $'a + b = ${a + b}'
a + b = 11
>>> import sys
>>> print $'References to $a: $sys.getrefcount(a)'
References to 5: 15
>>> print $"sys = $sys, sys = $sys.modules['sys']"
sys = &#x3C;module 'sys' (built-in)>, sys = &#x3C;module 'sys' (built-in)>
>>> print $'BDFL = $sys.copyright.split()[4].upper()'
BDFL = GUIDO
</code></pre>
<h3>논의 (Discussion)</h3>
<p><code>$</code>는 다른 많은 언어 및 컨텍스트에서 이미 보간 문자로 사용되므로 익숙함을 위해 문자열 내의 보간 문자로 선택되었습니다.</p>
<p>이러한 맥락에서 <code>$</code>를 접두사로 선택하는 것은 보간 문자에 대한 기억하기 쉬운(mnemonic) 방식이므로 자연스러운 선택입니다.</p>
<p>트레일러(trailers)가 허용되어 대부분의 다른 언어에서 사용 가능한 보간보다 훨씬 더 강력한 보간 메커니즘을 제공하면서도, 보간될 표현식은 명확하게 보이고 중괄호가 필요 없습니다.</p>
<p><code>$</code>는 연산자처럼 작동하며 연산자로 구현될 수도 있지만, 그렇게 하면 컴파일 타임 최적화(compile-time optimization)가 불가능해지고 보안 문제가 발생합니다. 따라서 문자열 접두사로만 허용됩니다.</p>
<h3>보안 문제 (Security Issues)</h3>
<p><code>$</code>는 <code>eval()</code>의 기능을 가지고 있지만, 리터럴(literal)만을 평가합니다. (연산자가 아닌 문자열 접두사로) 여기에 설명된 방식으로는 새로운 보안 문제를 야기하지 않습니다. 평가될 표현식은 코드에 문자열 리터럴로 명시적으로 존재해야 하기 때문입니다.</p>
<h3>구현 (Implementation)</h3>
<p>의 <code>Itpl</code> 모듈은 이 기능의 프로토타입을 제공합니다. 이 모듈은 <code>tokenize</code> 모듈을 사용하여 보간될 표현식의 끝을 찾은 다음, 값이 필요할 때마다 표현식에 대해 <code>eval()</code>을 호출합니다. 프로토타입에서는 표현식이 평가될 때마다 구문 분석(parse)되고 다시 컴파일됩니다.</p>
<p>최적화로서, 보간된 문자열은 해당 바이트코드(bytecode)로 직접 컴파일될 수 있습니다. 즉, <code>'a = $a, b = $b'</code>는 마치 <code>'a = ' + str(a) + ', b = ' + str(b)</code> 표현식인 것처럼 컴파일되어 한 번만 컴파일되면 됩니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Superseded] PEP 215 - String Interpolation"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 16:32:37+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
