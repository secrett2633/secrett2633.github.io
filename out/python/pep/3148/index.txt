3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/3148","c"]
0:["jf5MDuRUbMNVvRN9tv5rq",[[["",{"children":[["slug","python/pep/3148","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3148\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3148","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2c11,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3148/">PEP 3148 - futures - execute computations asynchronously</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 16-Oct-2009</p>
</blockquote>
<p>PEP 3148 – futures - 비동기 연산 실행</p>
<h2>개요 (Abstract)</h2>
<p>이 PEP는 스레드와 프로세스를 활용하여 호출 가능한(callable) 객체의 연산을 용이하게 하는 패키지 설계를 제안합니다. 이 패키지는 비동기 연산을 추상화하여 개발자가 병렬 처리 로직을 직접 관리하는 복잡성을 줄이고, 더 쉽고 효율적인 동시성 프로그래밍을 가능하게 합니다.</p>
<h2>도입 배경 (Motivation)</h2>
<p>Python은 현재 멀티스레드 및 멀티프로세스 애플리케이션을 구축하기 위한 강력한 기본 요소를 제공하지만, 단순한 작업을 병렬화하는 것은 많은 노력을 필요로 합니다. 예를 들어, 명시적으로 프로세스/스레드를 시작하고, 작업/결과 큐를 구성하며, 완료 또는 기타 종료 조건(예: 실패, 타임아웃)을 기다리는 과정이 복잡합니다. 또한, 각 구성 요소가 자체 병렬 실행 전략을 사용할 경우, 전역 프로세스/스레드 제한을 가진 애플리케이션을 설계하는 것이 어렵습니다. <code>futures</code> 패키지는 이러한 복잡성을 추상화하여 개발자가 더 쉽게 병렬 연산을 수행할 수 있도록 돕습니다.</p>
<h2>사양 (Specification)</h2>
<h3>명명 (Naming)</h3>
<p>제안된 패키지는 "futures"라고 불리며 새로운 최상위 패키지인 "concurrent" 안에 위치합니다. "concurrent" 네임스페이스에 포함시키는 이유는 다음과 같습니다:</p>
<ol>
<li>기존의 <code>from __future__ import x</code> 구문과의 혼동을 방지합니다.</li>
<li>라이브러리가 동시성(concurrency)과 관련이 있음을 명확하게 나타냅니다.</li>
<li><code>multiprocessing.Pool</code> 작업과 같이 기존의 동시성 관련 라이브러리들을 미래에 이 네임스페이스로 이동하거나 추가할 수 있는 기반을 마련합니다.</li>
</ol>
<h3>인터페이스 (Interface)</h3>
<p>제안된 패키지는 두 가지 핵심 클래스인 <code>Executor</code>와 <code>Future</code>를 제공합니다. <code>Executor</code>는 호출 가능한 객체와 인수를 받아 비동기 작업 요청을 처리하고, 해당 작업의 실행을 나타내는 <code>Future</code> 객체를 반환합니다.</p>
<h4>Executor</h4>
<p><code>Executor</code>는 비동기적으로 호출을 실행하는 메서드를 제공하는 추상 클래스입니다.</p>
<ul>
<li><code>submit(fn, *args, **kwargs)</code>: <code>fn(*args, **kwargs)</code>로 실행될 호출 가능 객체를 스케줄링하고, 해당 호출의 실행을 나타내는 <code>Future</code> 인스턴스를 반환합니다. 이 메서드는 <code>Executor</code> 서브클래스에서 구현되어야 하는 추상 메서드입니다.</li>
<li><code>map(func, *iterables, timeout=None)</code>: <code>map(func, *iterables)</code>와 유사하지만, <code>func</code>가 비동기적으로 실행되며 여러 <code>func</code> 호출이 동시에 이루어질 수 있습니다. 반환된 이터레이터는 <code>__next__()</code>가 호출되었을 때 <code>map()</code>에 대한 원래 호출로부터 <code>timeout</code> 초 후에 결과가 사용 가능하지 않으면 <code>TimeoutError</code>를 발생시킵니다.</li>
<li><code>shutdown(wait=True)</code>: 현재 보류 중인 퓨처들의 실행이 완료되면 사용 중인 리소스를 해제해야 함을 Executor에 알립니다. <code>shutdown</code> 이후의 <code>Executor.submit</code> 및 <code>Executor.map</code> 호출은 <code>RuntimeError</code>를 발생시킵니다. <code>wait</code>가 <code>True</code>이면 모든 보류 중인 퓨처가 실행을 마치고 관련 리소스가 해제될 때까지 이 메서드는 반환되지 않습니다. <code>wait</code>가 <code>False</code>이면 즉시 반환되며, 리소스는 모든 퓨처가 완료된 후에 해제됩니다.</li>
<li><code>__enter__()</code>, <code>__exit__(exc_type, exc_val, exc_tb)</code>: 컨텍스트 매니저로 <code>Executor</code>를 사용할 때, <code>__exit__</code>는 <code>Executor.shutdown(wait=True)</code>를 호출합니다.</li>
</ul>
<h4>ProcessPoolExecutor</h4>
<p><code>ProcessPoolExecutor</code> 클래스는 프로세스 풀을 사용하여 호출을 비동기적으로 실행하는 <code>Executor</code> 서브클래스입니다. <code>ProcessPoolExecutor.submit</code>에 전달되는 호출 가능한 객체와 인수는 <code>multiprocessing</code> 모듈과 동일한 제약 조건에 따라 <code>pickle</code> 가능해야 합니다. <code>ProcessPoolExecutor</code>에 제출된 호출 가능 객체 내에서 <code>Executor</code> 또는 <code>Future</code> 메서드를 호출하면 교착 상태(deadlock)가 발생할 수 있습니다.</p>
<ul>
<li><code>__init__(max_workers)</code>: 최대 <code>max_workers</code> 수의 프로세스 풀을 사용하여 호출을 비동기적으로 실행합니다. <code>max_workers</code>가 <code>None</code>이거나 제공되지 않으면 머신이 가진 프로세서 수만큼 워커 프로세스가 생성됩니다.</li>
</ul>
<h4>ThreadPoolExecutor</h4>
<p><code>ThreadPoolExecutor</code> 클래스는 스레드 풀을 사용하여 호출을 비동기적으로 실행하는 <code>Executor</code> 서브클래스입니다. <code>Future</code>와 관련된 호출 가능 객체가 다른 <code>Future</code>의 결과를 기다릴 때 교착 상태가 발생할 수 있습니다.</p>
<ul>
<li><code>__init__(max_workers)</code>: 최대 <code>max_workers</code> 수의 스레드 풀을 사용하여 호출을 비동기적으로 실행합니다.</li>
</ul>
<h4>Future 객체 (Future Objects)</h4>
<p><code>Future</code> 클래스는 호출 가능 객체의 비동기 실행을 캡슐화합니다. <code>Future</code> 인스턴스는 <code>Executor.submit</code>에 의해 반환됩니다.</p>
<ul>
<li><code>cancel()</code>: 호출을 취소하려고 시도합니다. 호출이 현재 실행 중인 경우 취소할 수 없으며 <code>False</code>를 반환하고, 그렇지 않으면 호출이 취소되고 <code>True</code>를 반환합니다.</li>
<li><code>cancelled()</code>: 호출이 성공적으로 취소되었으면 <code>True</code>를 반환합니다.</li>
<li><code>running()</code>: 호출이 현재 실행 중이며 취소할 수 없으면 <code>True</code>를 반환합니다.</li>
<li><code>done()</code>: 호출이 성공적으로 취소되었거나 실행이 완료되었으면 <code>True</code>를 반환합니다.</li>
<li><code>result(timeout=None)</code>: 호출에 의해 반환된 값을 반환합니다. 호출이 아직 완료되지 않은 경우 이 메서드는 <code>timeout</code> 초까지 기다립니다. <code>timeout</code> 내에 완료되지 않으면 <code>TimeoutError</code>가 발생합니다.</li>
<li><code>exception(timeout=None)</code>: 호출에 의해 발생된 예외를 반환합니다. <code>result</code>와 유사하게 동작하며, 호출이 예외를 발생시키지 않고 완료되면 <code>None</code>을 반환합니다.</li>
<li><code>add_done_callback(fn)</code>: 퓨처가 취소되거나 실행을 마쳤을 때 호출될 <code>fn</code>을 퓨처에 연결합니다. <code>fn</code>은 퓨처를 유일한 인수로 받아 호출됩니다.</li>
</ul>
<h4>내부 Future 메서드 (Internal Future Methods)</h4>
<p>다음 <code>Future</code> 메서드들은 단위 테스트 및 <code>Executor</code> 구현에서 사용하기 위한 것입니다.</p>
<ul>
<li><code>set_running_or_notify_cancel()</code>: <code>Future</code>와 관련된 작업을 실행하기 전에 <code>Executor</code> 구현에서 호출해야 합니다. <code>False</code>를 반환하면 <code>Future</code>가 취소되었음을 의미하며, <code>True</code>를 반환하면 <code>Future</code>가 취소되지 않고 실행 중 상태로 전환되었음을 의미합니다.</li>
<li><code>set_result(result)</code>: <code>Future</code>와 관련된 작업의 결과를 설정합니다.</li>
<li><code>set_exception(exception)</code>: <code>Future</code>와 관련된 작업의 결과를 주어진 <code>Exception</code>으로 설정합니다.</li>
</ul>
<h4>모듈 함수 (Module Functions)</h4>
<ul>
<li><code>wait(fs, timeout=None, return_when=ALL_COMPLETED)</code>: <code>fs</code>에 주어진 <code>Future</code> 인스턴스들이 완료되기를 기다립니다. 완료된 퓨처를 담는 "done" 세트와 미완료된 퓨처를 담는 "not_done" 세트의 명명된 2-튜플을 반환합니다. <code>return_when</code> 인수는 메서드가 언제 반환될지 지정합니다 (<code>FIRST_COMPLETED</code>, <code>FIRST_EXCEPTION</code>, <code>ALL_COMPLETED</code>).</li>
<li><code>as_completed(fs, timeout=None)</code>: <code>fs</code>에 주어진 <code>Future</code> 인스턴스들이 완료(완료되거나 취소됨)될 때마다 해당 퓨처를 반환하는 이터레이터를 제공합니다.</li>
</ul>
<h3>예시</h3>
<p>PEP는 <code>ProcessPoolExecutor</code>를 사용하여 소수(prime number)를 확인하는 예시와 <code>ThreadPoolExecutor</code>를 사용하여 웹 페이지를 크롤링하는 예시를 제공합니다. 이 예시들은 <code>concurrent.futures</code> 모듈이 복잡한 동시성 로직 없이 어떻게 병렬 작업을 쉽게 처리할 수 있는지 보여줍니다.</p>
<h2>설계 근거 (Rationale)</h2>
<p>이 모듈의 제안된 설계는 Java의 <code>java.util.concurrent</code> 패키지에 크게 영향을 받았습니다. Java와 마찬가지로 이 모듈의 개념적 기반은 비동기 연산의 진행 상황과 결과를 나타내는 <code>Future</code> 클래스입니다. <code>Future</code> 클래스는 스레드, 프로세스 또는 원격 프로시저 호출을 사용한 평가에 사용될 수 있습니다.</p>
<p><code>Future</code> 객체는 <code>Executor</code> 클래스의 구체적인 구현체에 의해 생성됩니다. 참조 구현은 프로세스 또는 스레드 풀을 사용하여 연산을 적극적으로 평가하는 클래스를 제공합니다.</p>
<p>이 제안은 Python 언어 구문이나 의미에 어떤 변경도 도입하지 않습니다. PEP 3148에 대한 논의를 통해 <code>Executor</code> 클래스는 추상 기본 클래스로 만들어졌고, <code>Future.remove_done_callback</code> 메서드는 사용 사례 부족으로 제거되었으며, <code>Future.add_done_callback</code> 메서드는 동일한 호출 가능 객체를 여러 번 추가할 수 있도록 수정되었습니다. 또한, <code>Future</code> 클래스의 변경 메서드는 해당 퓨처를 생성한 <code>Executor</code>에만 비공개임을 나타내기 위해 문서화가 개선되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 3148 - futures - execute computations asynchronously"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:39:26+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
