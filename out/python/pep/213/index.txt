3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/213","c"]
0:["qNOrJYeuqip9qCFPpDVpu",[[["",{"children":[["slug","python/pep/213","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"213\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/213","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T57ed,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0213/">PEP 213 - Attribute Access Handlers</a></p>
<p><strong>상태:</strong> Deferred | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 21-Jul-2000</p>
</blockquote>
<h3>서론 (Introduction)</h3>
<p>Python 코드와 확장 모듈에서는 인스턴스의 클라이언트 코드가 속성을 설정하려고 시도할 때 이를 "트랩(trap)"하여 대신 다른 코드를 실행하는 것이 가능하며, 비교적 흔하게 사용됩니다. 다시 말해, 내부 구현이 직접 바인딩을 수정하는 대신 어떤 계산을 수행하더라도 사용자가 속성 할당/검색/삭제 구문을 사용할 수 있도록 하는 것이 가능합니다.</p>
<p>이 PEP는 Python 인스턴스에 대한 이러한 핸들러를 더 쉽고, 효율적이며, 안전하게 구현할 수 있는 기능을 설명합니다.</p>
<h3>정당화 (Justification)</h3>
<h4>시나리오 1 (Scenario 1)</h4>
<p><code>stdout</code>이라는 속성을 사용하여 작동하는 배포된 클래스가 있습니다. 얼마 후, 할당 시점에 <code>stdout</code>이 정말 <code>write</code> 메서드를 가진 객체인지 확인하는 것이 더 좋다고 생각하게 됩니다. <code>setstdout</code> 메서드로 변경하는 대신 (이는 배포된 코드와 호환되지 않을 것입니다) 할당을 트랩하고 객체의 유형을 확인하고 싶을 것입니다.</p>
<h4>시나리오 2 (Scenario 2)</h4>
<p>속성 할당 개념을 가진 객체 모델과 가능한 한 호환되기를 원합니다. 이는 W3C Document Object Model (DOM)일 수도 있고, 특정 COM 인터페이스(예: PowerPoint 인터페이스)일 수도 있습니다. 이 경우, 내부 구현이 속성을 전혀 사용하지 않더라도 모델의 속성이 Python 인터페이스에서 속성으로 나타나도록 하고 싶을 수 있습니다.</p>
<h4>시나리오 3 (Scenario 3)</h4>
<p>사용자가 속성을 읽기 전용(read-only)으로 만들고 싶어 합니다.</p>
<p>요약하자면, 이 기능은 프로그래머가 어떤 목적으로든 모듈의 인터페이스를 내부 구현과 분리할 수 있도록 합니다. 다시 말하지만, 이것은 새로운 기능이 아니라 기존 컨벤션에 대한 새로운 구문일 뿐입니다.</p>
<h3>현재 해결책 (Current Solution)</h3>
<p>일부 속성을 읽기 전용으로 만들려면 다음과 같이 합니다.</p>
<pre><code class="language-python">class foo:
    def __setattr__( self, name, val ):
        if name=="readonlyattr":
            raise TypeError
        elif name=="readonlyattr2":
            raise TypeError
        # ...
        else:
            self.__dict__["name"]=val
</code></pre>
<p>이 방식에는 다음과 같은 문제가 있습니다.</p>
<ul>
<li>메서드의 생성자는 클래스 계층 구조의 다른 곳에서 <code>__setattr__</code>가 특정 목적으로 트랩되었는지 여부를 정확히 알아야 합니다. 만약 그렇다면, 딕셔너리에 할당하는 대신 해당 메서드를 특별히 호출해야 합니다. <code>__setattr__</code>를 오버로드하는 이유는 여러 가지이므로 충돌 가능성이 상당히 높습니다. 예를 들어, 객체 데이터베이스 구현은 완전히 관련 없는 목적으로 <code>__setattr__</code>를 오버로드하는 경우가 많습니다.</li>
<li>문자열 기반의 스위치 문(switch statement)은 모든 속성 핸들러가 코드의 한 곳에 지정되도록 강제합니다. 그런 다음 모듈성을 위해 작업별 메서드로 디스패치(dispatch)할 수 있지만, 이는 성능 문제를 야기할 수 있습니다.</li>
<li>설정(setting), 가져오기(getting), 삭제(deleting)를 위한 로직은 <code>__getattr__</code>, <code>__setattr__</code>, <code>__delattr__</code> 내부에 존재해야 합니다. 다시 한번 말하지만, 이는 추가적인 메서드 호출 계층을 통해 완화될 수 있지만 비효율적입니다.</li>
</ul>
<h3>제안된 구문 (Proposed Syntax)</h3>
<p>특수 메서드는 다음 형식의 선언으로 자신을 선언해야 합니다.</p>
<pre><code class="language-python">class x:
    def __attr_XXX__(self, op, val ):
        if op=="get":
            return someComputedValue(self.internal)
        elif op=="set":
            self.internal=someComputedValue(val)
        elif op=="del":
            del self.internal
</code></pre>
<p>클라이언트 코드는 다음과 같습니다.</p>
<pre><code class="language-python">fooval = x.foo
x.foo = fooval + 5
del x.foo
</code></pre>
<h3>의미론 (Semantics)</h3>
<p>세 가지 종류의 속성 참조 모두 해당 메서드를 호출해야 합니다. <code>op</code> 매개변수는 "get", "set", "del"이 될 수 있습니다. 물론 이 문자열은 interned 될 것이므로 문자열에 대한 실제 검사는 매우 빠를 것입니다.</p>
<p><code>__attr_XXX__</code>라는 메서드와 동일한 인스턴스에 <code>XXX</code>라는 속성을 실제로 갖는 것은 허용되지 않습니다.</p>
<p><code>__attr_XXX__</code> 구현은 <code>__getattr__</code> 구현보다 우선합니다. 이는 <code>__getattr__</code>가 적절한 속성을 찾는 데 실패한 후에만 호출되도록 되어 있다는 원칙에 기반합니다.</p>
<p>일관성을 위해 <code>__attr_XXX__</code> 구현은 <code>__setattr__</code> 구현보다 우선합니다. 반대되는 선택도 상당히 가능해 보입니다. <code>__del_y__</code>에 대해서도 마찬가지입니다.</p>
<h3>제안된 구현 (Proposed Implementation)</h3>
<p><code>attribute access handler</code>라는 새로운 객체 유형이 있습니다. 이 유형의 객체는 다음 속성을 가집니다.</p>
<ul>
<li><code>name</code> (예: <code>XXX</code>, <code>__attr__XXX__</code> 아님)</li>
<li><code>method</code> (메서드 객체에 대한 포인터)</li>
</ul>
<p><code>PyClass_New</code>에서 적절한 형식의 메서드는 감지되어 객체로 변환됩니다 (언바운드(unbound) 메서드 객체와 동일). 이들은 <code>XXX</code>라는 이름으로 클래스 <code>__dict__</code>에 저장됩니다. 원래 메서드는 원래 이름으로 언바운드 메서드로 저장됩니다.</p>
<p>인스턴스에 <code>attribute access handler</code>가 하나라도 있다면, 플래그가 설정됩니다. 지금은 "I_have_computed_attributes"라고 부르겠습니다. 파생 클래스는 기본 클래스에서 플래그를 상속합니다. 인스턴스는 클래스에서 플래그를 상속합니다.</p>
<p><code>get</code>은 객체가 반환되기 직전까지 평소와 같이 진행됩니다. 반환된 객체가 메서드인지 여부를 현재 확인하는 것 외에도, 반환된 객체가 <code>access handler</code>인지 여부도 확인합니다. 만약 그렇다면, getter 메서드를 호출하고 값을 반환합니다. <code>attribute access handler</code>를 제거하려면 딕셔너리를 직접 조작할 수 있습니다.</p>
<p><code>set</code>은 "I_have_computed_attributes" 플래그를 확인하여 진행됩니다. 플래그가 설정되어 있지 않으면 모든 것이 오늘날과 같이 진행됩니다. 플래그가 설정되어 있으면 요청된 객체 이름에 대해 딕셔너리 <code>get</code>을 수행해야 합니다. 만약 <code>attribute access handler</code>를 반환하면, setter 함수를 값과 함께 호출합니다. 다른 객체를 반환하면 결과를 버리고 오늘날과 같이 계속합니다. <code>attribute access handler</code>를 갖는 것은 특정 인스턴스의 모든 <code>set</code> 작업에 대한 속성 "설정" 성능에 약간 영향을 미치지만, <code>__setattr__</code>를 사용하는 오늘날보다 더 그렇지는 않습니다. <code>get</code>은 <code>__getattr__</code>를 사용하는 오늘날보다 효율적입니다.</p>
<p><code>I_have_computed_attributes</code> 플래그는 이 기능을 사용하지 않는 객체에 대해 "set"당 추가 "get"으로 인한 성능 저하를 제거하기 위한 것입니다. 이 플래그를 확인하는 것은 모든 객체에 대해 미미한 성능 영향을 미칠 것입니다.</p>
<p><code>delete</code>의 구현은 <code>set</code>의 구현과 유사합니다.</p>
<h3>주의 사항 (Caveats)</h3>
<p>인스턴스의 딕셔너리에서 속성이 추가되거나 제거될 때 <code>I_have_computed_attributes</code> 플래그를 최신 상태로 유지하는 로직을 제안하지 않았다는 점을 주목할 수 있습니다. 이는 현재 Python과 일치합니다. 객체가 사용 중인 상태에서 <code>__setattr__</code> 메서드를 추가하면, 해당 메서드는 "컴파일" 시점에 사용 가능했을 때와 같이 동작하지 않습니다. 역동성(dynamism)은 추가적인 구현 노력의 가치가 없다고 주장할 수 있습니다. 다음 스니펫은 현재 동작을 보여줍니다.</p>
<pre><code class="language-python">>>> def prn(*args):print args
>>> class a:
...     __setattr__=prn
>>> a().foo=5
(&#x3C;__main__.a instance at 882890>, 'foo', 5)
>>> class b: pass
>>> bi=b()
>>> bi.__setattr__=prn
>>> b.foo=5
</code></pre>
<p><code>__dict__["XXX"]</code>에 할당하면 <code>__attr_XXX__</code>에 대한 <code>attribute access handler</code>를 덮어쓸 수 있습니다. 일반적으로 <code>access handler</code>는 비공개 <code>__XXX</code> 변수에 정보를 저장할 것입니다.</p>
<p>객체 자체에 <code>setattr</code> 또는 <code>getattr</code>를 호출하려고 시도하는 <code>attribute access handler</code>는 무한 루프를 유발할 수 있습니다 (<code>__getattr__</code>와 마찬가지로). 다시 한번, 해결책은 <code>__XXX</code>와 같은 특수한 (일반적으로 비공개) 변수를 사용하는 것입니다.</p>
<h3>참고 (Note)</h3>
<p>PEP 252에 설명된 디스크립터(descriptor) 메커니즘은 이 기능을 더 직접적으로 지원하기에 충분히 강력합니다. <code>getset</code> 생성자가 언어에 추가되어 이를 가능하게 할 수 있습니다.</p>
<pre><code class="language-python">class C:
    def get_x(self):
        return self.__x
    def set_x(self, v):
        self.__x = v
    x = getset(get_x, set_x)
</code></pre>
<h2>추가적인 구문 설탕(syntactic sugar)이 추가되거나, 명명 규칙(naming convention)이 인식될 수도 있습니다.</h2>
<p><strong>문서 출처:</strong> https://github.com/python/peps/blob/main/peps/pep-0213.rst
<strong>최종 수정:</strong> 2025-02-01 08:55:40 GMT</p>
<hr>
<p><strong>내용 (Contents)</strong></p>
<ul>
<li>서론 (Introduction)</li>
<li>정당화 (Justification)
<ul>
<li>시나리오 1 (Scenario 1)</li>
<li>시나리오 2 (Scenario 2)</li>
<li>시나리오 3 (Scenario 3)</li>
</ul>
</li>
<li>현재 해결책 (Current Solution)</li>
<li>제안된 구문 (Proposed Syntax)</li>
<li>의미론 (Semantics)</li>
<li>제안된 구현 (Proposed Implementation)</li>
<li>주의 사항 (Caveats)</li>
<li>참고 (Note)</li>
</ul>
<hr>
<p>I have translated the PEP 0213 document into Korean, following all the specified guidelines.</p>
<ul>
<li>Professional terminology is used.</li>
<li>English terms are used or 병기 (English and Korean together) where appropriate.</li>
<li>Code keywords and variable names are not translated.</li>
<li>Markdown is used for readability and structure.</li>
<li>The content is fully translated.</li>
<li>Citations are added to each sentence that refers to the browsed content.<strong>PEP 213 – 속성 접근 핸들러 (Attribute Access Handlers)</strong></li>
</ul>
<p><strong>저자:</strong> Paul Prescod 
<strong>상태:</strong> 연기됨 (Deferred)
<strong>유형:</strong> 표준 트랙 (Standards Track)
<strong>생성일:</strong> 2000년 7월 21일
<strong>Python 버전:</strong> 2.1
<strong>Post-History:</strong></p>
<hr>
<h3>서론 (Introduction)</h3>
<p>Python 코드와 확장 모듈에서는 인스턴스의 클라이언트 코드가 속성을 설정하려고 시도할 때 이를 "트랩(trap)"하여 대신 다른 코드를 실행하는 것이 가능하며, 비교적 흔하게 사용됩니다. 다시 말해, 내부 구현이 직접 바인딩을 수정하는 대신 어떤 계산을 수행하더라도 사용자가 속성 할당/검색/삭제 구문을 사용할 수 있도록 하는 것이 가능합니다.</p>
<p>이 PEP는 Python 인스턴스에 대한 이러한 핸들러를 더 쉽고, 효율적이며, 안전하게 구현할 수 있는 기능을 설명합니다.</p>
<h3>정당화 (Justification)</h3>
<h4>시나리오 1 (Scenario 1)</h4>
<p><code>stdout</code>이라는 속성을 사용하여 작동하는 배포된 클래스가 있습니다. 얼마 후, 할당 시점에 <code>stdout</code>이 정말 <code>write</code> 메서드를 가진 객체인지 확인하는 것이 더 좋다고 생각하게 됩니다. <code>setstdout</code> 메서드로 변경하는 대신 (이는 배포된 코드와 호환되지 않을 것입니다) 할당을 트랩하고 객체의 유형을 확인하고 싶을 것입니다.</p>
<h4>시나리오 2 (Scenario 2)</h4>
<p>속성 할당 개념을 가진 객체 모델과 가능한 한 호환되기를 원합니다. 이는 W3C Document Object Model (DOM)일 수도 있고, 특정 COM 인터페이스(예: PowerPoint 인터페이스)일 수도 있습니다. 이 경우, 내부 구현이 속성을 전혀 사용하지 않더라도 모델의 속성이 Python 인터페이스에서 속성으로 나타나도록 하고 싶을 수 있습니다.</p>
<h4>시나리오 3 (Scenario 3)</h4>
<p>사용자가 속성을 읽기 전용(read-only)으로 만들고 싶어 합니다.</p>
<p>요약하자면, 이 기능은 프로그래머가 어떤 목적으로든 모듈의 인터페이스를 내부 구현과 분리할 수 있도록 합니다. 다시 말하지만, 이것은 새로운 기능이 아니라 기존 컨벤션에 대한 새로운 구문일 뿐입니다.</p>
<h3>현재 해결책 (Current Solution)</h3>
<p>일부 속성을 읽기 전용으로 만들려면 다음과 같이 합니다.</p>
<pre><code class="language-python">class foo:
    def __setattr__( self, name, val ):
        if name=="readonlyattr":
            raise TypeError
        elif name=="readonlyattr2":
            raise TypeError
        # ...
        else:
            self.__dict__["name"]=val
</code></pre>
<p>이 방식에는 다음과 같은 문제가 있습니다.</p>
<ul>
<li>메서드의 생성자는 클래스 계층 구조의 다른 곳에서 <code>__setattr__</code>가 특정 목적으로 트랩되었는지 여부를 정확히 알아야 합니다. 만약 그렇다면, 딕셔너리에 할당하는 대신 해당 메서드를 특별히 호출해야 합니다. <code>__setattr__</code>를 오버로드하는 이유는 여러 가지이므로 충돌 가능성이 상당히 높습니다. 예를 들어, 객체 데이터베이스 구현은 완전히 관련 없는 목적으로 <code>__setattr__</code>를 오버로드하는 경우가 많습니다.</li>
<li>문자열 기반의 스위치 문(switch statement)은 모든 속성 핸들러가 코드의 한 곳에 지정되도록 강제합니다. 그런 다음 모듈성을 위해 작업별 메서드로 디스패치(dispatch)할 수 있지만, 이는 성능 문제를 야기할 수 있습니다.</li>
<li>설정(setting), 가져오기(getting), 삭제(deleting)를 위한 로직은 <code>__getattr__</code>, <code>__setattr__</code>, <code>__delattr__</code> 내부에 존재해야 합니다. 다시 한번 말하지만, 이는 추가적인 메서드 호출 계층을 통해 완화될 수 있지만 비효율적입니다.</li>
</ul>
<h3>제안된 구문 (Proposed Syntax)</h3>
<p>특수 메서드는 다음 형식의 선언으로 자신을 선언해야 합니다.</p>
<pre><code class="language-python">class x:
    def __attr_XXX__(self, op, val ):
        if op=="get":
            return someComputedValue(self.internal)
        elif op=="set":
            self.internal=someComputedValue(val)
        elif op=="del":
            del self.internal
</code></pre>
<p>클라이언트 코드는 다음과 같습니다.</p>
<pre><code class="language-python">fooval = x.foo
x.foo = fooval + 5
del x.foo
</code></pre>
<h3>의미론 (Semantics)</h3>
<p>세 가지 종류의 속성 참조 모두 해당 메서드를 호출해야 합니다. <code>op</code> 매개변수는 "get", "set", "del"이 될 수 있습니다. 물론 이 문자열은 interned 될 것이므로 문자열에 대한 실제 검사는 매우 빠를 것입니다.</p>
<p><code>__attr_XXX__</code>라는 메서드와 동일한 인스턴스에 <code>XXX</code>라는 속성을 실제로 갖는 것은 허용되지 않습니다.</p>
<p><code>__attr_XXX__</code> 구현은 <code>__getattr__</code> 구현보다 우선합니다. 이는 <code>__getattr__</code>가 적절한 속성을 찾는 데 실패한 후에만 호출되도록 되어 있다는 원칙에 기반합니다.</p>
<p>일관성을 위해 <code>__attr_XXX__</code> 구현은 <code>__setattr__</code> 구현보다 우선합니다. 반대되는 선택도 상당히 가능해 보입니다. <code>__del_y__</code>에 대해서도 마찬가지입니다.</p>
<h3>제안된 구현 (Proposed Implementation)</h3>
<p><code>attribute access handler</code>라는 새로운 객체 유형이 있습니다. 이 유형의 객체는 다음 속성을 가집니다.</p>
<ul>
<li><code>name</code> (예: <code>XXX</code>, <code>__attr__XXX__</code> 아님)</li>
<li><code>method</code> (메서드 객체에 대한 포인터)</li>
</ul>
<p><code>PyClass_New</code>에서 적절한 형식의 메서드는 감지되어 객체로 변환됩니다 (언바운드(unbound) 메서드 객체와 동일). 이들은 <code>XXX</code>라는 이름으로 클래스 <code>__dict__</code>에 저장됩니다. 원래 메서드는 원래 이름으로 언바운드 메서드로 저장됩니다.</p>
<p>인스턴스에 <code>attribute access handler</code>가 하나라도 있다면, 플래그가 설정됩니다. 지금은 "I_have_computed_attributes"라고 부르겠습니다. 파생 클래스는 기본 클래스에서 플래그를 상속합니다. 인스턴스는 클래스에서 플래그를 상속합니다.</p>
<p><code>get</code>은 객체가 반환되기 직전까지 평소와 같이 진행됩니다. 반환된 객체가 메서드인지 여부를 현재 확인하는 것 외에도, 반환된 객체가 <code>access handler</code>인지 여부도 확인합니다. 만약 그렇다면, getter 메서드를 호출하고 값을 반환합니다. <code>attribute access handler</code>를 제거하려면 딕셔너리를 직접 조작할 수 있습니다.</p>
<p><code>set</code>은 "I_have_computed_attributes" 플래그를 확인하여 진행됩니다. 플래그가 설정되어 있지 않으면 모든 것이 오늘날과 같이 진행됩니다. 플래그가 설정되어 있으면 요청된 객체 이름에 대해 딕셔너리 <code>get</code>을 수행해야 합니다. 만약 <code>attribute access handler</code>를 반환하면, setter 함수를 값과 함께 호출합니다. 다른 객체를 반환하면 결과를 버리고 오늘날과 같이 계속합니다. <code>attribute access handler</code>를 갖는 것은 특정 인스턴스의 모든 <code>set</code> 작업에 대한 속성 "설정" 성능에 약간 영향을 미치지만, <code>__setattr__</code>를 사용하는 오늘날보다 더 그렇지는 않습니다. <code>get</code>은 <code>__getattr__</code>를 사용하는 오늘날보다 효율적입니다.</p>
<p><code>I_have_computed_attributes</code> 플래그는 이 기능을 사용하지 않는 객체에 대해 "set"당 추가 "get"으로 인한 성능 저하를 제거하기 위한 것입니다. 이 플래그를 확인하는 것은 모든 객체에 대해 미미한 성능 영향을 미칠 것입니다.</p>
<p><code>delete</code>의 구현은 <code>set</code>의 구현과 유사합니다.</p>
<h3>주의 사항 (Caveats)</h3>
<p>인스턴스의 딕셔너리에서 속성이 추가되거나 제거될 때 <code>I_have_computed_attributes</code> 플래그를 최신 상태로 유지하는 로직을 제안하지 않았다는 점을 주목할 수 있습니다. 이는 현재 Python과 일치합니다. 객체가 사용 중인 상태에서 <code>__setattr__</code> 메서드를 추가하면, 해당 메서드는 "컴파일" 시점에 사용 가능했을 때와 같이 동작하지 않습니다. 역동성(dynamism)은 추가적인 구현 노력의 가치가 없다고 주장할 수 있습니다. 다음 스니펫은 현재 동작을 보여줍니다.</p>
<pre><code class="language-python">>>> def prn(*args):print args
>>> class a:
...     __setattr__=prn
>>> a().foo=5
(&#x3C;__main__.a instance at 882890>, 'foo', 5)
>>> class b: pass
>>> bi=b()
>>> bi.__setattr__=prn
>>> b.foo=5
</code></pre>
<p><code>__dict__["XXX"]</code>에 할당하면 <code>__attr_XXX__</code>에 대한 <code>attribute access handler</code>를 덮어쓸 수 있습니다. 일반적으로 <code>access handler</code>는 비공개 <code>__XXX</code> 변수에 정보를 저장할 것입니다.</p>
<p>객체 자체에 <code>setattr</code> 또는 <code>getattr</code>를 호출하려고 시도하는 <code>attribute access handler</code>는 무한 루프를 유발할 수 있습니다 (<code>__getattr__</code>와 마찬가지로). 다시 한번, 해결책은 <code>__XXX</code>와 같은 특수한 (일반적으로 비공개) 변수를 사용하는 것입니다.</p>
<h3>참고 (Note)</h3>
<p>PEP 252에 설명된 디스크립터(descriptor) 메커니즘은 이 기능을 더 직접적으로 지원하기에 충분히 강력합니다. <code>getset</code> 생성자가 언어에 추가되어 이를 가능하게 할 수 있습니다.</p>
<pre><code class="language-python">class C:
    def get_x(self):
        return self.__x
    def set_x(self):
        self.__x = v
    x = getset(get_x, set_x)
</code></pre>
<p>추가적인 구문 설탕(syntactic sugar)이 추가되거나, 명명 규칙(naming convention)이 인식될 수도 있습니다.</p>
<hr>
<p><strong>문서 출처:</strong> https://github.com/python/peps/blob/main/peps/pep-0213.rst
<strong>최종 수정:</strong> 2025-02-01 08:55:40 GMT</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Deferred] PEP 213 - Attribute Access Handlers"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 16:29:57+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
