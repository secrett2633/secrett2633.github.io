3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-aecaf5ac7a84facf.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-e3ea38185bb36cd2.js"],""]
4:["slug","python/pep/362","c"]
0:["x02Anhkwgp1He7ftuyAhh",[[["",{"children":[["slug","python/pep/362","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"362\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/362","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/da5e1dc2b9a7c5bb.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T503a,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0362/">PEP 362 - Function Signature Object</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 21-Aug-2006</p>
</blockquote>
<h1>PEP 362 – 함수 시그니처 객체</h1>
<ul>
<li><strong>작성자</strong>: Brett Cannon, Jiwon Seo, Yury Selivanov, Larry Hastings</li>
<li><strong>상태</strong>: Final</li>
<li><strong>유형</strong>: Standards Track</li>
<li><strong>생성일</strong>: 2006년 8월 21일</li>
<li><strong>Python 버전</strong>: 3.3</li>
<li><strong>해결</strong>: Python-Dev 메시지</li>
</ul>
<h2>개요 (Abstract)</h2>
<p>파이썬은 함수와 메서드(이 PEP에서는 "함수"가 둘 모두를 지칭함)를 포함하여 강력한 인트로스펙션(introspection) 기능을 항상 지원해왔습니다. 함수 객체를 검사함으로써 함수의 시그니처를 완전히 재구성할 수 있습니다. 그러나 이 정보는 다루기 불편한 방식으로 저장되어 있으며, 여섯 개에 달하는 깊이 중첩된 어트리뷰트(attribute)에 분산되어 있습니다.</p>
<p>이 PEP는 함수 시그니처에 대한 새로운 표현 방식을 제안합니다. 이 새로운 표현 방식은 함수 및 해당 파라미터에 대한 모든 필수 정보를 포함하며, 인트로스펙션을 쉽고 직관적으로 만듭니다.</p>
<p>하지만 이 객체는 파이썬 자체가 함수를 실행하는 데 사용하는 기존의 함수 메타데이터를 대체하지 않습니다. 이 새로운 메타데이터 객체는 오직 파이썬 프로그래머들을 위해 함수 인트로스펙션을 더 쉽게 만들도록 의도되었습니다.</p>
<h2>시그니처 객체 (Signature Object)</h2>
<p><code>Signature</code> 객체는 함수의 호출 시그니처(call signature)와 반환 어노테이션(return annotation)을 나타냅니다. 함수가 허용하는 각 파라미터에 대해 <code>parameters</code> 컬렉션에 <code>Parameter</code> 객체를 저장합니다.</p>
<p><code>Signature</code> 객체는 다음과 같은 공개 어트리뷰트와 메서드를 가집니다:</p>
<ul>
<li><strong><code>return_annotation</code></strong>: 함수의 "return" 어노테이션입니다. 함수에 "return" 어노테이션이 없으면 이 어트리뷰트는 <code>Signature.empty</code>로 설정됩니다.</li>
<li><strong><code>parameters</code></strong>: 파라미터 이름과 해당 <code>Parameter</code> 객체를 매핑하는 정렬된(ordered) 맵입니다.</li>
<li><strong><code>bind(*args, **kwargs) -> BoundArguments</code></strong>: 위치(positional) 및 키워드(keyword) 인자를 파라미터에 매핑하는 <code>BoundArguments</code> 객체를 생성합니다. 전달된 인자가 시그니처와 일치하지 않으면 <code>TypeError</code>를 발생시킵니다.</li>
<li><strong><code>bind_partial(*args, **kwargs) -> BoundArguments</code></strong>: <code>bind()</code>와 동일하게 작동하지만, 일부 필수 인자를 생략할 수 있습니다 ( <code>functools.partial</code>의 동작을 모방합니다). 전달된 인자가 시그니처와 일치하지 않으면 <code>TypeError</code>를 발생시킵니다.</li>
<li><strong><code>replace(parameters=&#x3C;optional>, *, return_annotation=&#x3C;optional>) -> Signature</code></strong>: <code>replace</code>가 호출된 인스턴스를 기반으로 새 <code>Signature</code> 인스턴스를 생성합니다. 다른 <code>parameters</code> 및/또는 <code>return_annotation</code>을 전달하여 기본 시그니처의 해당 속성을 오버라이드(override)할 수 있습니다. 복사된 <code>Signature</code>에서 <code>return_annotation</code>을 제거하려면 <code>Signature.empty</code>를 전달합니다.</li>
</ul>
<p><code>Signature</code> 객체는 변경 불가능(immutable)합니다. 수정된 복사본을 만들려면 <code>Signature.replace()</code>를 사용합니다.</p>
<p><code>Signature</code> 클래스를 인스턴스화하는 두 가지 방법이 있습니다:</p>
<ul>
<li><strong><code>Signature(parameters=&#x3C;optional>, *, return_annotation=Signature.empty)</code></strong>: 기본 <code>Signature</code> 생성자입니다. 선택적 <code>Parameter</code> 객체 시퀀스와 선택적 <code>return_annotation</code>을 받습니다. <code>parameters</code> 시퀀스는 중복 이름의 파라미터가 없고, 파라미터가 올바른 순서(예: 위치 전용(positional-only)이 먼저, 그 다음 위치 또는 키워드(positional-or-keyword) 등)인지 확인하기 위해 유효성 검사를 거칩니다.</li>
<li><strong><code>Signature.from_function(function)</code></strong>: 전달된 함수의 시그니처를 반영하는 <code>Signature</code> 객체를 반환합니다.</li>
</ul>
<p><code>Signature</code> 객체에 대한 변경 사항은 함수 자체에 영향을 미치지 않습니다.</p>
<h2>파라미터 객체 (Parameter Object)</h2>
<p>파이썬의 표현력 있는 문법은 함수가 미묘하게 다른 의미를 가진 다양한 종류의 파라미터를 허용할 수 있음을 의미합니다. 이 PEP는 가능한 모든 함수 파라미터를 나타내도록 설계된 풍부한 <code>Parameter</code> 객체를 제안합니다.</p>
<p><code>Parameter</code> 객체는 다음과 같은 공개 어트리뷰트와 메서드를 가집니다:</p>
<ul>
<li><strong><code>name</code></strong>: 파라미터의 이름(문자열)입니다. 유효한 파이썬 식별자 이름이어야 합니다 (<code>POSITIONAL_ONLY</code> 파라미터의 경우 <code>None</code>으로 설정될 수 있음).</li>
<li><strong><code>default</code></strong>: 파라미터의 기본값입니다. 파라미터에 기본값이 없으면 <code>Parameter.empty</code>로 설정됩니다.</li>
<li><strong><code>annotation</code></strong>: 파라미터의 어노테이션입니다. 파라미터에 어노테이션이 없으면 <code>Parameter.empty</code>로 설정됩니다.</li>
<li><strong><code>kind</code></strong>: 인자 값이 파라미터에 어떻게 바인딩되는지 설명합니다. 가능한 값은 다음과 같습니다:
<ul>
<li><strong><code>Parameter.POSITIONAL_ONLY</code></strong>: 값은 위치 인자(positional argument)로만 제공되어야 합니다. 파이썬에는 위치 전용 파라미터를 정의하는 명시적인 문법이 없지만, 많은 내장 함수와 확장 모듈 함수가 이를 허용합니다.</li>
<li><strong><code>Parameter.POSITIONAL_OR_KEYWORD</code></strong>: 값은 키워드 인자(keyword argument) 또는 위치 인자로 제공될 수 있습니다 (이것은 파이썬으로 구현된 함수의 표준 바인딩 동작입니다).</li>
<li><strong><code>Parameter.KEYWORD_ONLY</code></strong>: 값은 키워드 인자로만 제공되어야 합니다. 키워드 전용 파라미터는 파이썬 함수 정의에서 <code>*</code> 또는 <code>*args</code> 항목 뒤에 나타나는 파라미터입니다.</li>
<li><strong><code>Parameter.VAR_POSITIONAL</code></strong>: 다른 파라미터에 바인딩되지 않은 위치 인자의 튜플입니다. 파이썬 함수 정의의 <code>*args</code> 파라미터에 해당합니다.</li>
<li><strong><code>Parameter.VAR_KEYWORD</code></strong>: 다른 파라미터에 바인딩되지 않은 키워드 인자의 딕셔너리입니다. 파이썬 함수 정의의 <code>**kwargs</code> 파라미터에 해당합니다.</li>
</ul>
</li>
<li><strong><code>replace(*, name=&#x3C;optional>, kind=&#x3C;optional>, default=&#x3C;optional>, annotation=&#x3C;optional>) -> Parameter</code></strong>: <code>replace</code>가 호출된 인스턴스를 기반으로 새 <code>Parameter</code> 인스턴스를 생성합니다. <code>Parameter</code> 어트리뷰트를 오버라이드하려면 해당 인자를 전달합니다. <code>Parameter</code>에서 어트리뷰트를 제거하려면 <code>Parameter.empty</code>를 전달합니다.</li>
</ul>
<p><code>Parameter</code> 객체는 변경 불가능합니다. <code>Parameter</code> 객체를 수정하는 대신 <code>Parameter.replace()</code>를 사용하여 수정된 복사본을 만들 수 있습니다.</p>
<h2><code>BoundArguments</code> 객체</h2>
<p><code>Signature.bind</code> 호출의 결과입니다. 인자들의 함수 파라미터로의 매핑을 저장합니다.</p>
<p>다음과 같은 공개 어트리뷰트를 가집니다:</p>
<ul>
<li><strong><code>arguments</code></strong>: 파라미터 이름과 인자 값의 정렬되고 변경 가능한 매핑(mapping)입니다. 명시적으로 바인딩된 인자만 포함합니다. <code>bind()</code>가 기본값에 의존한 인자는 건너뜁니다.</li>
<li><strong><code>args</code></strong>: 위치 인자 값의 튜플입니다. <code>arguments</code> 어트리뷰트에서 동적으로 계산됩니다.</li>
<li><strong><code>kwargs</code></strong>: 키워드 인자 값의 딕셔너리입니다. <code>arguments</code> 어트리뷰트에서 동적으로 계산됩니다.</li>
</ul>
<p><code>arguments</code> 어트리뷰트는 인자 처리 목적으로 <code>Signature.parameters</code>와 함께 사용되어야 합니다.
<code>args</code> 및 <code>kwargs</code> 속성은 함수를 호출하는 데 사용될 수 있습니다.</p>
<h2>구현 (Implementation)</h2>
<p>이 구현은 <code>inspect</code> 모듈에 새로운 함수 <code>signature()</code>를 추가합니다. 이 함수는 호출 가능한 객체(callable object)의 <code>Signature</code>를 가져오는 선호되는 방법입니다.</p>
<p><code>signature()</code> 함수는 다음 알고리즘을 구현합니다:</p>
<ol>
<li>객체가 호출 불가능하면(not callable) <code>TypeError</code>를 발생시킵니다.</li>
<li>객체에 <code>__signature__</code> 어트리뷰트가 있고 <code>None</code>이 아니면 이를 반환합니다.</li>
<li><code>__wrapped__</code> 어트리뷰트가 있으면 <code>signature(object.__wrapped__)</code>를 반환합니다.</li>
<li>객체가 <code>FunctionType</code>의 인스턴스이면, 이를 위한 새 <code>Signature</code>를 구성하여 반환합니다.</li>
<li>객체가 바운드 메서드(bound method)이면, 첫 번째 파라미터(일반적으로 <code>self</code> 또는 <code>cls</code>)가 제거된 새 <code>Signature</code> 객체를 구성하여 반환합니다 (<code>classmethod</code>와 <code>staticmethod</code>도 지원됩니다).</li>
<li>객체가 <code>functools.partial</code>의 인스턴스이면, <code>partial.func</code> 어트리뷰트로부터 새 <code>Signature</code>를 구성하고 이미 바인딩된 <code>partial.args</code> 및 <code>partial.kwargs</code>를 고려합니다.</li>
<li>객체가 클래스 또는 메타클래스이면:
<ul>
<li>객체의 타입에 MRO(Method Resolution Order)에 정의된 <code>__call__</code> 메서드가 있으면, 이를 위한 <code>Signature</code>를 반환합니다.</li>
<li>객체에 MRO에 정의된 <code>__new__</code> 메서드가 있으면, 이를 위한 <code>Signature</code> 객체를 반환합니다.</li>
<li>객체에 MRO에 정의된 <code>__init__</code> 메서드가 있으면, 이를 위한 <code>Signature</code> 객체를 반환합니다.</li>
</ul>
</li>
<li><code>signature(object.__call__)</code>을 반환합니다.</li>
</ol>
<p><code>Signature</code> 객체는 지연(lazy) 방식으로 생성되며 자동으로 캐시되지 않습니다. 그러나 사용자는 <code>__signature__</code> 어트리뷰트에 저장하여 <code>Signature</code>를 수동으로 캐시할 수 있습니다.</p>
<h2>설계 고려 사항 (Design Considerations)</h2>
<h3><code>Signature</code> 객체의 암시적 캐싱 없음 (No implicit caching of Signature objects)</h3>
<p>초기 PEP 설계에는 <code>inspect.signature()</code> 함수 내에서 <code>Signature</code> 객체를 암시적으로 캐싱하는 조항이 있었습니다. 그러나 이는 다음과 같은 단점이 있습니다:</p>
<ul>
<li><code>Signature</code> 객체가 캐시되면, 이 객체가 설명하는 함수에 대한 모든 변경 사항이 반영되지 않습니다.</li>
<li>캐싱이 필요하다면 항상 수동으로 명시적으로 수행할 수 있습니다.</li>
<li>실제 <code>Signature</code> 객체와 다른 <code>Signature</code> 객체를 명시적으로 설정해야 할 필요가 있을 때 <code>__signature__</code> 어트리뷰트를 예약하는 것이 더 좋습니다.</li>
</ul>
<h3>일부 함수는 인트로스펙션 불가능할 수 있음 (Some functions may not be introspectable)</h3>
<p>일부 함수는 특정 파이썬 구현에서 인트로스펙션이 불가능할 수 있습니다. 예를 들어, CPython에서 C로 정의된 내장 함수는 인자에 대한 메타데이터를 제공하지 않습니다. 이들에 대한 지원을 추가하는 것은 이 PEP의 범위를 벗어납니다.</p>
<h3><code>Signature</code> 및 <code>Parameter</code> 동등성 (Signature and Parameter equivalence)</h3>
<p>파라미터 이름은 의미론적 중요성을 가진다고 가정합니다. 두 시그니처는 해당 파라미터가 동일하고 정확히 같은 이름을 가질 때만 동일합니다. <code>VAR_KEYWORD</code> 또는 <code>VAR_POSITIONAL</code> 파라미터의 이름을 무시하는 등 더 느슨한 동등성 테스트를 원하는 사용자는 직접 구현해야 합니다.</p>
<h2>예시 (Examples)</h2>
<h3>호출 가능 객체의 시그니처 시각화 (Visualizing Callable Objects' Signature)</h3>
<p><code>inspect.signature</code>를 사용하여 다양한 호출 가능 객체의 시그니처를 어떻게 얻고 시각화하는지 보여주는 예시입니다. 클래스, 메서드, 데코레이터, <code>functools.partial</code> 등 다양한 상황에서 시그니처가 어떻게 표현되는지 확인할 수 있습니다.</p>
<pre><code class="language-python">from inspect import signature
from functools import partial, wraps

class FooMeta(type):
    def __new__(mcls, name, bases, dct, *, bar:bool=False):
        return super().__new__(mcls, name, bases, dct)
    def __init__(cls, name, bases, dct, **kwargs):
        return super().__init__(name, bases, dct)

class Foo(metaclass=FooMeta):
    def __init__(self, spam:int=42):
        self.spam = spam
    def __call__(self, a, b, *, c) -> tuple:
        return a, b, c
    @classmethod
    def spam(cls, a):
        return a

def shared_vars(*shared_args):
    """함수 호출 시마다 전달되는 공유 변수를 정의하는 데코레이터 팩토리"""
    def decorator(f):
        @wraps(f)
        def wrapper(*args, **kwargs):
            full_args = shared_args + args
            return f(*full_args, **kwargs)
        # 시그니처 오버라이드
        sig = signature(f)
        sig = sig.replace(tuple(sig.parameters.values())[1:])
        wrapper.__signature__ = sig
        return wrapper
    return decorator

@shared_vars({})
def example(_state, a, b, c):
    return _state, a, b, c

def format_signature(obj):
    return str(signature(obj))

# Python REPL에서 실행 결과:
# >>> format_signature(FooMeta)
# '(name, bases, dct, *, bar:bool=False)'
# >>> format_signature(Foo)
# '(spam:int=42)'
# >>> format_signature(Foo.__call__)
# '(self, a, b, *, c) -> tuple'
# >>> format_signature(Foo().__call__)
# '(a, b, *, c) -> tuple'
# >>> format_signature(Foo.spam)
# '(a)'
# >>> format_signature(partial(Foo().__call__, 1, c=3))
# '(b, *, c=3) -> tuple'
# >>> format_signature(partial(partial(Foo().__call__, 1, c=3), 2, c=20))
# '(*, c=20) -> tuple'
# >>> format_signature(example)
# '(a, b, c)'
# >>> format_signature(partial(example, 1, 2))
# '(c)'
# >>> format_signature(partial(partial(example, 1, b=2), c=3))
# '(b=2, c=3)'
</code></pre>
<h3>어노테이션 검사기 (Annotation Checker)</h3>
<p><code>inspect.signature</code>를 활용하여 함수의 인자와 반환 타입 어노테이션을 런타임에 검사하는 데코레이터 예시입니다. 이는 함수 호출 시 인자의 타입과 반환 값의 타입이 기대하는 바와 일치하는지 확인하여 타입 오류를 방지하는 데 도움을 줍니다.</p>
<pre><code class="language-python">import inspect
import functools

def checktypes(func):
    '''
    인자 및 반환 타입을 확인하는 데코레이터
    예시:
    >>> @checktypes
    ... def test(a:int, b:str) -> int:
    ...     return int(a * b)
    >>> test(10, '1')
    1111111111
    >>> test(10, 1)
    Traceback (most recent call last):
    ...
    ValueError: foo: wrong type of 'b' argument, 'str' expected, got 'int'
    '''
    sig = inspect.signature(func)
    types = {}
    for param in sig.parameters.values():
        # 함수의 파라미터를 순회하며 인자 타입 목록을 구축합니다.
        type_ = param.annotation
        if type_ is param.empty or not inspect.isclass(type_):
            # 어노테이션이 없거나 타입이 아니면 건너뜁니다.
            continue
        types[param.name] = type_
        # 인자에 타입이 지정되어 있다면, 해당 기본값(있는 경우)이 타입과 일치하는지 확인합니다.
        if param.default is not param.empty and not isinstance(param.default, type_):
            raise ValueError("{func}: wrong type of a default value for {arg!r}". \
                             format(func=func.__qualname__, arg=param.name))

    def check_type(sig, arg_name, arg_type, arg_value):
        # 인자 타입 검사를 캡슐화하는 내부 함수입니다.
        if not isinstance(arg_value, arg_type):
            raise ValueError("{func}: wrong type of {arg!r} argument, " \
                             "{exp!r} expected, got {got!r}". \
                             format(func=func.__qualname__, arg=arg_name, exp=arg_type.__name__, got=type(arg_value).__name__))

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        # 인자를 바인딩합니다.
        ba = sig.bind(*args, **kwargs)
        for arg_name, arg in ba.arguments.items():
            # 바인딩된 인자를 순회합니다.
            try:
                type_ = types[arg_name]
            except KeyError:
                continue
            else:
                # 인자에 대한 타입이 있으므로, 시그니처 객체에서 해당 파라미터 설명을 가져옵니다.
                param = sig.parameters[arg_name]
                if param.kind == param.VAR_POSITIONAL:
                    # 이 파라미터가 가변 인자 파라미터인 경우,
                    # 각 값의 타입을 확인해야 합니다.
                    for value in arg:
                        check_type(sig, arg_name, type_, value)
                elif param.kind == param.VAR_KEYWORD:
                    # 이 파라미터가 가변 키워드 인자 파라미터인 경우:
                    for subname, value in arg.items():
                        check_type(sig, arg_name + ':' + subname, type_, value)
                else:
                    # 그리고 마지막으로, 이 파라미터가 일반 파라미터인 경우:
                    check_type(sig, arg_name, type_, arg)
        result = func(*ba.args, **ba.kwargs)
        # 마지막으로, 결과가 올바른지 확인합니다.
        return_type = sig.return_annotation
        if (return_type is not sig.empty and isinstance(return_type, type) and not isinstance(result, return_type)):
            raise ValueError('{func}: wrong return type, {exp} expected, got {got}'. \
                             format(func=func.__qualname__, exp=return_type.__name__, got=type(result).__name__))
        return result
    return wrapper
</code></pre>
<h2>수용 (Acceptance)</h2>
<p>PEP 362는 2012년 6월 22일 금요일 Guido van Rossum에 의해 수용되었습니다. 참조 구현은 당일 후반에 트렁크에 커밋되었습니다.</p>
<h2>참고 자료 및 저작권 (References and Copyright)</h2>
<p>이 문서의 원문은 공용 도메인에 속합니다.
더 자세한 내용은 <a href="https://peps.python.org/pep-0362/">peps.python.org/pep-0362/</a>에서 확인할 수 있습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 362 - Function Signature Object"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 19:08:03+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
