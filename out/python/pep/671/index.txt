3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/671","c"]
0:["SAPzS3zi9tsG5MkeKvxIA",[[["",{"children":[["slug","python/pep/671","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"671\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/671","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T30f1,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0671/">PEP 671 - Syntax for late-bound function argument defaults</a></p>
<p><strong>상태:</strong> Draft | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 24-Oct-2021</p>
</blockquote>
<p>PEP 671 – 함수 인자 지연 바인딩 기본값 구문</p>
<h2>초록 (Abstract)</h2>
<p>함수 매개변수는 함수 정의 시점에 계산되어 저장되는 기본값을 가질 수 있습니다. 이 제안은 함수 호출 시점에 평가되는 표현식으로 정의되는 새로운 형태의 인자 기본값을 도입합니다.</p>
<h2>동기 (Motivation)</h2>
<p>선택적(optional) 함수 인자는 생략될 경우 종종 어떤 논리적인 기본값을 가집니다. 이 값이 다른 인자에 의존하거나, 함수 호출마다 다시 평가되어야 하는 경우, 현재는 함수 헤더(header)에 이를 명확하게 표현할 깔끔한 방법이 없습니다.</p>
<p>현재 이를 위해 사용되는 일반적인 방식들은 다음과 같습니다.</p>
<ul>
<li>
<p><strong>매우 흔한 방법: <code>None</code>을 사용하고 함수 내에서 대체합니다.</strong></p>
<pre><code class="language-python">def bisect_right(a, x, lo=0, hi=None, *, key=None):
    if hi is None:
        hi = len(a)
</code></pre>
</li>
<li>
<p><strong>잘 알려진 방법: 고유한 커스텀 센티넬(sentinel) 객체를 사용합니다.</strong></p>
<pre><code class="language-python">_USE_GLOBAL_DEFAULT = object()
def connect(timeout=_USE_GLOBAL_DEFAULT):
    if timeout is _USE_GLOBAL_DEFAULT:
        timeout = default_timeout
</code></pre>
</li>
<li>
<p><strong>드문 방법: 가변 인자(<code>star-args</code>)를 받은 후 유효성을 검사합니다.</strong></p>
<pre><code class="language-python">def add_item(item, *optional_target):
    if not optional_target:
        target = []
    else:
        target = optional_target[0]
</code></pre>
</li>
</ul>
<p>이러한 각 방식은 <code>help(function)</code>이 실제 기본값을 보여주지 못한다는 문제점을 가지고 있습니다. 또한, 각각의 추가적인 문제점도 있습니다. <code>None</code>을 사용하는 방법은 <code>None</code> 자체가 유효한 함수 매개변수가 아닐 때만 유효하고, 커스텀 센티넬은 전역 상수(global constant)를 필요로 하며, 가변 인자를 사용하는 방법은 하나 이상의 인자가 제공될 수 있음을 암시합니다.</p>
<h2>명세 (Specification)</h2>
<p>함수 기본 인자는 새로운 <code>=></code> 표기법을 사용하여 정의할 수 있습니다.</p>
<pre><code class="language-python">def bisect_right(a, x, lo=0, hi=>len(a), *, key=None):
def connect(timeout=>default_timeout):
def add_item(item, target=>[]):
def format_time(fmt, time_t=>time.time()):
</code></pre>
<p><code>=></code> 뒤의 표현식은 검사를 위해 소스 코드 형태로 저장되며, 이를 평가하기 위한 바이트코드는 함수의 본문(body) 앞에 추가됩니다.</p>
<p>특히, 이 표현식은 함수가 정의된 스코프(scope)가 아닌, 함수의 런타임 스코프(run-time scope)에서 평가됩니다 (초기 바인딩된(early-bound) 기본값과는 다릅니다). 이를 통해 표현식이 다른 인자들을 참조할 수 있게 됩니다.</p>
<p>여러 개의 지연 바인딩(late-bound) 인자는 왼쪽에서 오른쪽으로 평가되며, 이전에 정의된 값들을 참조할 수 있습니다. 순서는 키워드 인자가 전달되는 순서와 관계없이 함수에 의해 정의됩니다.</p>
<pre><code class="language-python">def prevref(word="foo", a=>len(word), b=>a//2): # 유효함
def selfref(spam=>spam): # UnboundLocalError 발생
def spaminate(sausage=>eggs + 1, eggs=>sausage - 1): # 혼란스러우므로 이렇게 하지 마세요
def frob(n=>len(items), items=[]): # 아래 참고
</code></pre>
<p>평가 순서는 왼쪽에서 오른쪽입니다. 그러나 구현체는 모든 전달된 인자와 초기 바인딩된 기본값을 처리하는 첫 번째 패스, 그리고 지연 바인딩된 기본값을 처리하는 두 번째 패스로 두 번의 패스를 선택할 수 있습니다. 그렇지 않으면 모든 인자는 엄격하게 왼쪽에서 오른쪽으로 할당됩니다.</p>
<h3>제안되었으나 거부된 표기법 (Rejected choices of spelling)</h3>
<p>이 문서에서는 <code>name=>expression</code> 이라는 단일 구문을 명시하고 있지만, 다른 표기법들도 가능했습니다. 다음 표기법들이 고려되었습니다.</p>
<pre><code class="language-python">def bisect(a, hi=>len(a)):
def bisect(a, hi:=len(a)):
def bisect(a, hi?=len(a)):
def bisect(a, @hi=len(a)):
</code></pre>
<p>기본 인자들은 초기 바인딩이든 지연 바인딩이든 거의 동일하게 작동하므로, 선택된 <code>hi=>len(a)</code> 구문은 기존의 초기 바인딩 구문과 의도적으로 유사하게 설계되었습니다.</p>
<p><code>:=</code> 구문이 거부된 한 가지 이유는 어노테이션(annotations)과의 동작 때문입니다. 어노테이션은 기본값 앞에 오므로, 모든 구문 옵션에서 이것이 어노테이션인지, 기본값인지, 또는 둘 다인지가 모호하지 않아야 합니다 (사람과 파서 모두에게). 대체 구문인 <code>target:=expr</code>는 <code>target:int=expr</code>에서 어노테이션이 실수로 생략된 것으로 잘못 해석될 위험이 있으며, 따라서 버그를 숨길 수 있습니다. 선택된 구문 <code>target=>expr</code>는 이러한 문제가 없습니다.</p>
<h2>교육 방법 (How to Teach This)</h2>
<p>초기 바인딩된 기본 인자는 항상 먼저 가르쳐야 합니다. 이들은 인자를 평가하는 더 간단하고 효율적인 방법이기 때문입니다. 이를 기반으로, 지연 바인딩 인자는 함수의 시작 부분에 있는 코드와 광범위하게 동일합니다.</p>
<pre><code class="language-python">def add_item(item, target=>[]):
    # 유사한 의사 코드(pseudocode):
    # def add_item(item, target=&#x3C;OPTIONAL>):
    #     if target was omitted:
    #         target = []
</code></pre>
<p>간단한 경험 법칙은 다음과 같습니다: "<code>target=expression</code>"은 함수가 정의될 때 평가되고, "<code>target=>expression</code>"은 함수가 호출될 때 평가됩니다. 어느 쪽이든, 호출 시점에 인자가 제공되면 기본값은 무시됩니다. 이것이 모든 미묘한 차이를 완전히 설명하지는 않지만, 여기서 중요한 구별(그리고 유사점)을 다루는 데는 충분합니다.</p>
<h2>다른 제안과의 상호작용 (Interaction with other proposals)</h2>
<p><a href="https://peps.python.org/pep-0661/">PEP 661</a>은 이 제안과 동일한 문제 중 하나를 해결하려고 합니다. 이 제안이 많은 일반적인 경우에 센티넬의 필요성을 제거하고자 하는 반면, <a href="https://peps.python.org/pep-0661/">PEP 661</a>은 기본 인자의 센티넬 값 문서화를 개선하고자 합니다. <a href="https://peps.python.org/pep-0661/">PEP 661</a>은 임의로 복잡한 함수에서 문서화를 개선할 수 있습니다 (주요 동기로 <code>traceback.print_exception</code>을 인용하며, 이는 두 인자가 모두 지정되거나 모두 지정되지 않아야 합니다). 반면, 이 제안을 통해 실제 기본값을 함수가 정의할 수 있다면 많은 일반적인 경우에 센티넬이 더 이상 필요하지 않을 것입니다. 또한, 전용 센티넬 객체는 딕셔너리 조회 키로 사용될 수 있지만, <a href="https://peps.python.org/pep-0671/">PEP 671</a>은 여기에 적용되지 않습니다.</p>
<p>지연 평가(deferred evaluation)를 위한 일반적인 시스템이 때때로 제안되었습니다 (어노테이션에 특화된 <a href="https://peps.python.org/pep-0563/">PEP 563</a> 및 <a href="https://peps.python.org/pep-0649/">PEP 649</a>와 혼동해서는 안 됩니다). 표면적으로 지연 바인딩 인자 기본값이 유사한 성격인 것처럼 보일 수 있지만, 실제로는 관련이 없고 직교적인(orthogonal) 아이디어이며, 둘 다 언어에 가치를 더할 수 있습니다. 이 제안의 수락 또는 거부는 지연 평가 제안의 타당성에 영향을 미치지 않으며, 그 반대도 마찬가지입니다. (일반화된 지연 평가와 인자 기본값의 주요 차이점은 인자 기본값은 함수 실행이 시작될 때 항상 그리고 오직 그때만 평가되는 반면, 지연 표현식은 참조될 때만 실현된다는 점입니다.)</p>
<h2>구현 세부 사항 (Implementation details)</h2>
<p>다음 내용은 참조 구현(reference implementation)에 관한 것이며, 반드시 명세의 일부는 아닙니다.</p>
<p>인자 기본값(위치 인자 또는 키워드 인자)은 이미 유지되고 있는 값과 추가적인 정보 조각을 가집니다. 위치 인자의 경우, 추가 정보는 <code>__defaults_extra__</code> 튜플에 저장되고, 키워드 전용 인자의 경우 <code>__kwdefaults_extra__</code> 딕셔너리에 저장됩니다. 이 속성이 <code>None</code>이면, 모든 인자 기본값이 <code>None</code>인 것과 동일합니다.</p>
<p>지연 바인딩 기본값을 가진 각 매개변수에 대해, 특수 값인 <code>Ellipsis</code>가 값 플레이스홀더로 저장되고, 해당 추가 정보가 쿼리되어야 합니다. 만약 <code>None</code>이라면, 기본값은 실제로 <code>Ellipsis</code>입니다. 그렇지 않으면, 설명 문자열이며 실제 값은 함수가 시작될 때 계산됩니다.</p>
<p>지연 바인딩 기본값을 가진 매개변수가 생략되면, 함수는 매개변수가 바인딩되지 않은 상태로 시작됩니다. 함수는 새로운 옵코드 <code>QUERY_FAST/QUERY_DEREF</code>를 사용하여 지연 바인딩 기본값을 가진 각 매개변수를 테스트하고, 바인딩되지 않은 경우 원래 표현식을 평가합니다. 이 옵코드(빠른 로컬 변수(fast locals) 및 클로저 변수(closure variables)에만 사용 가능)는 주어진 로컬 변수가 값을 가지면 <code>True</code>를 스택에 푸시하고, 그렇지 않으면 <code>False</code>를 푸시합니다. 즉, <code>LOAD_FAST</code> 또는 <code>LOAD_DEREF</code>가 <code>UnboundLocalError</code>를 발생시키면 <code>False</code>를 푸시하고, 성공하면 <code>True</code>를 푸시합니다.</p>
<p>참조 대상이 인자 또는 초기 바인딩 기본값에서 값을 가지고 있는 한, 순서가 뒤바뀐 변수 참조가 허용됩니다.</p>
<h2>비용 (Costs)</h2>
<p>지연 바인딩 인자 기본값이 사용되지 않을 때 발생하는 비용은 다음과 같을 것으로 예상됩니다.</p>
<ul>
<li>함수 객체에 두 개의 추가 포인터가 필요하며, 이들은 <code>NULL</code>이 될 것입니다.</li>
<li>코드 컴파일 및 함수 구성 시 추가적인 플래그 검사가 있습니다.</li>
<li><code>Ellipsis</code>를 기본값으로 사용하는 경우, 지연 바인딩 기본값이 존재하는지 확인하기 위한 런타임 검증이 필요합니다.</li>
</ul>
<p>이러한 비용은 최소화될 것으로 예상됩니다 (64비트 리눅스에서는 모든 함수 객체가 152바이트에서 168바이트로 증가합니다). 지연 바인딩 기본값이 사용되지 않을 때는 사실상 런타임 비용이 없습니다.</p>
<h2>하위 호환성 (Backward incompatibility)</h2>
<p>지연 바인딩 기본값이 사용되지 않는 경우 동작은 동일해야 합니다. <code>Ellipsis</code>가 발견되면 주의해야 합니다. 왜냐하면 그것이 <code>Ellipsis</code> 자체를 나타내지 않을 수도 있기 때문입니다. 그러나 그 외에는 도구들이 기존 코드를 변경되지 않은 것으로 인식해야 합니다.</p>
<h2>참조 (References)</h2>
<ul>
<li><a href="https://github.com/rosuav/cpython/tree/pep-671">https://github.com/rosuav/cpython/tree/pep-671</a></li>
</ul>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인에 공개되거나 CC0-1.0-Universal 라이선스 중 더 관대한 조건으로 제공됩니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Draft] PEP 671 - Syntax for late-bound function argument defaults"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 10:05:44+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
