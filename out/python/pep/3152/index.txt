3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-1a135130af3e1cae.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/3152","c"]
0:["8N6icDw00Cy0kKVlExSq2",[[["",{"children":[["slug","python/pep/3152","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3152\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3152","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T1c55,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3152/">PEP 3152 - Cofunctions</a></p>
<p><strong>상태:</strong> Rejected | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 13-Feb-2009</p>
</blockquote>
<h3>개요 (Abstract)</h3>
<p>PEP 3152는 'cofunction'이라는 특수한 유형의 제너레이터(generator)를 정의하고 호출하기 위한 새로운 문법을 제안했습니다. 이 제안의 목표는 제너레이터 기반 코루틴(coroutine)을 작성하는 과정을 간소화하고, 이러한 코드 작성 시 흔히 발생하는 특정 유형의 오류를 조기에 감지하도록 돕는 것이었습니다. 이러한 오류는 진단하기 어려운 증상을 유발하는 경향이 있습니다.</p>
<p>이 제안은 PEP 380에 설명된 <code>yield from</code> 메커니즘을 기반으로 하며, <code>cofunction</code>의 일부 의미론을 <code>yield from</code>을 통해 설명합니다. 그러나 필요하다면 PEP 380과 독립적으로 <code>cofunction</code>을 정의하고 구현하는 것도 가능했을 것입니다.</p>
<h3>반려 (Rejection)</h3>
<p>PEP 3152는 반려(Rejected)되었습니다. 상세한 반려 사유는 <code>https://mail.python.org/pipermail/python-dev/2015-April/139503.html</code>에서 확인할 수 있습니다.</p>
<h3>사양 (Specification)</h3>
<h4>Cofunction 정의 (Cofunction definitions)</h4>
<p><code>cofunction</code>을 정의하기 위해 <code>def</code> 대신 <code>codef</code>라는 새로운 키워드가 도입되었습니다. <code>cofunction</code>은 다음과 같은 특징을 가진 특별한 종류의 제너레이터입니다:</p>
<ul>
<li><code>cofunction</code>은 <code>yield</code> 또는 <code>yield from</code> 표현식을 포함하지 않더라도 항상 제너레이터입니다.</li>
<li><code>cofunction</code>은 일반 함수와 동일한 방식으로 호출될 수 없습니다.</li>
<li><code>cofunction</code>을 일반적인 방식으로 호출하려고 시도하면 예외(Exception)가 발생합니다.</li>
</ul>
<h4>Cocall (Cocalls)</h4>
<p>하나의 <code>cofunction</code>에서 다른 <code>cofunction</code>을 호출할 때는 <code>cocall</code>이라는 새로운 키워드를 사용하여 호출을 표시합니다. 예를 들어, <code>cocall f(*args, **kwds)</code> 표현식은 의미상 <code>yield from f.__cocall__(*args, **kwds)</code>와 동등합니다. 다만, <code>__cocall__</code>이 반환하는 객체는 이터레이터(iterator)일 것으로 예상되므로 <code>iter()</code>를 호출하는 단계는 건너뜁니다.</p>
<p><code>cocall</code> 표현식의 전체 문법은 다음과 같습니다:</p>
<pre><code>atom: cocall | &#x3C;기존 atom의 대안>
cocall: 'cocall' atom cotrailer* '(' [arglist] ')'
cotrailer: '[' subscriptlist ']' | '.' NAME
</code></pre>
<p><code>cocall</code> 키워드는 <code>cofunction</code> 내부에서만 문법적으로 유효합니다. 다른 컨텍스트에서 사용하면 <code>SyntaxError</code>가 발생합니다.</p>
<p><code>__cocall__</code>을 구현하는 객체는 이터레이터 프로토콜(iterator protocol)을 따르는 객체를 반환할 것으로 예상됩니다. <code>Cofunction</code>은 일반 제너레이터 함수가 <code>__call__</code>에 응답하는 방식과 동일하게 <code>__cocall__</code>에 응답합니다. 즉, 제너레이터 이터레이터(generator-iterator)를 반환합니다.</p>
<p>다른 호출 가능(callable) 객체, 특히 바운드 메서드(bound methods)를 감싸는 특정 객체는 내부 객체로 위임하는 <code>__cocall__</code> 구현을 갖게 됩니다.</p>
<h4>새로운 내장 함수, 속성 및 C API 함수 (New builtins, attributes and C API functions)</h4>
<p><code>cofunction</code>과 비(非)코루틴 코드를 연결하는 것을 용이하게 하기 위해 <code>costart</code>라는 내장 함수가 제공될 예정이었습니다. <code>costart</code>의 정의는 다음과 같습니다:</p>
<pre><code class="language-python">def costart(obj, *args, **kwds):
    return obj.__cocall__(*args, **kwds)
</code></pre>
<p>또한, 이에 상응하는 C API 함수 <code>PyObject *PyObject_CoCall(PyObject *obj, PyObject *args, PyObject *kwds)</code>도 제공될 예정이었습니다.</p>
<p><code>cofunction</code>이 별개의 객체 유형인지, 아니면 제너레이터 함수처럼 특별히 표시된 함수 인스턴스(instance)인지는 명시되지 않았습니다. 후자일 경우, 주어진 함수 객체가 <code>cofunction</code>인지 테스트할 수 있도록 읽기 전용(read-only) 불리언(boolean) 속성 <code>__iscofunction__</code>이 제공되어야 한다고 명시되었습니다.</p>
<h3>동기 및 근거 (Motivation and Rationale)</h3>
<p><code>yield from</code> 문법은 제너레이터의 작업 일부를 다른 함수에 위임하는 목적으로 사용될 때 비교적 자명합니다. 또한 제너레이터 기반 코루틴 구현에도 효과적으로 사용될 수 있지만, 이 목적에 사용될 때는 다소 어색하게 읽히고 코드의 진정한 의도를 모호하게 만드는 경향이 있습니다.</p>
<p>더 나아가, 제너레이터를 코루틴으로 사용하는 것은 오류가 발생하기 쉽습니다. <code>yield from</code>을 사용해야 할 때 사용하지 않거나, 사용하지 말아야 할 때 사용하면 모호하고 혼란스러운 증상이 나타날 수 있습니다.</p>
<p>마지막으로, 때로는 아무것도 yield 하지 않더라도 함수가 코루틴이어야 할 필요가 있으며, 이러한 경우 <code>if 0: yield</code>와 같은 편법(kludges)을 사용하여 강제로 제너레이터로 만드는 것이 필요했습니다.</p>
<p><code>codef</code> 및 <code>cocall</code> 구문은 다음과 같은 문제들을 해결하고자 했습니다:</p>
<ul>
<li>첫 번째 문제(<code>yield from</code> 사용 시 의미 모호성)는 문법이 의도(함수가 코루틴의 일부를 형성함)를 직접적으로 반영하도록 하여 해결합니다.</li>
<li>두 번째 문제(코루틴과 비(非)코루틴 코드의 혼합으로 인한 오류)는 말이 안 되는 방식으로 코루틴과 비(非)코루틴 코드를 혼합하는 것을 불가능하게 함으로써 해결합니다. 규칙을 위반하면 정확히 무엇이 문제인지, 어디에서 문제가 발생했는지 알려주는 예외가 발생합니다.</li>
<li>마지막으로, 함수의 정의 형식이 함수가 코루틴인지 여부를 결정하도록 함으로써 더미 <code>yield</code>의 필요성을 없앱니다.</li>
</ul>
<h3>프로토타입 구현 (Prototype Implementation)</h3>
<p>Python 3.1.2에 대한 패치 형태의 구현은 다음에서 찾을 수 있습니다:
<code>http://www.cosc.canterbury.ac.nz/greg.ewing/python/generators/cofunctions.html</code></p>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인(public domain)으로 지정되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1318,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Rejected] PEP 3152 - Cofunctions"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:41:43+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
