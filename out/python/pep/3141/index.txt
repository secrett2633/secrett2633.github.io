3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-d79d6340e7770dba.js","185","static/chunks/app/layout-b06e577e11976c7d.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-9d772c571b4668c1.js"],""]
4:["slug","python/pep/3141","c"]
0:["qNOrJYeuqip9qCFPpDVpu",[[["",{"children":[["slug","python/pep/3141","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3141\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3141","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2d64,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3141/">PEP 3141 - A Type Hierarchy for Numbers</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 23-Apr-2007</p>
</blockquote>
<h1>PEP 3141: 숫자형을 위한 타입 계층 구조 (A Type Hierarchy for Numbers)</h1>
<ul>
<li><strong>작성자:</strong> Jeffrey Yasskin</li>
<li><strong>상태:</strong> Final (최종)</li>
<li><strong>타입:</strong> Standards Track (표준 트랙)</li>
<li><strong>생성일:</strong> 2007년 4월 23일</li>
<li><strong>Python 버전:</strong> 3.0</li>
</ul>
<h2>요약 (Abstract)</h2>
<p>이 제안서는 숫자와 유사한 클래스들을 나타내기 위한 추상 기반 클래스(ABCs) (PEP 3119 참고)의 계층 구조를 정의합니다. 이 계층은 <code>Number :> Complex :> Real :> Rational :> Integral</code> 의 구조를 제안하며, 여기서 <code>A :> B</code>는 "A가 B의 슈퍼타입(supertype)"임을 의미합니다. 이 계층 구조는 Scheme의 숫자 타워(numeric tower)에서 영감을 받았습니다.</p>
<h2>도입 배경 (Rationale)</h2>
<p>숫자를 인수로 받는 함수들은 해당 숫자의 속성을 파악할 수 있어야 하며, 타입 기반 오버로딩(overloading)이 언어에 추가될 경우 인수 타입에 따라 오버로드될 수 있어야 합니다. 예를 들어, 슬라이싱(slicing)은 인수가 <code>Integral</code>이어야 하며, <code>math</code> 모듈의 함수들은 인수가 <code>Real</code>이어야 합니다. 표준 라이브러리의 타입 검사는 내장 타입 대신 이러한 ABC들을 사용해야 합니다.</p>
<h2>사양 (Specification)</h2>
<p>이 PEP는 일련의 추상 기반 클래스를 지정하고, 일부 메서드 구현을 위한 일반적인 전략을 제안합니다.</p>
<h3>숫자 클래스 (Numeric Classes)</h3>
<ul>
<li>
<p><strong><code>Number</code></strong>: 가장 기본적인 클래스로, 어떤 종류의 숫자를 기대하는지에 대해 유연성을 제공합니다. 이 클래스는 오버로딩에만 도움을 주며, 어떠한 연산도 제공하지 않습니다.</p>
<pre><code class="language-python">class Number(metaclass=ABCMeta):
    pass
</code></pre>
</li>
<li>
<p><strong><code>Complex</code></strong>: 내장 <code>complex</code> 타입에서 작동하는 연산을 정의합니다. 이는 <code>complex</code>로의 변환, <code>bool()</code>, <code>.real</code>, <code>.imag</code>, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>**</code>, <code>abs()</code>, <code>.conjugate()</code>, <code>==</code>, <code>!=</code> 등을 포함합니다. 이질적인(heterogeneous) 인수가 주어지고 특별한 지식이 없는 경우, 내장 <code>complex</code> 타입으로 폴백(fallback)해야 합니다.</p>
<pre><code class="language-python">class Complex(Number):
    @abstractmethod
    def __complex__(self): ...
    def __bool__(self): ...
    @abstractproperty
    def real(self): ...
    @abstractproperty
    def imag(self): ...
    # ... 그 외 연산 메서드들 ...
</code></pre>
</li>
<li>
<p><strong><code>Real</code></strong>: <code>Complex</code>에 실수 연산을 추가합니다. 이는 <code>float</code>로의 변환, <code>trunc()</code>, <code>math.floor()</code>, <code>math.ceil()</code>, <code>round()</code>, <code>divmod()</code>, <code>//</code>, <code>%</code>, <code>&#x3C;</code>, <code>&#x3C;=</code>, <code>></code>, <code>>=</code> 등을 포함합니다. <code>Real</code>은 일부 파생 연산에 대한 기본값도 제공합니다. <code>__complex__</code>, <code>real</code>, <code>imag</code>, <code>conjugate</code>와 같은 <code>Complex</code>의 추상 메서드에 대한 구체적인 구현을 제공합니다.</p>
<pre><code class="language-python">class Real(Complex):
    @abstractmethod
    def __float__(self): ...
    @abstractmethod
    def __trunc__(self): ...
    # ... 그 외 연산 메서드들 ...

    # Complex의 추상 메서드에 대한 구체적인 구현
    def __complex__(self): return complex(float(self))
    @property
    def real(self): return +self
    @property
    def imag(self): return 0
    def conjugate(self): return +self # Real의 켤레복소수는 자기 자신
</code></pre>
</li>
<li>
<p><strong><code>Rational</code></strong>: <code>Real</code>을 상속하며, <code>.numerator</code> (분자)와 <code>.denominator</code> (분모) 속성을 가집니다. 분자/분모는 기약 분수 형태로 표현되어야 합니다. <code>Real</code>의 <code>__float__</code> 변환 메서드에 대한 구현을 제공합니다.</p>
<pre><code class="language-python">class Rational(Real): # Exact 클래스도 상속하지만, PEP 3141에는 포함되지 않음
    @abstractproperty
    def numerator(self): ...
    @abstractproperty
    def denominator(self): ...

    # Real의 float 변환에 대한 구체적인 구현
    def __float__(self):
        return self.numerator / self.denominator
</code></pre>
</li>
<li>
<p><strong><code>Integral</code></strong>: <code>Rational</code>을 상속하며, <code>int</code>로의 변환 및 비트 문자열(bit-string) 연산을 추가합니다. <code>__int__()</code>와 <code>__index__()</code> 메서드를 포함하며, 비트 시프트(<code>&#x3C;&#x3C;</code>, <code>>></code>), 비트 AND(<code>&#x26;</code>), OR(<code>|</code>), XOR(<code>^</code>), INVERT(<code>~</code>)와 같은 연산에 대한 구현을 제공합니다. <code>Rational</code> 및 <code>Real</code>의 추상 메서드에 대한 구체적인 구현도 제공합니다.</p>
<pre><code class="language-python">class Integral(Rational):
    @abstractmethod
    def __int__(self): ...
    def __index__(self): ...
    # ... 비트 연산 메서드들 ...

    # Rational 및 Real의 추상 메서드에 대한 구체적인 구현
    def __float__(self): return float(int(self))
    @property
    def numerator(self): return +self
    @property
    def denominator(self): return 1
</code></pre>
</li>
</ul>
<h3>연산 및 <code>__magic__</code> 메서드 변경 (Changes to operations and <code>__magic__</code> methods)</h3>
<p><code>float</code>에서 <code>int</code>로 (더 일반적으로는 <code>Real</code>에서 <code>Integral</code>로) 더 정밀하게 변환하기 위해 새로운 <code>__magic__</code> 메서드들이 제안되었습니다. 이러한 메서드들은 모두 <code>Real</code> 대신 <code>Integral</code>을 반환합니다.</p>
<ul>
<li><code>__trunc__(self)</code>: 새로운 내장 함수 <code>trunc(x)</code>에서 호출되며, 0과 <code>x</code> 사이에서 <code>x</code>에 가장 가까운 <code>Integral</code>을 반환합니다.</li>
<li><code>__floor__(self)</code>: <code>math.floor(x)</code>에서 호출되며, <code>x</code>보다 작거나 같은 가장 큰 <code>Integral</code>을 반환합니다.</li>
<li><code>__ceil__(self)</code>: <code>math.ceil(x)</code>에서 호출되며, <code>x</code>보다 크거나 같은 가장 작은 <code>Integral</code>을 반환합니다.</li>
<li><code>__round__(self)</code>: <code>round(x)</code>에서 호출되며, <code>x</code>에 가장 가까운 <code>Integral</code>을 반환하고, 반올림 방식은 타입에 따라 달라집니다. <code>float</code>는 Python 3.0에서 가장 가까운 짝수로 반올림하도록 변경됩니다. <code>round(x, ndigits)</code>에서 호출되는 <code>__round__(self, ndigits)</code>의 두 인자 버전도 있으며, 이는 <code>Real</code>을 반환해야 합니다.</li>
</ul>
<p>Python 2.6에서는 <code>math.floor</code>, <code>math.ceil</code>, <code>round</code>가 계속 <code>float</code>를 반환합니다. <code>float</code>에 의해 구현된 <code>int()</code> 변환은 <code>trunc()</code>와 동일합니다. 일반적으로 <code>int()</code> 변환은 먼저 <code>__int__()</code>를 시도하고, 찾을 수 없으면 <code>__trunc__()</code>를 시도해야 합니다.</p>
<p><code>complex</code>의 <code>__divmod__</code>, <code>__mod__</code>, <code>__floordiv__</code>, <code>__int__</code>, <code>__float__</code>도 제거됩니다.</p>
<h3>타입 구현자를 위한 참고 사항 (Notes for type implementors)</h3>
<p>구현자들은 같은 숫자는 같게 만들고 동일한 값으로 해싱(hashing)하도록 주의해야 합니다. 예를 들어, 복소수(complex) 타입은 <code>__hash__</code>를 <code>hash(complex(self))</code>와 같이 구현할 수 있지만, 내장 <code>complex</code>의 범위나 정밀도를 벗어나는 값에 주의해야 합니다.</p>
<h3>더 많은 숫자 ABC 추가 (Adding More Numeric ABCs)</h3>
<p>물론 숫자를 위한 더 많은 ABC들이 있을 수 있으며, 이 계층 구조는 그러한 추가 가능성을 막지 않습니다. 예를 들어, <code>Complex</code>와 <code>Real</code> 사이에 <code>MyFoo</code>를 추가할 수 있습니다.</p>
<pre><code class="language-python">class MyFoo(Complex):
    ...
MyFoo.register(Real)
</code></pre>
<h3>산술 연산 구현 (Implementing the arithmetic operations)</h3>
<p>혼합 타입 연산(mixed-mode operations)은 두 인수 타입을 모두 알고 있는 구현을 호출하거나, 둘 다 가장 가까운 내장 타입으로 변환하여 연산을 수행하도록 구현해야 합니다. <code>Integral</code>의 서브타입(subtype)의 경우, <code>__add__</code>와 <code>__radd__</code>는 다음과 같이 정의되어야 합니다.</p>
<pre><code class="language-python">class MyIntegral(Integral):
    def __add__(self, other):
        if isinstance(other, MyIntegral):
            return do_my_adding_stuff(self, other)
        elif isinstance(other, OtherTypeIKnowAbout):
            return do_my_other_adding_stuff(self, other)
        else:
            return NotImplemented

    def __radd__(self, other):
        if isinstance(other, MyIntegral):
            return do_my_adding_stuff(other, self)
        elif isinstance(other, OtherTypeIKnowAbout):
            return do_my_other_adding_adding_stuff(other, self)
        elif isinstance(other, Integral):
            return int(other) + int(self)
        elif isinstance(other, Real):
            return float(other) + float(self)
        elif isinstance(other, Complex):
            return complex(other) + complex(self)
        else:
            return NotImplemented
</code></pre>
<h3>거부된 대안 (Rejected Alternatives)</h3>
<p>이 PEP의 초기 버전은 Haskell Numeric Prelude에서 영감을 받은 <code>MonoidUnderPlus</code>, <code>AdditiveGroup</code>, <code>Ring</code>, <code>Field</code>를 포함하는 대수적 계층(algebraic hierarchy)을 정의했습니다. 그러나 NumPy 커뮤니티는 이에 관심이 없었으며, <code>x + y</code>가 항상 의미가 있지 않을 수 있다는 문제가 발생했습니다.</p>
<p>그 후 가우스 정수(Gaussian Integers)나 Z/nZ와 같은 것을 포함하기 위해 숫자에 더 많은 분기 구조를 부여했지만, 커뮤니티는 Python에게 너무 복잡하다고 판단했습니다. 따라서 제안은 Scheme의 숫자 타워와 훨씬 더 유사하게 축소되었습니다.</p>
<h3><code>Decimal</code> 타입 (The Decimal Type)</h3>
<p><code>Decimal</code> 타입은 현재 이 숫자 타워의 일부로 포함되지 않기로 결정되었습니다.</p>
<hr>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 3141 - A Type Hierarchy for Numbers"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:36:02+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
