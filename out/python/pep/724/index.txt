3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-1a135130af3e1cae.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/724","c"]
0:["8N6icDw00Cy0kKVlExSq2",[[["",{"children":[["slug","python/pep/724","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"724\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/724","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2bda,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0724/">PEP 724 - Stricter Type Guards</a></p>
<p><strong>상태:</strong> Withdrawn | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 28-Jul-2023</p>
</blockquote>
<h1>PEP 724 – Stricter Type Guards (더 엄격한 Type Guard)</h1>
<p><strong>상태:</strong> 이 PEP는 <strong>철회되었습니다 (Withdrawn)</strong>. Typing Council이 이 제안에 대해 합의에 도달하지 못하여, 저자들이 철회하기로 결정했습니다.</p>
<h2>개요 (Abstract)</h2>
<p>PEP 647은 사용자 정의 <code>TypeGuard</code> 함수 개념을 도입했습니다. 이 함수는 첫 번째 매개변수로 전달된 표현식의 타입이 <code>TypeGuard</code> 반환 타입과 일치할 경우 <code>True</code>를 반환합니다. 예를 들어, <code>TypeGuard[str]</code>를 반환하는 함수는 첫 번째 입력 매개변수에 전달된 표현식의 타입이 <code>str</code>인 경우에만 <code>True</code>를 반환하는 것으로 간주됩니다. 이를 통해 타입 체커는 사용자 정의 <code>TypeGuard</code> 함수가 <code>True</code>를 반환할 때 타입을 더 좁게 추론(narrowing)할 수 있게 되었습니다.</p>
<p>PEP 724는 PEP 647에서 도입된 <code>TypeGuard</code> 메커니즘을 개선하고자 했습니다. 주된 목적은 사용자 정의 <code>TypeGuard</code> 함수가 <code>False</code>를 반환할 때도 타입 체커가 타입을 좁게 추론할 수 있도록 허용하고, 특정 상황에서 <code>True</code>를 반환할 때 추가적으로 더 정밀한 타입 추론을 적용할 수 있도록 하는 것이었습니다.</p>
<h2>도입 배경 (Motivation)</h2>
<p>사용자 정의 <code>TypeGuard</code> 함수는 타입 체커가 표현식을 인자로 받을 때 해당 표현식의 타입을 좁게 추론하도록 돕습니다. PEP 647에서 도입된 <code>TypeGuard</code> 메커니즘은 유연하지만, 이러한 유연성으로 인해 개발자들이 불편함을 겪는 몇 가지 제한 사항이 있었습니다.</p>
<p><strong>제한 사항 1: <code>TypeGuard</code> 함수가 <code>False</code>를 반환하는 경우 타입 체커는 타입을 좁게 추론할 수 없었습니다.</strong> 이는 "else" 절에서 타입이 좁혀지지 않음을 의미합니다.</p>
<p><strong>제한 사항 2: <code>TypeGuard</code> 함수가 <code>True</code>를 반환하면, 타입 체커는 사전 추론된 타입에 기반하여 추가적인 추론을 적용할 수 있는지 여부와 상관없이 <code>TypeGuard</code> 반환 타입을 사용해야 했습니다.</strong></p>
<p>다음 코드 예시는 이 두 가지 제한 사항을 보여줍니다:</p>
<pre><code class="language-python">def is_iterable(val: object) -> TypeGuard[Iterable[Any]]:
    return isinstance(val, Iterable)

def func(val: int | list[int]):
    if is_iterable(val):
        # TypeGuard 반환 타입에 따라 'Iterable[Any]'로 타입이 좁혀집니다.
        reveal_type(val) # Iterable[Any]
    else:
        # "False"인 경우 타입이 좁혀지지 않습니다.
        reveal_type(val) # int | list[int]

    # 사용자 정의 TypeGuard 함수 대신 "isinstance"를 사용하면 결과가 달라집니다.
    # 타입 체커는 "isinstance"에 대해 추가적인 로직을 적용하기 때문입니다.
    if isinstance(val, Iterable):
        # "Iterable[Any]"보다 더 좁고 정확한 타입인 "list[int]"로 좁혀집니다.
        reveal_type(val) # list[int]
    else:
        # 원래 유니온에서 "list[int]"가 제거되어 "int"로 좁혀집니다.
        reveal_type(val) # int
</code></pre>
<p>PEP 647은 <code>TypeGuard</code> 반환 타입이 입력 타입의 서브타입이 아닌 사용 사례를 지원하기 위해 이러한 제한 사항을 두었습니다.</p>
<h2>제안 배경 (Rationale)</h2>
<p>더 엄격한 <code>TypeGuard</code>가 해결책이 될 수 있었던 여러 이슈들이 있었습니다. 예를 들어, <code>TypeGuard</code>가 <code>isinstance</code>처럼 타입을 교차(intersect)하지 않거나, 특정 분기에서 가능성을 제거하지 못하거나, <code>Literal</code> 타입 추론이 작동하지 않는 등의 문제들이 제기되었습니다.</p>
<h2>명세 (Specification)</h2>
<p>이 PEP는 위에서 논의된 제한 사항을 해결하기 위해 PEP 647에 대한 몇 가지 수정을 제안했습니다. 이러한 제한 사항들은 특정 조건이 충족될 때에만 안전하게 제거될 수 있습니다. 특히, 사용자 정의 <code>TypeGuard</code> 함수의 결과 타입 <code>R</code>이 첫 번째 입력 매개변수 <code>I</code>의 타입과 **일관적(consistent)**일 때, 타입 체커는 더 엄격한 <code>TypeGuard</code> 의미론을 적용해야 한다고 제안되었습니다.</p>
<p><strong>더 엄격한 <code>TypeGuard</code> 의미론이 적용될 때, 사용자 정의 <code>TypeGuard</code> 함수의 적용 방식은 두 가지로 변경됩니다:</strong></p>
<ol>
<li>
<p><strong>부정 ("else") 케이스에서도 타입 추론이 적용됩니다.</strong></p>
<pre><code class="language-python">def is_str(val: str | int) -> TypeGuard[str]:
    return isinstance(val, str)

def func(val: str | int):
    if not is_str(val):
        reveal_type(val) # int (이전에는 str | int)
</code></pre>
</li>
<li>
<p><strong>긍정 ("if") 케이스에서도 해당하는 경우 추가적인 타입 추론이 적용됩니다.</strong></p>
<pre><code class="language-python">def is_cardinal_direction(val: str) -> TypeGuard[Literal["N", "S", "E", "W"]]:
    return val in ("N", "S", "E", "W")

def func(direction: Literal["NW", "E"]):
    if is_cardinal_direction(direction):
        reveal_type(direction) # "Literal[E]" (이전에는 Literal["N", "S", "E", "W"] 또는 str)
    else:
        reveal_type(direction) # "Literal[NW]"
</code></pre>
</li>
</ol>
<p><strong>타입 추론을 위한 타입 이론적 규칙:</strong></p>
<p>|                  | 비-엄격 (Non-strict) <code>TypeGuard</code> | 엄격 (Strict) <code>TypeGuard</code>   |
| :--------------- | :------------------------------- | :-------------------------- |
| 적용 시점        | <code>R</code>이 <code>I</code>와 일관적이지 않을 때   | <code>R</code>이 <code>I</code>와 일관적일 때     |
| 긍정 추론 타입 NP | <code>R</code>                              | <code>A ∧ R</code> (인자 타입과 반환 타입의 교집합) |
| 부정 추론 타입 NN | <code>A</code>                              | <code>A ∧ ¬R</code> (인자 타입에서 반환 타입을 제외) |</p>
<p>실제로 엄격한 <code>TypeGuard</code>에 대한 이론적 타입은 Python 타입 시스템에서 정확하게 표현하기 어렵기 때문에, 타입 체커는 실용적인 근사치에 의존해야 합니다. 일반적으로 타입 체커는 <code>isinstance</code>를 처리하는 방식과 동일한 타입 추론 로직을 사용해야 하며, 일관된 결과를 얻어야 합니다.</p>
<h2>하위 호환성 (Backwards Compatibility)</h2>
<p>이 PEP는 <code>TypeGuard</code>의 기존 동작을 변경하는 것을 제안했지만, 런타임에는 영향을 미치지 않고 타입 체커가 평가하는 타입만 변경됩니다.</p>
<pre><code class="language-python">def is_int(val: int | str) -> TypeGuard[int]:
    return isinstance(val, int)

def func(val: int | str):
    if is_int(val):
        reveal_type(val) # "int"
    else:
        # 이전에는 "int | str"로 평가되었지만, 이제는 "str"로 평가됩니다.
        reveal_type(val)
</code></pre>
<p>이러한 동작 변경은 타입 체커가 평가하는 타입에 변화를 가져오므로, 새로운 타입 오류를 발생시키거나 기존 오류를 가릴 수 있습니다. 그러나 타입 체커가 종종 추론 로직을 개선하거나 버그를 수정하기 때문에, 정적 타이핑 사용자는 이러한 종류의 동작 변경에 익숙할 것으로 예상되었습니다.</p>
<p>또한, 기존의 타입이 지정된 Python 코드가 <code>TypeGuard</code>의 현재 동작에 의존할 가능성은 낮다고 가정했습니다. Pyright에서 제안된 변경 사항을 구현하고 약 25개의 타입 코드베이스에 대해 실행했을 때, 동작 변경의 영향은 미미했습니다. 유일하게 주목할 만한 변화는 일부 <code># type: ignore</code> 주석이 더 이상 필요 없게 되었다는 것이며, 이는 해당 코드베이스가 이미 <code>TypeGuard</code>의 기존 제한 사항을 우회하고 있었음을 나타냅니다.</p>
<p><strong>호환성을 깨뜨리는 변경 (Breaking change):</strong> 사용자 정의 <code>TypeGuard</code> 함수가 이전 동작에 의존하는 경우, 새로운 동작으로 인해 문제가 발생할 수 있습니다. 예를 들어 <code>is_positive_int</code>와 같은 함수에서 <code>else</code> 절의 타입 추론이 의도와 다르게 <code>str</code>로 좁혀질 수 있습니다. 그러나 실제 코드에서는 이러한 <code>TypeGuard</code>가 존재할 가능성은 낮다고 판단되었습니다.</p>
<h2>교육 방법 (How to Teach This)</h2>
<p><code>TypeGuard</code>에 익숙하지 않은 사용자들은 이 PEP에서 설명된 동작을 자연스럽게 기대할 가능성이 높으므로, <code>TypeGuard</code>를 가르치고 설명하기가 더 쉬워질 것이라고 예상되었습니다.</p>
<h2>참고 구현 (Reference Implementation)</h2>
<p>이 아이디어에 대한 참조 구현은 Pyright에 존재합니다. 수정된 동작을 활성화하려면 구성 플래그 <code>enableExperimentalFeatures</code>를 <code>true</code>로 설정해야 합니다. 이는 <code># pyright: enableExperimentalFeatures=true</code>와 같은 주석을 통해 파일 단위로 설정할 수 있습니다.</p>
<h2>기각된 아이디어 (Rejected Ideas)</h2>
<ol>
<li>
<p><strong><code>StrictTypeGuard</code>:</strong> 더 엄격한 <code>TypeGuard</code> 의미론을 명시적으로 적용하는 새로운 구문 <code>StrictTypeGuard</code>가 제안되었습니다. 그러나 대부분의 경우 불필요하고 복잡성을 가중하며, 두 형태 간의 미묘한 차이에 대해 개발자를 교육해야 하므로 기각되었습니다.</p>
</li>
<li>
<p><strong>두 번째 출력 타입을 가진 <code>TypeGuard</code>:</strong> <code>TypeGuard</code>가 부정 ("else") 케이스에서 추론에 사용될 타입을 나타내는 두 번째 선택적 타입 인자를 지원하도록 하는 아이디어가 제안되었습니다.</p>
<pre><code class="language-python">def is_int(val: int | str) -> TypeGuard[int, str]:
    return isinstance(val, int)
</code></pre>
<p>이 아이디어는 너무 복잡하고 <code>TypeGuard</code>의 두 가지 주요 제한 사항 중 하나만 해결했기 때문에 기각되었습니다.</p>
</li>
</ol>
<hr>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1318,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Withdrawn] PEP 724 - Stricter Type Guards"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 13:17:29+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
