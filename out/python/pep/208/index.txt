3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-aecaf5ac7a84facf.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-e3ea38185bb36cd2.js"],""]
4:["slug","python/pep/208","c"]
0:["x02Anhkwgp1He7ftuyAhh",[[["",{"children":[["slug","python/pep/208","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"208\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/208","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/da5e1dc2b9a7c5bb.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T333c,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0208/">PEP 208 - Reworking the Coercion Model</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 04-Dec-2000</p>
</blockquote>
<p>PEP 208 – Coercion 모델 재작업 (Reworking the Coercion Model)</p>
<h2>개요 (Abstract)</h2>
<p>많은 Python 타입은 숫자 연산(numeric operations)을 구현합니다. 숫자 연산의 인자들이 서로 다른 타입일 경우, 인터프리터는 인자들을 공통 타입으로 <code>coercion</code>(강제 변환)하려고 시도합니다. 그런 다음 이 공통 타입을 사용하여 숫자 연산을 수행합니다.</p>
<p>이 PEP는 타입의 숫자 연산에 대한 인자들이 강제 변환되지 않아야 함을 나타내는 새로운 타입 플래그를 제안합니다. 제공된 타입을 지원하지 않는 연산은 새로운 싱글턴 객체를 반환하여 이를 나타냅니다. 이 타입 플래그를 설정하지 않는 타입은 이전 버전과의 호환성을 유지하는 방식으로 처리됩니다.</p>
<p>연산이 서로 다른 타입을 직접 처리하도록 허용하는 것은 인터프리터가 강제 변환을 수행하는 것보다 종종 더 간단하고, 유연하며, 빠릅니다.</p>
<h2>도입 배경 (Rationale)</h2>
<p>숫자 또는 관련 연산을 구현할 때, 단일 타입 피연산자(operand) 간의 연산(예: 정수 + 정수)뿐만 아니라, 연산의 개념을 다른 타입 조합(예: 정수 + float)으로 일반화하는 것이 바람직한 경우가 많습니다.</p>
<p>이러한 혼합 타입 상황에 대한 일반적인 접근 방식은 피연산자를 공통 타입으로 "끌어올린(lifting)" 다음(즉, <code>coercion</code>을 통해), 해당 타입의 피연산자 메서드를 실행 메커니즘으로 사용하는 것입니다. 그러나 이 전략에는 몇 가지 단점이 있습니다.</p>
<ul>
<li>"끌어올리는(lifting)" 과정은 최소한 하나의 새로운 (임시) 피연산자 객체를 생성합니다.</li>
<li><code>coercion</code> 메서드가 다음에 수행될 연산에 대해 알 수 없으므로, 연산별 <code>coercion</code>을 구현하는 것이 불가능합니다.</li>
<li>공통 타입을 사용할 수 없는 상황을 우아하게 해결할 방법이 없습니다.</li>
<li><code>coercion</code> 메서드는 연산 메서드 자체보다 항상 먼저 호출되어야 합니다.</li>
</ul>
<p>이러한 단점들은 이 기능을 필요로 하는 타입의 구현을 불가능하지는 않더라도 매우 번거롭게 만들므로, 이 상황에 대한 해결책이 분명히 필요합니다. 예를 들어, 절대적인 값인 <code>DateTime</code>과 상대적인 값인 <code>DateTimeDelta</code> 타입을 살펴보십시오. 상대적인 값을 절대적인 값에 항상 더하여 새로운 절대적인 값을 얻을 수 있습니다. 그러나 기존 <code>coercion</code> 메커니즘이 이 연산을 구현하는 데 사용할 수 있는 공통 타입은 없습니다.</p>
<p>현재 <code>PyInstance</code> 타입은 숫자 메서드에 다른 타입의 인자가 전달된다는 점에서 인터프리터에 의해 특별히 처리됩니다. 이 특별한 경우를 제거하면 인터프리터가 단순화되고 다른 타입이 인스턴스 타입처럼 동작하는 숫자 메서드를 구현할 수 있게 됩니다. 이는 <code>ExtensionClass</code>와 같은 확장 타입에 특히 유용합니다.</p>
<h2>명세 (Specification)</h2>
<p>중앙 집중식 <code>coercion</code> 메서드를 사용하는 대신, 서로 다른 피연산자 타입을 처리하는 과정은 단순히 연산 자체에 맡겨집니다. 연산이 주어진 피연산자 타입 조합을 처리할 수 없다고 판단하면, 특별한 싱글턴 객체를 반환하여 이를 나타낼 수 있습니다.</p>
<p>Python으로 작성된 "숫자"(숫자 프로토콜 또는 그 일부를 구현하는 모든 것)는 이미 이 전략의 첫 부분을 사용하고 있다는 점에 유의해야 합니다. 여기서 우리는 C 레벨 API에 초점을 맞춥니다.</p>
<p>거의 100%의 하위 호환성을 유지하기 위해, 새로운 전략에 대해 전혀 모르는 숫자(<code>old style numbers</code>)가 새로운 스키마를 기대하는 숫자(<code>new style numbers</code>)와 마찬가지로 잘 작동하도록 매우 주의해야 합니다. 또한, 바이너리 호환성(binary compatibility)은 필수적이며, 이는 숫자가 새로운 스타일 연산의 가용성을 나타내는 경우에만 인터프리터가 새로운 스타일 연산에 접근하고 사용할 수 있음을 의미합니다.</p>
<p>새로운 스타일 숫자(<code>new style number</code>)는 <code>Py_TPFLAGS_CHECKTYPES</code> 타입 플래그를 설정한 경우에만 인터프리터에 의해 그렇게 간주됩니다. <code>old style number</code>와 <code>new style number</code>의 주요 차이점은 숫자 슬롯 함수가 더 이상 동일한 타입의 인자를 전달받는다고 가정할 수 없다는 것입니다. <code>new style slots</code>는 모든 인자의 적절한 타입을 확인하고 필요한 변환을 직접 구현해야 합니다. 이는 타입 구현자에게 더 많은 작업을 유발하는 것처럼 보일 수 있지만, 실제로는 <code>old style coercion slot</code>과 동일한 종류의 루틴을 작성하는 것보다 더 어렵지 않습니다.</p>
<p><code>new style slot</code>이 전달된 인자 타입 조합을 처리할 수 없다고 판단하면, 호출자에게 특별한 싱글턴인 <code>Py_NotImplemented</code>의 새 참조를 반환할 수 있습니다. 이렇게 하면 호출자는 특정 타입 조합에 대한 연산을 구현하는 슬롯을 찾을 때까지 다른 피연산자의 연산 슬롯을 시도하게 됩니다. 가능한 슬롯 중 어느 것도 성공하지 못하면 <code>TypeError</code>가 발생합니다.</p>
<p>구현을 이해하기 쉽게 만들기 위해 (전체 주제가 충분히 난해하기 때문에), 숫자 연산 처리에는 새로운 계층이 도입됩니다. 이 계층은 <code>old style</code> 및 <code>new style</code> 숫자의 가능한 모든 조합을 다룰 때 고려해야 할 모든 다른 경우를 처리합니다. 이는 <code>binary_op()</code> 및 <code>ternary_op()</code>라는 두 개의 정적 함수에 의해 구현되며, 이들은 <code>Objects/abstract.c</code>의 함수만 접근할 수 있는 내부 함수입니다. 숫자 API (<code>PyNumber_*</code>)는 이 새로운 계층에 쉽게 적응할 수 있습니다.</p>
<p>부가적으로 모든 숫자 슬롯은 <code>NULL</code> 검사를 할 수 있습니다(이것은 어쨌든 해야 하는 작업이므로 추가 기능에 대한 비용은 없습니다).</p>
<p>이 계층이 이진 연산(binary operation)을 실행하는 데 사용하는 스키마는 다음과 같습니다.</p>
<p>| <code>v</code>    | <code>w</code>    | 취해진 조치 (<code>Action taken</code>)              |
| :----- | :----- | :---------------------------------------- |
| <code>new</code>  | <code>new</code>  | <code>v.op(v,w)</code>, <code>w.op(v,w)</code>                 |
| <code>new</code>  | <code>old</code>  | <code>v.op(v,w)</code>, <code>coerce(v,w)</code>, <code>v.op(v,w)</code> |
| <code>old</code>  | <code>new</code>  | <code>w.op(v,w)</code>, <code>coerce(v,w)</code>, <code>v.op(v,w)</code> |
| <code>old</code>  | <code>old</code>  | <code>coerce(v,w)</code>, <code>v.op(v,w)</code>               |</p>
<p>표시된 조치 시퀀스는 연산이 성공하여 유효한 결과(!= <code>Py_NotImplemented</code>)가 반환되거나 예외가 발생할 때까지 왼쪽에서 오른쪽으로 실행됩니다. 예외는 호출 함수에 있는 그대로 반환됩니다. 슬롯이 <code>Py_NotImplemented</code>를 반환하면 시퀀스의 다음 항목이 실행됩니다.</p>
<p><code>coerce(v,w)</code>는 <code>PyNumber_Coerce()</code> 호출을 통해 <code>old style nb_coerce</code> 슬롯 메서드를 사용합니다.</p>
<p>삼항 연산(ternary operations)은 몇 가지 더 많은 경우를 처리해야 합니다.</p>
<p>| <code>v</code>    | <code>w</code>    | <code>z</code>    | 취해진 조치 (<code>Action taken</code>)                               |
| :----- | :----- | :----- | :--------------------------------------------------------- |
| <code>new</code>  | <code>new</code>  | <code>new</code>  | <code>v.op(v,w,z)</code>, <code>w.op(v,w,z)</code>, <code>z.op(v,w,z)</code>                 |
| <code>new</code>  | <code>old</code>  | <code>new</code>  | <code>v.op(v,w,z)</code>, <code>z.op(v,w,z)</code>, <code>coerce(v,w,z)</code>, <code>v.op(v,w,z)</code> |
| <code>old</code>  | <code>new</code>  | <code>new</code>  | <code>w.op(v,w,z)</code>, <code>z.op(v,w,z)</code>, <code>coerce(v,w,z)</code>, <code>v.op(v,w,z)</code> |
| <code>old</code>  | <code>old</code>  | <code>new</code>  | <code>z.op(v,w,z)</code>, <code>coerce(v,w,z)</code>, <code>v.op(v,w,z)</code>               |
| <code>new</code>  | <code>new</code>  | <code>old</code>  | <code>v.op(v,w,z)</code>, <code>w.op(v,w,z)</code>, <code>coerce(v,w,z)</code>, <code>v.op(v,w,z)</code> |
| <code>new</code>  | <code>old</code>  | <code>old</code>  | <code>v.op(v,w,z)</code>, <code>coerce(v,w,z)</code>, <code>v.op(v,w,z)</code>               |
| <code>old</code>  | <code>new</code>  | <code>old</code>  | <code>w.op(v,w,z)</code>, <code>coerce(v,w,z)</code>, <code>v.op(v,w,z)</code>               |
| <code>old</code>  | <code>old</code>  | <code>old</code>  | <code>coerce(v,w,z)</code>, <code>v.op(v,w,z)</code>                             |</p>
<p>위에 언급된 것과 동일한 내용이며, 단 <code>coerce(v,w,z)</code>는 실제로는 다음을 수행합니다.</p>
<pre><code class="language-python">if z != Py_None:
    coerce(v,w), coerce(v,z), coerce(w,z)
else: # treat z as absent variable
    coerce(v,w)
</code></pre>
<p>현재 구현은 이미 이 스키마를 사용합니다(삼항 슬롯은 <code>nb_pow(a,b,c)</code> 하나만 있습니다).</p>
<p>숫자 프로토콜은 시퀀스 연결(sequence concatenation)과 같은 다른 관련 작업에도 사용됩니다. 이러한 작업도 새로운 메커니즘을 통해 이점을 얻을 수 있습니다. 예를 들어, 문자열 연결을 살펴보겠습니다. 현재는 <code>string + string</code>만 가능합니다. 새로운 메커니즘을 사용하면 새로운 문자열과 유사한 타입이 <code>new_type + string</code> 및 <code>string + new_type</code>을 구현할 수 있으며, 이때 문자열은 <code>new_type</code>에 대해 아무것도 모르는 경우에도 가능합니다.</p>
<p>비교 연산 또한 <code>coercion</code>에 의존하므로 (정수와 float를 비교할 때마다 정수는 먼저 float로 변환된 다음 비교됩니다), 숫자 비교를 처리하기 위한 새로운 슬롯이 필요합니다.</p>
<pre><code class="language-c">PyObject *nb_cmp(PyObject *v, PyObject *w)
</code></pre>
<p>이 슬롯은 두 객체를 비교하고 결과를 나타내는 정수 객체를 반환해야 합니다. 현재, 이 결과 정수는 -1, 0, 1만 가능합니다. 슬롯이 타입 조합을 처리할 수 없는 경우, <code>Py_NotImplemented</code>에 대한 참조를 반환할 수 있습니다.</p>
<p>숫자 비교는 새로운 숫자 프로토콜 API에 의해 처리됩니다.</p>
<pre><code class="language-c">PyObject *PyNumber_Compare(PyObject *v, PyObject *w)
</code></pre>
<p>이 함수는 두 객체를 "숫자"로 비교하고 결과를 나타내는 정수 객체를 반환합니다. 현재 이 결과 정수는 -1, 0, 1만 가능합니다. 주어진 객체에 의해 연산을 처리할 수 없는 경우 <code>TypeError</code>가 발생합니다.</p>
<p><code>PyObject_Compare()</code> API는 이 새로운 API를 사용하도록 적절히 조정되어야 합니다.</p>
<p>다른 변경 사항으로는 일부 내장 함수(예: <code>cmp()</code>)를 이 API를 사용하도록 조정하는 것이 포함됩니다. 또한 <code>PyNumber_CoerceEx()</code>는 <code>nb_coerce</code> 슬롯을 호출하기 전에 <code>new style numbers</code>를 확인해야 합니다. <code>new style numbers</code>는 <code>coercion slot</code>을 제공하지 않으므로 명시적으로 <code>coerce</code>될 수 없습니다.</p>
<h2>참조 구현 (Reference Implementation)</h2>
<p>Python의 CVS 버전에 대한 예비 패치는 Source Forge 패치 관리자를 통해 사용할 수 있습니다.</p>
<h2>공헌 (Credits)</h2>
<p>이 PEP와 패치는 Marc-André Lemburg의 작업에 크게 기반을 두고 있습니다.</p>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인(public domain)에 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1025,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 208 - Reworking the Coercion Model"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 16:20:00+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
