3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/242","c"]
0:["SAPzS3zi9tsG5MkeKvxIA",[[["",{"children":[["slug","python/pep/242","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"242\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/242","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T2e39,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0242/">PEP 242 - Numeric Kinds</a></p>
<p><strong>상태:</strong> Withdrawn | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 17-Mar-2001</p>
</blockquote>
<h1>PEP 242 – 숫자 종류 (Numeric Kinds)</h1>
<h2>요약 (Abstract)</h2>
<p>이 제안은 사용자가 숫자 연산의 정밀도(precision)와 범위(range)를 선택적으로 제어할 수 있도록 하여, 한 번 작성된 코드가 원하는 최소한의 정밀도와 범위를 보장하면서 어떤 환경에서든 실행될 수 있도록 합니다. 이 제안은 기존 코드와 하위 호환성을 유지하며, 십진수 리터럴(decimal literals)의 의미를 명확히 합니다.</p>
<h2>배경 (Rationale)</h2>
<p>현재 Fortran 90을 제외한 모든 언어에서는 부동 소수점(floating point)을 사용하는 프로그램을 이식성(portability) 있게 작성하여 플랫폼에 관계없이 거의 동일한 결과를 얻거나, 불가능할 경우 컴파일 오류를 발생시키도록 하는 것이 불가능합니다. Python은 현재 C 구현에서 C의 <code>double</code>과 동일한 단일 부동 소수점 타입만 가지고 있습니다.</p>
<p><code>single</code> 또는 <code>quad</code> float에 해당하는 타입은 존재하지 않습니다. 이러한 타입을 직접 도입하려 하면 언어가 복잡해지고, 그 후의 사용도 이식성이 떨어지게 됩니다. 이 제안은 Fortran 90의 "kind" 솔루션과 유사하며, Python 환경에 맞게 조정되었습니다. 이 기능을 사용하면 <code>myprecision.py</code> 파일의 인수를 변경함으로써 전체 계산의 정밀도 수준을 한 줄만 수정하여 전환할 수 있습니다. 만약 특정 머신에서 원하는 정밀도가 지원되지 않으면, 프로그램은 잘못된 결과를 내는 대신 오류를 발생시킵니다. 이러한 스타일로 코딩할 경우 오류를 발생시킬 루틴을 미리 호출하므로, 이는 컴파일되지 않는 것 다음으로 좋은 방법입니다.</p>
<h2>지원되는 정수 및 부동 소수점 종류 (Supported Kinds of Ints and Floats)</h2>
<p>복소수(complex numbers)는 Python이 복소수 없이 빌드될 수 있으므로 아래에서 별도로 다룹니다.</p>
<p>각 Python 컴파일러는 원하는 만큼의 정수(integer) 및 부동 소수점(floating point) 숫자 "종류(kinds)"를 정의할 수 있습니다. 단, 기존 <code>int</code>와 <code>long</code>에 해당하는 최소 두 가지 정수 종류와 현재의 <code>float</code>에 해당하는 최소 한 가지 부동 소수점 종류를 지원해야 합니다.</p>
<p>이러한 필수 종류들의 범위와 정밀도는 현재와 마찬가지로 프로세서에 따라 다르지만, 임의의 정수를 담을 수 있는 "long integer" 종류는 예외입니다.</p>
<p>내장 함수 <code>int()</code>, <code>long()</code>, <code>float()</code>는 현재와 같이 입력을 이러한 기본 종류로 변환합니다. (참고로 유니코드 문자열은 실제로 다른 "종류"의 문자열이며, 충분한 지식을 가진 사람은 이 PEP를 확장하여 해당 경우를 다룰 수도 있습니다.)</p>
<p>각 타입(정수, 부동 소수점) 내에서 컴파일러는 증가된 범위 및/또는 정밀도의 숫자를 담을 수 있는 능력에 따라 선형적으로 정렬된 종류 집합을 지원합니다.</p>
<h2>종류 객체 (Kind Objects)</h2>
<p><code>kinds</code>라는 모듈에 두 개의 새로운 표준 함수가 정의됩니다. 이 함수들은 호출 가능한 "kind 객체(kind objects)"를 반환합니다. 각 정수 또는 부동 소수점 kind 객체 <code>f</code>는 <code>result = f(x)</code> 시그니처를 가지며, 각 복소수 kind 객체는 <code>result = f(x, y=0.)</code> 시그니처를 가집니다.</p>
<ul>
<li><strong><code>int_kind(n)</code></strong>: <code>n >= 1</code>인 정수 인수에 대해, 열린 구간 <code>(-10**n, 10**n)</code> 내의 정수를 담을 수 있는 정수 종류를 반환하는 호출 가능한 객체를 반환합니다. 이 kind 객체는 <code>long</code>을 포함한 정수를 인수로 받습니다. <code>n == 0</code>인 경우, Python 리터럴 <code>0</code>에 해당하는 kind 객체를 반환합니다.</li>
<li><strong><code>float_kind(nd, n)</code></strong>: <code>nd >= 0</code> 및 <code>n >= 1</code>에 대해, 최소 <code>nd</code> 자리의 정밀도와 닫힌 구간 <code>[-n, n]</code> 내의 10진수 지수(base-10 exponent)를 가진 부동 소수점 숫자를 담을 수 있는 부동 소수점 종류를 반환하는 호출 가능한 객체를 반환합니다. 이 kind 객체는 정수 또는 부동 소수점을 인수로 받습니다.
<code>nd</code>와 <code>n</code>이 모두 0인 경우, Python 리터럴 <code>0.0</code>에 해당하는 kind 객체를 반환합니다.</li>
</ul>
<p>컴파일러는 해당 타입에 대해 원하는 속성을 가진, 사용 가능한 종류 집합 중에서 가장 작은 kind 객체를 반환합니다. 특정 구현에서 원하는 품질을 가진 종류가 없으면 <code>OverflowError</code> 예외가 발생합니다. kind 함수는 인수를 대상 종류로 변환하지만, 결과가 대상 종류의 범위에 맞지 않으면 <code>OverflowError</code> 예외가 발생합니다.</p>
<p>호출 가능한 동작 외에도, kind 객체는 해당 종류의 특성을 나타내는 속성을 가집니다.</p>
<ul>
<li><strong><code>name</code></strong>: 종류의 이름입니다. 표준 종류는 <code>int</code>, <code>long</code>, <code>double</code>로 불립니다.</li>
<li><strong><code>typecode</code></strong>: <code>Numeric</code> 또는 <code>array</code> 모듈과 함께 사용하여 이 종류의 배열을 형성하는 데 적합한 단일 문자열입니다. 표준 타입의 <code>typecode</code>는 각각 <code>'i'</code>, <code>'O'</code>, <code>'d'</code>입니다.</li>
</ul>
<p>정수 종류는 다음과 같은 추가 속성을 가집니다:</p>
<ul>
<li><strong><code>MAX</code></strong>: 이 종류의 허용 가능한 최대 정수이며, <code>long</code> 종류의 경우 <code>None</code>입니다.</li>
<li><strong><code>MIN</code></strong>: 이 종류의 허용 가능한 가장 작은(음수) 정수이며, <code>long</code> 종류의 경우 <code>None</code>입니다.</li>
</ul>
<p>부동 소수점 종류는 표준 헤더 파일 "float.h"에서 해당 C 타입의 해당 값과 동일한 속성을 가집니다:</p>
<ul>
<li><code>MAX</code>, <code>MIN</code>, <code>DIG</code>, <code>MANT_DIG</code>, <code>EPSILON</code>, <code>MAX_EXP</code>, <code>MAX_10_EXP</code>, <code>MIN_EXP</code>, <code>MIN_10_EXP</code>, <code>RADIX</code>, <code>ROUNDS</code> (<code>float.h</code>의 <code>FLT_RADIX</code>, <code>FLT_ROUNDS</code>와 동일).
이 값들은 <code>MAX</code>, <code>MIN</code>, <code>EPSILON</code>을 제외하고는 정수 타입이며, 이들은 해당 종류에 해당하는 Python 부동 소수점 타입입니다.</li>
</ul>
<h2><code>kinds</code> 모듈의 속성 (Attributes of Module <code>kinds</code>)</h2>
<ul>
<li><strong><code>int_kinds</code></strong>: 사용 가능한 정수 종류의 목록으로, 가장 낮은 종류부터 가장 높은 종류까지 정렬되어 있습니다. 정의에 따라 <code>int_kinds[-1]</code>은 <code>long</code> 종류입니다.</li>
<li><strong><code>float_kinds</code></strong>: 사용 가능한 부동 소수점 종류의 목록으로, 가장 낮은 종류부터 가장 높은 종류까지 정렬되어 있습니다.</li>
<li><strong><code>default_int_kind</code></strong>: Python 리터럴 <code>0</code>에 해당하는 kind 객체입니다.</li>
<li><strong><code>default_long_kind</code></strong>: Python 리터럴 <code>0L</code>에 해당하는 kind 객체입니다.</li>
<li><strong><code>default_float_kind</code></strong>: Python 리터럴 <code>0.0</code>에 해당하는 kind 객체입니다.</li>
</ul>
<h2>복소수 (Complex Numbers)</h2>
<p>지원되는 경우, 복소수(complex numbers)는 동일한 종류의 부동 소수점 숫자인 실수부와 허수부를 가집니다. Python 컴파일러가 복소수를 지원한다면, 지원하는 각 부동 소수점 종류에 대한 복소수 대응 타입을 지원해야 합니다.</p>
<p>복소수가 지원되는 경우, <code>kinds</code> 모듈에서 다음을 사용할 수 있습니다.</p>
<ul>
<li><strong><code>complex_kind(nd, n)</code></strong>: <code>nd</code> 자리의 정밀도와 <code>[-n, n]</code> 범위의 10진수 지수를 가진 부동 소수점 종류 <code>float_kind(nd, n)</code>의 구성 요소(<code>.real</code>, <code>.imag</code>)를 각각 가지는 복소수를 담을 수 있는 복소수 종류를 반환하는 호출 가능한 객체를 반환합니다. 이 kind 객체는 정수, 실수 또는 복소수 종류의 인수를 하나 받거나, 각각 정수 또는 실수인 두 인수를 받습니다.</li>
<li><strong><code>complex_kinds</code></strong>: 사용 가능한 복소수 종류의 목록으로, 가장 낮은 종류부터 가장 높은 종류까지 정렬되어 있습니다.</li>
<li><strong><code>default_complex_kind</code></strong>: Python 리터럴 <code>0.0j</code>에 해당하는 kind 객체입니다. 이 종류의 이름은 <code>doublecomplex</code>이고, <code>typecode</code>는 <code>'D'</code>입니다.</li>
</ul>
<p>복소수 kind 객체는 다음 추가 속성을 가집니다:</p>
<ul>
<li><strong><code>floatkind</code></strong>: 해당 <code>float</code> 타입의 kind 객체입니다.</li>
</ul>
<h2>예시 (Examples)</h2>
<p><code>myprecision.py</code> 모듈 내:</p>
<pre><code class="language-python">import kinds
tinyint = kinds.int_kind(1)
single = kinds.float_kind(6, 90)
double = kinds.float_kind(15, 300)
csingle = kinds.complex_kind(6, 90)
</code></pre>
<p>나머지 코드에서:</p>
<pre><code class="language-python">from myprecision import tinyint, single, double, csingle

n = tinyint(3)
x = double(1.e20)
z = 1.2 # 내장 float는 기본 float 종류를 반환하며 속성은 알 수 없음
w = x * float(x) # 하지만 다음 경우, w는 "double" 종류임을 알 수 있음
w = x * double(z)
u = csingle(x + z * 1.0j)
u2 = csingle(x+z, 1.0)
</code></pre>
<p>위 예시에서 <code>myprecision.py</code>의 인수를 변경함으로써 전체 코드가 어떻게 더 높은 정밀도로 변경될 수 있는지 주목하세요.</p>
<p>참고: <code>single != double</code>이 보장되지는 않지만, <code>double(1.e20)</code>이 15자리 십진수 정밀도와 최대 <code>10**300</code>의 범위를 가진 숫자를 담거나, <code>float_kind</code> 호출이 실패할 것이 보장됩니다.</p>
<h2>철회됨 (Withdrawn)</h2>
<p><strong>중요: 이 PEP는 철회되었습니다.</strong></p>
<p><code>kinds</code> 모듈은 표준 라이브러리에 추가되지 않을 것입니다. 이 제안에 대한 반대는 없었지만, 이를 사용하려는 관심이 미미하여 모듈을 표준 라이브러리에 추가할 정당성이 충분하지 않았습니다. 대신, 이 모듈은 Numerical Python 사이트에서 별도의 배포 항목으로 제공될 예정입니다. Numerical Python의 다음 릴리스에서는 더 이상 Numeric 배포의 일부가 아닐 것입니다.</p>
<h2>공개된 문제 (Open Issues)</h2>
<p>현재 제기된 공개 문제는 없습니다.</p>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 공용 도메인(public domain)으로 지정되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Withdrawn] PEP 242 - Numeric Kinds"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 17:13:00+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
