3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-19cfc001fdac3337.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-51594f997fc19690.js"],""]
4:["slug","python/pep/428","c"]
0:["FeyCvJug7In7AgUZlfHUx",[[["",{"children":[["slug","python/pep/428","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"428\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/428","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T4239,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0428/">PEP 428 - The pathlib module – object-oriented filesystem paths</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 30-Jul-2012</p>
</blockquote>
<p>PEP 428은 <code>pathlib</code> 모듈을 표준 라이브러리에 포함할 것을 제안합니다. 이 모듈의 목표는 파일 시스템 경로와 관련된 일반적인 작업을 처리하기 위한 간단한 클래스 계층을 제공하는 것입니다.</p>
<h2>개요</h2>
<p>기존 <code>os.path</code> 모듈이 문자열 기반으로 파일 경로를 처리하는 데 비해, <code>pathlib</code>는 객체 지향적인 접근 방식을 제공하여 파일 경로를 더욱 직관적이고 안전하게 다룰 수 있도록 합니다. 이 제안은 PEP 355에서 객체 지향 API가 거부되었던 경험과 <code>path.py</code>, Twisted의 <code>FilePath</code>, Unipath 등 여러 서드파티 구현체들의 장점을 학습하여 만들어졌습니다.</p>
<h2>객체 지향 API의 필요성</h2>
<p>파일 시스템 경로를 전용 클래스로 표현하는 이유는 날짜, 시간, IP 주소와 같은 다른 종류의 상태 없는(stateless) 객체와 동일합니다. Python은 C 언어의 API를 엄격하게 복제하는 방식에서 벗어나, 일반적인 기능에 대해 더 나은, 더 유용한 추상화를 제공하는 방향으로 발전해왔습니다. <code>datetime</code> 모듈을 사용하여 날짜와 시간을 다루는 것이 숫자 타임스탬프와 <code>time</code> 모듈 API를 사용하는 것보다 선호되는 것처럼, 전용 클래스를 사용하면 Windows 경로의 대소문자 무시(case insensitivity)와 같이 바람직한 동작을 기본적으로 활성화할 수 있습니다.</p>
<h2>제안 내용</h2>
<h3>클래스 계층 (Class hierarchy)</h3>
<p><code>pathlib</code> 모듈은 다음과 같은 간단한 클래스 계층을 구현합니다.</p>
<pre><code>+----------+
|          |
---------| PurePath |--------
|          |
|          |
+----------+
|          |
|          |
v          v
+---------------+    +-----------------+
|               |    |                 |
| PurePosixPath |    | PureWindowsPath |
|               |    |                 |
+---------------+    +-----------------+
v                    v
+------+
|      |
-------| Path |------
|      |
|      |
+------+
|      |
|      |
v      v
+-----------+    +-------------+
|           |    |             |
| PosixPath |    | WindowsPath |
|           |    |             |
+-----------+    +-------------+
</code></pre>
<p>이 계층은 경로 클래스를 두 가지 차원으로 나눕니다.</p>
<ol>
<li><strong>순수(Pure) 또는 구체(Concrete):</strong>
<ul>
<li><strong>순수 클래스 (<code>PurePath</code>, <code>PurePosixPath</code>, <code>PureWindowsPath</code>):</strong> 실제 I/O 작업이 필요 없는 경로 조작 작업만 지원합니다.</li>
<li><strong>구체 클래스 (<code>Path</code>, <code>PosixPath</code>, <code>WindowsPath</code>):</strong> 순수 클래스의 모든 작업에 더하여 I/O 작업을 지원합니다.</li>
</ul>
</li>
<li><strong>운영 체제 종류(Flavour):</strong>
<ul>
<li><strong>Windows 경로 (<code>PureWindowsPath</code>, <code>WindowsPath</code>):</strong> Windows 시스템의 파일 시스템 의미론을 따릅니다.</li>
<li><strong>POSIX 경로 (<code>PurePosixPath</code>, <code>PosixPath</code>):</strong> 다른 시스템(Unix-like)의 파일 시스템 의미론을 따릅니다.</li>
</ul>
</li>
</ol>
<p>어떤 시스템에서도 순수 클래스는 인스턴스화할 수 있습니다. 예를 들어, Windows에서 <code>PurePosixPath</code> 객체를, Unix에서 <code>PureWindowsPath</code> 객체를 조작할 수 있습니다. 그러나 구체 클래스는 해당 시스템에서만 인스턴스화할 수 있습니다.</p>
<p><code>PurePath</code>는 운영 체제에 따라 <code>PurePosixPath</code> 또는 <code>PureWindowsPath</code>를 인스턴스화하며, <code>Path</code>는 <code>PosixPath</code> 또는 <code>WindowsPath</code>를 인스턴스화하는 시스템 의존적인 팩토리 역할을 하는 두 개의 기본 클래스가 있습니다. 대부분의 경우 <code>Path</code> 클래스를 사용하는 것이 적합하다고 예상됩니다.</p>
<h3>내장 타입과의 혼동 방지 (No confusion with builtins)</h3>
<p><code>pathlib</code>의 경로 클래스는 내장 타입에서 파생되지 않습니다. 이는 <code>str</code>을 상속하는 일부 다른 <code>Path</code> 클래스 제안과 대조됩니다. 또한, 시퀀스 프로토콜을 구현하지 않습니다. 경로를 시퀀스처럼 다루려면 전용 속성인 <code>parts</code>를 사용해야 합니다. <code>str</code>을 상속하지 않는 주된 이유는 경로를 나타내는 문자열과 그렇지 않은 문자열 간의 우발적인 연산을 방지하기 위함입니다.</p>
<h3>불변성 (Immutability)</h3>
<p><code>Path</code> 객체는 불변(immutable)하며, 이는 해시 가능(hashable)하게 만들고 특정 종류의 프로그래밍 오류를 방지합니다.</p>
<h3>합리적인 동작 (Sane behaviour)</h3>
<p><code>os.path</code>의 기능 중 많은 부분이 재사용되지 않습니다. <code>os.path</code>의 많은 함수는 하위 호환성 때문에 혼란스럽거나 잘못된 동작에 묶여 있습니다(예: <code>os.path.abspath()</code>가 심볼릭 링크를 먼저 해석하지 않고 ".." 경로 구성 요소를 단순화하는 사실).</p>
<h3>비교 (Comparisons)</h3>
<p>동일한 <code>flavour</code>의 경로는 순수(pure) 여부와 관계없이 비교 및 정렬 가능합니다. Windows 경로 객체는 대소문자를 구분하지 않고 비교됩니다. 다른 <code>flavour</code>의 경로는 항상 같지 않게 비교되며, 정렬할 수 없습니다.</p>
<pre><code class="language-python">>>> PurePosixPath('a') == PurePosixPath('b')
False
>>> PurePosixPath('a') &#x3C; PurePosixPath('b')
True
>>> PurePosixPath('a') == PosixPath('a')
True

>>> PureWindowsPath('a') == PureWindowsPath('A')
True

>>> PurePosixPath('a') == PureWindowsPath('a')
False
>>> PurePosixPath('a') &#x3C; PureWindowsPath('a')
Traceback (most recent call last):
  File "&#x3C;stdin>", line 1, in &#x3C;module>
TypeError: unorderable types: PurePosixPath() &#x3C; PureWindowsPath()
</code></pre>
<h3>유용한 표기법 (Useful notations)</h3>
<p>API는 마법적인(magic) 요소를 피하면서도 유용한 표기법을 제공합니다.</p>
<pre><code class="language-python">>>> p = Path('/home/antoine/pathlib/setup.py')
>>> p.name # 파일 또는 디렉토리의 마지막 구성 요소
'setup.py'
>>> p.suffix # 파일 확장자
'.py'
>>> p.root # 경로의 루트 부분
'/'
>>> p.parts # 경로의 구성 요소를 나타내는 튜플
('/', 'home', 'antoine', 'pathlib', 'setup.py')
>>> p.relative_to('/home/antoine') # 특정 경로에 대한 상대 경로
PosixPath('pathlib/setup.py')
>>> p.exists() # 경로 존재 여부 (구체 경로에서만 가능)
True
</code></pre>
<h2>Pure paths API</h2>
<p><code>PurePath</code> API의 철학은 <code>os.path</code>처럼 기능들을 뒤죽박죽으로 노출하는 대신, 일관되고 유용한 경로 조작 작업 배열을 제공하는 것입니다.</p>
<h3>정의 (Definitions)</h3>
<ul>
<li>모든 경로는 드라이브(drive)와 루트(root)를 가질 수 있습니다. POSIX 경로의 경우 드라이브는 항상 비어 있습니다.</li>
<li>상대 경로(relative path)는 드라이브와 루트를 모두 갖지 않습니다.</li>
<li>POSIX 경로는 루트를 가지면 절대 경로(absolute path)입니다. Windows 경로는 드라이브와 루트를 모두 가지면 절대 경로입니다.</li>
<li>Windows UNC 경로(예: <code>\\host\share\myfile.txt</code>)는 항상 드라이브와 루트를 가집니다.</li>
<li>드라이브 또는 루트를 가지는 경로는 "앵커링(anchored)"되었다고 합니다. 앵커(anchor)는 드라이브와 루트의 연결입니다. POSIX에서는 "앵커링"이 "절대 경로"와 동일합니다.</li>
</ul>
<h3>생성 (Construction)</h3>
<p>경로를 생성하는 가장 간단한 방법은 문자열 표현을 전달하는 것입니다. 여러 인수를 전달하면 자동으로 조인(join)됩니다. <code>os.path.join</code>과 유사하게, 앵커링된 경로는 이전에 조인된 구성 요소의 정보를 무시합니다.</p>
<pre><code class="language-python">>>> PurePath('setup.py')
PurePosixPath('setup.py')
>>> PurePath('a///b/c/./d/') # 불필요한 경로 구분자와 "." 구성 요소는 제거됩니다.
PurePosixPath('a/b/c/d')
>>> PurePath('docs', 'Makefile')
PurePosixPath('docs/Makefile')
>>> PurePath('/etc', '/usr', 'bin') # 앵커링된 경로는 이전 정보를 무시
PurePosixPath('/usr/bin')
>>> PureWindowsPath('c:/foo', '/Windows') # Windows 경로의 경우 드라이브는 유지
PureWindowsPath('c:/Windows')
>>> PureWindowsPath('c:/foo', 'd:')
PureWindowsPath('d:')
>>> PureWindowsPath('a/b') == PureWindowsPath('a\\b') # 경로 구분자는 플랫폼 기본값으로 정규화됩니다.
True
>>> PurePosixPath('a/../b') # ".." 구성 요소는 제거되지 않습니다.
PurePosixPath('a/../b')
</code></pre>
<p>UNC 표기법 때문에 Windows 경로에서는 여러 개의 선행 슬래시가 항상 유지됩니다. POSIX에서는 정확히 두 개의 선행 슬래시가 있는 경우를 제외하고는 단일 슬래시로 축약됩니다.</p>
<h3>표현 (Representing)</h3>
<p>경로를 문자열로 표현하려면 <code>str()</code>을 호출합니다. 항상 슬래시(<code>as_posix()</code>)로 표현하거나, 바이트 표현(<code>bytes()</code>), 파일 URI(<code>as_uri()</code>)로도 얻을 수 있습니다. <code>repr()</code>은 Windows에서도 항상 가독성을 위해 슬래시를 사용합니다.</p>
<h3>속성 (Properties)</h3>
<p>모든 경로에 여러 간단한 속성이 제공됩니다 (각각 비어 있을 수 있음).</p>
<pre><code class="language-python">>>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')
>>> p.drive
'c:'
>>> p.root
'\\'
>>> p.anchor
'c:\\'
>>> p.name
'pathlib.tar.gz'
>>> p.stem
'pathlib.tar'
>>> p.suffix
'.gz'
>>> p.suffixes
['.tar', '.gz']
</code></pre>
<h3>새 경로 파생 (Deriving new paths)</h3>
<h4>조인 (Joining)</h4>
<p><code>/</code> 연산자를 사용하여 경로를 다른 경로와 조인할 수 있습니다. <code>joinpath()</code> 메서드도 동일한 동작으로 제공됩니다.</p>
<pre><code class="language-python">>>> p = PurePosixPath('foo')
>>> p / 'bar'
PurePosixPath('foo/bar')
>>> p / 'bar' / 'xyzzy'
PurePosixPath('foo/bar/xyzzy')
>>> p.joinpath('Python')
PurePosixPath('foo/Python')
</code></pre>
<h4>경로의 마지막 구성 요소 변경 (Changing the path's final component)</h4>
<p><code>with_name()</code> 메서드는 이름이 변경된 새 경로를 반환합니다. 경로에 실제 이름이 없으면 <code>ValueError</code>가 발생합니다. <code>with_suffix()</code> 메서드는 확장자가 변경된 새 경로를 반환합니다.</p>
<h4>경로를 상대적으로 만들기 (Making the path relative)</h4>
<p><code>relative_to()</code> 메서드는 한 경로에 대한 다른 경로의 상대적 차이를 계산합니다. 의미 있는 값을 반환할 수 없는 경우 <code>ValueError</code>가 발생합니다.</p>
<pre><code class="language-python">>>> PurePosixPath('/usr/bin/python').relative_to('/usr')
PurePosixPath('bin/python')
</code></pre>
<h3>시퀀스 유사 접근 (Sequence-like access)</h3>
<p><code>parts</code> 속성은 경로 구성 요소에 대한 읽기 전용 시퀀스 접근을 제공하는 튜플을 반환합니다. <code>parent</code> 속성은 경로의 논리적 부모를 반환하며, <code>parents</code> 속성은 경로의 논리적 조상들의 불변 시퀀스를 반환합니다.</p>
<pre><code class="language-python">>>> p = PurePosixPath('/etc/init.d')
>>> p.parts
('/', 'etc', 'init.d')
>>> p = PureWindowsPath('c:/python33/bin/python.exe')
>>> p.parent
PureWindowsPath('c:/python33/bin')
>>> p.parents[1]
PureWindowsPath('c:/python33')
</code></pre>
<h3>쿼리 (Querying)</h3>
<ul>
<li><code>is_relative()</code>: 경로가 상대 경로인지 여부를 반환합니다.</li>
<li><code>is_reserved()</code>: Windows 경로가 <code>CON</code> 또는 <code>NUL</code>과 같은 예약된 경로인지 여부를 반환합니다. POSIX 경로의 경우 항상 <code>False</code>를 반환합니다.</li>
<li><code>match()</code>: glob 패턴과 경로를 일치시킵니다. 개별 <code>parts</code>에 대해 작동하며 오른쪽부터 일치시킵니다.</li>
</ul>
<pre><code class="language-python">>>> p = PurePosixPath('/usr/bin')
>>> p.match('/usr/b*')
True
>>> p.match('b*')
True
>>> p.match('/u*')
False
</code></pre>
<h2>Concrete paths API</h2>
<p><code>concrete path</code>는 <code>pure API</code>의 작업 외에도 파일 시스템에 실제로 접근하여 정보를 쿼리하거나 변경하는 추가 메서드를 제공합니다.</p>
<h3>생성 (Constructing)</h3>
<p>클래스 메서드 <code>cwd()</code>는 현재 작업 디렉터리를 가리키는 절대 경로 객체를 생성합니다.</p>
<h3>파일 메타데이터 (File metadata)</h3>
<p><code>stat()</code> 및 <code>lstat()</code> 메서드는 파일의 <code>stat()</code> 결과를 반환합니다. <code>exists()</code>, <code>is_file()</code>, <code>is_dir()</code>, <code>is_symlink()</code> 등과 같은 상위 수준 메서드는 파일의 종류를 확인하는 데 도움을 줍니다. <code>owner()</code> 및 <code>group()</code> 메서드를 통해 파일 소유자 및 그룹 이름을 쿼리할 수 있습니다.</p>
<h3>경로 해석 (Path resolution)</h3>
<p><code>resolve()</code> 메서드는 경로를 절대 경로로 만들고, 도중에 있는 모든 심볼릭 링크를 해석합니다. 이는 ".." 경로 구성 요소를 제거하는 유일한 작업입니다. Windows에서는 이 메서드가 정식 경로(올바른 대소문자)를 반환하는 것도 처리합니다.</p>
<h3>디렉터리 탐색 (Directory walking)</h3>
<p><code>iterdir()</code> 메서드를 호출하여 단순(비재귀적) 디렉터리 접근을 수행하며, 이는 자식 경로에 대한 이터레이터를 반환합니다. 또한, 단순 및 재귀적인 globbing도 제공됩니다.</p>
<pre><code class="language-python">>>> p = Path('docs')
>>> for child in p.iterdir():
        print(child)
PosixPath('docs/conf.py')
# ... (다른 자식 경로들)

>>> p = Path('.')
>>> [child for child in p.iterdir() if child.is_dir()]
[PosixPath('.hg'), PosixPath('docs'), PosixPath('dist'), PosixPath('__pycache__'), PosixPath('build')]

>>> p = Path('.')
>>> for child in p.glob('**/*.py'):
        print(child)
PosixPath('test_pathlib.py')
# ... (다른 .py 파일들)
</code></pre>
<h3>파일 열기 (File opening)</h3>
<p><code>open()</code> 메서드는 내장 <code>open()</code> 메서드와 유사한 파일 열기 API를 제공합니다.</p>
<pre><code class="language-python">>>> p = Path('setup.py')
>>> with p.open() as f:
        f.readline()
'#!/usr/bin/env python3\n'
</code></pre>
<h3>파일 시스템 수정 (Filesystem modification)</h3>
<p><code>touch()</code>, <code>mkdir()</code>, <code>rename()</code>, <code>replace()</code>, <code>unlink()</code>, <code>rmdir()</code>, <code>chmod()</code>, <code>lchmod()</code>, <code>symlink_to()</code>와 같은 여러 일반적인 파일 시스템 작업이 메서드로 제공됩니다.</p>
<h2>논의 (Discussion)</h2>
<h3>나눗셈 연산자 (Division operator)</h3>
<p>경로 조인 연산자에 대한 설문조사에서 나눗셈 연산자(<code>/</code>)가 가장 먼저 나왔습니다. 초기 <code>pathlib</code> 버전에서는 대괄호(즉, <code>__getitem__</code>)를 사용했습니다.</p>
<h3>joinpath()</h3>
<p><code>joinpath()</code> 메서드는 원래 <code>join()</code>으로 불렸으나, <code>str.join()</code>과 혼동될 수 있다는 반대 의견이 있어 <code>joinpath()</code>로 이름이 변경되었습니다.</p>
<h3>대소문자 구분 (Case-sensitivity)</h3>
<p>Windows 사용자들은 파일 시스템 경로가 대소문자를 구분하지 않는다고 생각하며, 경로 객체도 그 특성을 따르기를 기대합니다. 이는 드물게 Windows에서 일부 외부 파일 시스템 마운트가 대소문자를 구분할 수 있음에도 불구하고 그렇습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1098,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 428 - The pathlib module – object-oriented filesystem paths"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 21:42:10+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
