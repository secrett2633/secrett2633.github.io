3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-ce60b0a6591d04ed.js"],""]
4:["slug","python/pep/536","c"]
0:["e6YNzZ2BVZ8NBZ6boXfWj",[[["",{"children":[["slug","python/pep/536","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"536\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/536","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T23b6,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0536/">PEP 536 - Final Grammar for Literal String Interpolation</a></p>
<p><strong>상태:</strong> Withdrawn | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 11-Dec-2016</p>
</blockquote>
<h1>PEP 536 – 리터럴 문자열 보간법(Literal String Interpolation)을 위한 최종 문법</h1>
<p><strong>작성자:</strong> Philipp Angerer
<strong>상태:</strong> 철회됨 (Withdrawn)
<strong>유형:</strong> 표준 트랙 (Standards Track)
<strong>생성일:</strong> 2016년 12월 11일
<strong>Python 버전:</strong> 3.7
<strong>이력:</strong> 2016년 8월 18일, 2016년 12월 23일, 2019년 3월 15일
<strong>해결:</strong> Discourse 메시지</p>
<hr>
<h2>요약 (Abstract)</h2>
<p>PEP 498은 Literal String Interpolation (또는 "f-strings")을 도입했습니다. 그러나 이러한 리터럴의 표현식 부분에는 특정 제약이 있었습니다. 이 PEP는 이러한 제약을 해제하고 "f-strings"를 "f expressions" 또는 "f-literals"로 격상시키는 공식 문법을 제안합니다.</p>
<p>이 PEP는 PEP 498에 의해 도입된 f-strings를 확장하므로, 이 문서를 이해하려면 PEP 498에 대한 지식이 필요합니다.</p>
<h2>PEP 철회 (PEP Withdrawal)</h2>
<p>이 PEP는 PEP 701을 지지하며 철회되었습니다. PEP 701은 이 PEP의 모든 중요한 내용을 다루고 있습니다.</p>
<h2>용어 (Terminology)</h2>
<p>이 문서에서는 기존 문법을 "f-strings"로, 제안된 문법을 "f-literals"로 지칭합니다.</p>
<p>또한, f-literals/f-strings 내의 <code>{}</code>로 구분된 표현식을 "expression portions" (표현식 부분)으로, 주변의 정적 문자열 내용을 "string portions" (문자열 부분)으로 지칭합니다.</p>
<h2>동기 (Motivation)</h2>
<p>CPython에서 f-strings의 현재 구현은 기존 문자열 파싱 메커니즘과 토큰의 후처리(post processing)에 의존합니다. 이로 인해 f-strings 내에서 사용할 수 있는 표현식에 여러 가지 제약이 발생합니다:</p>
<ul>
<li>f-string을 구분하는 인용 부호(quote character)를 표현식 부분 내에서 사용하는 것이 불가능합니다:
<pre><code class="language-python">>>> f'Magic wand: { bag['wand'] }'
^ SyntaxError: invalid syntax
</code></pre>
</li>
<li>이전에는 이를 해결하는 방법으로 실행 코드 내에서 이스케이프 시퀀스(escape sequences)를 사용하는 것이 고려되었으나, f-strings에서는 금지됩니다:
<pre><code class="language-python">>>> f'Magic wand { bag[\'wand\'] } string'
SyntaxError: f-string expression portion cannot include a backslash
</code></pre>
</li>
<li>여러 줄 f-strings에서도 주석이 금지됩니다:
<pre><code class="language-python">>>> f'''A complex trick: {
... bag['bag'] # recursive bags!
... }'''
SyntaxError: f-string expression part cannot include '#'
</code></pre>
</li>
<li>표현식 부분은 <code>:</code>와 <code>!</code>를 중괄호로 감싸야 합니다:
<pre><code class="language-python">>>> f'Useless use of lambdas: { lambda x: x*2 }'
SyntaxError: unexpected EOF while parsing
</code></pre>
</li>
</ul>
<p>이러한 제약은 언어 사용자 관점에서 특별한 목적이 없으며, 예외 없는 정규 문법으로 f-literals를 제공하고 전용 파싱 코드를 사용하여 구현함으로써 해제될 수 있습니다.</p>
<h2>근거 (Rationale)</h2>
<p>Motivation 섹션에서 언급된 제약들은 사용자가 f-literals의 구현 세부 사항에 익숙하지 않으면 명확하지 않고 직관적이지 않습니다.</p>
<p>앞서 언급했듯이, PEP 498의 이전 버전에서는 이스케이프 시퀀스를 f-strings의 어느 곳에서든 허용했습니다. 이는 표현식 부분을 구분하는 중괄호를 인코딩하거나 코드 내에서도 사용될 수 있었습니다. 이스케이프 시퀀스는 코드가 파싱되기 전에 확장되었는데, 이는 여러 가지 중요한 영향을 미쳤을 것입니다:</p>
<ol>
<li>어느 부분이 표현식이고 어느 부분이 문자열인지 사람이 읽기에는 명확하지 않았을 것입니다. 이는 "난독화/교묘한 Python 챌린지"를 위한 좋은 소재였을 것입니다.</li>
<li>구문 하이라이터(syntax highlighters)는 중첩된 문법을 파싱하는 데 능숙하지만, 이스케이프 시퀀스를 인식하는 데는 그렇지 않습니다. ECMAScript 2016 (JavaScript)은 식별자(identifiers)에 이스케이프 시퀀스를 허용하지만, 저자는 이를 올바르게 하이라이트할 수 있는 구문 하이라이터를 알지 못합니다.</li>
</ol>
<p>결과적으로, 구문 하이라이팅의 도움을 받든 안 받든 표현식 부분을 인식하기가 더 어려웠을 것입니다. 새로운 문법을 사용하면 구문 하이라이터를 확장하여 f-literals를 올바르게 파싱하고 표시하기 쉽습니다:</p>
<pre><code class="language-python">f'Magic wand: {bag['wand']:^10}'
</code></pre>
<p>이스케이프 시퀀스가 포함될 수 있는 표현식 부분을 하이라이트한다는 것은, 키워드, 구분자(delimiters) 및 기타 모든 언어 구문에서 이스케이프 시퀀스의 가능성을 고려하여 전체 표현식 문법의 모든 규칙을 수정된 사본으로 생성해야 함을 의미합니다. 이러한 한 번의 복제는 한 단계의 이스케이프 깊이(escaping depth)를 제공하며, 재귀적인 f-literal에서 더 깊은 이스케이프를 위해 반복되어야 할 것입니다. 이는 저자가 아는 어떤 하이라이팅 엔진도 특정 컨텍스트에 규칙을 적용하기 전에 이스케이프 시퀀스를 확장하는 것을 지원하지 않기 때문입니다. 그러나 컨텍스트 중첩은 모든 하이라이팅 엔진의 표준 기능입니다.</p>
<p>친숙함(Familiarity) 또한 한몫합니다: 단순히 변수 이름이 아닌 표현식을 사용하는 문자열 삽입(string interpolation) 방식을 사용하는 다른 모든 언어에서는 이스케이프 시퀀스 확장 없이 표현식의 임의 중첩이 가능합니다.</p>
<h2>명세 (Specification)</h2>
<p>PEP 498은 f-strings를 다음과 같이 명세했지만, 이에 대한 제약을 두었습니다:</p>
<pre><code>f ' &#x3C;text> { &#x3C;expression> &#x3C;optional !s, !r, or !a> &#x3C;optional : format specifier> } &#x3C;text> ... '
</code></pre>
<p>이 PEP에서 언급된 모든 제약은 아래 설명과 같이 f-literals에서 해제됩니다:</p>
<ul>
<li><strong>표현식 부분은 이제 f-literal을 구분하는 것과 동일한 종류의 인용 부호로 구분된 문자열을 포함할 수 있습니다.</strong></li>
<li><strong>백슬래시(<code>\</code>)는 이제 Python 코드의 다른 곳에서와 마찬가지로 표현식 내에 나타날 수 있습니다.</strong> f-literals 내에 중첩된 문자열의 경우, 가장 안쪽 문자열이 평가될 때 이스케이프 시퀀스가 확장됩니다.</li>
<li><strong><code>#</code> 문자를 사용하는 주석은 여러 줄 f-literals에서만 가능합니다.</strong> 주석은 줄 끝에서 종료되므로 (이는 한 줄 f-literal을 닫는 것을 불가능하게 만듭니다).</li>
<li><strong>표현식 부분은 구문적으로 유효한 곳이라면 어디든 <code>:</code> 또는 <code>!</code>를 포함할 수 있습니다.</strong> 표현식의 일부가 아닌 첫 번째 <code>:</code> 또는 <code>!</code>는 유효한 강제 변환(coercion) 또는 포맷 지정자(format specifier)가 뒤따라야 합니다.</li>
</ul>
<p>PEP 498에서 명시적으로 언급되지 않은 남아있는 제약 사항은 표현식 부분의 줄 바꿈(line breaks)입니다. 단일 <code>'</code> 또는 <code>"</code> 문자로 구분된 문자열은 한 줄이어야 하므로, 한 줄 문자열의 표현식 부분에서는 줄 바꿈이 여전히 허용되지 않습니다.</p>
<p><em>참고:</em> 제약 해제만으로 충분할까요, 아니면 더 완전한 문법을 명세해야 할까요?</p>
<h2>하위 호환성 (Backwards Compatibility)</h2>
<p>f-literals는 f-strings와 완전히 하위 호환되며, 유효하다고 간주되는 구문을 확장합니다.</p>
<h2>참조 구현 (Reference Implementation)</h2>
<p>미정 (TBD)</p>
<h2>참고 자료 (References)</h2>
<p>ECMAScript IdentifierName specification ( http://ecma-international.org/ecma-262/6.0/#sec-names-and-keywords )
Yes, <code>const cthulhu = { H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗̀ͤ̍̀͢M̴̡̲̭͍͇̼̟̯̦̉̒͠Ḛ̛̙̞̪̗ͥͤͩ̾͑̔͐ͅṮ̴̷̷̗̼͍̿̿̓̽͐H̙̙̔̄͜\u0042: 42 }</code> is valid ECMAScript 2016.
Wikipedia article on string interpolation ( https://en.wikipedia.org/wiki/String_interpolation )</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Withdrawn] PEP 536 - Final Grammar for Literal String Interpolation"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 23:26:52+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
