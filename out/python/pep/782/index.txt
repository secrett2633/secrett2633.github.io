3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-ce60b0a6591d04ed.js"],""]
4:["slug","python/pep/782","c"]
0:["e6YNzZ2BVZ8NBZ6boXfWj",[[["",{"children":[["slug","python/pep/782","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"782\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/782","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T3eaa,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0782/">PEP 782 - Add PyBytesWriter C API</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 27-Mar-2025</p>
</blockquote>
<p>PEP 782 – PyBytesWriter C API 추가</p>
<p><strong>저자:</strong> Victor Stinner
<strong>상태:</strong> Final
<strong>생성일:</strong> 2025년 3월 27일
<strong>Python 버전:</strong> 3.15</p>
<hr>
<h2>초록 (Abstract)</h2>
<p>PEP 782는 <code>bytes</code> 객체를 생성하기 위한 새로운 C API인 <code>PyBytesWriter</code>를 추가하는 것을 제안합니다. 이와 함께 <code>PyBytes_FromStringAndSize(NULL, size)</code> 및 <code>_PyBytes_Resize()</code> API의 "soft deprecation" (소프트 비권장)을 제안합니다. 이 기존 API들은 불변(immutable)인 <code>bytes</code> 객체를 가변(mutable) 객체처럼 다루는 문제를 가지고 있습니다. 이 API들은 여전히 사용 가능하고 유지 관리되지만, 새 코드를 작성할 때는 더 이상 권장되지 않습니다.</p>
<h2>배경 (Rationale)</h2>
<h3>불완전하거나 일관성 없는 객체 생성 방지 (Disallow creation of incomplete/inconsistent objects)</h3>
<p><code>PyBytes_FromStringAndSize(NULL, size)</code> 및 <code>_PyBytes_Resize()</code>를 사용하여 Python <code>bytes</code> 객체를 생성하는 것은 불변(immutable) 객체인 <code>bytes</code>를 가변(mutable) 객체처럼 다룹니다. 이는 <code>bytes</code> 객체가 불변이라는 원칙에 어긋납니다. 또한, 이 API들은 <code>bytes</code>가 초기화되지 않은 "불완전하거나 유효하지 않은" 객체를 생성합니다. Python에서 <code>bytes</code> 객체는 항상 그 내용이 완전히 초기화되어야 합니다.</p>
<h3>비효율적인 할당 전략 (Inefficient allocation strategy)</h3>
<p><code>bytes</code> 문자열을 생성할 때 최종 출력 크기를 알 수 없는 경우, 기존의 한 가지 전략은 작은 버퍼를 할당한 후 더 큰 쓰기가 필요할 때마다 버퍼 크기를 확장(정확한 크기로)하는 것이었습니다.</p>
<p>이러한 전략은 버퍼를 여러 번 확장해야 하므로 비효율적입니다. 더 효율적인 방법은 처음에 더 큰 쓰기가 필요할 때 버퍼를 초과 할당(overallocate)하는 것입니다. 이는 메모리 복사(memory copy)를 수반할 수 있는 비용이 많이 드는 <code>realloc()</code> 연산 횟수를 줄여줍니다.</p>
<h2>명세 (Specification)</h2>
<h3>API</h3>
<h4><code>PyBytesWriter</code> 타입</h4>
<p><code>PyBytesWriter_Create()</code> 함수에 의해 생성되는 Python <code>bytes</code> 작성기 인스턴스입니다. 이 인스턴스는 <code>PyBytesWriter_Finish()</code> 또는 <code>PyBytesWriter_Discard()</code> 함수를 통해 반드시 소멸되어야 합니다.</p>
<h4>생성, 완료, 폐기 (Create, Finish, Discard)</h4>
<ul>
<li>
<p><code>PyBytesWriter *PyBytesWriter_Create(Py_ssize_t size)</code></p>
<ul>
<li><code>size</code> 바이트를 작성하기 위한 <code>PyBytesWriter</code>를 생성합니다.</li>
<li><code>size</code>가 0보다 크면 <code>size</code> 바이트를 할당하고, 작성기(<code>writer</code>)의 크기를 <code>size</code>로 설정합니다. 호출자는 <code>PyBytesWriter_GetData()</code>를 사용하여 <code>size</code> 바이트를 작성해야 합니다.</li>
<li>오류 발생 시 예외를 설정하고 <code>NULL</code>을 반환합니다.</li>
<li><code>size</code>는 양수 또는 0이어야 합니다.</li>
</ul>
</li>
<li>
<p><code>PyObject *PyBytesWriter_Finish(PyBytesWriter *writer)</code></p>
<ul>
<li><code>PyBytesWriter_Create()</code>로 생성된 <code>PyBytesWriter</code>를 완료합니다.</li>
<li>성공 시 Python <code>bytes</code> 객체를 반환하고, 오류 시 예외를 설정하고 <code>NULL</code>을 반환합니다.</li>
<li>호출 후 <code>writer</code> 인스턴스는 어떤 경우에도 유효하지 않게 됩니다.</li>
</ul>
</li>
<li>
<p><code>PyObject *PyBytesWriter_FinishWithSize(PyBytesWriter *writer, Py_ssize_t size)</code></p>
<ul>
<li><code>PyBytesWriter_Finish()</code>와 유사하지만, <code>bytes</code> 객체를 생성하기 전에 <code>writer</code>의 크기를 <code>size</code> 바이트로 조정합니다.</li>
</ul>
</li>
<li>
<p><code>PyObject *PyBytesWriter_FinishWithPointer(PyBytesWriter *writer, void *buf)</code></p>
<ul>
<li><code>PyBytesWriter_Finish()</code>와 유사하지만, <code>bytes</code> 객체를 생성하기 전에 <code>buf</code> 포인터를 사용하여 <code>writer</code>의 크기를 조정합니다.</li>
<li><code>buf</code> 포인터가 내부 버퍼 범위 밖에 있으면 예외를 설정하고 <code>NULL</code>을 반환합니다.</li>
<li>내부적으로는 <code>PyBytesWriter_FinishWithSize</code>를 <code>buf</code>와 <code>PyBytesWriter_GetData</code>의 차이를 이용하여 호출합니다.</li>
</ul>
</li>
<li>
<p><code>void PyBytesWriter_Discard(PyBytesWriter *writer)</code></p>
<ul>
<li><code>PyBytesWriter_Create()</code>로 생성된 <code>PyBytesWriter</code>를 폐기합니다.</li>
<li><code>writer</code>가 <code>NULL</code>이면 아무것도 하지 않습니다.</li>
<li>호출 후 <code>writer</code> 인스턴스는 유효하지 않게 됩니다.</li>
</ul>
</li>
</ul>
<h4>High-level API (고수준 API)</h4>
<ul>
<li>
<p><code>int PyBytesWriter_WriteBytes(PyBytesWriter *writer, const void *bytes, Py_ssize_t size)</code></p>
<ul>
<li><code>writer</code>의 내부 버퍼를 <code>size</code> 바이트만큼 확장하고, <code>writer</code>의 끝에 <code>size</code> 바이트만큼 <code>bytes</code>를 쓰고, <code>writer</code>의 크기에 <code>size</code>를 추가합니다.</li>
<li><code>size</code>가 <code>-1</code>과 같으면 <code>strlen(bytes)</code>를 호출하여 문자열 길이를 가져옵니다.</li>
<li>성공 시 <code>0</code>을 반환하고, 오류 시 예외를 설정하고 <code>-1</code>을 반환합니다.</li>
</ul>
</li>
<li>
<p><code>int PyBytesWriter_Format(PyBytesWriter *writer, const char *format, ...)</code></p>
<ul>
<li><code>PyBytes_FromFormat()</code>과 유사하지만, 출력을 <code>writer</code>의 끝에 직접 작성합니다. 필요에 따라 <code>writer</code>의 내부 버퍼를 확장합니다. 그 후 작성된 크기를 <code>writer</code> 크기에 추가합니다.</li>
<li>성공 시 <code>0</code>을 반환하고, 오류 시 예외를 설정하고 <code>-1</code>을 반환합니다.</li>
</ul>
</li>
</ul>
<h4>Getters (게터)</h4>
<ul>
<li>
<p><code>Py_ssize_t PyBytesWriter_GetSize(PyBytesWriter *writer)</code></p>
<ul>
<li><code>writer</code>의 크기를 가져옵니다.</li>
</ul>
</li>
<li>
<p><code>void *PyBytesWriter_GetData(PyBytesWriter *writer)</code></p>
<ul>
<li><code>writer</code>의 데이터를 가져옵니다: 내부 버퍼의 시작점.</li>
<li>이 포인터는 <code>PyBytesWriter_Finish()</code> 또는 <code>PyBytesWriter_Discard()</code>가 호출될 때까지 유효합니다.</li>
</ul>
</li>
</ul>
<h4>Low-level API (저수준 API)</h4>
<ul>
<li>
<p><code>int PyBytesWriter_Resize(PyBytesWriter *writer, Py_ssize_t size)</code></p>
<ul>
<li><code>writer</code>의 크기를 <code>size</code> 바이트로 조정합니다. <code>writer</code>를 확장하거나 축소하는 데 사용할 수 있습니다.</li>
<li>새로 할당된 바이트는 초기화되지 않은 상태로 남습니다.</li>
<li>성공 시 <code>0</code>을 반환하고, 오류 시 예외를 설정하고 <code>-1</code>을 반환합니다.</li>
<li><code>size</code>는 양수 또는 0이어야 합니다.</li>
</ul>
</li>
<li>
<p><code>int PyBytesWriter_Grow(PyBytesWriter *writer, Py_ssize_t grow)</code></p>
<ul>
<li>현재 <code>writer</code> 크기에 <code>grow</code> 바이트를 추가하여 <code>writer</code>의 크기를 조정합니다.</li>
<li>새로 할당된 바이트는 초기화되지 않은 상태로 남습니다.</li>
<li>성공 시 <code>0</code>을 반환하고, 오류 시 예외를 설정하고 <code>-1</code>을 반환합니다.</li>
<li><code>grow</code>는 <code>writer</code>를 축소하기 위해 음수일 수 있습니다.</li>
</ul>
</li>
<li>
<p><code>void *PyBytesWriter_GrowAndUpdatePointer(PyBytesWriter *writer, Py_ssize_t size, void *buf)</code></p>
<ul>
<li><code>PyBytesWriter_Grow()</code>와 유사하지만, <code>buf</code> 포인터도 업데이트합니다.</li>
<li>내부 버퍼가 메모리에서 이동하면 <code>buf</code> 포인터도 이동합니다. <code>buf</code>의 내부 버퍼 내 상대 위치는 변경되지 않습니다.</li>
<li>오류 발생 시 예외를 설정하고 <code>NULL</code>을 반환합니다.</li>
<li><code>buf</code>는 <code>NULL</code>이 아니어야 합니다.</li>
</ul>
</li>
</ul>
<h3>초과 할당 (Overallocation)</h3>
<p><code>PyBytesWriter_Resize()</code> 및 <code>PyBytesWriter_Grow()</code>는 <code>realloc()</code> 호출 횟수와 메모리 복사 횟수를 줄이기 위해 내부 버퍼를 초과 할당(overallocate)합니다.
<code>PyBytesWriter_Finish()</code>는 최종 <code>bytes</code> 객체를 생성할 때 내부 버퍼를 정확한 크기로 줄여 초과 할당된 부분을 잘라냅니다.</p>
<h3>스레드 안전성 (Thread safety)</h3>
<p>이 API는 스레드 안전(thread safe)하지 않습니다. 작성기(<code>writer</code>)는 한 번에 단일 스레드에서만 사용되어야 합니다.</p>
<h3>Soft Deprecations (소프트 비권장)</h3>
<p><code>PyBytes_FromStringAndSize(NULL, size)</code> 및 <code>_PyBytes_Resize()</code> API는 소프트 비권장(soft deprecate)됩니다. 이 API들은 불변(immutable)인 <code>bytes</code> 객체를 가변(mutable) 객체처럼 다룹니다. 이 API들은 여전히 사용 가능하고 유지 관리되며, 비권장 경고를 발생시키지 않지만, 새 코드를 작성할 때는 더 이상 권장되지 않습니다.
<code>PyBytes_FromStringAndSize(str, size)</code>는 <code>str</code>이 <code>NULL</code>이 아닌 경우 소프트 비권장되지 않습니다.</p>
<h2>예시 (Examples)</h2>
<h3>고수준 API (High-level API)</h3>
<h4><code>b"Hello World!"</code> 바이트 문자열 생성</h4>
<pre><code class="language-c">PyObject* hello_world(void) {
    PyBytesWriter *writer = PyBytesWriter_Create(0);
    if (writer == NULL) {
        goto error;
    }
    if (PyBytesWriter_WriteBytes(writer, "Hello", -1) &#x3C; 0) {
        goto error;
    }
    if (PyBytesWriter_Format(writer, " %s!", "World") &#x3C; 0) {
        goto error;
    }
    return PyBytesWriter_Finish(writer);
error:
    PyBytesWriter_Discard(writer);
    return NULL;
}
</code></pre>
<h4><code>b"abc"</code> 바이트 문자열 생성</h4>
<p>3바이트 고정 크기로 <code>b"abc"</code> 바이트 문자열을 생성하는 예시:</p>
<pre><code class="language-c">PyObject* create_abc(void) {
    PyBytesWriter *writer = PyBytesWriter_Create(3);
    if (writer == NULL) {
        return NULL;
    }
    char *str = PyBytesWriter_GetData(writer);
    memcpy(str, "abc", 3);
    return PyBytesWriter_Finish(writer);
}
</code></pre>
<h4><code>GrowAndUpdatePointer()</code> 예시</h4>
<p><code>bytes</code>를 쓰고 작성된 크기를 추적하기 위해 포인터를 사용하는 예시입니다.
<code>b"Hello World"</code> 바이트 문자열을 생성합니다:</p>
<pre><code class="language-c">PyObject* grow_example(void) {
    // 10바이트 할당
    PyBytesWriter *writer = PyBytesWriter_Create(10);
    if (writer == NULL) {
        return NULL;
    }
    // 일부 바이트 작성
    char *buf = PyBytesWriter_GetData(writer);
    memcpy(buf, "Hello ", strlen("Hello "));
    buf += strlen("Hello ");

    // 10바이트 추가 할당
    buf = PyBytesWriter_GrowAndUpdatePointer(writer, 10, buf);
    if (buf == NULL) {
        PyBytesWriter_Discard(writer);
        return NULL;
    }
    // 더 많은 바이트 작성
    memcpy(buf, "World", strlen("World"));
    buf += strlen("World");

    // 'buf' 위치에서 문자열을 자르고
    // bytes 객체 생성
    return PyBytesWriter_FinishWithPointer(writer, buf);
}
</code></pre>
<h4><code>PyBytes_FromStringAndSize()</code> 코드 업데이트</h4>
<p>소프트 비권장된 <code>PyBytes_FromStringAndSize(NULL, size)</code> API를 사용하는 코드 예시:</p>
<pre><code class="language-c">PyObject *result = PyBytes_FromStringAndSize(NULL, num_bytes);
if (result == NULL) {
    return NULL;
}
if (copy_bytes(PyBytes_AS_STRING(result), start, num_bytes) &#x3C; 0) {
    Py_CLEAR(result);
}
return result;
</code></pre>
<p>위 코드를 다음과 같이 업데이트할 수 있습니다:</p>
<pre><code class="language-c">PyBytesWriter *writer = PyBytesWriter_Create(num_bytes);
if (writer == NULL) {
    return NULL;
}
if (copy_bytes(PyBytesWriter_GetData(writer), start, num_bytes) &#x3C; 0) {
    PyBytesWriter_Discard(writer);
    return NULL;
}
return PyBytesWriter_Finish(writer);
</code></pre>
<h4><code>_PyBytes_Resize()</code> 코드 업데이트</h4>
<p>소프트 비권장된 <code>_PyBytes_Resize()</code> API를 사용하는 코드 예시:</p>
<pre><code class="language-c">PyObject *v = PyBytes_FromStringAndSize(NULL, size);
if (v == NULL) {
    return NULL;
}
char *p = PyBytes_AS_STRING(v);
// ... p에 바이트 채우기 ...
if (_PyBytes_Resize(&#x26;v, (p - PyBytes_AS_STRING(v)))) {
    return NULL;
}
return v;
</code></pre>
<p>위 코드를 다음과 같이 업데이트할 수 있습니다:</p>
<pre><code class="language-c">PyBytesWriter *writer = PyBytesWriter_Create(size);
if (writer == NULL) {
    return NULL;
}
char *p = PyBytesWriter_GetData(writer);
// ... p에 바이트 채우기 ...
return PyBytesWriter_FinishWithPointer(writer, p);
</code></pre>
<h2>참조 구현 (Reference Implementation)</h2>
<p>Pull request gh-131681.</p>
<p>CPython 참조 구현에 대한 내용은 명세의 일부는 아니지만 다음과 같습니다:</p>
<p>구현은 내부적으로 <code>bytes</code> 객체를 할당하므로 <code>PyBytesWriter_Finish()</code>는 메모리를 복사할 필요 없이 객체를 반환합니다. 최대 256바이트의 문자열의 경우, 작은 내부 원시 <code>bytes</code> 버퍼가 사용됩니다. 이는 비효율적인 <code>bytes</code> 객체 크기 조정을 피합니다. 마지막으로 <code>PyBytesWriter_Finish()</code>는 이 작은 버퍼에서 <code>bytes</code> 객체를 생성합니다. 힙 메모리에 <code>PyBytesWriter</code>를 할당하는 비용을 줄이기 위해 프리 리스트(free list)가 사용됩니다.</p>
<h2>하위 호환성 (Backwards Compatibility)</h2>
<p>하위 호환성에는 영향이 없으며, 새로운 API만 추가됩니다.
<code>PyBytes_FromStringAndSize(NULL, size)</code> 및 <code>_PyBytes_Resize()</code> API는 소프트 비권장(soft deprecated)됩니다. 이러한 함수를 사용할 때 새로운 경고는 발생하지 않으며, 제거될 계획도 없습니다.</p>
<h2>이전 논의 (Prior Discussions)</h2>
<ul>
<li><strong>2025년 3월:</strong> 세 번째 공개 API 시도, 포인터 대신 크기 사용.</li>
<li><strong>2025년 2월:</strong> 두 번째 공개 API 시도.</li>
<li><strong>2024년 7월:</strong> 첫 번째 공개 API 시도.</li>
<li><strong>2016년 3월:</strong> CPython에서 문자열을 생성하기 위한 빠른 <code>_PyAccu</code>, <code>_PyUnicodeWriter</code>, <code>_PyBytesWriter</code> API.</li>
</ul>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인 또는 CC0-1.0-Universal 라이선스 하에 배포됩니다 (더 관대한 조건 우선).</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 782 - Add PyBytesWriter C API"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 13:58:01+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
