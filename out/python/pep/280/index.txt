3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-1a135130af3e1cae.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/280","c"]
0:["8N6icDw00Cy0kKVlExSq2",[[["",{"children":[["slug","python/pep/280","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"280\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/280","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T5342,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0280/">PEP 280 - Optimizing access to globals</a></p>
<p><strong>상태:</strong> Deferred | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 10-Feb-2002</p>
</blockquote>
<pre><code>

# PEP 280 – 전역(globals) 접근 최적화

*   **작성자:** Guido van Rossum
*   **상태:** 연기됨 (Deferred)
*   **유형:** 표준 트랙 (Standards Track)
*   **작성일:** 2002년 2월 10일
*   **Python 버전:** 2.3
*   **최종 수정일:** 2025년 2월 1일

## 연기 (Deferral)

이 PEP는 좋은 아이디어였지만, PEP 266 (Skip Montanaro의 "Optimizing Global Variable/Attribute Access") 및 PEP 267 (Jeremy Hylton의 "Optimized Access to Module Namespaces")과의 차이점을 명확히 정리할 작업자가 나타나지 않아 현재 연기된 상태입니다.

## 개요 (Abstract)

이 PEP는 모듈의 전역(globals) 접근을 최적화하기 위한 또 다른 접근 방식을 설명합니다. 이는 PEP 266과 PEP 267에 대한 대안을 제시합니다. 궁극적으로는 여러 접근 방식이 프로토타입으로 제작된 후, 그중 하나가 선택 및 구현될 것으로 예상되었습니다.

## 설명 (Description)

(참고: Jason Orendorff는 오래전에 Python 1.5 버전에서 이 아이디어를 구현해 본 적이 있다고 언급했습니다. 당시 그는 일반 Python보다 15% 느린 수준까지 만들었지만, 결국 포기했다고 합니다. 그의 구현에서 "cell"은 실제 일급 객체였고, "celldict"는 딕셔너리를 복사하고 수정한 버전이었습니다.)

이 PEP의 핵심은 `cell`이라는 매우 간단한 Python 객체와 `celldict`라는 매핑 객체를 사용하는 것입니다.

### `cell` 객체

`cell`은 다음 두 가지 포인터를 포함하는 간단한 Python 객체입니다.

*   `objptr`: 실제 Python 객체에 대한 포인터
*   `cellptr`: 다른 `cell` 객체에 대한 포인터 (내장(built-ins) 검색을 위해 `cell`을 연결하는 데 사용됨)

두 포인터 모두 `NULL`일 수 있습니다. Python으로 구현하면 다음과 같습니다.

```python
class cell(object):
    def __init__(self):
        self.objptr = NULL
        self.cellptr = NULL
</code></pre>
<p><code>cellptr</code> 속성은 내장(built-ins)을 검색하기 위해 <code>cell</code>들을 연결하는 데 사용됩니다.</p>
<h3><code>celldict</code> 객체</h3>
<p><code>celldict</code>는 문자열(모듈 전역 변수의 이름)을 객체(해당 전역 변수의 값)에 매핑하는 것으로, <code>cell</code> 딕셔너리를 사용하여 구현됩니다. Python으로 구현하면 다음과 같습니다.</p>
<pre><code class="language-python">class celldict(object):
    def __init__(self):
        self.__dict = {} # dict of cells

    def getcell(self, key):
        c = self.__dict.get(key)
        if c is None:
            c = cell()
            self.__dict[key] = c
        return c

    def cellkeys(self):
        return self.__dict.keys()

    def __getitem__(self, key):
        c = self.__dict.get(key)
        if c is None:
            raise KeyError, key
        value = c.objptr
        if value is NULL:
            raise KeyError, key
        else:
            return value

    def __setitem__(self, key, value):
        c = self.__dict.get(key)
        if c is None:
            c = cell()
            self.__dict[key] = c
        c.objptr = value

    def __delitem__(self, key):
        c = self.__dict.get(key)
        if c is None or c.objptr is NULL:
            raise KeyError, key
        c.objptr = NULL

    # keys(), items(), values(), clear() 등의 다른 딕셔너리 메서드들도 유사하게 구현됨
    def keys(self):
        return [k for k, c in self.__dict.iteritems() if c.objptr is not NULL]
    def items(self):
        return [[k, c.objptr] for k, c in self.__dict.iteritems() if c.objptr is not NULL]
    def values(self):
        return [c.objptr for c in self.__dict.itervalues() if c.objptr is not NULL]
    def clear(self):
        for c in self.__dict.values():
            c.objptr = NULL
</code></pre>
<p><code>objptr</code>가 <code>NULL</code>인 <code>cell</code>은 "비어 있는(empty)" <code>cell</code>이라고 합니다. <code>celldict</code>가 매핑으로 사용될 때는 이러한 비어 있는 <code>cell</code>이 존재하지 않는 것처럼 동작합니다. 하지만 한 번 추가된 <code>cell</code>은 <code>celldict</code>에서 삭제되지 않으며, <code>getcell()</code> 메서드를 사용하여 비어 있는 <code>cell</code>에 접근할 수 있습니다. <code>celldict</code> 구현은 <code>cellptr</code> 속성을 사용하지 않습니다.</p>
<h3>모듈 구현 변경</h3>
<p>모듈의 <code>__dict__</code>를 <code>celldict</code>로 사용하도록 모듈 구현을 변경합니다. 모듈의 <code>getattr</code>, <code>setattr</code>, <code>delattr</code> 연산은 이제 <code>celldict</code>의 <code>getitem</code>, <code>setitem</code>, <code>delitem</code>으로 매핑됩니다. <code>module.__dict__</code>와 <code>globals()</code>의 타입 변경이 유일한 하위 호환성 문제일 가능성이 높습니다.</p>
<p>모듈이 초기화될 때, <code>__builtins__</code>는 <code>__builtin__</code> 모듈의 <code>__dict__</code> (이 또한 <code>celldict</code>)에서 초기화됩니다. <code>__builtins__</code>의 각 <code>cell</code>에 대해 새 모듈의 <code>__dict__</code>는 <code>objptr</code>가 <code>NULL</code>인 <code>cell</code>을 추가하고, 이 <code>cell</code>의 <code>cellptr</code>는 <code>__builtins__</code>의 해당 <code>cell</code>을 가리킵니다.</p>
<p>의사 코드는 다음과 같습니다 (<code>rexec</code> 제외):</p>
<pre><code class="language-python">import __builtin__

class module(object):
    def __init__(self):
        self.__dict__ = d = celldict()
        d['__builtins__'] = bd = __builtin__.__dict__
        for k in bd.cellkeys():
            c = self.__dict__.getcell(k)
            c.cellptr = bd.getcell(k)

    def __getattr__(self, k):
        try:
            return self.__dict__[k]
        except KeyError:
            raise IndexError, k

    def __setattr__(self, k, v):
        self.__dict__[k] = v

    def __delattr__(self, k):
        del self.__dict__[k]
</code></pre>
<h3>컴파일러 및 VM 변경</h3>
<p>컴파일러는 전역 변수 참조를 위해 <code>LOAD_GLOBAL_CELL &#x3C;i></code> (및 <code>STORE_GLOBAL_CELL &#x3C;i></code> 등) opcode를 생성합니다. 여기서 <code>&#x3C;i></code>는 <code>LOAD_CONST</code>의 상수 인덱스와 유사하게 단일 코드 객체 내에서만 의미를 가지는 작은 인덱스입니다. 코드 객체에는 <code>co_globals</code>라는 새로운 튜플이 추가되어 <code>&#x3C;i></code>로 인덱싱된 코드에서 참조되는 전역 변수 이름을 제공합니다.</p>
<p>코드 객체와 <code>celldict</code>로부터 함수 객체가 생성될 때, 함수 객체는 <code>celldict</code>에 코드 객체의 <code>co_globals</code>에 있는 이름에 해당하는 <code>cell</code>들을 요청하여 <code>cell</code> 포인터 배열을 생성합니다. <code>celldict</code>에 특정 이름에 대한 <code>cell</code>이 아직 없으면 빈 <code>cell</code>을 생성합니다. 이 <code>cell</code> 포인터 배열은 함수 객체에 <code>func_cells</code>로 저장됩니다.</p>
<p>VM이 <code>LOAD_GLOBAL_CELL &#x3C;i></code> 명령어를 실행하면, <code>func_cells</code>에서 <code>&#x3C;i></code>번 <code>cell</code>을 가져옵니다. 그런 다음 <code>cell</code>의 <code>PyObject</code> 포인터를 확인하고, <code>NULL</code>이 아니면 해당 값이 전역 값입니다. <code>NULL</code>인 경우 <code>cell</code>의 <code>cellptr</code>를 따라 다음 <code>cell</code>로 이동하고, 해당 <code>cell</code>의 <code>PyObject</code> 포인터를 확인합니다. 이것도 <code>NULL</code>이거나 두 번째 <code>cell</code>이 없으면 <code>NameError</code>가 발생합니다. <code>STORE_GLOBAL_CELL &#x3C;i></code>도 유사하게 작동하지만, <code>cellptr</code> 체인을 따르지 않고 항상 첫 번째 <code>cell</code>에 저장합니다.</p>
<p>함수의 전역 변수가 <code>celldict</code>가 아니어서 <code>func_cells</code>가 <code>NULL</code>인 경우를 위한 VM의 대체(fallback) 메커니즘도 있습니다. 이 경우 코드 객체의 <code>co_globals</code>가 <code>&#x3C;i></code>로 인덱싱되어 해당하는 전역 변수의 이름을 찾고, 이 이름이 함수의 <code>globals</code> 딕셔너리를 인덱싱하는 데 사용됩니다.</p>
<h2>추가 아이디어 (Additional Ideas)</h2>
<h3>최적화된 <code>LOAD_GLOBAL_CELL</code></h3>
<ul>
<li><code>func_cells</code>를 <code>NULL</code> 포인터로 만들지 않고, 빈 <code>cell</code> 배열로 구성하여 <code>LOAD_GLOBAL_CELL</code>이 <code>NULL</code> 검사 없이 <code>func_cells</code>를 인덱싱할 수 있도록 합니다.</li>
<li><code>cell</code>이 생성될 때 <code>c.cellptr</code>를 <code>c</code>와 같게 만들어 <code>LOAD_GLOBAL_CELL</code>이 <code>NULL</code> 검사 없이 <code>c.cellptr</code>를 항상 역참조할 수 있도록 합니다.</li>
</ul>
<p>이 두 아이디어를 추가하면 <code>LOAD_GLOBAL_CELL</code>의 Python 의사 코드는 다음과 같습니다.</p>
<pre><code class="language-python">def LOAD_GLOBAL_CELL(self, i): # self is the frame
    c = self.func_cells[i]
    obj = c.objptr
    if obj is not NULL:
        return obj # 기존 전역 변수
    return c.cellptr.objptr # 내장(built-in) 또는 NULL
</code></pre>
<h3>내장(built-ins) 값의 적극적인 캐싱</h3>
<p>내장(builtins)의 실제 값을 모듈 딕셔너리에 직접 저장하고, 단순히 <code>cell</code>에 대한 포인터만 저장하는 것보다 더 적극적으로 캐싱하는 방안입니다. 이는 다음 두 가지 목적을 가집니다.</p>
<ol>
<li><strong>접근 단순화 및 속도 향상:</strong> 가장 일반적인 연산인 접근을 단순화하고 빠르게 합니다.</li>
<li><strong>기존 극단적인 코너 케이스의 충실한 에뮬레이션 지원:</strong> 기존 <code>builtins</code>의 변경이 모듈에 반영되는 방식을 더 정확하게 처리합니다.</li>
</ol>
<p>기존 제안 방식에서는 모듈 딕셔너리가 처음 생성될 때 <code>builtins</code> 집합이 캡처되므로, 그 이후에 <code>builtins</code>에 대한 변경 사항이 모듈 딕셔너리에 반영되지 않는 문제가 발생할 수 있습니다. 예를 들어, <code>__builtin__.pachinko</code>와 같은 새로운 <code>builtin</code>이 런타임에 추가되면, 이미 초기화된 모듈에서는 이를 인식하지 못해 <code>NameError</code>가 발생할 수 있습니다.</p>
<p>이러한 <code>builtins</code>의 변경은 매우 드물기 때문에, <code>builtins</code> 변경 비용이 높아지더라도 전역 변수 및 <code>builtins</code> 참조 속도를 향상시키는 것이 더 중요합니다. 이 접근 방식에서는 <code>cell</code> 객체가 다음과 같이 변경됩니다.</p>
<pre><code class="language-python">class cell(object):
    def __init__(self, obj=NULL, builtin=0):
        self.objptr = obj
        self.builtinflag = builtin
</code></pre>
<p><code>builtinflag</code>는 <code>objptr</code>가 <code>builtins</code>에서 얻은 값을 포함할 때만 <code>True</code>입니다. 즉, <code>cell</code>이 캐시된 값으로 작동할 때만 <code>True</code>입니다. <code>builtinflag</code>가 <code>False</code>이면 <code>objptr</code>는 모듈 전역 변수의 값입니다 (<code>NULL</code>일 수 있음).</p>
<p><code>celldict</code>는 다음과 같이 변경됩니다.</p>
<pre><code class="language-python">class celldict(object):
    def __init__(self, builtindict=()):
        self.basedict = builtindict
        self.__dict = d = {}
        for k, v in builtindict.items():
            d[k] = cell(v, 1)

    def __getitem__(self, key):
        c = self.__dict.get(key)
        if c is None or c.objptr is NULL or c.builtinflag: # builtinflag 확인 추가
            raise KeyError, key
        return c.objptr

    def __setitem__(self, key, value):
        c = self.__dict.get(key)
        if c is None:
            c = cell()
            self.__dict[key] = c
        c.objptr = value
        c.builtinflag = 0 # 모듈 전역 변수이므로 builtinflag는 0

    def __delitem__(self, key):
        c = self.__dict.get(key)
        if c is None or c.objptr is NULL or c.builtinflag: # builtinflag 확인 추가
            raise KeyError, key
        c.objptr = NULL
        # 만약 삭제된 전역 변수와 동일한 이름의 built-in이 있다면
        # 해당 built-in 값을 다시 캐싱하여 노출시킵니다.
        if key in self.basedict:
            c.objptr = self.basedict[key]
            assert c.objptr is not NULL
            c.builtinflag = 1
        else:
            assert not c.builtinflag

    # keys(), items(), values(), clear() 등의 다른 딕셔너리 메서드들도 유사하게 변경됨
    def keys(self):
        return [k for k, c in self.__dict.iteritems() if c.objptr is not NULL and not c.builtinflag]
    def items(self):
        return [[k, c.objptr] for k, c in self.__dict.iteritems() if c.objptr is not NULL and not c.builtinflag]
    def values(self):
        return [c.objptr for c in self.__dict.itervalues() if c.objptr is not NULL and not c.builtinflag]
    def clear(self):
        for c in self.__dict.values():
            if not c.builtinflag:
                c.objptr = NULL
</code></pre>
<p>이러한 변경으로 <code>LOAD_GLOBAL_CELL</code>의 구현이 단순화되어 속도 이점을 얻을 수 있습니다.</p>
<pre><code class="language-python">def LOAD_GLOBAL_CELL(self, i): # self is the frame
    c = self.func_cells[i]
    return c.objptr # NULL일 수 있음
</code></pre>
<p>이 방식에서는 <code>builtins</code>와 모듈 전역 변수에 대한 접근 속도가 동일해집니다.</p>
<p><code>builtins</code>의 변경 사항을 <code>builtins</code>에서 초기화된 모듈 딕셔너리로 전파하는 비용이 수반됩니다. <code>builtins</code>는 모듈 (또는 모듈 딕셔너리)에 대한 약한 참조(weakrefs) 목록을 유지해야 합니다. <code>builtin</code> 딕셔너리에 변경이 발생하면 (새 키 추가, 기존 키 값 변경, 키 삭제 등), 모듈 딕셔너리 목록을 순회하며 해당 변경 사항을 반영합니다.</p>
<ul>
<li><strong><code>reflect_bltin_del(self, key)</code>:</strong> <code>builtin</code>에서 키가 삭제될 때, 모듈 딕셔너리에서 해당 <code>cell</code>의 <code>objptr</code>를 <code>NULL</code>로 설정하고 <code>builtinflag</code>를 <code>0</code>으로 만듭니다.</li>
<li><strong><code>reflect_bltin_new(self, key, value)</code>:</strong> 새로운 <code>builtin</code> (키, 값) 쌍이 추가될 때, 모듈 딕셔너리에 해당 <code>cell</code>이 없으면 새로 생성하여 <code>builtin</code> 값을 캐싱합니다. <code>objptr</code>가 <code>NULL</code>이면 <code>builtin</code> 값을 복원합니다.</li>
<li><strong><code>reflect_bltin_change(self, key, newvalue)</code>:</strong> 기존 <code>builtin</code>의 값이 변경될 때, 모듈 딕셔너리에서 해당 <code>cell</code>의 <code>objptr</code>를 새로운 값으로 업데이트합니다.</li>
</ul>
<h2>FAQ (자주 묻는 질문)</h2>
<p><strong>Q: <code>__builtin__</code> 네임스페이스에 새로운 <code>builtins</code>를 설치하고 이미 로드된 모든 모듈에서 즉시 사용할 수 있도록 하는 것이 여전히 가능할까요? 또한, <code>open()</code>과 같은 <code>builtins</code>를 사용자 정의 복사본으로 재정의하여 모든 모듈에서 이전 것을 재정의하도록 하는 것이 가능할까요?</strong></p>
<p>A: 예, 이것이 이 설계의 핵심입니다. 원래 접근 방식에서는 <code>LOAD_GLOBAL_CELL</code>이 두 번째 <code>cell</code>에서 <code>NULL</code>을 찾으면 <code>__builtins__</code> 딕셔너리가 수정되었는지 다시 확인해야 합니다. Tim의 "더 적극적인(more aggressive)" 대안도 이를 처리합니다.</p>
<p><strong>Q: 새로운 스키마는 제한된 실행 모델(restricted execution model)과 어떻게 호환될까요?</strong></p>
<p>A: 제한된 실행 모델을 완벽하게 지원하도록 의도되었습니다.</p>
<p><strong>Q: 전역 변수가 삭제되면 어떻게 되나요?</strong></p>
<p>A: 모듈의 <code>celldict</code>는 해당 키에 대해 <code>objptr</code>가 <code>NULL</code>인 <code>cell</code>을 가집니다. "적극적인(aggressive)" 방식에서는 이것이 동일한 이름의 <code>builtin</code>을 드러내는지 확인하고, 그렇다면 해당 <code>builtin</code>의 값을 <code>cell</code>의 <code>objptr</code>에 복사하고 <code>builtinflag</code>를 <code>True</code>로 설정합니다.</p>
<p><strong>Q: <code>LOAD_GLOBAL_CELL</code>에 대한 C 코드는 어떻게 보일까요?</strong></p>
<p>A: "Additional ideas"의 처음 두 가지 항목을 통합한 첫 번째 버전은 다음과 같습니다.</p>
<pre><code class="language-c">case LOAD_GLOBAL_CELL:
    cell = func_cells[oparg];
    x = cell->objptr;
    if (x == NULL) {
        x = cell->cellptr->objptr;
        if (x == NULL) {
            ... error recovery ...
            break;
        }
    }
    Py_INCREF(x);
    PUSH(x);
    continue;
</code></pre>
<p>Ka-Ping Yee의 아이디어에 따르면 다음과 같이 작성할 수도 있습니다.</p>
<pre><code class="language-c">case LOAD_GLOBAL_CELL:
    cell = func_cells[oparg];
    x = cell->cellptr->objptr;
    if (x != NULL) {
        Py_INCREF(x);
        PUSH(x);
        continue;
    }
    ... error recovery ...
    break;
</code></pre>
<p>현대 CPU 아키텍처에서 이는 <code>builtins</code>에 대한 브랜치 수를 줄여 성능 향상을 가져올 수 있습니다.</p>
<p>적극적인(aggressive) 변형의 경우:</p>
<pre><code class="language-c">case LOAD_GLOBAL_CELL:
    cell = func_cells[oparg];
    x = cell->objptr;
    if (x != NULL) {
        Py_INCREF(x);
        PUSH(x);
        continue;
    }
    ... error recovery ...
    break;
</code></pre>
<p><strong>Q: <code>func_cells</code> 배열이 없을 것으로 예상되는 모듈의 최상위 코드에서는 어떤 일이 발생하나요?</strong></p>
<p>A: 코드 분석을 수행하여 <code>func_cells</code> 배열을 생성하거나, <code>globals</code> 딕셔너리에서 <code>PyMapping_GetItem</code>을 사용하는 <code>LOAD_NAME</code>을 사용할 수 있습니다.</p>
<h2>그래픽 (Graphics)</h2>
<p>Ka-Ping Yee는 <code>import spam</code> 이후의 상태를 보여주는 그림을 제공했습니다.</p>
<p><code>spam.py</code> 파일의 내용은 다음과 같습니다.</p>
<pre><code class="language-python">import eggs
i = -2
max = 3
def foo(n):
    y = abs(i) + max
    return eggs.ham(y + n)
</code></pre>
<p>해당 그림은 <a href="http://web.lfw.org/repo/cells.gif">http://web.lfw.org/repo/cells.gif</a>에서 볼 수 있습니다. 더 큰 버전은 <a href="http://lfw.org/repo/cells-big.gif">http://lfw.org/repo/cells-big.gif</a>에 있으며, 원본 소스는 <a href="http://lfw.org/repo/cells.ai">http://lfw.org/repo/cells.ai</a>에 있습니다.</p>
<h2>비교 (Comparison)</h2>
<p>이 섹션에는 세 가지 접근 방식(PEP 280, PEP 266, PEP 267)에 대한 비교가 추가될 수 있었습니다.</p>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인에 공개되었습니다.</p>
<hr>
<p><strong>PEP 280</strong>은 Python의 전역 변수 및 내장(built-ins) 접근 방식을 최적화하기 위해 <code>cell</code>과 <code>celldict</code>라는 새로운 데이터 구조를 제안했습니다. 이 제안은 모듈의 <code>__dict__</code>를 <code>celldict</code>로 대체하고, <code>LOAD_GLOBAL_CELL</code>과 같은 새로운 opcode를 도입하여 전역 변수 접근 속도를 향상시키는 것을 목표로 했습니다. 특히 "적극적인(aggressive)" 캐싱 방식을 통해 <code>builtins</code>의 변경이 모듈에 즉시 반영되도록 하면서도 접근 성능을 유지하려 했습니다. 그러나 이 PEP는 다른 관련 PEP들과의 차이점을 명확히 정리하는 작업의 부재로 인해 결국 연기되었습니다.</p>
<p>이 제안은 Python 내부 동작에 대한 깊은 이해를 바탕으로 성능 최적화를 시도했지만, 복잡성 증가와 하위 호환성 문제 (특히 <code>module.__dict__</code> 및 <code>globals()</code> 타입 변경)로 인해 도입되지 못했습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1318,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Deferred] PEP 280 - Optimizing access to globals"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 17:55:42+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
