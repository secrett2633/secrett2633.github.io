3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-ce60b0a6591d04ed.js"],""]
4:["slug","python/pep/517","c"]
0:["e6YNzZ2BVZ8NBZ6boXfWj",[[["",{"children":[["slug","python/pep/517","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"517\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/517","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T4aaa,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0517/">PEP 517 - A build-system independent format for source trees</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 30-Sep-2015</p>
</blockquote>
<h2>PEP 517 – 소스 트리를 위한 빌드 시스템 독립적인 형식</h2>
<p>본 문서는 PEP 517의 내용을 한국어 Python 개발자들을 위해 번역하고 정리한 것입니다. 이 PEP는 Python 패키징 생태계에서 빌드 시스템의 유연성과 확장성을 크게 개선하는 중요한 제안입니다.</p>
<h3>개요 (Abstract)</h3>
<p>기존 <code>distutils</code> 및 <code>setuptools</code>는 Python 패키지 빌드에 오랜 기간 사용되었지만, 다음과 같은 세 가지 심각한 문제를 안고 있었습니다.</p>
<ol>
<li><strong>기능 부족:</strong> 빌드 시 의존성 선언, 자동 구성, 버전 관리의 DRY(Don't Repeat Yourself) 원칙 준수 등 중요한 기능이 누락되어 있었습니다.</li>
<li><strong>확장성 난이도:</strong> <code>distutils</code>/<code>setuptools</code>를 확장하기 어려워, 위 문제들을 해결하기 위한 다양한 시도가 있었지만, 종종 기이하고 취약하며 유지보수 비용이 많이 들었습니다.</li>
<li><strong>대체 시스템 사용의 어려움:</strong> <code>distutils</code>/<code>setuptools</code>가 <code>pip</code>과 같은 설치 도구 및 사용자 모두에게 표준 패키지 설치 인터페이스를 제공했기 때문에, 다른 빌드 시스템을 사용하기가 매우 어려웠습니다.</li>
</ol>
<p>이 PEP는 특히 세 번째 문제(c)를 해결하는 데 중점을 둡니다. 목표는 <code>distutils-sig</code>가 Python 빌드 시스템의 문지기(gatekeeper) 역할을 하지 않도록 하는 것입니다. 즉, 개발자가 <code>distutils</code> 외에 다른 빌드 시스템(예: <code>flit</code>, <code>bento</code>)을 표준화된 방법으로 쉽게 사용할 수 있도록 최소한의 인터페이스를 제안합니다. 이는 <code>wheel</code> 포맷이 많은 어려운 문제(예: 빌드 시스템이 모든 가능한 설치 구성을 알 필요 없음)를 해결했기 때문에 가능해졌으며, 빌드 시스템에 요구되는 것은 표준을 준수하는 <code>wheel</code> 및 <code>sdist</code>를 생성하는 기능으로 단순화되었습니다.</p>
<h3>용어 및 목표 (Terminology and Goals)</h3>
<ul>
<li><strong>Source Tree (소스 트리):</strong> VCS(버전 관리 시스템) 체크아웃과 같은 상태를 의미합니다. <code>pip install some-directory/</code>와 같이 이 형식에서 설치하기 위한 표준 인터페이스가 필요합니다.</li>
<li><strong>Source Distribution (소스 배포판, sdist):</strong> <code>lxml-3.4.4.tar.gz</code>와 같이 특정 소스 코드 릴리스를 나타내는 정적인 스냅샷입니다. 릴리스의 기록 보존, 다양한 언어로 작성된 대규모 코드 코퍼스를 처리하는 도구의 입력, Debian/Fedora/Conda와 같은 다운스트림 패키징 시스템의 입력 등 다양한 목적으로 사용됩니다. Python 생태계에서는 <code>pip</code>과 같은 패키징 도구가 <code>sdist</code>를 사용하여 이진 의존성을 충족시키는 데 중요한 역할을 합니다. <code>sdist</code>는 <code>sdists</code>로도 불립니다.</li>
<li><strong>Build Frontend (빌드 프런트엔드):</strong> 사용자가 임의의 소스 트리 또는 소스 배포판을 가져와 <code>wheel</code>을 빌드하는 도구입니다. 실제 빌드는 각 소스 트리의 **Build Backend (빌드 백엔드)**에 의해 수행됩니다. 예를 들어, <code>pip wheel some-directory/</code> 명령에서 <code>pip</code>은 빌드 프런트엔드 역할을 합니다.</li>
<li><strong>Integration Frontend (통합 프런트엔드):</strong> 사용자가 패키지 요구사항 세트(예: <code>requirements.txt</code> 파일)를 가져와 작업 환경을 해당 요구사항에 맞게 업데이트하는 도구입니다. 이는 <code>wheel</code> 및 <code>sdist</code>의 조합을 찾아, 빌드하고, 설치하는 것을 포함할 수 있습니다. 예를 들어, <code>pip install lxml==2.4.0</code> 명령에서 <code>pip</code>은 통합 프런트엔드 역할을 합니다.</li>
</ul>
<p>이 PEP의 주요 목표는 Python 빌드 시스템에 대한 <code>distutils-sig</code>의 의존성을 줄이고, 표준화된 방법을 통해 다양한 빌드 시스템을 쉽게 사용할 수 있도록 하는 것입니다.</p>
<h3>소스 트리 (Source Trees)</h3>
<p>기존에는 <code>setup.py</code> 파일을 사용하는 레거시 소스 트리 형식이 존재했습니다. 이 PEP는 PEP 518에서 정의된 <code>pyproject.toml</code> 파일을 기반으로 하는 새로운 소스 트리 형식을 정의하며, <code>[build-system]</code> 테이블에 <code>build-backend</code>라는 추가 키를 확장합니다.</p>
<p><strong><code>pyproject.toml</code> 예시:</strong></p>
<pre><code class="language-toml">[build-system]
# PEP 518에 의해 정의됨:
requires = ["flit_core >=3.2,&#x3C;4"] # 예시, 원문에는 flit
# 이 PEP에 의해 정의됨:
build-backend = "flit_core.buildapi" # 예시, 원문에는 flit.api:main
</code></pre>
<ul>
<li><code>build-backend</code>는 빌드를 수행하는 데 사용될 Python 객체의 이름을 지정하는 문자열입니다. <code>setuptools</code> 엔트리 포인트와 동일한 <code>module:object</code> 구문 형식을 따릅니다.</li>
<li><code>pyproject.toml</code> 파일이 없거나 <code>build-backend</code> 키가 누락된 경우, 해당 소스 트리는 이 사양을 사용하지 않으며, 도구는 <code>setup.py</code>를 실행하는 레거시 동작으로 되돌아가야 합니다 (직접 실행하거나 <code>setuptools.build_meta:__legacy__</code> 백엔드를 암시적으로 호출).</li>
<li><code>build-backend</code> 키가 존재하면, 이 키가 우선하며 소스 트리는 지정된 백엔드의 형식 및 규칙을 따릅니다. 따라서 백엔드가 요구하지 않는 한 <code>setup.py</code>는 필요하지 않습니다.</li>
<li><code>backend-path</code> 키는 백엔드 코드가 소스 트리에 직접 포함될 때 사용될 수 있습니다.</li>
</ul>
<h3>빌드 요구사항 (Build Requirements)</h3>
<p>이 PEP는 <code>pyproject.toml</code> 파일의 "빌드 요구사항" 섹션에 몇 가지 추가 요구사항을 부과합니다.</p>
<ul>
<li>프로젝트 빌드 요구사항은 의존성의 방향성 그래프를 정의하며, 이 그래프는 <strong>순환(cycle)을 포함해서는 안 됩니다.</strong></li>
<li>프런트엔드는 순환이 발견되면 빌드를 거부할 수 있습니다.</li>
<li>빌드 요구사항이 <code>wheel</code>로 제공되는 경우, 프런트엔드는 가능하면 <code>wheel</code>을 사용해야 합니다.</li>
<li>백엔드가 자체 호스팅(self-hosting)하려는 경우(즉, 백엔드용 <code>wheel</code>을 빌드하는 데 해당 백엔드를 사용하는 경우) 순환을 피하기 위해 특별한 조치를 취해야 합니다. 일반적으로 이는 자신을 인트리(in-tree) 백엔드로 지정하고 외부 빌드 의존성을 피하는 것을 포함합니다.</li>
</ul>
<h3>빌드 백엔드 인터페이스 (Build Backend Interface)</h3>
<p>빌드 백엔드 객체는 다음 중 일부 또는 전부를 제공하는 속성(훅)을 가져야 합니다. 모든 훅에 전달되는 <code>config_settings</code> 인자는 개별 훅 설명 뒤에 설명됩니다.</p>
<h4>필수 훅 (Mandatory Hooks)</h4>
<ul>
<li>
<p><strong><code>build_wheel(wheel_directory, config_settings=None, metadata_directory=None)</code></strong></p>
<ul>
<li><code>.whl</code> 파일을 빌드하여 지정된 <code>wheel_directory</code>에 배치해야 합니다.</li>
<li>생성된 <code>.whl</code> 파일의 베이스 이름(전체 경로 아님)을 유니코드 문자열로 반환해야 합니다.</li>
<li><code>metadata_directory</code>가 제공되면, <code>build_wheel</code>은 이전에 <code>prepare_metadata_for_build_wheel</code>이 생성한 메타데이터와 동일한 메타데이터를 가진 <code>wheel</code>을 생성해야 합니다.</li>
<li>백엔드는 소스 디렉토리를 읽기 전용으로 처리할 준비가 되어 있어야 합니다.</li>
</ul>
</li>
<li>
<p><strong><code>build_sdist(sdist_directory, config_settings=None)</code></strong></p>
<ul>
<li><code>.tar.gz</code> 소스 배포판을 빌드하여 지정된 <code>sdist_directory</code>에 배치해야 합니다.</li>
<li>생성된 <code>.tar.gz</code> 파일의 베이스 이름(전체 경로 아님)을 유니코드 문자열로 반환해야 합니다.</li>
<li><code>.tar.gz</code> <code>sdist</code>는 <code>{name}-{version}</code> 형식의 단일 최상위 디렉토리(예: <code>foo-1.0</code>)를 포함해야 하며, 빌드 디렉토리의 <code>pyproject.toml</code>과 PEP 345에 설명된 형식의 메타데이터를 포함하는 <code>PKG-INFO</code> 파일을 포함해야 합니다.</li>
<li>생성된 tarball은 UTF-8 기반 파일 이름을 지정하는 최신 POSIX.1-2001 pax tar 형식을 사용해야 합니다.</li>
<li><code>UnsupportedOperation</code> 예외를 통해 <code>sdist</code> 생성에 필요한 의존성이 없거나 다른 이유로 <code>sdist</code>를 생성할 수 없는 경우를 알릴 수 있습니다.</li>
</ul>
</li>
</ul>
<h4>선택적 훅 (Optional Hooks)</h4>
<ul>
<li>
<p><strong><code>get_requires_for_build_wheel(config_settings=None)</code></strong></p>
<ul>
<li><code>pyproject.toml</code> 파일에 지정된 것 외에, <code>build_wheel</code> 또는 <code>prepare_metadata_for_build_wheel</code> 훅을 호출할 때 설치해야 할 <code>PEP 508</code> 의존성 사양 목록을 반환해야 합니다.</li>
<li>정의되지 않은 경우 기본 구현은 <code>return []</code>와 동일합니다.</li>
</ul>
</li>
<li>
<p><strong><code>prepare_metadata_for_build_wheel(metadata_directory, config_settings=None)</code></strong></p>
<ul>
<li>지정된 <code>metadata_directory</code> 내에 <code>wheel</code> 메타데이터를 포함하는 <code>.dist-info</code> 디렉토리를 생성해야 합니다. 이 디렉토리는 <code>wheel</code> 사양에 정의된 유효한 <code>.dist-info</code> 디렉토리여야 하지만, <code>RECORD</code> 또는 서명을 포함할 필요는 없습니다.</li>
<li>생성된 <code>.dist-info</code> 디렉토리의 베이스 이름(전체 경로 아님)을 유니코드 문자열로 반환해야 합니다.</li>
<li>이 메서드가 정의되지 않은 경우, 빌드 프런트엔드는 <code>build_wheel</code>을 호출하여 결과 메타데이터를 직접 확인해야 합니다.</li>
</ul>
</li>
<li>
<p><strong><code>get_requires_for_build_sdist(config_settings=None)</code></strong></p>
<ul>
<li><code>pyproject.toml</code> 파일에 지정된 것 외에, <code>build_sdist</code> 훅을 호출할 때 설치해야 할 <code>PEP 508</code> 의존성 사양 목록을 반환해야 합니다.</li>
<li>정의되지 않은 경우 기본 구현은 <code>return []</code>와 동일합니다.</li>
</ul>
</li>
</ul>
<p><strong>편집 가능한 설치 (Editable Installs):</strong> 원래 이 PEP는 <code>install_editable</code> 훅을 지정했지만, 복잡성 때문에 제거되었으며 나중에 다른 PEP에서 지정될 수 있습니다.</p>
<h4>설정 (Config settings)</h4>
<ul>
<li><code>config_settings</code> 인자는 모든 훅에 전달되는 임의의 딕셔너리로, 사용자가 개별 패키지 빌드에 임시(ad-hoc) 구성을 전달하기 위한 "비상구(escape hatch)" 역할을 합니다.</li>
<li>빌드 백엔드는 이 딕셔너리에 원하는 의미론을 할당할 수 있습니다.</li>
<li>빌드 프런트엔드는 사용자가 임의의 문자열 키/값 쌍을 이 딕셔너리에 지정할 수 있는 메커니즘을 제공해야 합니다.</li>
</ul>
<h4>빌드 환경 (Build Environment)</h4>
<p>빌드 프런트엔드의 책임 중 하나는 빌드 백엔드가 실행될 Python 환경을 설정하는 것입니다.</p>
<ul>
<li>가상 환경(Virtual Environment) 메커니즘(<code>virtualenv</code>, <code>venv</code> 등)에 대한 특정 요구사항은 없지만, 사용되는 메커니즘은 다음 기준을 충족해야 합니다:
<ul>
<li>프로젝트의 빌드 요구사항에 지정된 모든 요구사항은 Python에서 import 가능해야 합니다.</li>
<li>빌드에 필요한 패키지의 명령줄 스크립트가 빌드 환경의 <code>PATH</code>에 존재해야 합니다.</li>
<li>빌드 백엔드는 <code>stdlib</code>에 존재하는 패키지 또는 명시적으로 빌드 요구사항으로 선언된 패키지 외에 다른 패키지에 액세스할 수 있다고 가정해서는 안 됩니다.</li>
</ul>
</li>
<li>프런트엔드는 각 훅을 새 서브프로세스에서 호출해야 합니다.</li>
</ul>
<h3>빌드 프런트엔드에 대한 권장 사항 (비규범적) (Recommendations for build frontends (non-normative))</h3>
<ul>
<li>빌드 프런트엔드는 기본적으로 표준 라이브러리와 명시적으로 요청된 빌드 의존성만 포함하는 격리된 환경을 각 빌드를 위해 생성해야 합니다.
<ul>
<li>이는 상충하는 빌드 요구사항을 가진 여러 패키지를 단일 설치 실행에서 빌드할 수 있도록 합니다.</li>
<li>패키지 저자가 정확한 빌드 의존성을 선언하도록 유도하는 역할을 합니다.</li>
</ul>
</li>
<li>사용자가 필요할 때 기본값을 재정의할 수 있는 메커니즘을 제공해야 합니다. 예를 들어, <code>--build-with-system-site-packages</code> 또는 <code>--build-requirements-override=my-requirements.txt</code>와 같은 옵션을 제공할 수 있습니다.</li>
</ul>
<h3>인트리 빌드 백엔드 (In-tree Build Backends)</h3>
<ul>
<li>특정 상황에서 프로젝트는 빌드 백엔드 소스 코드를 <code>requires</code> 키를 통해 참조하는 대신 소스 트리에 직접 포함하고 싶을 수 있습니다.</li>
<li>이는 백엔드 자체를 빌드하는 "자체 호스팅 백엔드(self-hosting backends)"나 표준 백엔드에 대한 사용자 정의 래퍼로 구성된 "프로젝트별 백엔드(project-specific backends)"에서 예상됩니다.</li>
<li><code>pyproject.toml</code>에 <code>backend-path</code> 키를 포함하여 백엔드 코드가 인트리(in-tree)로 호스팅됨을 지정할 수 있습니다.</li>
<li><code>backend-path</code>의 내용은 프로젝트 루트를 기준으로 하며 소스 트리 내의 위치를 참조해야 합니다. 또한 백엔드 코드는 <code>backend-path</code>에 지정된 디렉토리 중 하나에서 로드되어야 합니다.</li>
</ul>
<h3>소스 배포판 (Source Distributions)</h3>
<p>레거시 <code>sdist</code> 형식을 계속 사용하되, 새로운 제약 사항을 추가합니다.</p>
<ul>
<li>새로운 <code>sdist</code>는 <code>.tar.gz</code> 확장자를 가진 gzipped tar 아카이브여야 합니다. 현재 zip 아카이브나 다른 압축 형식은 허용되지 않습니다.</li>
<li>tar 아카이브는 파일 이름에 UTF-8을 사용하는 최신 POSIX.1-2001 pax tar 형식으로 생성되어야 합니다.</li>
<li><code>sdist</code>에 포함된 소스 트리는 <code>pyproject.toml</code> 파일을 포함해야 합니다.</li>
</ul>
<h3>변경 사항 요약 (Summary of changes to PEP 517)</h3>
<p><code>pip 19.0</code>에서 초기 참조 구현이 릴리스된 후 이 PEP에 다음과 같은 변경 사항이 적용되었습니다.</p>
<ul>
<li>빌드 요구사항의 <strong>순환이 명시적으로 금지</strong>되었습니다.</li>
<li><code>[build-system]</code> 테이블에 <code>backend-path</code> 키를 도입하여 <strong>인트리 백엔드 및 백엔드의 자체 호스팅 지원</strong>이 추가되었습니다.</li>
<li><code>build-backend</code>를 명시적으로 지정하지 않는 소스 트리의 경우 <code>setuptools.build_meta:__legacy__</code> PEP 517 백엔드가 <code>setup.py</code>를 직접 호출하는 것에 대한 허용 가능한 대안임을 명확히 했습니다.</li>
</ul>
<h3>부록 A: PEP 516과의 비교 (Appendix A: Comparison to PEP 516)</h3>
<p>PEP 516은 빌드 시스템 인터페이스를 지정하는 경쟁 제안이었으나, 이 PEP 517이 채택되면서 거부되었습니다. 주요 차이점은 PEP 517의 빌드 백엔드가 명령줄 기반 인터페이스가 아닌 <strong>Python 훅(hook) 기반 인터페이스</strong>를 통해 정의된다는 것입니다.</p>
<p>Python 훅 접근 방식은 다음과 같은 세 가지 주요 이점을 제공합니다.</p>
<ol>
<li><strong>전체 생태계의 총 코드량 감소 및 새로운 빌드 시스템 진입 장벽 낮춤:</strong> 빌드 프런트엔드는 소수에 불과하지만, 사용자 정의 빌드 백엔드는 많을 수 있으므로, Python 훅 방식은 전체 시스템의 코드량을 줄이고 새로운 빌드 시스템 개발을 더 쉽게 만듭니다.</li>
<li><strong>명세의 불필요한 복잡성 제거:</strong> Python은 인터페이스를 설명하는 데 더 간단하면서도 풍부한 구조를 제공하여, 명세 자체의 복잡성을 줄입니다. 이는 특히 명령줄 인터페이스에서 발생할 수 있는 입력 충돌이나 선택적 인자 처리와 같은 문제를 명확하게 해결합니다.</li>
<li><strong>향후 사양 진화에 대한 강력한 옵션 제공:</strong> Python 훅 방식은 향후 사양 변경 시 더 큰 유연성을 제공합니다. 예를 들어, 새로운 훅이 추가될 때 프런트엔드가 자동으로 지원 여부를 감지하고 적절하게 폴백(fallback)할 수 있도록 합니다. 이는 <code>pyproject.toml</code> 파일을 업데이트할 필요 없이 생태계 전반에 걸쳐 점진적인 변화를 가능하게 합니다. 예를 들어, <code>prepare_metadata_for_build_wheel</code> 명령을 선택적으로 만들 수 있었던 것도 이러한 유연성 덕분입니다.</li>
</ol>
<p><strong>기타 차이점:</strong></p>
<ul>
<li>메타데이터 명령이 선택 사항입니다.</li>
<li>메타데이터를 단일 <code>METADATA</code> 파일이 아닌 디렉토리로 반환합니다. 이는 <code>wheel</code> 메타데이터가 여러 파일(예: 엔트리 포인트)에 걸쳐 분산되는 실제 방식과 더 잘 일치하며, 향후 확장 가능성을 높입니다.</li>
<li>메타데이터 단계와 <code>wheel</code> 빌드 단계 간에 정보를 전달하는 메커니즘을 제공합니다.</li>
<li>빌드 환경에 대한 더 자세한 권장 사항을 제공합니다(비규범적).</li>
</ul>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 517 - A build-system independent format for source trees"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 23:11:54+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
