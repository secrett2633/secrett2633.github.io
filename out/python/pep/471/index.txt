3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-0249a4ed84fdbe73.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/471","c"]
0:["SAPzS3zi9tsG5MkeKvxIA",[[["",{"children":[["slug","python/pep/471","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"471\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/471","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T5215,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0471/">PEP 471 - os.scandir() function – a better and faster directory iterator</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 30-May-2014</p>
</blockquote>
<p>다음은 PEP 471 – <code>os.scandir()</code> 함수 – 더 좋고 빠른 디렉토리 이터레이터에 대한 번역 및 요약입니다. 이 PEP는 Python 3.5에 <code>os.scandir()</code> 함수를 표준 라이브러리에 추가하여 디렉토리 순회 성능을 크게 향상시키는 것을 제안합니다.</p>
<hr>
<h2>PEP 471 – <code>os.scandir()</code> 함수 – 더 좋고 빠른 디렉토리 이터레이터</h2>
<ul>
<li><strong>작성자:</strong> Ben Hoyt</li>
<li><strong>BDFL-Delegate:</strong> Victor Stinner</li>
<li><strong>상태:</strong> Final (최종)</li>
<li><strong>유형:</strong> Standards Track</li>
<li><strong>생성일:</strong> 2014년 5월 30일</li>
<li><strong>Python 버전:</strong> 3.5</li>
</ul>
<h3>요약 (Abstract)</h3>
<p>이 PEP는 표준 라이브러리에 새로운 디렉토리 순회 함수인 <code>os.scandir()</code>를 포함할 것을 제안합니다. 이 새로운 함수는 유용한 기능을 추가하고, 대부분의 경우 <code>os.stat()</code> 호출을 피함으로써 <code>os.walk()</code>의 속도를 2배에서 20배까지 (플랫폼 및 파일 시스템에 따라 다름) 향상시킵니다.</p>
<h3>제안 배경 (Rationale)</h3>
<p>Python의 내장 함수 <code>os.walk()</code>는 각 디렉토리에서 <code>os.listdir()</code>를 호출하는 것 외에도, 각 파일에 대해 <code>stat()</code> 시스템 호출 또는 <code>GetFileAttributes()</code>를 실행하여 해당 항목이 디렉토리인지 여부를 확인하기 때문에 필요 이상으로 느립니다.</p>
<p>그러나 하위 시스템 호출(Windows의 <code>FindFirstFile</code>/<code>FindNextFile</code>, POSIX 시스템의 <code>readdir</code>)은 이미 반환된 파일이 디렉토리인지 아닌지를 알려주므로 추가적인 시스템 호출이 필요하지 않습니다. 또한, Windows 시스템 호출은 파일 크기 및 최종 수정 시간과 같은 <code>stat_result</code> 객체에 대한 모든 정보를 디렉토리 항목에서 반환합니다.</p>
<p>요약하자면, <code>os.walk()</code>와 같은 트리 함수에 필요한 시스템 호출 수를 약 2N에서 N으로 줄일 수 있습니다. 여기서 N은 트리에 있는 전체 파일 및 디렉토리 수입니다. 실제로 이러한 추가 시스템 호출을 제거하면 Windows에서는 <code>os.walk()</code>가 약 8~9배, POSIX 시스템에서는 약 2~3배 빨라집니다.</p>
<p><code>os.listdir()</code>의 버전 중에는 큰 디렉토리를 순회할 때 메모리 효율성을 향상시키기 위해 파일 이름을 한 번에 큰 리스트로 반환하는 대신, 순회하면서 하나씩 yield하는 것을 선호하는 개발자들이 많습니다. <code>os.scandir()</code>는 이러한 요구도 충족시킵니다.</p>
<p>따라서 <code>scandir()</code> 이터레이터 함수를 직접 호출하는 기능을 제공할 뿐만 아니라, Python의 기존 <code>os.walk()</code> 함수도 엄청나게 가속화될 수 있습니다.</p>
<h3>구현 (Implementation)</h3>
<p>이 제안의 구현은 Ben Hoyt(초기 버전)와 Tim Golden(C 확장 모듈에 많은 도움을 줌)에 의해 작성되었습니다. GitHub의 <code>benhoyt/scandir</code>에서 확인할 수 있습니다. 이 모듈은 이미 여러 곳에서 사용 및 테스트되었으며("Use in the wild" 섹션 참조), 단순한 개념 증명(proof-of-concept) 이상입니다. 그러나 표준 라이브러리에 포함되기 전에 더 많은 정리와 철저한 테스트, 그리고 <code>posixmodule.c</code>와의 통합이 필요했습니다.</p>
<h3>제안의 구체적인 내용 (Specifics of proposal)</h3>
<h4><code>os.scandir()</code></h4>
<p>이 PEP는 표준 라이브러리의 <code>os</code> 모듈에 단일 함수 <code>scandir</code>를 추가할 것을 제안합니다. 이 함수는 단일의 선택적 문자열 인수를 받습니다.</p>
<pre><code class="language-python">scandir(path='.') -> generator of DirEntry objects
</code></pre>
<p><code>listdir</code>와 마찬가지로, <code>scandir</code>는 운영 체제의 디렉토리 순회 시스템 호출을 사용하여 주어진 <code>path</code> 내의 파일 이름을 가져오지만, 두 가지 면에서 <code>listdir</code>와 다릅니다.</p>
<ol>
<li><strong><code>DirEntry</code> 객체 반환:</strong> 단순히 파일 이름 문자열을 반환하는 대신, 파일 이름 문자열을 보유하고 운영 체제가 반환했을 수 있는 추가 데이터에 접근할 수 있는 간단한 메서드를 제공하는 경량 <code>DirEntry</code> 객체를 반환합니다.</li>
<li><strong>제너레이터 반환:</strong> 전체 리스트를 즉시 반환하는 대신 제너레이터를 반환하므로, <code>scandir</code>는 진정한 이터레이터 역할을 합니다.</li>
</ol>
<p><code>scandir()</code>는 <code>path</code> 내의 각 파일 및 하위 디렉토리에 대해 <code>DirEntry</code> 객체를 yield합니다. <code>listdir</code>와 마찬가지로 <code>'.'</code> 및 <code>'..'</code> 의사(pseudo) 디렉토리는 건너뛰고, 항목들은 시스템 의존적인 순서로 yield됩니다. 각 <code>DirEntry</code> 객체는 다음 속성 및 메서드를 가집니다.</p>
<ul>
<li><code>name</code>: 엔트리의 파일 이름 (상대 경로). <code>os.listdir()</code>의 반환 값에 해당합니다.</li>
<li><code>path</code>: 엔트리의 전체 경로 이름 (반드시 절대 경로는 아님). <code>os.path.join(scandir_path, entry.name)</code>와 동일합니다.</li>
<li><code>inode()</code>: 엔트리의 inode 번호를 반환합니다. 결과는 <code>DirEntry</code> 객체에 캐시됩니다.</li>
<li><code>is_dir(*, follow_symlinks=True)</code>: <code>pathlib.Path.is_dir()</code>와 유사하지만, 반환 값은 <code>DirEntry</code> 객체에 캐시됩니다. 대부분의 경우 시스템 호출이 필요하지 않습니다. <code>follow_symlinks</code>가 <code>False</code>이면 심볼릭 링크를 따르지 않습니다.</li>
<li><code>is_file(*, follow_symlinks=True)</code>: <code>pathlib.Path.is_file()</code>와 유사하지만, 반환 값은 <code>DirEntry</code> 객체에 캐시됩니다. 대부분의 경우 시스템 호출이 필요하지 않습니다. <code>follow_symlinks</code>가 <code>False</code>이면 심볼릭 링크를 따르지 않습니다.</li>
<li><code>is_symlink()</code>: <code>pathlib.Path.is_symlink()</code>와 유사하지만, 반환 값은 <code>DirEntry</code> 객체에 캐시됩니다. 대부분의 경우 시스템 호출이 필요하지 않습니다.</li>
<li><code>stat(*, follow_symlinks=True)</code>: <code>os.stat()</code>와 같지만, 반환 값은 <code>DirEntry</code> 객체에 캐시됩니다. Windows에서는 시스템 호출이 필요하지 않습니다 (심볼릭 링크 제외). <code>follow_symlinks</code>가 <code>False</code>이면 심볼릭 링크를 따르지 않습니다 (<code>os.lstat()</code>와 유사).</li>
</ul>
<p>모든 메서드는 경우에 따라 시스템 호출을 수행할 수 있으며, 따라서 <code>OSError</code>를 발생시킬 수 있습니다. <code>DirEntry</code>의 속성 및 메서드 이름은 일관성을 위해 가능한 한 새로운 <code>pathlib</code> 모듈의 이름과 동일하게 선택되었습니다.</p>
<h4><code>os.walk()</code></h4>
<p>이 제안의 일환으로, <code>os.walk()</code>도 <code>listdir()</code>와 <code>os.path.isdir()</code> 대신 <code>scandir()</code>를 사용하도록 수정됩니다. 이는 <code>os.walk()</code>의 속도를 크게 향상시킬 것입니다 (앞서 언급했듯이 시스템에 따라 2배에서 20배).</p>
<h4>예시 (Examples)</h4>
<p><strong>1. 하위 디렉토리 순회:</strong></p>
<pre><code class="language-python">import os

def subdirs(path):
    """주어진 경로 아래의 '.'으로 시작하지 않는 디렉토리 이름을 yield합니다."""
    for entry in os.scandir(path):
        if not entry.name.startswith('.') and entry.is_dir():
            yield entry.name
</code></pre>
<p>이 <code>subdirs()</code> 함수는 Windows와 POSIX 시스템 모두에서 <code>os.listdir()</code> 및 <code>os.path.isdir()</code>를 사용하는 것보다 <code>scandir</code>를 사용하면 특히 중간 또는 대규모 디렉토리에서 훨씬 빠릅니다.</p>
<p><strong>2. 디렉토리 트리의 전체 파일 크기 가져오기:</strong></p>
<pre><code class="language-python">import os
import sys

def get_tree_size(path):
    """주어진 경로 및 하위 디렉토리의 파일 총 크기를 반환합니다."""
    total = 0
    for entry in os.scandir(path):
        try:
            is_dir = entry.is_dir(follow_symlinks=False)
        except OSError as error:
            print('Error calling is_dir():', error, file=sys.stderr)
            continue

        if is_dir:
            total += get_tree_size(entry.path)
        else:
            try:
                total += entry.stat(follow_symlinks=False).st_size
            except OSError as error:
                print('Error calling stat():', error, file=sys.stderr)
    return total
</code></pre>
<p>이 예시는 <code>is_dir()</code>의 <code>follow_symlinks</code> 매개변수 사용을 보여줍니다. 이와 같은 재귀 함수에서는 링크를 따라가지 않는 것이 일반적입니다. <code>get_tree_size()</code>는 Windows에서 엄청난 속도 향상을 얻지만, POSIX 시스템에서는 디렉토리 순회 함수가 크기 정보를 반환하지 않으므로 이 함수에서는 속도 향상이 없습니다. 예시의 두 번째 버전은 <code>OSError</code> 예외 처리를 추가하여 더 견고한 코드를 보여줍니다.</p>
<h4>캐싱에 대한 참고 사항 (Notes on caching)</h4>
<p><code>DirEntry</code> 객체는 상대적으로 간단합니다. <code>name</code>과 <code>path</code> 속성은 항상 캐시되며, <code>is_X</code> 및 <code>stat</code> 메서드는 해당 값을 캐시합니다 (Windows에서는 <code>FindFirstFile</code>/<code>FindNextFile</code>을 통해 즉시, POSIX 시스템에서는 첫 사용 시 <code>stat</code> 시스템 호출을 통해). 시스템에서 값을 다시 가져오지 않습니다.</p>
<p>이러한 이유로 <code>DirEntry</code> 객체는 순회 후 사용하고 버려지도록 의도되었으며, 오래 지속되는 데이터 구조에 저장하여 메서드를 계속해서 호출하는 용도가 아닙니다. 개발자가 "새로 고침" 동작을 원한다면 <code>pathlib.Path</code> 객체를 사용하거나, 매번 운영 체제에서 신선한 데이터를 가져오는 일반 <code>os.stat()</code> 또는 <code>os.path.getsize()</code> 함수를 호출해야 합니다.</p>
<h4>예외 처리에 대한 참고 사항 (Notes on exception handling)</h4>
<p><code>DirEntry.is_X()</code> 및 <code>DirEntry.stat()</code>는 속성이나 프로퍼티가 아닌 명시적인 메서드로, 저렴한 작업이 아닐 수 있으며 (자주 그렇지만) 시스템 호출을 수행할 수 있음을 명확히 합니다. 결과적으로 이러한 메서드는 <code>OSError</code>를 발생시킬 수 있습니다.</p>
<p>예를 들어, <code>DirEntry.stat()</code>는 POSIX 기반 시스템에서 항상 시스템 호출을 수행하며, <code>DirEntry.is_X()</code> 메서드는 <code>readdir()</code>가 <code>d_type</code>을 지원하지 않거나 <code>d_type</code>이 <code>DT_UNKNOWN</code> 값을 반환하는 경우 (특정 조건 또는 파일 시스템에서 발생할 수 있음) 시스템 호출을 수행할 수 있습니다.</p>
<p>일반적으로 이는 문제가 되지 않습니다. 예를 들어, 표준 라이브러리에 정의된 <code>os.walk()</code>는 <code>listdir()</code> 호출 주변의 오류만 catch합니다. <code>DirEntry.is_X</code> 메서드의 예외 발생 동작은 <code>pathlib</code>와 일치하므로 (권한 또는 기타 치명적인 오류의 경우에만 <code>OSError</code>를 발생시키고, 경로가 존재하지 않거나 손상된 심볼릭 링크인 경우 <code>False</code>를 반환함), <code>is_X()</code> 호출 주변에서 오류를 catch할 필요가 없는 경우가 많습니다.</p>
<p>그러나 사용자가 세밀한 오류 처리를 필요로 하는 경우, 모든 메서드 호출 주변에서 <code>OSError</code>를 catch하고 적절하게 처리하는 것이 바람직할 수 있습니다.</p>
<h3>지지 (Support)</h3>
<p>GitHub의 <code>scandir</code> 모듈은 여러 개발자에게서 포크되어 사용되었으며, <code>python-dev</code> 및 <code>python-ideas</code> 메일링 리스트에서도 <code>scandir</code>와 유사한 함수에 대한 직접적인 지지가 있었습니다. 주요 Python 개발자들 (Alyssa Coghlan, Tim Golden, Christian Heimes, Gregory P. Smith)이 이 제안에 긍정적인 의견을 표명했습니다. Guido van Rossum 또한 <code>scandir()</code>를 Python 3.5에 추가하는 것에 긍정적인 입장을 보였습니다.</p>
<h3>실제 사용 사례 (Use in the wild)</h3>
<p><code>scandir</code> 구현은 유용하지만 "베타"로 명확히 표시되어 실제 사용량이 어느 정도인지는 불확실합니다. 하지만 Ben Hoyt는 이를 사용한 사람들의 여러 보고를 받았습니다. 예를 들어, 대용량 디렉토리 처리 시 <code>getdents</code>를 수정할 필요가 없게 되었거나, <code>os.listdir()</code> 대비 급진적인 성능 향상을 경험했다는 보고가 있습니다. 일부 사용자는 PyPI 패키지를 요청하여 현재 <code>scandir</code> PyPI 패키지가 존재합니다. 이 PEP가 <code>os.walk()</code>의 속도를 크게 향상시키기 때문에 수많은 개발자와 스크립트, 그리고 많은 프로덕션 코드가 혜택을 받을 것입니다.</p>
<h3>거부된 아이디어 (Rejected ideas)</h3>
<ul>
<li><strong>이름:</strong> <code>iterdir()</code>가 또 다른 유력한 이름 후보였지만, <code>scandir()</code>는 반환하는 객체가 (DirEntry 객체 vs 파일 이름 문자열) 상당히 다르기 때문에 이름의 차이로 이를 반영하는 것이 더 적절하다고 판단되었습니다.</li>
<li><strong>와일드카드 지원:</strong> Windows의 <code>FindFirstFile</code>/<code>FindNextFile</code>이 와일드카드 (예: <code>*.jpg</code>)를 지원하므로 <code>scandir</code> 함수에 <code>windows_wildcard</code> 인수를 포함하는 것이 처음에는 좋은 아이디어로 여겨졌습니다. 그러나 Windows 와일드카드 매칭 규칙이 잘 문서화되어 있지 않고 까다로워 교차 플랫폼으로 에뮬레이션하기 어렵기 때문에 최종적으로는 거부되었습니다.</li>
<li><strong>메서드가 기본적으로 심볼릭 링크를 따르지 않도록 함:</strong> 초기에는 <code>DirEntry</code> 메서드가 심볼릭 링크를 따르지 않았지만, Victor Stinner의 설득력 있는 주장에 따라 기본적으로 심볼릭 링크를 따르는 것이 더 좋다고 결정되었습니다. 이는 일반적인 사용 사례와 기존 <code>os.path.isdir()</code> 및 <code>pathlib.Path.is_dir()</code>의 선례에 부합하기 때문입니다.</li>
<li><strong><code>DirEntry</code> 속성이 프로퍼티가 되도록 함:</strong> <code>is_X()</code> 및 <code>stat()</code>가 프로퍼티였다면 "매우 저렴하거나 무료"인 작업을 나타내는 데 더 좋았을 수 있습니다. 그러나 <code>stat()</code>는 POSIX 시스템에서 OS 호출을 필요로 하고, <code>is_dir()</code> 등도 특정 조건에서 OS 호출을 수행할 수 있습니다. 또한, 속성 접근에서 <code>AttributeError</code>가 아닌 <code>OSError</code>가 발생하는 것은 혼란스러울 수 있으므로 메서드로 유지하는 것이 더 낫다고 판단되었습니다.</li>
<li><strong><code>DirEntry</code> 필드가 "정적" 속성 전용 객체가 되도록 함:</strong> <code>DirEntry</code> 객체가 <code>name</code>, <code>path</code>, <code>is_X</code>와 같은 정적 속성만 가지고 <code>st_X</code> 속성은 Windows에서만 존재하는 "OS 기능에 대한 얇은 래퍼" 솔루션이 제안되었습니다. 그러나 <code>is_dir</code>와 같은 속성이 POSIX에서 항상 존재하지 않으며, <code>hasattr()</code>로 확인하고 필요하면 <code>os.stat()</code>을 호출해야 하므로 사용하기 더 어려운 API가 될 것이라는 문제가 있었습니다.</li>
<li><strong><code>DirEntry</code> 필드가 <code>ensure_lstat</code> 옵션이 있는 정적 객체가 되도록 함:</strong> <code>DirEntry.is_X</code> 및 <code>DirEntry.lstat_result</code>를 프로퍼티로 만들고, <code>scandir()</code> 호출 시 <code>ensure_lstat=True</code>가 지정된 경우에만 <code>lstat_result</code>를 순회 시 채우는 옵션도 제안되었습니다. 이는 <code>stat</code> 결과를 쉽게 얻을 수 있다는 장점이 있지만, 순회 중에 <code>stat()</code>가 호출되어 <code>OSError</code>를 발생시킬 수 있어 세밀한 오류 처리가 복잡해진다는 단점이 있었습니다. 또한, <code>os.scandir()</code>는 코드를 빠르게 만들기 위해 작성되었는데, POSIX에서 항상 <code>os.lstat()</code>를 호출하는 것은 속도 향상을 가져오지 않습니다.</li>
<li><strong>반환 값이 <code>(name, stat_result)</code> 두 개의 튜플이 되도록 함:</strong> 새로운 유형을 도입하지 않는다는 장점이 있었지만, POSIX 기반 시스템에서는 <code>stat_result</code>가 부분적으로만 채워져 실제 <code>stat_result</code> 객체와 다르다는 점을 문서화해야 하는 문제가 있었습니다. 또한, Python은 속성과 메서드를 가진 적절한 객체를 잘 지원하므로, 두 개의 튜플보다 더 합리적이고 간단한 API를 제공합니다.</li>
<li><strong>반환 값이 오버로드된 <code>stat_result</code> 객체가 되도록 함:</strong> <code>name</code> 및 <code>path</code> 속성을 가진 오버로드된 <code>stat_result</code> 객체를 반환하는 것도 논의되었지만, 이는 이상한 오버로딩이며, 대부분의 <code>stat_result</code> 정보가 POSIX 시스템에서 <code>readdir()</code>에 의해 가져와지지 않는다는 문제가 있었습니다.</li>
<li><strong>반환 값이 <code>pathlib.Path</code> 객체가 되도록 함:</strong> <code>scandir()</code>가 <code>pathlib.Path</code> 인스턴스를 반환하는 것이 좋은 아이디어처럼 보였지만, <code>pathlib.Path</code>의 <code>is_X()</code> 및 <code>stat()</code> 함수는 명시적으로 캐시되지 않는 반면, <code>scandir</code>는 원본 디렉토리 순회 시스템 호출에서 값을 반환하므로 캐시해야 합니다. <code>scandir</code>가 반환하는 <code>pathlib.Path</code> 인스턴스가 <code>stat</code> 값을 캐시하고 일반 <code>pathlib.Path</code> 객체는 그렇지 않다면 혼란스러울 것이기 때문에 Guido van Rossum은 <code>pathlib.Path</code> 객체의 <code>stat</code> 캐싱을 명시적으로 거부했습니다.</li>
</ul>
<h3>잠재적 개선 사항 (Possible improvements)</h3>
<p><code>scandir</code>에 대한 몇 가지 잠재적 개선 사항은 다음과 같습니다.</p>
<ul>
<li><code>Py_BEGIN_ALLOW_THREADS</code> 블록 당 <code>readdir</code>/<code>FindNextFile</code>을 약 50번 호출하여 C 확장 모듈에 더 오래 머물게 함으로써 <code>scandir</code>의 속도를 더 높일 수 있습니다.</li>
<li><code>scandir</code>는 각 순회마다 메모리 할당 비용을 피하기 위해 프리 리스트(free list)를 사용할 수 있습니다.</li>
</ul>
<h3>이전 논의 (Previous discussion)</h3>
<p>이 PEP와 <code>scandir</code>에 대한 논의는 2012년 11월 <code>python-ideas</code> 스레드에서 <code>os.walk()</code> 속도 향상에 대한 Ben Hoyt의 제안으로 시작되었습니다. 이후 <code>Python Issue 11406</code>, <code>python-dev</code> 스레드를 통해 <code>DirEntry</code>와 같은 객체 반환, <code>pathlib</code> 모듈과의 상호 작용, PEP 471의 API 세부 사항, 그리고 <code>DirEntry</code> 메서드가 심볼릭 링크를 기본적으로 따를지 여부 등에 대한 광범위한 논의가 이루어졌습니다.</p>
<h3>저작권 (Copyright)</h3>
<p>이 문서는 퍼블릭 도메인에 공개되었습니다.</p>
<hr>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1214,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 471 - os.scandir() function – a better and faster directory iterator"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-26 22:18:05+0900","children":"2025년 9월 26일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 26일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
