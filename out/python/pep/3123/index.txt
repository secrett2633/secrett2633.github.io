3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-1a135130af3e1cae.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","877","static/chunks/app/%5B...slug%5D/page-90448483657abf9e.js"],""]
4:["slug","python/pep/3123","c"]
0:["8N6icDw00Cy0kKVlExSq2",[[["",{"children":[["slug","python/pep/3123","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"3123\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/3123","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T18d2,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-3123/">PEP 3123 - Making PyObject_HEAD conform to standard C</a></p>
<p><strong>상태:</strong> Final | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 27-Apr-2007</p>
</blockquote>
<h1>PEP 3123 – PyObject_HEAD를 표준 C에 맞게 변경</h1>
<h2>개요 (Abstract)</h2>
<p>Python은 현재 <code>PyObject_HEAD</code> 사용에서 C 표준에 정의되지 않은 동작에 의존하고 있습니다. 이 PEP는 이러한 의존성을 표준 C에 부합하도록 변경할 것을 제안합니다.</p>
<h2>배경 (Rationale)</h2>
<p>표준 C는 객체가 해당 타입의 포인터를 통해서만 접근되어야 하며, 몇 가지 예외를 제외하고 다른 모든 접근은 정의되지 않은 동작(undefined behavior)으로 간주합니다. 특히, 다음 코드는 정의되지 않은 동작을 유발합니다:</p>
<pre><code class="language-c">struct FooObject{
    PyObject_HEAD
    int data;
};

PyObject *foo(struct FooObject*f){
    return (PyObject*)f;
}

int bar(){
    struct FooObject *f = malloc(sizeof(struct FooObject));
    struct PyObject *o = foo(f);
    f->ob_refcnt = 0;
    o->ob_refcnt = 1;
    return f->ob_refcnt;
}
</code></pre>
<p>여기서 문제는 저장 공간이 <code>struct PyObject</code>로도, <code>struct FooObject</code>로도 접근된다는 점입니다.</p>
<p>역사적으로 컴파일러들은 이 코드에 대해 아무런 문제가 없었지만, 최신 컴파일러들은 이 조항을 최적화 기회로 활용합니다. 즉, <code>f->ob_refcnt</code>와 <code>o->ob_refcnt</code>가 동일한 메모리를 참조할 수 없다고 판단하여, 반환문에서 <code>ob_refcnt</code> 값을 전혀 가져올 필요 없이 함수가 0을 반환해야 한다고 결론 내립니다. GCC의 경우, Python은 이 문제를 해결하기 위해 <code>-fno-strict-aliasing</code>을 사용하고 있으며, 다른 컴파일러에서는 정의되지 않은 동작이 발생할 수 있습니다. 심지어 GCC에서도 <code>-fno-strict-aliasing</code>을 사용하면 생성된 코드를 불필요하게 비최적화(pessimize)할 수 있습니다.</p>
<h2>상세 내용 (Specification)</h2>
<p>표준 C는 Python의 경우를 지원하기 위해 특별히 고안된 한 가지 예외 조항을 가지고 있습니다. 구조체(struct) 타입의 값은 첫 번째 필드에 대한 포인터를 통해 접근될 수도 있습니다. 예를 들어, 구조체가 <code>int</code>로 시작하는 경우, <code>struct *</code>는 <code>int *</code>로 캐스팅될 수 있어 첫 번째 필드에 <code>int</code> 값을 쓸 수 있습니다.</p>
<p>Python의 경우, <code>PyObject_HEAD</code>와 <code>PyObject_VAR_HEAD</code>는 더 이상 모든 필드를 나열하지 않고, <code>PyObject</code> / <code>PyVarObject</code> 타입의 단일 필드를 나열하도록 변경될 것입니다.</p>
<pre><code class="language-c">typedef struct _object {
    _PyObject_HEAD_EXTRA
    Py_ssize_t ob_refcnt;
    struct _typeobject *ob_type;
} PyObject;

typedef struct {
    PyObject ob_base;
    Py_ssize_t ob_size;
} PyVarObject;

#define PyObject_HEAD PyObject ob_base;
#define PyObject_VAR_HEAD PyVarObject ob_base;
</code></pre>
<p>고정 크기 구조체로 정의된 타입은 이제 <code>PyObject</code>를 첫 번째 필드로 포함하고, 가변 크기 객체(variable-sized objects)는 <code>PyVarObject</code>를 첫 번째 필드로 포함하게 됩니다. 예시:</p>
<pre><code class="language-c">typedef struct {
    PyObject ob_base;
    PyObject *start, *stop, *step;
} PySliceObject;

typedef struct {
    PyVarObject ob_base;
    PyObject **ob_item;
    Py_ssize_t allocated;
} PyListObject;
</code></pre>
<p>위의 <code>PyObject_HEAD</code> 정의는 규범적(normative)이므로, 확장 모듈(extension module) 개발자는 매크로를 사용하거나 <code>ob_base</code> 필드를 자신의 구조체에 명시적으로 포함할 수 있습니다.</p>
<p>관례상, 기본 필드(base field)는 <code>ob_base</code>라고 불려야 합니다. 그러나 <code>ob_refcnt</code> 및 <code>ob_type</code>에 대한 모든 접근은 객체 포인터를 <code>PyObject*</code>로 캐스팅해야 하며(포인터가 이미 해당 타입을 가짐이 알려진 경우 제외), 해당 접근자(accessor) 매크로를 사용해야 합니다. <code>ob_type</code>, <code>ob_refcnt</code>, <code>ob_size</code>에 대한 접근을 단순화하기 위해 다음 매크로가 추가됩니다:</p>
<pre><code class="language-c">#define Py_TYPE(o) (((PyObject*)(o))->ob_type)
#define Py_REFCNT(o) (((PyObject*)(o))->ob_refcnt)
#define Py_SIZE(o) (((PyVarObject*)(o))->ob_size)
</code></pre>
<p>예를 들어, 다음 코드 블록:</p>
<pre><code class="language-c">#define PyList_CheckExact(op) ((op)->ob_type == &#x26;PyList_Type)
return func->ob_type->tp_name;
</code></pre>
<p>는 다음과 같이 변경되어야 합니다:</p>
<pre><code class="language-c">#define PyList_CheckExact(op) (Py_TYPE(op) == &#x26;PyList_Type)
return Py_TYPE(func)->tp_name;
</code></pre>
<p>타입 객체(type objects)의 초기화에 있어, 현재의 시퀀스:</p>
<pre><code class="language-c">PyObject_HEAD_INIT(NULL)
0, /* ob_size */
</code></pre>
<p>는 부정확해지므로, 다음으로 대체되어야 합니다:</p>
<pre><code class="language-c">PyVarObject_HEAD_INIT(NULL, 0)
</code></pre>
<h2>Python 2.6과의 호환성 (Compatibility with Python 2.6)</h2>
<p>Python 2.6과 Python 3.0 모두에서 컴파일되는 모듈을 지원하기 위해, <code>Py_*</code> 매크로는 Python 2.6에 추가됩니다. <code>Py_INCREF</code> 및 <code>Py_DECREF</code> 매크로는 인수를 <code>PyObject *</code>로 캐스팅하도록 변경될 것이며, 이를 통해 모듈 개발자는 Python 2.6용으로 설계된 모듈에서도 <code>ob_base</code> 필드를 명시적으로 선언할 수 있습니다.</p>
<h2>저작권 (Copyright)</h2>
<p>이 문서는 퍼블릭 도메인에 공개되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1318,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Final] PEP 3123 - Making PyObject_HEAD conform to standard C"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 14:28:28+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
