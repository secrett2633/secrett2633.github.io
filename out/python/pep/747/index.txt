3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-19cfc001fdac3337.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-51594f997fc19690.js"],""]
4:["slug","python/pep/747","c"]
0:["FeyCvJug7In7AgUZlfHUx",[[["",{"children":[["slug","python/pep/747","c"],{"children":["__PAGE__?{\"slug\":[\"python\",\"pep\",\"747\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","python/pep/747","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T337e,<blockquote>
<p><strong>원문 링크:</strong> <a href="https://peps.python.org/pep-0747/">PEP 747 - Annotating Type Forms</a></p>
<p><strong>상태:</strong> Draft | <strong>유형:</strong> Standards Track | <strong>작성일:</strong> 27-May-2024</p>
</blockquote>
<p>PEP 747 – 타입 폼 어노테이션 (Annotating Type Forms)</p>
<h2>요약 (Abstract)</h2>
<p>PEP 747은 Python 타입 시스템에서 타입을 명시하는 표준화된 방법인 "타입 표현식(type expression)"에 의해 생성되는 "타입 폼(type form) 객체"를 정확하게 어노테이션(annotation)할 수 있도록 <code>typing.TypeForm</code>이라는 새로운 특수 폼(special form)을 도입합니다. 현재는 <code>object</code>와 같이 너무 광범위한 타입을 사용해야 하여 타입 안전성(type safety)이 저하되고 일부 활용 사례가 불가능했습니다. 이 PEP는 Python 문법을 변경하지 않으며, <code>TypeForm</code>의 올바른 사용은 런타임이 아닌 타입 체커(type checker)에 의해 강제됩니다.</p>
<h2>도입 배경 (Motivation)</h2>
<p>타입 표현식은 런타임에 평가될 때, <code>types.UnionType</code>, <code>builtins.str</code>, <code>types.GenericAlias</code>, <code>typing.TypeAliasType</code> 등과 같은 다양한 타입 폼 객체를 생성합니다. 이러한 객체들을 다루는 함수를 어노테이션할 방법이 없어, 개발자들은 <code>object</code>와 같은 포괄적인 타입을 사용해야 했습니다. 이는 타입 체커가 함수의 의도를 정확히 이해하지 못하게 하여, 런타임 타입 검사, 인트로스펙션(introspection), 메타프로그래밍과 같은 다양한 활용 사례를 어렵게 만들었습니다.</p>
<p><code>TypeForm</code>은 이러한 한계를 해결하여, 함수가 타입 폼 객체를 받아들이고 이를 다룰 수 있음을 타입 체커에게 명확히 전달할 수 있게 합니다. 예를 들어, <code>trycast</code> 함수는 특정 값의 할당 가능성(assignability)을 검사하고, <code>TypeIs</code>와 함께 사용하여 커스텀 타입 좁히기(type narrowing) 동작을 정의할 수 있습니다.</p>
<h3>왜 <code>type[C]</code>를 사용하지 않는가? (Why not type[C]?)</h3>
<p><code>type[C]</code>는 클래스 객체(예: <code>int</code>, <code>str</code>)만 허용하며, <code>Literal['hi']</code>나 <code>str | None</code>과 같은 다양한 타입 폼 객체들을 처리할 수 없습니다. <code>TypeForm</code>은 <code>type[C]</code>가 지원하지 않는 이러한 타입 표현식도 모두 포괄합니다.</p>
<h3><code>TypeForm</code> 활용 사례 (TypeForm use cases)</h3>
<p>다양한 Python 라이브러리에서 <code>TypeForm</code>의 이점을 얻을 수 있는 함수들이 확인되었습니다.</p>
<ul>
<li><strong>할당 가능성 검사기 (Assignability checkers):</strong> 값이 특정 타입에 할당 가능한지 판단합니다.
<ul>
<li>예시: <code>beartype.is_bearable</code>, <code>trycast.isassignable</code>, <code>typeguard.check_type</code></li>
</ul>
</li>
<li><strong>변환기 (Converters):</strong> 값이 특정 타입에 할당 가능하거나 강제 변환(coercible) 가능할 경우, 해당 타입으로 값을 변환합니다.
<ul>
<li>예시: <code>cattrs.BaseConverter.structure</code>, <code>trycast.checkcast</code>, <code>typedload.load</code>, <code>pydantic.TypeAdapter(T).validate_python</code></li>
</ul>
</li>
<li><strong>타입이 지정된 필드 정의 (Typed field definitions):</strong>
<ul>
<li>예시: <code>attrs.make_class</code>, <code>dataclasses.make_dataclass</code></li>
</ul>
</li>
</ul>
<h2>명세 (Specification)</h2>
<p>타입 표현식이 런타임에 평가될 때의 결과값은 타입 폼 객체(type form object)입니다. 이 값은 타입 표현식에 제공된 정보를 인코딩하며, 해당 타입 표현식으로 설명되는 타입을 나타냅니다.</p>
<p><code>TypeForm</code>은 타입 표현식에 사용될 때, 일련의 타입 폼 객체를 설명하는 특수 폼입니다. 단일 타입 인수를 받으며, 이 인수는 유효한 타입 표현식이어야 합니다. <code>TypeForm[T]</code>는 타입 <code>T</code> 또는 <code>T</code>에 할당 가능한 타입을 나타내는 모든 타입 폼 객체 집합을 설명합니다. 예를 들어, <code>TypeForm[str | None]</code>은 <code>str | None</code>에 할당 가능한 타입을 나타내는 모든 타입 폼 객체를 설명합니다.</p>
<pre><code class="language-python">ok1: TypeForm[str | None] = str | None # OK
ok2: TypeForm[str | None] = str # OK
ok3: TypeForm[str | None] = None # OK
ok4: TypeForm[str | None] = Literal[None] # OK
ok5: TypeForm[str | None] = Optional[str] # OK
ok6: TypeForm[str | None] = "str | None" # OK
ok7: TypeForm[str | None] = Any # OK
err1: TypeForm[str | None] = str | int # Error
err2: TypeForm[str | None] = list[str | None] # Error
</code></pre>
<p><code>TypeForm[object]</code>는 Python 타입 시스템의 모든 타입이 <code>object</code>에 할당 가능하므로, 모든 유효한 타입 표현식에서 평가된 모든 타입 폼 객체 집합을 설명합니다. <code>TypeForm[Any]</code>는 타입 인수가 정적으로 알려지지 않았지만 유효한 타입 폼 객체인 <code>TypeForm</code> 타입을 설명합니다. 타입 인수가 제공되지 않은 <code>TypeForm</code>은 <code>TypeForm[Any]</code>와 동일합니다.</p>
<h3>암시적 <code>TypeForm</code> 평가 (Implicit TypeForm Evaluation)</h3>
<p>정적 타입 체커는 유효한 타입 표현식을 만날 때, 해당 타입이 <code>T</code>에 할당 가능하면 이 표현식의 평가된 타입이 <code>TypeForm[T]</code>에 할당 가능하다고 간주해야 합니다.</p>
<h3>유효한 타입 표현식 (Valid Type Expressions)</h3>
<p>유효한 타입 표현식은 타입 표현식에 대한 모든 구문(syntactic), 의미(semantic), 및 문맥(contextual) 규칙을 따르는 표현식입니다. 유효하지 않은 타입 표현식은 <code>TypeForm</code> 타입으로 평가되어서는 안 됩니다.</p>
<h3>명시적 <code>TypeForm</code> 평가 (Explicit TypeForm Evaluation)</h3>
<p><code>TypeForm</code>은 단일 인수를 받아 호출될 수 있는 함수로도 작동합니다. 타입 체커는 이 인수가 유효한 타입 표현식인지 검증해야 합니다. 런타임에는 <code>TypeForm(...)</code> 호출 가능 객체는 단순히 전달된 값을 반환합니다.</p>
<pre><code class="language-python">x1 = TypeForm(str | None)
reveal_type(v1) # Revealed type is "TypeForm[str | None]"
x2 = TypeForm("list[int]")
revealed_type(v2) # Revealed type is "TypeForm[list[int]]"
x3 = TypeForm('type(1)') # Error: invalid type expression
</code></pre>
<h3>할당 가능성 (Assignability)</h3>
<p><code>TypeForm</code>은 단일 타입 매개변수를 가지며 공변(covariant)입니다. 즉, <code>B</code>가 <code>A</code>에 할당 가능하면 <code>TypeForm[B]</code>는 <code>TypeForm[A]</code>에 할당 가능합니다.
<code>type[T]</code>는 <code>TypeForm[T]</code>의 서브타입(subtype)입니다.
<code>TypeForm</code>은 <code>object</code>의 서브타입이며, <code>object</code>의 모든 속성과 메서드를 가집니다.</p>
<h2>하위 호환성 (Backward Compatibility)</h2>
<p>이 PEP는 타입 표현식을 "값 표현식(value expression)" 문맥에서 평가할 때의 정적 타입 체커 동작을 명확히 합니다. <code>TypeForm</code> 타입 어노테이션이 없는 경우, 기존 타입 평가 동작은 유지되므로 하위 호환성 문제는 예상되지 않습니다.</p>
<h2>교육 방법 (How to Teach This)</h2>
<p><code>TypeForm[]</code>은 타입 폼 객체의 타입을 나타내는 방법이며, 이는 타입의 런타임 표현입니다. <code>TypeForm</code>은 <code>type</code>과 유사하지만, <code>type</code>은 <code>int</code>, <code>str</code>과 같은 클래스 객체에만 호환됩니다. 반면 <code>TypeForm</code>은 대괄호(<code>list[int]</code>), 유니온 연산자(<code>int | None</code>), 특수 폼(<code>Any</code>, <code>LiteralString</code> 등)을 포함하여 유효한 타입 표현식으로 표현될 수 있는 모든 타입 폼을 수용합니다.</p>
<p>대부분의 프로그래머는 <code>TypeForm</code> 매개변수를 받거나 <code>TypeForm</code> 값을 반환하는 자신만의 함수를 정의하지 않을 것입니다. 대신, 타입 폼 객체를 디코딩하고 사용하는 방법을 아는 라이브러리 함수에 전달하는 것이 더 일반적입니다.</p>
<p>예를 들어, <code>trycast</code> 라이브러리의 <code>isassignable</code> 함수는 Python의 내장 <code>isinstance</code> 함수처럼 특정 타입의 형태와 값이 일치하는지 확인하는 데 사용될 수 있습니다. <code>isassignable</code>은 어떤 타입 폼 객체도 입력으로 받습니다.</p>
<pre><code class="language-python">from trycast import isassignable
if isassignable(some_object, MyTypedDict): # OK: MyTypedDict is a TypeForm[]
    ...
</code></pre>
<h2>고급 예시 (Advanced Examples)</h2>
<h3>타입 폼 객체 인트로스펙션 (Introspecting type form objects)</h3>
<p><code>typing.get_origin</code> 및 <code>typing.get_args</code>와 같은 함수는 일부 타입 폼 객체의 구성 요소를 추출하는 데 사용될 수 있습니다. <code>isinstance</code> 및 <code>is</code>도 다른 종류의 타입 폼 객체를 구별하는 데 사용할 수 있습니다.</p>
<h3>타입 변수와 결합 (Combining with a type variable)</h3>
<p><code>TypeForm</code>은 동일한 함수 정의 내에서 다른 곳에 사용되는 타입 변수로 매개변수화될 수 있습니다.</p>
<h3><code>type</code>과 결합 (Combining with type)</h3>
<p><code>TypeForm</code>과 <code>type</code> 모두 동일한 함수 정의 내에서 동일한 타입 변수로 매개변수화될 수 있습니다.</p>
<h3><code>TypeIs</code> 및 <code>TypeGuard</code>와 결합 (Combining with TypeIs and TypeGuard)</h3>
<p>타입 변수는 <code>TypeIs</code> 또는 <code>TypeGuard</code> 반환 타입에도 사용될 수 있습니다.</p>
<h2>모든 <code>TypeForm</code>을 받아들일 때의 과제 (Challenges When Accepting All TypeForms)</h2>
<p>임의의 <code>TypeForm</code>을 입력으로 받는 함수는 다양한 타입 폼 객체를 지원해야 하므로 작성하기 쉽지 않습니다. 새로운 특수 폼은 각 Python 버전마다 도입되며, 각각에 대한 특별한 처리가 필요할 수 있습니다. <code>eval()</code>을 사용하여 따옴표로 묶인 전방 참조(forward references)를 해결하는 것은 안전하게 사용하기 어렵습니다. <code>IntTree = list[int | 'IntTree']</code>와 같은 재귀 타입은 해결하기 어렵습니다. 사용자 정의 제네릭 타입은 비표준 동작을 도입할 수 있습니다.</p>
<h2>참조 구현 (Reference Implementation)</h2>
<p>Pyright (버전 1.1.379)는 <code>TypeForm</code>의 참조 구현을 제공합니다. Mypy 기여자들도 <code>TypeForm</code> 지원을 구현할 계획입니다. 런타임 구성 요소의 참조 구현은 <code>typing_extensions</code> 모듈에 제공됩니다.</p>
<h2>거부된 아이디어 (Rejected Ideas)</h2>
<h3>다른 이름 (Alternative names)</h3>
<p><code>TypeObject</code>, <code>TypeType</code>, <code>TypeExpression</code>, <code>TypeExpr</code> 등 다른 이름들이 고려되었으나, 혼란을 야기할 수 있다는 이유로 거부되었습니다.</p>
<h3><code>type[C]</code>의 범위 확장 (Widen type[C] to support all type expressions)</h3>
<p><code>type</code>은 클래스 객체를 설명하도록 설계되었기 때문에, <code>type</code>의 의미를 임의의 타입 폼 객체를 나타내도록 확장하는 것은 하위 호환성 문제를 일으키고 클래스 객체로 제한된 값 집합을 설명하는 방법을 제거할 것입니다.</p>
<h3>임의의 어노테이션 표현식 허용 (Accept arbitrary annotation expressions)</h3>
<p><code>Final</code>과 같은 특정 특수 폼은 타입 한정자(type qualifier) 역할을 하며, 모든 어노테이션 문맥에서 사용될 수 있는 것은 아닙니다. <code>TypeForm</code>은 타입 표현식으로 제한되는데, 이는 할당 가능성 규칙이 타입에 대한 할당 가능성 규칙을 기반으로 하기 때문입니다. <code>Final[int]</code>가 <code>int</code>에 할당 가능한지 묻는 것은 무의미합니다.</p>
<h3>타입 폼에 대한 패턴 매칭 (Pattern matching on type forms)</h3>
<p>시그니처 내에서 타입 표현식의 내부를 패턴 매칭하려는 아이디어가 있었으나, 실제 사용 사례에서 모든 종류의 타입 표현식을 지원하는 것이 일반적이고, 제안된 구문이 충분히 정확하지 않다는 이유로 거부되었습니다.</p>
<blockquote>
<p>⚠️ <strong>알림:</strong> 이 문서는 AI를 활용하여 번역되었으며, 기술적 정확성을 보장하지 않습니다. 정확한 내용은 반드시 원문을 확인하시기 바랍니다.</p>
</blockquote>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1098,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Draft] PEP 747 - Annotating Type Forms"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-09-27 13:35:04+0900","children":"2025년 9월 27일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 9월 27일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Python",{"className":"page__taxonomy-item","children":["#","Python"]}],["$","span","PEP",{"className":"page__taxonomy-item","children":["#","PEP"]}],["$","span","Translation",{"className":"page__taxonomy-item","children":["#","Translation"]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
