3:I[9275,[],""]
5:I[1343,[],""]
6:I[9325,["231","static/chunks/231-87925b9c7247c60f.js","877","static/chunks/app/%5B...slug%5D/page-b477922462c615bf.js"],"default"]
7:I[231,["231","static/chunks/231-87925b9c7247c60f.js","877","static/chunks/app/%5B...slug%5D/page-b477922462c615bf.js"],""]
4:["slug","backend/django/prefetch-related","c"]
0:["ucidvW-jotunXd_-W91EG",[[["",{"children":[["slug","backend/django/prefetch-related","c"],{"children":["__PAGE__?{\"slug\":[\"backend\",\"django\",\"prefetch-related\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","backend/django/prefetch-related","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/fd3b6909b9405577.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
a:I[8573,["231","static/chunks/231-87925b9c7247c60f.js","877","static/chunks/app/%5B...slug%5D/page-b477922462c615bf.js"],"default"]
9:T12a6,<p>Django ORM에서 N+1 쿼리 문제를 해결하기 위한 <code>prefetch_related</code>에 대해 알아보겠습니다.</p>
<h2>prefetch_related란?</h2>
<p><code>prefetch_related</code>는 역참조 관계나 ManyToMany 관계에서 발생하는 N+1 쿼리 문제를 해결하는 Django ORM의 최적화 기능입니다.</p>
<h2>기본 사용법</h2>
<h3>1. 모델 정의</h3>
<pre><code class="language-python">from django.db import models

class Author(models.Model):
    name = models.CharField(max_length=100)
    
    def __str__(self):
        return self.name

class Book(models.Model):
    title = models.CharField(max_length=200)
    author = models.ForeignKey(Author, on_delete=models.CASCADE)
    published_date = models.DateField()
    
    def __str__(self):
        return self.title

class Category(models.Model):
    name = models.CharField(max_length=50)
    books = models.ManyToManyField(Book)
    
    def __str__(self):
        return self.name
</code></pre>
<h3>2. N+1 문제 발생</h3>
<pre><code class="language-python"># N+1 문제가 발생하는 코드
authors = Author.objects.all()
for author in authors:
    print(f"{author.name}: {author.book_set.count()}권의 책")
    # 각 author마다 추가 쿼리가 실행됨
</code></pre>
<h3>3. prefetch_related로 해결</h3>
<pre><code class="language-python"># prefetch_related로 최적화
authors = Author.objects.prefetch_related('book_set').all()
for author in authors:
    print(f"{author.name}: {author.book_set.count()}권의 책")
    # 추가 쿼리 없이 실행됨
</code></pre>
<h2>다양한 사용법</h2>
<h3>1. 중첩된 관계 prefetch</h3>
<pre><code class="language-python"># 중첩된 관계도 prefetch 가능
authors = Author.objects.prefetch_related(
    'book_set__category_set'
).all()

for author in authors:
    for book in author.book_set.all():
        for category in book.category_set.all():
            print(f"{author.name} - {book.title} - {category.name}")
</code></pre>
<h3>2. Prefetch 객체 사용</h3>
<pre><code class="language-python">from django.db.models import Prefetch

# 특정 조건으로 prefetch
authors = Author.objects.prefetch_related(
    Prefetch(
        'book_set',
        queryset=Book.objects.filter(published_date__year=2024)
    )
).all()
</code></pre>
<h3>3. select_related와 함께 사용</h3>
<pre><code class="language-python"># ForeignKey는 select_related, 역참조는 prefetch_related
books = Book.objects.select_related('author').prefetch_related('category_set').all()

for book in books:
    print(f"{book.title} by {book.author.name}")
    for category in book.category_set.all():
        print(f"  - {category.name}")
</code></pre>
<h2>성능 비교</h2>
<h3>Before (N+1 문제)</h3>
<pre><code class="language-python"># 쿼리 수: 1 + N (N은 author 수)
authors = Author.objects.all()
for author in authors:
    books = author.book_set.all()  # 각각 추가 쿼리
</code></pre>
<h3>After (prefetch_related 사용)</h3>
<pre><code class="language-python"># 쿼리 수: 2 (고정)
authors = Author.objects.prefetch_related('book_set').all()
for author in authors:
    books = author.book_set.all()  # 추가 쿼리 없음
</code></pre>
<h2>실제 사용 예제</h2>
<h3>1. 블로그 포스트와 댓글</h3>
<pre><code class="language-python">class Post(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    author = models.ForeignKey(User, on_delete=models.CASCADE)

class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    content = models.TextField()
    author = models.ForeignKey(User, on_delete=models.CASCADE)

# 최적화된 쿼리
posts = Post.objects.select_related('author').prefetch_related('comment_set').all()
</code></pre>
<h3>2. 쇼핑몰 상품과 리뷰</h3>
<pre><code class="language-python">class Product(models.Model):
    name = models.CharField(max_length=200)
    price = models.DecimalField(max_digits=10, decimal_places=2)

class Review(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    rating = models.IntegerField()
    comment = models.TextField()

# 최적화된 쿼리
products = Product.objects.prefetch_related('review_set').all()
</code></pre>
<h2>주의사항</h2>
<ol>
<li><strong>메모리 사용량 증가</strong>: 모든 관련 객체를 메모리에 로드</li>
<li><strong>적절한 사용</strong>: 실제로 사용하는 관계만 prefetch</li>
<li><strong>쿼리 분석</strong>: Django Debug Toolbar로 쿼리 수 확인</li>
</ol>
<p><code>prefetch_related</code>를 적절히 사용하면 Django 애플리케이션의 성능을 크게 향상시킬 수 있습니다!</p>
2:[["$","$L6",null,{}],["$","div",null,{"className":"initial-content","children":["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Django] prefetch_related"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-02-14 00:00:00+0900","children":"2025년 2월 14일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 2월 14일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":[["$","div",null,{"className":"page__taxonomy mb-4","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"카테고리"}],[["$","span","Django",{"className":"page__taxonomy-item","children":"Django"}]]]}],["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Django",{"className":"page__taxonomy-item","children":["#","Django"]}],["$","span","ORM",{"className":"page__taxonomy-item","children":["#","ORM"]}],["$","span","Performance",{"className":"page__taxonomy-item","children":["#","Performance"]}]]]}]]}]]}]}],["$","aside",null,{"className":"lg:w-80","children":["$","$La",null,{}]}]]}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그"}]]
1:null
