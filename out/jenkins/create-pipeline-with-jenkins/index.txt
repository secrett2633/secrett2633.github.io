3:I[9275,[],""]
5:I[1343,[],""]
6:I[9157,["231","static/chunks/231-c27e618569e042bc.js","157","static/chunks/157-19cfc001fdac3337.js","185","static/chunks/app/layout-c3e2e457f12fb6f6.js"],"default"]
7:I[231,["231","static/chunks/231-c27e618569e042bc.js","931","static/chunks/app/page-51594f997fc19690.js"],""]
4:["slug","jenkins/create-pipeline-with-jenkins","c"]
0:["FeyCvJug7In7AgUZlfHUx",[[["",{"children":[["slug","jenkins/create-pipeline-with-jenkins","c"],{"children":["__PAGE__?{\"slug\":[\"jenkins\",\"create-pipeline-with-jenkins\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","jenkins/create-pipeline-with-jenkins","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"ko","className":"no-js","children":[["$","head",null,{"children":[["$","meta",null,{"name":"msapplication-TileColor","content":"#ffc40d"}],["$","meta",null,{"name":"theme-color","content":"#ffffff"}],["$","script",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-NE2W3CFPNY"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              window.dataLayer = window.dataLayer || [];\n              function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date());\n              gtag('config', 'G-NE2W3CFPNY');\n            "}}]]}],["$","body",null,{"className":"__className_f367f3 layout--default","children":["$","div",null,{"className":"min-h-screen bg-gray-50","children":[["$","$L6",null,{}],["$","main",null,{"className":"initial-content","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-50","children":["$","div",null,{"className":"max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center","children":[["$","h1",null,{"className":"text-6xl font-bold text-primary-600 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-900 mb-4","children":"페이지를 찾을 수 없습니다"}],["$","p",null,{"className":"text-gray-600 mb-8","children":"요청하신 페이지가 존재하지 않거나 이동되었을 수 있습니다."}],["$","$L7",null,{"href":"/","className":"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors","children":"홈으로 돌아가기"}]]}]}],"notFoundStyles":[],"styles":null}]}],["$","div",null,{"id":"footer","className":"page__footer","children":["$","footer",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center text-gray-500 text-sm","children":["$","p",null,{"children":"© 2025 secrett2633. All rights reserved."}]}]}]}]]}]}]]}],null],[["$","div",null,{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"}]}],[],[]]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e975486d410ad4e9.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:T1adf,<h2><strong>들어가며</strong></h2>
<p>이전 포스트에서는 Jenkins를 설치하고 초기 설정을 완료했습니다.<br>
이번 포스트에서는 Jenkins 파이프라인을 사용하여 서비스를 배포하는 방법에 대해 다뤄보겠습니다.<br>
파이프라인을 통해 자동화된 배포를 설정하는 과정이므로, 실습을 통해 배포 과정을 간편하게 처리할 수 있습니다.</p>
<h2><strong>파이프라인 생성</strong></h2>
<ol>
<li>
<p>Jenkins 대시보드에서 <strong>새로운 Item 생성</strong> 버튼을 클릭합니다.</p>
</li>
<li>
<p>새로운 파이프라인을 생성하기 위해 <strong>Pipeline</strong>을 선택하고, 적당한 이름을 입력합니다.</p>
<p><img src="/assets/images/posts_img/devops/jenkins/create_pipeline.png" alt="파이프라인 생성"></p>
</li>
<li>
<p><strong>Pipeline script from SCM</strong> 버튼을 클릭하여, 소스 코드 관리(SCM)에서 Git을 선택합니다.</p>
</li>
<li>
<p><strong>Repository URL</strong>에 Git 저장소 주소를 입력하고, <strong>Branch Specifier</strong>에는 배포할 브랜치 이름을 입력합니다.</p>
</li>
<li>
<p><strong>Script Path</strong>에는 파이프라인을 정의할 파일 경로를 입력합니다. 기본적으로 <code>Jenkinsfile</code>이라는 파일을 사용합니다. 이 파일은 파이프라인의 정의 파일입니다.</p>
</li>
<li>
<p><strong>저장</strong> 버튼을 클릭하여 파이프라인을 생성합니다.</p>
</li>
</ol>
<p>위에서 언급한 <code>Jenkinsfile</code>은 Jenkins 파이프라인을 정의하는 중요한 파일입니다. 이 파일을 Git 저장소에 추가해두어야 Jenkins가 이를 읽고 실행할 수 있습니다.</p>
<h2><strong>Jenkinsfile 예시</strong></h2>
<p>Jenkinsfile을 작성하는 예시는 다음과 같습니다. 아래 코드를 Git 저장소의 <code>Jenkinsfile</code> 파일에 추가하세요.</p>
<pre><code class="language-Jenkinsfile">pipeline {
    agent any
    
    environment {
        DOCKER_COMPOSE_VERSION = '3.8'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build and Deploy') {
            steps {
                sh '''
                    docker compose down
                    docker compose pull
                    docker compose up --build -d
                '''
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    sleep 30  // 서비스 시작 대기
                    sh 'docker compose ps'
                }
            }
        }
    }
    
    post {
        failure {
            sh 'docker compose logs'
        }
    }
}
</code></pre>
<h3><strong>코드 설명</strong></h3>
<ul>
<li><strong><code>agent any</code></strong>: 모든 노드에서 실행 가능하다는 선언입니다.</li>
<li><strong><code>environment</code></strong>: 환경 변수를 정의하는 부분입니다. 여기서는 <code>DOCKER_COMPOSE_VERSION</code>을 설정합니다.</li>
<li><strong><code>stages</code></strong>: 파이프라인의 각 단계를 정의합니다.
<ul>
<li><strong>Checkout</strong>: 소스 코드 저장소에서 최신 코드를 가져옵니다.</li>
<li><strong>Build and Deploy</strong>: <code>docker-compose</code> 명령어로 서비스를 빌드하고 배포합니다.</li>
<li><strong>Health Check</strong>: 배포 후 서비스가 정상적으로 시작되었는지 확인합니다.</li>
</ul>
</li>
<li><strong><code>post</code></strong>: 파이프라인 실행 후 실패 시 추가 작업을 정의합니다. 예를 들어, 실패한 경우 로그를 출력하도록 설정했습니다.</li>
</ul>
<h3><strong>서비스 배포 과정</strong></h3>
<p>위 파이프라인에서 사용된 <code>docker compose</code> 명령어를 보면, <code>docker-compose.yml</code> 파일을 통해 서비스를 배포하고 있습니다. 하지만 Jenkins가 기본적으로 <code>docker-compose</code> 명령어를 사용할 수 없기 때문에, 몇 가지 추가 설정이 필요합니다.</p>
<h2><strong>docker-compose 설정</strong></h2>
<p>우리는 Jenkins가 실행되는 컨테이너에서 <code>docker-compose</code>를 사용할 수 있도록 설정해야 합니다. 이를 위해 <code>docker-compose.yml</code> 파일을 다음과 같이 작성합니다.</p>
<pre><code class="language-docker-compose.yml">version: '3.8'
services:
  jenkins:
    build: .
    container_name: jenkins
    environment:
      - TZ=Asia/Seoul
    user: root
    privileged: true
    ports:
      - 8080:8080
      - 50000:50000
    volumes:
      - ./jenkins/config:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
</code></pre>
<p>위 설정에서 중요한 부분은 **<code>/var/run/docker.sock</code>**을 Jenkins 컨테이너에 마운트하여, Jenkins가 Docker를 사용할 수 있게 하는 것입니다.</p>
<h2><strong>Dockerfile 설정</strong></h2>
<p>추가로 <code>Dockerfile</code>을 작성하여 Jenkins 환경에 Docker를 설치해야 합니다. 아래는 해당 파일의 예시입니다.</p>
<pre><code class="language-Dockerfile">FROM jenkins/jenkins:lts-jdk17
USER root

RUN curl -fsSL get.docker.com -o get-docker.sh
RUN sh get-docker.sh

RUN groupadd -f docker
RUN usermod -aG docker jenkins
</code></pre>
<p>이 파일은 Jenkins 컨테이너에 Docker를 설치하고, <code>jenkins</code> 사용자가 Docker 그룹에 추가되도록 설정합니다.</p>
<h2><strong>Jenkins 재시작</strong></h2>
<p>이제 위 파일들을 작성한 후, 아래 명령어로 Jenkins 서버를 재시작합니다.</p>
<pre><code class="language-bash">docker compose down
docker compose up -d
</code></pre>
<p>위 명령어는 Docker Compose를 사용하여 Jenkins 서버를 재시작하는 명령입니다. 서버가 재시작되면 Jenkins에서 Docker 명령어를 사용할 수 있습니다.</p>
<h2><strong>파이프라인 실행</strong></h2>
<p>모든 설정이 완료되었으면, Jenkins 대시보드에서 생성한 파이프라인을 실행할 준비가 되었습니다. <strong>빌드 버튼</strong>을 클릭하여 파이프라인을 실행합니다.</p>
<p>파이프라인이 정상적으로 실행되면, Jenkins 로그에 배포가 성공했다고 나타납니다.</p>
<p><strong>로그 예시</strong></p>
<pre><code>Build and Deploy stage succeeded.
Health Check passed.
</code></pre>
<p>그러나 저의 경우 배포 후, 서비스에 접근할 수 없다는 문제가 발생했는데
이는 다음 포스트에서 다루도록 하겠습니다.</p>
<p><strong>2025-01-14 수정</strong>
docker in docker 문제로, Jenkins 를 docker 으로 실행하지 않고 직접 설치하면 해결됩니다.</p>
2:["$","div",null,{"className":"flex flex-col lg:flex-row gap-8","children":[["$","aside",null,{"className":"lg:w-64 xl:w-72 order-1 lg:order-none","children":["$","div",null,{"className":"sidebar sticky","children":["$","nav",null,{"className":"space-y-4","children":[["$","div","Backend",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Backend"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Django",{"children":["$","a",null,{"href":"/backend/django/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Django"," (",6,")"]}]}],["$","li","Logging",{"children":["$","a",null,{"href":"/backend/logging/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Logging"," (",1,")"]}]}]]}]]}],["$","div","Python",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"Python"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","PEP",{"children":["$","a",null,{"href":"/python/pep/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["PEP"," (",650,")"]}]}]]}]]}],["$","div","AI/ML",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"AI/ML"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","LLM",{"children":["$","a",null,{"href":"/ai/llm/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["LLM"," (",1,")"]}]}],["$","li","Review",{"children":["$","a",null,{"href":"/ai/review/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Review"," (",1098,")"]}]}]]}]]}],["$","div","DevOps",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"DevOps"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Nginx",{"children":["$","a",null,{"href":"/devops/nginx/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Nginx"," (",1,")"]}]}],["$","li","Docker",{"children":["$","a",null,{"href":"/devops/docker/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Docker"," (",1,")"]}]}],["$","li","SafeLine",{"children":["$","a",null,{"href":"/devops/safeline/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["SafeLine"," (",1,")"]}]}],["$","li","Jenkins",{"children":["$","a",null,{"href":"/devops/jenkins/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Jenkins"," (",3,")"]}]}],["$","li","GitHub Actions",{"children":["$","a",null,{"href":"/devops/github-actions/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["GitHub Actions"," (",1,")"]}]}],["$","li","AWS",{"children":["$","a",null,{"href":"/devops/aws/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["AWS"," (",1,")"]}]}]]}]]}],["$","div","etc",{"children":[["$","h4",null,{"className":"font-medium text-gray-900 mb-2","children":"etc"}],["$","ul",null,{"className":"space-y-1 ml-4","children":[["$","li","Me",{"children":["$","a",null,{"href":"/etc/me/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Me"," (",3,")"]}]}],["$","li","Chrome Extension",{"children":["$","a",null,{"href":"/etc/chrome-extension/","className":"text-sm text-gray-600 hover:text-primary-600 block py-1","children":["Chrome Extension"," (",1,")"]}]}]]}]]}]]}]}]}],["$","main",null,{"className":"flex-1","children":["$","article",null,{"className":"page","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"page__title","children":"[Jenkins] Jenkins 파이프라인 생성"}],["$","div",null,{"className":"page__meta","children":[["$","time",null,{"dateTime":"2025-01-08 03:03:11+0900","children":"2025년 1월 8일"}],["$","span",null,{"className":"ml-4","children":["수정: ","2025년 1월 14일"]}]]}]]}],["$","div",null,{"className":"page__content","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}],["$","footer",null,{"className":"page__meta mt-8","children":["$","div",null,{"className":"page__taxonomy","children":[["$","h4",null,{"className":"text-sm font-medium text-gray-900 mb-2","children":"태그"}],[["$","span","Jenkins",{"className":"page__taxonomy-item","children":["#",["Jenkins"]]}]]]}]}]]}]}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"secrett2633's blog"}],["$","meta","3",{"name":"description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","4",{"name":"author","content":"secrett2633"}],["$","meta","5",{"name":"keywords","content":"Django, Python, DevOps, AI, ML, 블로그, 기술"}],["$","meta","6",{"name":"creator","content":"secrett2633"}],["$","meta","7",{"name":"publisher","content":"secrett2633"}],["$","meta","8",{"name":"robots","content":"index, follow"}],["$","meta","9",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","10",{"rel":"canonical","href":"https://secrett2633.github.io/"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"secrett2633's blog"}],["$","meta","13",{"property":"og:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","meta","14",{"property":"og:url","content":"https://secrett2633.github.io/"}],["$","meta","15",{"property":"og:site_name","content":"secrett2633's blog"}],["$","meta","16",{"property":"og:locale","content":"ko_KR"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"secrett2633's blog"}],["$","meta","20",{"name":"twitter:description","content":"기술 블로그 - Django, Python, DevOps, AI/ML 관련 포스트"}],["$","link","21",{"rel":"icon","href":"/icon.ico?6d9f34d4948640b8","type":"image/x-icon","sizes":"16x16"}]]
1:null
